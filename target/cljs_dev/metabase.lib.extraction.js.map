{"version":3,"sources":["metabase/lib/extraction.cljc"],"mappings":"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","names":["metabase.lib.extraction/column-extract-temporal-units","column","time-units","date-units","cljs.core/vec","iter__5480__auto__","s__78892","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__78894","cljs.core/chunk-buffer","i__78893","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__78891","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","unit","cljs.core.concat","metabase.lib.types.isa/date-without-time?","metabase.lib.types.isa/time?","metabase.lib.temporal_bucket.describe_temporal_unit","metabase.lib.extraction/regex-available?","metadata-providerable","metabase.lib.metadata/database","cljs.core/contains?","metabase.lib.extraction/domain-extraction","metabase.shared.util.i18n/js-i18n","metabase.lib.extraction/subdomain-extraction","metabase.lib.extraction/host-extraction","metabase.lib.extraction/email-extractions","metabase.lib.extraction/url-extractions","metabase.lib.extraction/column-extractions","query","metabase.lib.types.isa/temporal?","metabase.lib.types.isa/email?","metabase.lib.types.isa/URL?","metabase.lib.metadata.calculation/display-info-method","_query","_stage-number","extraction","cljs.core.dissoc","p__78902","map__78904","cljs.core/--destructure-map","cljs.core.get","metabase.lib.extraction/extraction-expression","tag","_expression","G__78905","cljs.core/Keyword","js/Error","metabase.lib.expression/get-hour","metabase.lib.expression/get-day","metabase.lib.expression/day-name","metabase.lib.expression/get-day-of-week","metabase.lib.expression/month-name","metabase.lib.expression/get-month","metabase.lib.expression/quarter-name","metabase.lib.expression/get-quarter","metabase.lib.expression/get-year","metabase.lib.expression/domain","metabase.lib.expression/subdomain","metabase.lib.expression/host","p__78908","map__78909","metabase.lib.extraction/extract","stage-number","display-name","unique-name-fn","metabase.lib.util/query-stage","metabase.lib.metadata.calculation.returned_columns","cljs.core.map","metabase.lib.util.unique_name_generator","metabase.lib.metadata/->metadata-provider","metabase.lib.expression.expression","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.lib.extraction\n  (:require\n   [metabase.lib.expression :as lib.expression]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.expression :as lib.schema.expression]\n   [metabase.lib.schema.extraction :as lib.schema.extraction]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.lib.temporal-bucket :as lib.temporal-bucket]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.lib.util :as lib.util]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util.malli :as mu]))\n\n(defn- column-extract-temporal-units [column]\n  (let [time-units [:hour-of-day]\n        date-units [:day-of-month :day-of-week :month-of-year :quarter-of-year :year]]\n    (vec (for [unit (concat (when-not (lib.types.isa/date-without-time? column)\n                              time-units)\n                            (when-not (lib.types.isa/time? column)\n                              date-units))]\n           {:lib/type     ::extraction\n            :tag          unit\n            :column       column\n            :display-name (lib.temporal-bucket/describe-temporal-unit unit)}))))\n\n(defn- regex-available? [metadata-providerable]\n  (-> (lib.metadata/database metadata-providerable)\n      :features\n      (contains? :regex)))\n\n(defn- domain-extraction [column]\n  {:lib/type     ::extraction\n   :tag          :domain\n   :column       column\n   :display-name (i18n/tru \"Domain\")})\n\n(defn- subdomain-extraction [column]\n  {:lib/type     ::extraction\n   :tag          :subdomain\n   :column       column\n   :display-name (i18n/tru \"Subdomain\")})\n\n(defn- host-extraction [column]\n  {:lib/type     ::extraction\n   :tag          :host\n   :column       column\n   :display-name (i18n/tru \"Host\")})\n\n(defn- email-extractions [column]\n  [(domain-extraction    column)\n   (host-extraction      column)])\n\n(defn- url-extractions [column]\n  [(domain-extraction    column)\n   (subdomain-extraction column)\n   (host-extraction      column)])\n\n(mu/defn column-extractions :- [:maybe [:sequential ::lib.schema.extraction/extraction]]\n  \"Column extractions are a set of transformations possible on a given `column`, based on its type.\n\n  For example, we might extract the day of the week from a temporal column, or the domain name from an email or URL.\n\n  Returns a list of possible column extractions for the given column, or `nil` if there are none.\"\n  [query  :- ::lib.schema/query\n   column :- ::lib.schema.metadata/column]\n  (cond\n    (lib.types.isa/temporal? column) (column-extract-temporal-units column)\n\n    ;; The URL and email extractions are powered by regular expressions, and not every database supports those.\n    ;; If the target database doesn't support :regex feature, return nil.\n    (not (regex-available? query))   nil\n    (lib.types.isa/email? column)    (email-extractions column)\n    (lib.types.isa/URL? column)      (url-extractions column)))\n\n(defmethod lib.metadata.calculation/display-info-method ::extraction\n  [_query _stage-number extraction]\n  (dissoc extraction :lib/type :column))\n\n(mu/defn extraction-expression :- ::lib.schema.expression/expression\n  \"Given an `extraction` as returned by [[column-extractions]], return the expression clause that should be added to a\n  query.\"\n  [{:keys [column tag] :as _expression} :- ::lib.schema.extraction/extraction\n   ]\n  (case tag\n    ;; Temporal extractions\n    :hour-of-day     (lib.expression/get-hour column)\n    :day-of-month    (lib.expression/get-day column)\n    :day-of-week     (lib.expression/day-name (lib.expression/get-day-of-week column))\n    :month-of-year   (lib.expression/month-name (lib.expression/get-month column))\n    :quarter-of-year (lib.expression/quarter-name (lib.expression/get-quarter column))\n    :year            (lib.expression/get-year column)\n    ;; URLs and emails\n    :domain          (lib.expression/domain column)\n    :subdomain       (lib.expression/subdomain column)\n    :host            (lib.expression/host column)))\n\n(mu/defn extract :- ::lib.schema/query\n  \"Given a query, stage and extraction as returned by [[column-extractions]], apply that extraction to the query.\"\n  [query                                 :- ::lib.schema/query\n   stage-number                          :- :int\n   {:keys [display-name] :as extraction} :- ::lib.schema.extraction/extraction]\n  ;; Currently this is very simple: use the `:tag` as an expression function and the column as the only argument.\n  (let [unique-name-fn (->> (lib.util/query-stage query stage-number)\n                            (lib.metadata.calculation/returned-columns query stage-number)\n                            (map :name)\n                            (lib.util/unique-name-generator (lib.metadata/->metadata-provider query)))]\n    (lib.expression/expression\n     query\n     stage-number\n     (unique-name-fn display-name)\n     (extraction-expression extraction))))\n"]}