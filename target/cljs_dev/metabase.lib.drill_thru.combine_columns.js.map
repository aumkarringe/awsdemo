{"version":3,"sources":["metabase/lib/drill_thru/combine_columns.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;gEAAA,2FAAAA,3JAASI,wIAINC,MACAC;AALH,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;aAAA,AAAAE,4CAAAF,eAAA,pEAMWM;YANX,AAAAJ,4CAAAF,eAAA,nEAMkBO;AANlB,AAOE,oBAAM,iBAAAC,oBAAKF;AAAL,AAAA,oBAAAE;AAAA,8BAAA,rBACK,UAAA,TAAMD,sBACN,AAACE,iDAAkCL,MAAMC,mBACzC,AAACK,qCAAsBJ;;AAH5BE;;;AAAN,AAAA,kDAAA,0DAAA,6GAAA,qDAAA,8FAAA,yDAMaF;;AANb;;;AAQF,AAAAK,6FAAA,8FAAA;mCACGC,OAAOC,cAAcC,OAASC;AADjC,AAEE,MAAO,gDAAA,0EAAA,1HAACC;;yBADPJ,OAAOC,cAAcC;IAASC;;;;EAAAA;;oCAA9BH,OAAOC,cAAcC,OAASC;;;IAA9BH;;IAAOC;;IAAcC;IAASC;0BAA9BH,OAAOC,cAAcC,OAASC","names":["p__79031","map__79032","cljs.core/--destructure-map","cljs.core.get","metabase.lib.drill-thru.combine-columns/combine-columns-drill","query","stage-number","column","value","and__5000__auto__","metabase.lib.drill-thru.common/mbql-stage?","metabase.lib.types.isa/string?","metabase.lib.drill-thru.common/drill-thru-method","_query","_stage-number","_drill","_args","cljs.core.ex_info"],"sourcesContent":["(ns metabase.lib.drill-thru.combine-columns\n  \"Adds an expression clause that concatenates several string columns.\n\n  Entry points:\n\n  - Column header\n\n  Query transformation:\n\n  - Add an expression that `concat`s the clicked column with 1 or more `[separator column]` pairs.\"\n  (:require\n   [metabase.lib.drill-thru.common :as lib.drill-thru.common]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.drill-thru :as lib.schema.drill-thru]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.util.malli :as mu]))\n\n(mu/defn combine-columns-drill :- [:maybe ::lib.schema.drill-thru/drill-thru.combine-columns]\n  \"Column clicks on string columns.\n\n  Might add a stage, like `:drill-thru/column-filter` does, if the current stage has aggregations.\"\n  [query                 :- ::lib.schema/query\n   stage-number          :- :int\n   {:keys [column value]} :- ::lib.schema.drill-thru/context]\n  (when (and column\n             (nil? value)\n             (lib.drill-thru.common/mbql-stage? query stage-number)\n             (lib.types.isa/string? column))\n    {:lib/type :metabase.lib.drill-thru/drill-thru\n     :type     :drill-thru/combine-columns\n     :column   column}))\n\n(defmethod lib.drill-thru.common/drill-thru-method :drill-thru/combine-columns\n  [_query _stage-number _drill & _args]\n  (throw (ex-info \"Do not call drill-thru for combine-columns; add the expression directly\" {})))\n"]}