{"version":3,"sources":["metabase/lib/metadata/calculation.cljc"],"mappings":"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","names":["metabase.lib.metadata.calculation/DisplayNameStyle","metabase.lib.metadata.calculation/*display-name-style*","js/metabase","js/metabase.lib","js/metabase.lib.metadata","js/metabase.lib.metadata.calculation","js/metabase.lib.metadata.calculation.display-name-method","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","cljs.core.get","fexpr__76860","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.metadata.calculation/display-name-method","_query","_stage-number","x","_display-name-style","metabase.lib.dispatch/dispatch-value","metabase.lib.hierarchy/hierarchy","js/metabase.lib.metadata.calculation.column-name-method","fexpr__76865","metabase.lib.metadata.calculation/column-name-method","metabase.lib.metadata.calculation/display-name","query","stage-number","style","or__5002__auto__","cljs.core.some_fn","metabase.lib.options/options","e76878","js/Error","e","cljs.core.ex_info","metabase.shared.util.i18n.js_i18n","cljs.core.pr_str","cljs.core/ex-message","metabase.lib.metadata.calculation/column-name","e76879","_stage","level__73199__auto__","metabase.util.log/glogi-level","logger__73200__auto__","metabase.util.log/is-loggable?","x__73201__auto__","lambdaisland.glogi.log","metabase.util.log.format_msg","cljs.core/vector?","cljs.core/Keyword","cljs.core/first","cljs.core/name","metabase.lib.metadata.calculation/slugify","s","clojure.string/replace","metabase.util.slugify","metabase.lib.metadata.calculation.display_name","js/metabase.lib.metadata.calculation.describe-top-level-key-method","fexpr__76892","metabase.lib.metadata.calculation/describe-top-level-key-method","top-level-key","metabase.lib.metadata.calculation/TopLevelKey","metabase.lib.metadata.calculation/describe-top-level-key","cljs.core.keyword","js/metabase.lib.metadata.calculation.type-of-method","fexpr__76901","metabase.lib.metadata.calculation/type-of-method","expr","metabase.lib.metadata.calculation/type-of","map__76902","cljs.core/--destructure-map","temporal-unit","options","and__5000__auto__","cljs.core/contains?","metabase.lib.schema.temporal-bucketing/datetime-extraction-units","calculated-type","cljs.core.isa_QMARK_","metabase.lib.schema.expression/type-of","p__76915","vec__76916","cljs.core.nth","_tag","_opts","metabase.lib.metadata.calculation.type_of","p__76919","vec__76920","clause","js/metabase.lib.metadata.calculation.metadata-method","fexpr__76923","metabase.lib.metadata.calculation/metadata-method","e76924","metabase.lib.metadata.calculation.column_name","p1__76925#","metabase.lib.metadata.calculation/MetadataMap","cljs.core._EQ_","cljs.core/namespace","metabase.lib.metadata.calculation/metadata","metabase.lib.metadata.calculation/describe-query","metabase.lib.metadata.calculation/suggested-name","metabase.lib.util/query-stage","e76926","js/metabase.lib.metadata.calculation.display-info-method","fexpr__76933","metabase.lib.metadata.calculation/display-info-method","metabase.util.malli.registry/register!","metabase.lib.metadata.calculation/display-info","metabase.lib.cache.side_channel_cache","e76943","metabase.lib.metadata.calculation/default-display-info","x-metadata","metabase.lib.metadata.calculation.metadata","cljs.core.merge","cljs.core/select-keys","temp__5804__auto__","custom","metabase.lib.util/custom-name","long-display-name","effective-type","table-id","inner-metadata","cljs.core/integer?","metabase.lib.metadata/table","metabase.lib.metadata/card","metabase.lib.util/legacy-string-table-id->card-id","metabase.lib.metadata.calculation.display_info","source","temp__5808__auto__","selected","metabase.lib.schema.temporal-bucketing/datetime-truncation-units","table","metabase.lib.util/source-table-id","metabase.lib.metadata.calculation/ColumnMetadataWithSource","metabase.lib.metadata.calculation/ColumnsWithUniqueAliases","p__76966","map__76967","value","_","cljs.core.mapv","columns","cljs.core/empty?","cljs.core.apply","cljs.core/distinct?","cljs.core.map","cljs.core.comp","metabase.util/lower-case-en","metabase.util.malli.registry/-with-doc","metabase.lib.metadata.calculation/ReturnedColumnsOptions","metabase.lib.metadata.calculation/default-returned-columns-options","metadata-providerable","metabase.lib.util.unique_name_generator","metabase.lib.metadata/->metadata-provider","js/metabase.lib.metadata.calculation.returned-columns-method","fexpr__76968","metabase.lib.metadata.calculation/returned-columns-method","_options","_x","metabase.lib.metadata.calculation/returned-columns","G__76969","G__76970","metabase.lib.metadata.calculation/VisibleColumnsOptions","metabase.lib.metadata.calculation/default-visible-columns-options","js/metabase.lib.metadata.calculation.visible-columns-method","fexpr__76971","metabase.lib.metadata.calculation/visible-columns-method","metabase.lib.metadata.calculation/visible-columns","G__76972","G__76973","cljs.core/map?","G__76975","fexpr__76974","metabase.lib.metadata.calculation/primary-keys","temp__5802__auto__","cljs.core.filter","metabase.lib.types.isa/primary-key?","metabase.lib.metadata/fields","metabase.lib.metadata.calculation/implicitly-joinable-columns","column-metadatas","unique-name-fn","existing-table-ids","cljs.core.into","cljs.core/number?","p__76977","map__76978","source-field-id","fk-target-field-id","metabase.lib.metadata/field","cljs.core.assoc","p1__76976#","cljs.core.remove","cljs.core.mapcat","p__76979","map__76980","source-join-alias","table-metadata","iter__5480__auto__","s__76982","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__76984","cljs.core/chunk-buffer","i__76983","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__76981","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","field","G__76985","G__76986","metabase.lib.join.util/desired-alias","metabase.lib.metadata.calculation/default-columns-for-stage","no-fields","metabase.lib.util.update_query_stage","cljs.core/dissoc","metabase.lib.metadata.calculation.returned_columns","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.lib.metadata.calculation\n  (:require\n   #?(:clj [metabase.config :as config])\n   [clojure.string :as str]\n   [metabase.lib.cache :as lib.cache]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.join.util :as lib.join.util]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.expression :as lib.schema.expresssion]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.lib.schema.temporal-bucketing :as lib.schema.temporal-bucketing]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.lib.util :as lib.util]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util :as u]\n   [metabase.util.log :as log]\n   [metabase.util.malli :as mu]\n   [metabase.util.malli.registry :as mr]))\n\n(def DisplayNameStyle\n  \"Schema for valid values of `display-name-style` as passed to [[display-name-method]].\n\n  * `:default`: normal style used for 99% of FE stuff. For example a column that comes from a joined table might return\n    \\\"Price\\\".\n\n  * `:long`: Slightly longer style that includes a little bit of extra context, used for stuff like query suggested\n    name generation. For a joined column, this might look like \\\"Venues \u2192 Price\\\".\"\n  [:enum :default :long])\n\n(def ^:dynamic *display-name-style*\n  \"Display name style to use when not explicitly passed in to [[display-name]].\"\n  :default)\n\n(defmulti display-name-method\n  \"Calculate a nice human-friendly display name for something.\"\n  {:arglists '([query stage-number x display-name-style])}\n  (fn [_query _stage-number x _display-name-style]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmulti column-name-method\n  \"Calculate a database-friendly name to use for something.\"\n  {:arglists '([query stage-number x])}\n  (fn [_query _stage-number x]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(mu/defn ^:export display-name :- :string\n  \"Calculate a nice human-friendly display name for something. See [[DisplayNameStyle]] for a the difference between\n  different `style`s.\"\n  ([query]\n   (display-name query query))\n\n  ([query x]\n   (display-name query -1 x))\n\n  ([query stage-number x]\n   (display-name query stage-number x *display-name-style*))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    x\n    style        :- DisplayNameStyle]\n   (or\n    ;; if this is an MBQL clause with `:display-name` in the options map, then use that rather than calculating a name.\n    ((some-fn :display-name :lib/expression-name) (lib.options/options x))\n    (try\n      (display-name-method query stage-number x style)\n      (catch #?(:clj Throwable :cljs js/Error) e\n        (throw (ex-info (i18n/tru \"Error calculating display name for {0}: {1}\" (pr-str x) (ex-message e))\n                        {:query query, :x x}\n                        e)))))))\n\n(mu/defn column-name :- ::lib.schema.common/non-blank-string\n  \"Calculate a database-friendly name to use for an expression.\"\n  ([query x]\n   (column-name query -1 x))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    x]\n   (or\n    ;; if this is an MBQL clause with `:name` in the options map, then use that rather than calculating a name.\n    (:name (lib.options/options x))\n    (try\n      (column-name-method query stage-number x)\n      (catch #?(:clj Throwable :cljs js/Error) e\n        (throw (ex-info (i18n/tru \"Error calculating column name for {0}: {1}\" (pr-str x) (ex-message e))\n                        {:x            x\n                         :query        query\n                         :stage-number stage-number}\n                        e)))))))\n\n(defmethod display-name-method :default\n  [_query _stage-number x _stage]\n  ;; This was suspected as hurting performance, going to skip it in prod for now\n  (when #?(:clj          (not config/is-prod?)\n           :cljs         true ;; the linter complains when :cljs is not here(?)\n           :cljs-dev     true\n           :cljs-release false)\n    (log/warnf \"Don't know how to calculate display name for %s. Add an impl for %s for %s\"\n               (pr-str x)\n               `display-name-method\n               (lib.dispatch/dispatch-value x)))\n  (if (and (vector? x)\n           (keyword? (first x)))\n    ;; MBQL clause: just use the name of the clause.\n    (name (first x))\n    ;; anything else: use `pr-str` representation.\n    (pr-str x)))\n\n;;; TODO -- this logic is wack, we should probably be snake casing stuff and display names like\n;;;\n;;; \"Sum of Products \u2192 Price\"\n;;;\n;;; result in totally wacko column names like \"sum_products_%E2%86%92_price\", let's try to generate things that are\n;;; actually going to be allowed here.\n(defn- slugify [s]\n  (-> s\n      (str/replace #\"[\\(\\)]\" \"\")\n      (u/slugify {:unicode? true})))\n\n;;; default impl just takes the display name and slugifies it.\n(defmethod column-name-method :default\n  [query stage-number x]\n  (slugify (display-name query stage-number x)))\n\n(defmulti describe-top-level-key-method\n  \"Implementation for [[describe-top-level-key]]. Describe part of a stage of a query, e.g. the `:filters` part or the\n  `:aggregation` part. Return `nil` if there is nothing to describe.\n\n  Implementations that call [[display-name]] should specify the `:long` display name style.\"\n  {:arglists '([query stage-number top-level-key])}\n  (fn [_query _stage-number top-level-key]\n    top-level-key)\n  :hierarchy lib.hierarchy/hierarchy)\n\n(def ^:private TopLevelKey\n  \"In the interest of making this easy to use in JS-land we'll accept either strings or keywords.\"\n  [:enum :aggregation :breakout :filters :limit :order-by :source-table :source-card :joins])\n\n(mu/defn describe-top-level-key :- [:maybe ::lib.schema.common/non-blank-string]\n  \"'top-level' here means the top level of an individual stage. Generate a human-friendly string describing a specific\n  part of an MBQL stage, or `nil` if that part doesn't exist.\"\n  ([query top-level-key]\n   (describe-top-level-key query -1 top-level-key))\n  ([query         :- ::lib.schema/query\n    stage-number  :- :int\n    top-level-key :- TopLevelKey]\n   (describe-top-level-key-method query stage-number (keyword top-level-key))))\n\n(defmulti type-of-method\n  \"Calculate the effective type of something. This differs from [[metabase.lib.schema.expression/type-of]] in that it is\n  called with a query/MetadataProvider and a stage number, allowing us to fully resolve information and return\n  complete, unambigous type information. Default implementation calls [[metabase.lib.schema.expression/type-of]].\"\n  {:arglists '([query stage-number expr])}\n  (fn [_query _stage-number expr]\n    (lib.dispatch/dispatch-value expr))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(mu/defn type-of :- ::lib.schema.common/base-type\n  \"Get the effective type of an MBQL expression.\"\n  ([query x]\n   (type-of query -1 x))\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    x]\n   ;; this logic happens here so we don't need to code up every single individual method to handle these special\n   ;; cases.\n   (let [{:keys [temporal-unit], :as options} (lib.options/options x)]\n     (or\n      ;; If the options map includes `:effective-type` we can assume you know what you are doing and that it is\n      ;; correct and just return it directly.\n      (:effective-type options)\n      ;; If `:temporal-unit` is specified (currently only supported by `:field` clauses), we should return\n      ;; `:type/Integer` if its an extraction operation, e.g. `:month-of-year` always returns an integer; otherwise we\n      ;; can return `:base-type`.\n      (when (and temporal-unit\n                 (contains? lib.schema.temporal-bucketing/datetime-extraction-units temporal-unit))\n        :type/Integer)\n      ;; otherwise if `:base-type` is specified, we can return that.\n      (:base-type options)\n      ;; if none of the special cases are true, fall back to [[type-of-method]].\n      (let [calculated-type (type-of-method query stage-number x)]\n        ;; if calculated type is not a true type but a placeholder like `:metabase.lib.schema.expression/type.unknown`\n        ;; or a union of types then fall back to `:type/*`, an actual type.\n        (if (isa? calculated-type :type/*)\n          calculated-type\n          :type/*))))))\n\n(defmethod type-of-method :default\n  [_query _stage-number expr]\n  (lib.schema.expresssion/type-of expr))\n\n;;; for MBQL clauses whose type is the same as the type of the first arg. Also used\n;;; for [[metabase.lib.schema.expression/type-of]].\n(defmethod type-of-method :lib.type-of/type-is-type-of-first-arg\n  [query stage-number [_tag _opts expr]]\n  (type-of query stage-number expr))\n\n(defmethod type-of-method :lib.type-of/type-is-temporal-type-of-first-arg\n  [query stage-number [_tag _opts expr :as clause]]\n  (if (string? expr)\n    ;; If a string, get the type filtered by this expression (eg. `:datetime-add`).\n    (lib.schema.expresssion/type-of clause)\n    ;; Otherwise, just get the type of this first arg.\n    (type-of query stage-number expr)))\n\n(defmulti metadata-method\n  \"Impl for [[metadata]]. Implementations that call [[display-name]] should use the `:default` display name style.\"\n  {:arglists '([query stage-number x])}\n  (fn [_query _stage-number x]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod metadata-method :default\n  [query stage-number x]\n  (try\n    {:lib/type     :metadata/column\n     ;; TODO -- effective-type\n     :base-type    (type-of query stage-number x)\n     :name         (column-name query stage-number x)\n     :display-name (display-name query stage-number x)}\n    ;; if you see this error it's usually because you're calling [[metadata]] on something that you shouldn't be, for\n    ;; example a query\n    (catch #?(:clj Throwable :cljs js/Error) e\n      (throw (ex-info (i18n/tru \"Error calculating metadata for {0}: {1}\"\n                                (pr-str (lib.dispatch/dispatch-value x))\n                                (ex-message e))\n                      {:query query, :stage-number stage-number, :x x}\n                      e)))))\n\n(def ^:private MetadataMap\n  [:map [:lib/type [:and\n                    :keyword\n                    [:fn\n                     {:error/message \":lib/type should be a :metadata/ keyword\"}\n                     #(= (namespace %) \"metadata\")]]]])\n\n(mu/defn metadata :- MetadataMap\n  \"Calculate an appropriate `:metadata/*` object for something. What this looks like depends on what we're calculating\n  metadata for. If it's a reference or expression of some sort, this should return a single `:metadata/column`\n  map (i.e., something satisfying the `::lib.schema.metadata/column` schema.\"\n  ([query]\n   (metadata query -1 query))\n  ([query x]\n   (metadata query -1 x))\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    x]\n   (metadata-method query stage-number x)))\n\n(mu/defn describe-query :- ::lib.schema.common/non-blank-string\n  \"Convenience for calling [[display-name]] on a query to describe the results of its final stage.\"\n  [query]\n  (display-name query query))\n\n(mu/defn suggested-name :- [:maybe ::lib.schema.common/non-blank-string]\n  \"Name you might want to use for a query when saving an previously-unsaved query. This is the same\n  as [[describe-query]] except for native queries, where we don't describe anything.\"\n  [query]\n  (when-not (= (:lib/type (lib.util/query-stage query -1)) :mbql.stage/native)\n    (try\n      (describe-query query)\n      (catch #?(:clj Throwable :cljs js/Error) e\n        (log/errorf e \"Error calculating display name for query: %s\" (ex-message e))\n        nil))))\n\n(defmulti display-info-method\n  \"Implementation for [[display-info]]. Implementations that call [[display-name]] should use the `:default` display\n  name style.\n\n  Do not call this recursively from its own `defmethod`s, aside from calling the `:default`. Prefer calling\n  [[display-info]] directly, so that its caching can encourage reuse. (Eg. column-groups recursively call `display-info`\n  on their columns.)\"\n  {:arglists '([query stage-number x])}\n  (fn [_query _stage-number x]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(mr/def ::display-info\n  [:map\n   [:display-name {:optional true} :string]\n   [:long-display-name {:optional true} :string]\n   ;; for things with user specified names\n   [:named? {:optional true} :boolean]\n   ;; for things that have a Table, e.g. a Field\n   [:table {:optional true} [:maybe [:ref ::display-info]]]\n   ;; these are derived from the `:lib/source`/`:metabase.lib.schema.metadata/column-source`, but instead of using\n   ;; that value directly we're returning a different property so the FE doesn't break if we change those keys in the\n   ;; future, e.g. if we consolidate or split some of those keys. This is all the FE really needs to know.\n   ;;\n   ;; if this is a Column, does it come from a previous stage?\n   [:is-from-previous-stage {:optional true} [:maybe :boolean]]\n   ;; if this is a Column, does it come from a join in this stage?\n   [:is-from-join {:optional true} [:maybe :boolean]]\n   ;; if this is a Column, is it 'calculated', i.e. does it come from an expression in this stage?\n   [:is-calculated {:optional true} [:maybe :boolean]]\n   ;; if this is a Column, is it an implicitly joinable one? I.e. is it from a different table that we have not\n   ;; already joined, but could implicitly join against?\n   [:is-implicitly-joinable {:optional true} [:maybe :boolean]]\n   ;; For the `:table` field of a Column, is this the source table, or a joined table?\n   [:is-source-table {:optional true} [:maybe :boolean]]\n   ;; does this column occur in the breakout clause?\n   [:is-breakout-column {:optional true} [:maybe :boolean]]\n   ;; does this column occur in the order-by clause?\n   [:is-order-by-column {:optional true} [:maybe :boolean]]\n   ;; for joins\n   [:name {:optional true} :string]\n   ;; for aggregation operators\n   [:column-name {:optional true} :string]\n   [:description {:optional true} :string]\n   [:short-name {:optional true} :string]\n   [:requires-column {:optional true} :boolean]\n   [:selected {:optional true} :boolean]\n   ;; for binning and bucketing\n   [:default {:optional true} :boolean]\n   ;; for order by\n   [:direction {:optional true} [:enum :asc :desc]]])\n\n(mu/defn display-info :- ::display-info\n  \"Given some sort of Cljs object, return a map with the info you'd need to implement UI for it. This is mostly meant to\n  power the Frontend JavaScript UI; in JS, results will be converted to plain JavaScript objects, so avoid returning\n  things that should remain opaque.\"\n  ([query x]\n   (display-info query -1 x))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    x]\n   (lib.cache/side-channel-cache\n     ;; TODO: Caching by stage here is probably unnecessary - it's already a mistake to have an `x` from a different\n     ;; stage than `stage-number`. But it also doesn't hurt much, since a given `x` will only ever have `display-info`\n     ;; called with one `stage-number` anyway.\n     (keyword \"display-info\" (str \"stage-\" stage-number)) x\n     (fn [x]\n       (try\n         (display-info-method query stage-number x)\n         (catch #?(:clj Throwable :cljs js/Error) e\n           (throw (ex-info (i18n/tru \"Error calculating display info for {0}: {1}\"\n                                     (lib.dispatch/dispatch-value x)\n                                     (ex-message e))\n                           {:query query, :stage-number stage-number, :x x}\n                           e))))))))\n\n(defn default-display-info\n  \"Default implementation of [[display-info-method]], available in case you want to use this in a different\n  implementation and add additional information to it.\"\n  [query stage-number x]\n  (let [x-metadata (metadata query stage-number x)]\n    (merge\n     ;; TODO -- not 100% convinced the FE should actually have access to `:name`, can't it use `:display-name`\n     ;; everywhere? Determine whether or not this is the case.\n     (select-keys x-metadata [:name :display-name :semantic-type])\n     (when-let [custom (lib.util/custom-name x)]\n       {:display-name custom\n        :named? true})\n     (when-let [long-display-name (display-name query stage-number x :long)]\n       {:long-display-name long-display-name})\n     ;; don't return `:base-type`, FE should just use `:effective-type` everywhere and not even need to know\n     ;; `:base-type` exists.\n     (when-let [effective-type ((some-fn :effective-type :base-type) x-metadata)]\n       {:effective-type effective-type})\n     (when-let [table-id (:table-id x-metadata)]\n       ;; TODO: only ColumnMetadatas should possibly have legacy `card__<id>` `:table-id`s... we should\n       ;; probably move this special casing into [[metabase.lib.field]] instead of having it be part of the\n       ;; `:default` method.\n       (when-let [inner-metadata (cond\n                                   (integer? table-id) (lib.metadata/table query table-id)\n                                   (string? table-id)  (lib.metadata/card\n                                                        query (lib.util/legacy-string-table-id->card-id table-id)))]\n         {:table (display-info query stage-number inner-metadata)}))\n     (when-let [source (:lib/source x-metadata)]\n       {:is-from-previous-stage (= source :source/previous-stage)\n        :is-from-join           (= source :source/joins)\n        :is-calculated          (= source :source/expressions)\n        :is-implicitly-joinable (= source :source/implicitly-joinable)\n        :is-aggregation         (= source :source/aggregations)\n        :is-breakout            (= source :source/breakouts)})\n     (when-some [selected (:selected? x-metadata)]\n       {:selected selected})\n     (when-let [temporal-unit ((some-fn :metabase.lib.field/temporal-unit :temporal-unit) x-metadata)]\n       {:is-temporal-extraction\n        (and (contains? lib.schema.temporal-bucketing/datetime-extraction-units temporal-unit)\n             (not (contains? lib.schema.temporal-bucketing/datetime-truncation-units temporal-unit)))})\n     (select-keys x-metadata [:breakout-position :order-by-position :filter-positions]))))\n\n(defmethod display-info-method :default\n  [query stage-number x]\n  (default-display-info query stage-number x))\n\n(defmethod display-info-method :metadata/table\n  [query stage-number table]\n  (merge (default-display-info query stage-number table)\n         {:is-source-table (= (lib.util/source-table-id query) (:id table))\n          :schema (:schema table)}))\n\n(def ColumnMetadataWithSource\n  \"Schema for the column metadata that should be returned by [[metadata]].\"\n  [:merge\n   [:ref ::lib.schema.metadata/column]\n   [:map\n    [:lib/source ::lib.schema.metadata/column-source]]])\n\n(def ColumnsWithUniqueAliases\n  \"Schema for column metadata that should be returned by [[visible-columns]]. This is mostly used\n  to power metadata calculation for stages (see [[metabase.lib.stage]].\"\n  [:and\n   [:sequential\n    [:merge\n     ColumnMetadataWithSource\n     [:map\n      [:lib/source-column-alias  ::lib.schema.common/non-blank-string]\n      [:lib/desired-column-alias [:string {:min 1, :max 60}]]]]]\n   [:fn\n    ;; should be dev-facing only, so don't need to i18n\n    {:error/message \"Column :lib/desired-column-alias values must be distinct, regardless of case, for each stage!\"\n     :error/fn      (fn [{:keys [value]} _]\n                      (str \"Column :lib/desired-column-alias values must be distinct, got: \"\n                           (pr-str (mapv :lib/desired-column-alias value))))}\n    (fn [columns]\n      (or\n       (empty? columns)\n       (apply distinct? (map (comp u/lower-case-en :lib/desired-column-alias) columns))))]])\n\n(mr/def ::unique-name-fn\n  \"Stateful function with the signature\n\n    (f str) => unique-str\n\n  i.e. repeated calls with the same string should return different unique strings.\"\n  [:=>\n   [:cat :string] ; this is allowed to be a blank string.\n   ::lib.schema.common/non-blank-string])\n\n(def ReturnedColumnsOptions\n  \"Schema for options passed to [[returned-columns]] and [[returned-columns-method]].\"\n  [:map\n   ;; has the signature (f str) => str\n   [:unique-name-fn {:optional true} ::unique-name-fn]])\n\n(mu/defn ^:private default-returned-columns-options :- ReturnedColumnsOptions\n  [metadata-providerable]\n  {:unique-name-fn (lib.util/unique-name-generator (lib.metadata/->metadata-provider metadata-providerable))})\n\n(defmulti returned-columns-method\n  \"Impl for [[returned-columns]].\"\n  {:arglists '([query stage-number x options])}\n  (fn [_query _stage-number x _options]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod returned-columns-method :dispatch-type/nil\n  [_query _stage-number _x _options]\n  [])\n\n;;; if you pass in an integer assume it's a stage number; use the method for the query stage itself.\n(defmethod returned-columns-method :dispatch-type/integer\n  [query _stage-number stage-number options]\n  (returned-columns-method query stage-number (lib.util/query-stage query stage-number) options))\n\n(mu/defn returned-columns :- [:maybe ColumnsWithUniqueAliases]\n  \"Return a sequence of metadata maps for all the columns expected to be 'returned' at a query, stage of the query, or\n  join, and include the `:lib/source` of where they came from. This should only include columns that will be present\n  in the results; DOES NOT include 'expected' columns that are not 'exported' to subsequent stages.\n\n  See [[ReturnedColumnsOptions]] for allowed options and [[default-returned-columns-options]] for default values.\"\n  ([query]\n   (returned-columns query (lib.util/query-stage query -1)))\n\n  ([query x]\n   (returned-columns query -1 x))\n\n  ([query stage-number x]\n   (returned-columns query stage-number x nil))\n\n  ([query          :- ::lib.schema/query\n    stage-number   :- :int\n    x\n    options        :- [:maybe ReturnedColumnsOptions]]\n   (let [options (merge (default-returned-columns-options query) options)]\n     (returned-columns-method query stage-number x options))))\n\n(def VisibleColumnsOptions\n  \"Schema for options passed to [[visible-columns]] and [[visible-columns-method]].\"\n  [:merge\n   ReturnedColumnsOptions\n   [:map\n    ;; these all default to true\n    [:include-joined?                              {:optional true} :boolean]\n    [:include-expressions?                         {:optional true} :boolean]\n    [:include-implicitly-joinable?                 {:optional true} :boolean]\n    [:include-implicitly-joinable-for-source-card? {:optional true} :boolean]]])\n\n(mu/defn ^:private default-visible-columns-options :- VisibleColumnsOptions\n  [metadata-providerable]\n  (merge\n   (default-returned-columns-options metadata-providerable)\n   {:include-joined?                              true\n    :include-expressions?                         true\n    :include-implicitly-joinable?                 true\n    :include-implicitly-joinable-for-source-card? true}))\n\n(defmulti visible-columns-method\n  \"Impl for [[visible-columns]].\n\n  This should mostly be similar to the implementation for [[metadata-method]], but needs to include\n  `:lib/source-column-alias` and `:lib/desired-column-alias`. `:lib/source-column-alias` should probably be the same\n  as `:name`; use the supplied `:unique-name-fn` from `options` with the signature `(f str) => str` to ensure\n  `:lib/desired-column-alias` is unique.\n\n  Also, columns that aren't 'projected' should be returned as well -- in other words, ignore `:fields`,\n  `:aggregations`, and `:breakouts`.\"\n  {:arglists '([query stage-number x options])}\n  (fn [_query _stage-number x _options]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod visible-columns-method :dispatch-type/nil\n  [_query _stage-number _x _options]\n  [])\n\n;;; default impl is just the impl for [[returned-columns-method]]\n(defmethod visible-columns-method :default\n  [query stage-number x options]\n  (returned-columns-method query stage-number x options))\n\n;;; if you pass in an integer assume it's a stage number; use the method for the query stage itself.\n(defmethod visible-columns-method :dispatch-type/integer\n  [query _stage-number stage-number options]\n  (visible-columns-method query stage-number (lib.util/query-stage query stage-number) options))\n\n(mu/defn visible-columns :- ColumnsWithUniqueAliases\n  \"Return a sequence of columns that should be visible *within* a given stage of something, e.g. a query stage or a\n  join query. This includes not just the columns that get returned (ones present in [[metadata]], but other columns\n  that are 'reachable' in this stage of the query. E.g. in a query like\n\n    SELECT id, name\n    FROM table\n    ORDER BY position\n\n  only `id` and `name` are 'returned' columns, but other columns such as `position` are visible in this stage as well\n  and would thus be returned by this function.\n\n  Columns from joins, expressions, and implicitly joinable columns are included automatically by default;\n  see [[VisibleColumnsOptions]] for the options for disabling these columns.\"\n  ([query]\n   (visible-columns query (lib.util/query-stage query -1)))\n\n  ([query x]\n   (visible-columns query -1 x))\n\n  ([query stage-number x]\n   (if (and (map? x)\n            (#{:mbql.stage/mbql :mbql.stage/native} (:lib/type x)))\n     (lib.cache/side-channel-cache\n       (keyword (str stage-number \"__visible-columns-no-opts\")) query\n       (fn [_] (visible-columns query stage-number x nil)))\n     (visible-columns query stage-number x nil)))\n\n  ([query          :- ::lib.schema/query\n    stage-number   :- :int\n    x\n    options        :- [:maybe VisibleColumnsOptions]]\n   (let [options (merge (default-visible-columns-options query) options)]\n     (visible-columns-method query stage-number x options))))\n\n(mu/defn primary-keys :- [:sequential ::lib.schema.metadata/column]\n  \"Returns a list of primary keys for the source table of this query.\"\n  [query        :- ::lib.schema/query]\n  (if-let [table-id (lib.util/source-table-id query)]\n    (filter lib.types.isa/primary-key? (lib.metadata/fields query table-id))\n    []))\n\n(defn implicitly-joinable-columns\n  \"Columns that are implicitly joinable from some other columns in `column-metadatas`. To be joinable, the column has to\n  have (1) appropriate FK metadata, i.e. have an `:fk-target-field-id` pointing to another Field, and (2) have a numeric\n  `:id`, i.e. be a real database column that can be used in a JOIN condition. (I think we only include this information\n  for Databases that support FKs and joins, so I don't think we need to do an additional DB feature check here.)\n\n  Does not include columns from any Tables that are already explicitly joined.\n\n  Does not include columns that would be implicitly joinable via multiple hops.\"\n  [query stage-number column-metadatas unique-name-fn]\n  (let [existing-table-ids (into #{} (map :table-id) column-metadatas)]\n    (into []\n          (comp (filter :fk-target-field-id)\n                (filter :id)\n                (filter (comp number? :id))\n                (map (fn [{source-field-id :id, :keys [fk-target-field-id] :as source}]\n                       (-> (lib.metadata/field query fk-target-field-id)\n                           (assoc ::source-field-id source-field-id\n                                  ::source-join-alias (:metabase.lib.join/join-alias source)))))\n                (remove #(contains? existing-table-ids (:table-id %)))\n                (mapcat (fn [{:keys [table-id], ::keys [source-field-id source-join-alias]}]\n                          (let [table-metadata (lib.metadata/table query table-id)\n                                options        {:unique-name-fn               unique-name-fn\n                                                :include-implicitly-joinable? false}]\n                            (for [field (visible-columns-method query stage-number table-metadata options)\n                                  :let  [field (assoc field\n                                                      :fk-field-id              source-field-id\n                                                      :fk-join-alias            source-join-alias\n                                                      :lib/source               :source/implicitly-joinable\n                                                      :lib/source-column-alias  (:name field))]]\n                              (assoc field :lib/desired-column-alias (unique-name-fn\n                                                                      (lib.join.util/desired-alias query field))))))))\n          column-metadatas)))\n\n(mu/defn default-columns-for-stage :- ColumnsWithUniqueAliases\n  \"Given a query and stage, returns the columns which would be selected by default.\n\n  This is exactly [[lib.metadata.calculation/returned-columns]] filtered by the `:lib/source`.\n  (Fields from explicit joins are listed on the join itself and should not be listed in `:fields`.)\n\n  If there is already a `:fields` list on that stage, it is ignored for this calculation.\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int]\n  (let [no-fields (lib.util/update-query-stage query stage-number dissoc :fields)]\n    (into [] (remove (comp #{:source/joins :source/implicitly-joinable}\n                           :lib/source))\n          (returned-columns no-fields stage-number (lib.util/query-stage no-fields stage-number)))))\n"]}