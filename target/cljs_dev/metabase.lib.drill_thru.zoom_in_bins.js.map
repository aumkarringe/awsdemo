{"version":3,"sources":["metabase/lib/drill_thru/zoom_in_bins.cljc"],"mappings":"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","names":["p__79427","map__79428","cljs.core/--destructure-map","cljs.core.get","metabase.lib.drill-thru.zoom-in-bins/zoom-in-binning-drill","query","stage-number","column","value","_context","and__5000__auto__","temp__5804__auto__","existing-breakout","cljs.core/first","metabase.lib.breakout.existing_breakouts","binning","metabase.lib.binning/binning","map__79469","min-value","max-value","bin-width","metabase.lib.binning/resolve-bin-width","G__79473","cljs.core/Keyword","js/Error","p1__79426#","cljs.core.update","metabase.lib.drill-thru.zoom-in-bins/update-breakout","new-binning","temp__5802__auto__","metabase.lib.remove_replace.replace_clause","metabase.lib.binning/with-binning","metabase.lib.breakout.breakout","metabase.lib.drill-thru.common/drill-thru-method","p__79482","map__79483","old-filters","cljs.core.filter","p__79484","vec__79485","cljs.core.nth","operator","_opts","filter-column","fexpr__79489","metabase.lib.equality.find_matching_column","metabase.lib.filter.filters","cljs.core.reduce","metabase.lib.remove-replace/remove-clause","metabase.lib.filter.filter","metabase.lib.filter/>=","metabase.lib.filter/<"],"sourcesContent":["(ns metabase.lib.drill-thru.zoom-in-bins\n  \"\\\"Zoom\\\" transform for numeric (including location) columns.\n\n  Entry points:\n\n  - Cell\n\n  - Pivot cell\n\n  - Legend item\n\n  Requirements:\n\n  - `dimensions` have a numeric column with a binning strategy applied. It can be the default one (\\\"Auto\\\"). Only the\n    first matching column would be used in query transformation.\n\n  Query transformation:\n\n  - Remove breakouts for `dimensions`. Please note that with regular cells and pivot cells it would mean removing all\n    breakouts; but with legend item clicks it would remove the breakout for the legend item column only.\n\n  - Remove any existing filters for this column.\n\n  - Add new filters limiting this column to the range defined by the clicked bin.\n    https://github.com/metabase/metabase/blob/0624d8d0933f577cc70c03948f4b57f73fe13ada/frontend/src/metabase-lib/queries/utils/actions.js#L99\n\n  - Add a breakout based on the numeric column (from requirements). For location columns, use the binning strategy\n    that is 10x more granular (e.g. `Every 1 degree` -> `Every 0.1 degrees`). For numeric columns, use the default\n    binning strategy (\\\"Auto\\\").\n\n  Question transformation:\n\n  - Set default display\n\n  This covers two types of 'zoom in' drills:\n\n  1. If we have a query with a breakout with binning using the `:num-bins` strategy, return a drill that when applied\n     adds a filter for the selected bin ('zooms in') and changes the binning strategy to default. E.g.\n\n         ORDERS + count aggregation + breakout on TOTAL (10 bins)\n\n         =>\n\n         Click the 40-60 bin in the results (returned by the QP as `40`) and choose 'Zoom In'\n\n         =>\n\n         ORDERS + count aggregation + filter TOTAL >= 40 and < 60 + breakout on TOTAL (auto bin)\n\n     Note that we need to look at the fingerprint info in the column metadata to determine how big each bin\n     is (e.g. to determine each bin was 20 wide) -- this uses [[lib.binning.util/nicer-bin-width]], which is what the QP\n     uses.\n\n     In other words, this bin adds a filter for the selected bin and the replaces the breakout binning with a `:default`\n     binning strategy.\n\n  2. Breakout with binning with `:bin-width`:\n\n         PEOPLE + count aggregation + breakout on LATITUDE (bin width: 1\u00b0)\n\n         =>\n\n         Click on the 41\u00b0-42\u00b0 bin in the results (returned by the QP as `41`) and choose 'Zoom In'\n\n         =>\n\n         PEOPLE + count aggregation + filter LATITUDE >= 41 and < 42 + breakout on LATITUDE (bin width: 0.1\u00b0)\n\n     In other words, this bin adds a filter for the selected bin and then divides the bin width in the breakout binning\n     options by 10.\"\n  (:require\n   [metabase.lib.binning :as lib.binning]\n   [metabase.lib.breakout :as lib.breakout]\n   [metabase.lib.drill-thru.common :as lib.drill-thru.common]\n   [metabase.lib.equality :as lib.equality]\n   [metabase.lib.filter :as lib.filter]\n   [metabase.lib.remove-replace :as lib.remove-replace]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.binning :as lib.schema.binning]\n   [metabase.lib.schema.drill-thru :as lib.schema.drill-thru]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.util.malli :as mu]))\n\n;;;\n;;; available-drill-thrus\n;;;\n\n(mu/defn zoom-in-binning-drill :- [:maybe ::lib.schema.drill-thru/drill-thru.zoom-in.binning]\n  \"Return a drill thru that 'zooms in' on a breakout that uses `:binning` if applicable.\n  See [[metabase.lib.drill-thru.zoom-in-bins]] docstring for more information.\"\n  [query                                :- ::lib.schema/query\n   stage-number                         :- :int\n   {:keys [column value], :as _context} :- ::lib.schema.drill-thru/context]\n  (when (and column value)\n    (when-let [existing-breakout (first (lib.breakout/existing-breakouts query stage-number column))]\n      (when-let [binning (lib.binning/binning existing-breakout)]\n        (when-let [{:keys [min-value max-value bin-width]} (lib.binning/resolve-bin-width query column value)]\n          (case (:strategy binning)\n            (:num-bins :default)\n            {:lib/type    :metabase.lib.drill-thru/drill-thru\n             :type        :drill-thru/zoom-in.binning\n             :column      column\n             :min-value   value\n             :max-value   (+ value bin-width)\n             :new-binning {:strategy :default}}\n\n            :bin-width\n            {:lib/type    :metabase.lib.drill-thru/drill-thru\n             :type        :drill-thru/zoom-in.binning\n             :column      column\n             :min-value   min-value\n             :max-value   max-value\n             :new-binning (update binning :bin-width #(double (/ % 10.0)))}))))))\n\n\n;;;\n;;; application\n;;;\n\n(mu/defn ^:private update-breakout :- ::lib.schema/query\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   column       :- ::lib.schema.metadata/column\n   new-binning  :- ::lib.schema.binning/binning]\n  (if-let [existing-breakout (first (lib.breakout/existing-breakouts query stage-number column))]\n    (lib.remove-replace/replace-clause query stage-number existing-breakout (lib.binning/with-binning column new-binning))\n    (lib.breakout/breakout query stage-number (lib.binning/with-binning column new-binning))))\n\n(mu/defmethod lib.drill-thru.common/drill-thru-method :drill-thru/zoom-in.binning :- ::lib.schema/query\n  [query                                        :- ::lib.schema/query\n   stage-number                                 :- :int\n   {:keys [column min-value max-value new-binning]} :- ::lib.schema.drill-thru/drill-thru.zoom-in.binning]\n  (let [old-filters (filter (fn [[operator _opts filter-column]]\n                              (and (#{:>= :<} operator)\n                                   (lib.equality/find-matching-column filter-column [column])))\n                            (lib.filter/filters query stage-number))]\n    (-> (reduce lib.remove-replace/remove-clause query old-filters)\n        (lib.filter/filter stage-number (lib.filter/>= column min-value))\n        (lib.filter/filter stage-number (lib.filter/< column max-value))\n        (update-breakout stage-number column new-binning))))\n"]}