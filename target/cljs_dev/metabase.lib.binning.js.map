{"version":3,"sources":["metabase/lib/binning.cljc"],"mappings":"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","names":["js/metabase","js/metabase.lib","js/metabase.lib.binning","js/metabase.lib.binning.with-binning-method","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","cljs.core.get","fexpr__78595","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.binning/with-binning-method","x","_binning","metabase.lib.dispatch/dispatch-value","metabase.lib.hierarchy/hierarchy","metabase.lib.binning/with-binning","binning","cljs.core/contains?","js/metabase.lib.binning.binning-method","fexpr__78603","metabase.lib.binning/binning-method","_x","metabase.lib.binning/binning","js/metabase.lib.binning.available-binning-strategies-method","fexpr__78621","metabase.lib.binning/available-binning-strategies-method","_query","_stage-number","metabase.lib.binning/available-binning-strategies","query","stage-number","metabase.lib.binning/default-auto-bin","metabase.shared.util.i18n/js-i18n","metabase.lib.binning/with-binning-option-type","m","cljs.core.assoc","metabase.lib.binning/numeric-binning-strategies","cljs.core.mapv","metabase.lib.binning/coordinate-binning-strategies","p__78633","map__78634","cljs.core/--destructure-map","metabase.lib.binning/binning-display-name","bin-width","num-bins","strategy","binning-options","column-metadata","G__78635","cljs.core/Keyword","js/Error","metabase.shared.util.i18n/js-i18n-n","metabase.shared.formatting.numbers/format-number","cljs.core.isa_QMARK_","metabase.lib.metadata.calculation/display-info-method","binning-option","cljs.core/select-keys","binning-value","field-metadata","fexpr__78637","cljs.core.merge","cljs.core._EQ_","metabase.lib.binning/strategy=","column-binning","metabase.lib.binning/resolve-bin-width","metadata-providerable","value","temp__5804__auto__","G__78639","or__5002__auto__","map__78640","min-value","max-value","_number-fingerprint","cljs.core.get_in","map__78643","metabase.lib.binning.util/nicer-bin-width","map__78646","map__78647","vec__78648","cljs.core.nth","map__78651","_strategy","metabase.lib.binning.util/resolve-options"],"sourcesContent":["(ns metabase.lib.binning\n  (:require\n   [metabase.lib.binning.util :as lib.binning.util]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.binning :as lib.schema.binning]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.shared.formatting.numbers :as fmt.num]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util.malli :as mu]))\n\n(defmulti with-binning-method\n  \"Implementation for [[with-binning]]. Implement this to tell [[with-binning]] how to add binning to a particular MBQL\n  clause.\"\n  {:arglists '([x binning])}\n  (fn [x _binning]\n    (lib.dispatch/dispatch-value x)) :hierarchy lib.hierarchy/hierarchy)\n\n(mu/defn with-binning\n  \"Add binning to an MBQL clause or something that can be converted to an MBQL clause.\n  Eg. for a Field or Field metadata or `:field` clause, this might do something like this:\n\n    (with-binning some-field (bin-by :num-bins 4))\n\n    =>\n\n    [:field {:binning {:strategy :num-bins :num-bins 4}} 1]\n\n  Pass `nil` `binning` to remove any binning.\"\n  {:style/indent [:form]}\n  [x binning :- [:maybe [:or ::lib.schema.binning/binning ::lib.schema.binning/binning-option]]]\n  (with-binning-method x (if (contains? binning :mbql)\n                           (:mbql binning)\n                           binning)))\n\n(defmulti binning-method\n  \"Implementation of [[binning]]. Return the current binning options associated with `x`.\"\n  {:arglists '([x])}\n  lib.dispatch/dispatch-value\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod binning-method :default\n  [_x]\n  nil)\n\n(mu/defn binning :- [:maybe ::lib.schema.binning/binning]\n  \"Get the current binning options associated with `x`, if any.\"\n  [x]\n  (binning-method x))\n\n(defmulti available-binning-strategies-method\n  \"Implementation for [[available-binning-strategies]]. Return a set of binning strategies from\n  `:metabase.lib.schema.binning/strategy` that are allowed to be used with `x`.\"\n  {:arglists '([query stage-number x])}\n  (fn [_query _stage-number x]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod available-binning-strategies-method :default\n  [_query _stage-number _x]\n  nil)\n\n(mu/defn available-binning-strategies :- [:sequential [:ref ::lib.schema.binning/binning-option]]\n  \"Get a set of available binning strategies for `x`. Returns nil if none are available.\"\n  ([query x]\n   (available-binning-strategies query -1 x))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    x]\n   (available-binning-strategies-method query stage-number x)))\n\n(mu/defn default-auto-bin :- ::lib.schema.binning/binning-option\n  \"Returns the basic auto-binning strategy.\n\n  Public because it's used directly by some drill-thrus.\"\n  []\n  {:lib/type     :option/binning\n   :display-name (i18n/tru \"Auto bin\")\n   :default      true\n   :mbql         {:strategy :default}})\n\n(defn- with-binning-option-type [m]\n  (assoc m :lib/type :option/binning))\n\n(mu/defn numeric-binning-strategies :- [:sequential ::lib.schema.binning/binning-option]\n  \"List of binning options for numeric fields. These split the data evenly into a fixed number of bins.\"\n  []\n  (mapv with-binning-option-type\n        [(default-auto-bin)\n         {:display-name (i18n/tru \"10 bins\")  :mbql {:strategy :num-bins :num-bins 10}}\n         {:display-name (i18n/tru \"50 bins\")  :mbql {:strategy :num-bins :num-bins 50}}\n         {:display-name (i18n/tru \"100 bins\") :mbql {:strategy :num-bins :num-bins 100}}]))\n\n(mu/defn coordinate-binning-strategies :- [:sequential ::lib.schema.binning/binning-option]\n  \"List of binning options for coordinate fields (ie. latitude and longitude). These split the data into as many\n  ranges as necessary, with each range being a certain number of degrees wide.\"\n  []\n  (mapv with-binning-option-type\n        [(default-auto-bin)\n         {:display-name (i18n/tru \"Bin every 0.1 degrees\") :mbql {:strategy :bin-width :bin-width 0.1}}\n         {:display-name (i18n/tru \"Bin every 1 degree\")    :mbql {:strategy :bin-width :bin-width 1.0}}\n         {:display-name (i18n/tru \"Bin every 10 degrees\")  :mbql {:strategy :bin-width :bin-width 10.0}}\n         {:display-name (i18n/tru \"Bin every 20 degrees\")  :mbql {:strategy :bin-width :bin-width 20.0}}]))\n\n(mu/defn binning-display-name :- ::lib.schema.common/non-blank-string\n  \"This is implemented outside of [[lib.metadata.calculation/display-name]] because it needs access to the field type.\n  It's called directly by `:field` or `:metadata/column`'s [[lib.metadata.calculation/display-name]].\"\n  [{:keys [bin-width num-bins strategy] :as binning-options} :- ::lib.schema.binning/binning\n   column-metadata                                           :- ::lib.schema.metadata/column]\n  (when binning-options\n    (case strategy\n      :num-bins  (i18n/trun \"{0} bin\" \"{0} bins\" num-bins)\n      :bin-width (str (fmt.num/format-number bin-width {})\n                      (when (isa? (:semantic-type column-metadata) :type/Coordinate)\n                        \"\u00b0\"))\n      :default   (i18n/tru \"Auto binned\"))))\n\n(defmethod lib.metadata.calculation/display-info-method :option/binning\n  [_query _stage-number binning-option]\n  (select-keys binning-option [:display-name :default :selected]))\n\n(defmethod lib.metadata.calculation/display-info-method ::binning\n  [query stage-number binning-value]\n  (let [field-metadata ((:metadata-fn binning-value) query stage-number)]\n    (merge {:display-name (binning-display-name binning-value field-metadata)}\n           (when (= :default (:strategy binning-value))\n             {:default true}))))\n\n(mu/defn strategy= :- boolean?\n  \"Given a binning option (as returned by [[available-binning-strategies]]) and the binning value (possibly nil) from\n  a column, check if they match.\"\n  [binning-option :- ::lib.schema.binning/binning-option\n   column-binning :- [:maybe ::lib.schema.binning/binning]]\n  (= (:mbql binning-option)\n     (select-keys column-binning [:strategy :num-bins :bin-width])))\n\n(mu/defn resolve-bin-width :- [:maybe [:map\n                                       [:bin-width ::lib.schema.binning/bin-width]\n                                       [:min-value number?]\n                                       [:max-value number?]]]\n  \"If a `column` is binned, resolve the actual bin width that will be used when a query is processed as well as min\n  and max values.\"\n  [metadata-providerable :- ::lib.schema.metadata/metadata-providerable\n   column-metadata       :- ::lib.schema.metadata/column\n   value                 :- number?]\n  ;; TODO: I think this function is taking the wrong approach. It uses the (global) :fingerprint for all cases, and if\n  ;; we're looking at nested bins (eg. bin a query, then zoom in on one of those bins) we have tighter min and max\n  ;; bounds on the column's own `binning-options`. We should be using those bounds everywhere if they exist, and falling\n  ;; back on the fingerprint only if they're not defined.\n  (when-let [binning-options (binning column-metadata)]\n    (case (:strategy binning-options)\n      :num-bins\n      (or ;; If the column is already binned, compute the width of this single bin based on its bounds and width.\n          (when-let [bin-width (:bin-width binning-options)]\n            {:bin-width bin-width\n             :min-value value\n             :max-value (+ value bin-width)})\n          ;; Otherwise use the fingerprint.\n          (when-let [{min-value :min, max-value :max, :as _number-fingerprint} (get-in column-metadata [:fingerprint :type :type/Number])]\n            (let [{:keys [num-bins]} binning-options\n                  bin-width          (lib.binning.util/nicer-bin-width min-value max-value num-bins)]\n              {:bin-width bin-width\n               :min-value value\n               :max-value (+ value bin-width)})))\n\n      :bin-width\n      (let [{:keys [bin-width]} binning-options]\n        (assert (number? bin-width))\n        {:bin-width bin-width\n         :min-value value\n         :max-value (+ value bin-width)})\n\n      :default\n      (when-let [{min-value :min, max-value :max, :as _number-fingerprint} (get-in column-metadata [:fingerprint :type :type/Number])]\n        (when-let [[_strategy {:keys [bin-width]}] (lib.binning.util/resolve-options metadata-providerable\n                                                                                     :default\n                                                                                     nil\n                                                                                     column-metadata\n                                                                                     min-value\n                                                                                     max-value)]\n          {:bin-width bin-width\n           :min-value value\n           :max-value (+ value bin-width)})))))\n"]}