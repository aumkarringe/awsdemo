{"version":3,"sources":["metabase/lib/schema/info.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,AAAAA,4CAAA,0GAAA,oFAAA,qDAAA,2CAAA,qGAAA,yDAAA,0DAAA,iEAAA,+DAAA,uDAAA,0FAAA,+DAAA,8DAAA,qEAAA,wEAAA,uEAAA,4EAAA,0EAAA,iFAAA,gFAAA,uFAAA,0FAAA,xtCAGsBC;AAoBtB,AAAAD,4CAAA,mGAAA;AAUA,AAAAA,4CAAA,oGAAA,oFAAA,mDAAA,2CAAA,qGAAA,mFAAA,2DAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,mFAAA,mDAAA,kIAAA,mFAAA,mEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,gHAAA,mFAAA,gEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,oHAAA,mFAAA,4DAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,gHAAA,mFAAA,gEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,iJAAA,mFAAA,qEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,0HAAA,mFAAA,yFAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,mFAAA,yDAAA,mDAAA,2EAAA,mFAAA,6DAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,kHAAA,mFAAA,uFAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,mFAAA,kEAAA,mFAAA,yDAAA,mDAAA,mFAAA,mFAAA,gFAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,mFAAA,yDAAA,mDAAA,2EAAA,mFAAA,kEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,mFAAA,mDAAA,z7MAGsBC","names":["metabase.util.malli.registry/register!","cljs.core/identity"],"sourcesContent":["(ns metabase.lib.schema.info\n  \"This stuff is used for informational purposes, primarily to record QueryExecution entries when a query is ran. Pass\n  them along if applicable when writing code that creates queries, but when working on middleware and the like you can\n  most likely ignore this stuff entirely.\"\n  (:require\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.id :as lib.schema.id]\n   [metabase.util.malli.registry :as mr]))\n\n;;; Schema for `info.context`; used for informational purposes to record how a query was executed.\n(mr/def ::context\n  [:enum\n   ;; do not decode, since this should not get written to the app DB or come in from the REST API.\n   {:decode/normalize identity}\n   :action\n   :ad-hoc\n   :collection\n   :map-tiles\n   :pulse\n   :dashboard-subscription\n   :dashboard\n   :question\n   :csv-download\n   :xlsx-download\n   :json-download\n   :public-dashboard\n   :public-question\n   :embedded-dashboard\n   :embedded-question\n   :embedded-csv-download\n   :embedded-xlsx-download\n   :embedded-json-download])\n\n(mr/def ::hash\n  #?(:clj bytes?\n     :cljs :any))\n\n;;; Schema for query `:info` dictionary, which is used for informational purposes to record information about how a\n;;; query was executed in QueryExecution and other places. It is considered bad form for middleware to change its\n;;; behavior based on this information, don't do it!\n;;;\n;;; TODO - this schema is somewhat misleading because if you use a function\n;;; like [[metabase.query-processor/userland-query]] some of these keys (e.g. `:context`) are in fact required\n(mr/def ::info\n  [:map\n   ;; do not decode, since this should not get written to the app DB or come in from the REST API.\n   {:decode/normalize identity}\n   ;; TODO -- not 100% sure info should be getting normalized, because we're not supposed to be saving this map\n   ;; anyway, right?\n   ;; These keys are nice to pass in if you're running queries on the backend and you know these values. They aren't\n   ;; used for permissions checking or anything like that so don't try to be sneaky\n   [:context                 {:optional true} [:maybe [:ref ::context]]]\n   [:executed-by             {:optional true} [:maybe ::lib.schema.id/user]]\n   [:action-id               {:optional true} [:maybe ::lib.schema.id/action]]\n   [:card-id                 {:optional true} [:maybe ::lib.schema.id/card]]\n   [:card-name               {:optional true} [:maybe ::lib.schema.common/non-blank-string]]\n   [:dashboard-id            {:optional true} [:maybe ::lib.schema.id/dashboard]]\n   [:alias/escaped->original {:optional true} [:maybe [:map-of :any :any]]]\n   [:pulse-id                {:optional true} [:maybe ::lib.schema.id/pulse]]\n   ;; Metadata for datasets when querying the dataset. This ensures that user edits to dataset metadata are blended in\n   ;; with runtime computed metadata so that edits are saved.\n   [:metadata/model-metadata {:optional true} [:maybe [:sequential [:map-of :any :any]]]]\n   ;; Pivot QP runs multiple queries, and in the dataset api, we need to have access to the original query\n   ;; so that we can pass it to the pivot.qp for downloads on unsaved questions\n   [:pivot/original-query    {:optional true} [:maybe [:map-of :any :any]]]\n   ;; `:hash` gets added automatically for userland queries (see [[metabase.query-processor/userland-query]]), so\n   ;; don't try passing these in yourself. In fact, I would like this a lot better if we could take these keys xout of\n   ;; `:info` entirely and have the code that saves QueryExceutions figure out their values when it goes to save them\n   [:query-hash              {:optional true} [:maybe [:ref ::hash]]]])\n"]}