{"version":3,"sources":["metabase/lib/aggregation.cljc"],"mappings":"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","names":["metabase.lib.aggregation/column-metadata->aggregation-ref","metadata","options","cljs.core/random-uuid","cljs.core.some_fn","ag-uuid","js/Error","metabase.lib.aggregation/resolve-aggregation","query","stage-number","map__77936","cljs.core/--destructure-map","cljs.core.get","aggregations","metabase.lib.util/query-stage","found","medley.core.find_first","cljs.core.comp","cljs.core/second","cljs.core.ex_info","metabase.shared.util.i18n.js_i18n","metabase.lib.metadata.calculation/describe-top-level-key-method","_k","temp__5804__auto__","cljs.core/not-empty","metabase.lib.util/join-strings-with-conjunction","metabase.shared.util.i18n/js-i18n","iter__5480__auto__","s__77943","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__77945","cljs.core/chunk-buffer","i__77944","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__77942","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","aggregation","metabase.lib.metadata.calculation.display_name","metabase.lib.metadata.calculation/metadata-method","p__77952","vec__77953","cljs.core.nth","map__77956","_ag","base-type","effective-type","_opts","index","_aggregation-ref","cljs.core.merge","metabase.lib.metadata.calculation.metadata","metabase.lib.metadata.calculation/display-name-method","p__77961","vec__77962","_tag","style","metabase.lib.hierarchy/derive","seq__77965","chunk__77966","count__77967","i__77968","c__5525__auto__","cljs.core/chunk-first","cljs.core/next","tag","p__77973","vec__77974","x","x-display-name","G__77977","cljs.core/Keyword","G__77978","metabase.lib.metadata.calculation/column-name-method","p__77984","vec__77985","_query","_stage-number","_clause","G__77988","clause","cljs.core.assoc","fexpr__77993","cljs.core/get-method","_case","_style","seq__77994","chunk__77995","count__77996","i__77997","p__78093","vec__78095","_arg","G__78098","p__78104","vec__78106","arg","G__78114","p__78117","vec__78118","_percentile","p","seq__78122","chunk__78123","count__78124","i__78125","cljs.core.dissoc","fexpr__78132","p__78133","vec__78135","_sum-where","_pred","p__78138","vec__78139","metabase.lib.metadata.calculation.column_name","_share","fexpr__78147","_count-where","p__78149","vec__78150","first-arg","cljs.core/select-keys","fexpr__78153","metabase.lib.common/defop-create","metabase.lib.aggregation/count","metabase.lib.aggregation/cum-count","metabase.lib.aggregation/count-where","y","metabase.lib.aggregation/avg","metabase.lib.aggregation/distinct","metabase.lib.aggregation/max","metabase.lib.aggregation/median","metabase.lib.aggregation/min","metabase.lib.aggregation/percentile","metabase.lib.aggregation/share","metabase.lib.aggregation/stddev","metabase.lib.aggregation/sum","metabase.lib.aggregation/cum-sum","metabase.lib.aggregation/sum-where","metabase.lib.aggregation/var","metabase.lib.ref/ref-method","aggregation-clause","metabase.lib.aggregation/Aggregable","metabase.lib.aggregation/aggregate","aggregable","cljs.core._EQ_","metabase.lib.dispatch/dispatch-value","metabase.lib.ref/ref","metabase.lib.util/add-summary-clause","metabase.lib.aggregation/aggregations","metabase.lib.aggregation/aggregations-metadata","G__78241","cljs.core.into","cljs.core.map","metabase.util.assoc_default","or__5002__auto__","metabase.lib.aggregation/OperatorWithColumns","p__78243","map__78277","display-info","_display-name-style","metabase.lib.metadata.calculation/display-info-method","p__78279","map__78280","requires-column?","selected?","short-name","G__78281","metabase.util/qualified-name","metabase.lib.aggregation/aggregation-operator-columns","aggregation-operator","metabase.lib.aggregation/available-aggregation-operators","db-features","metabase.lib.metadata/database","stage","columns","metabase.lib.metadata.calculation.visible_columns","with-columns","p__78284","map__78285","supported-field","operator","cljs.core/not","cols","p1__78282#","cljs.core/filterv","metabase.lib.types.isa/field-type?","cljs.core.filter","op","feature","cljs.core.keep","p1__78283#","metabase.lib.schema.aggregation/aggregation-operators","metabase.lib.aggregation/aggregation-clause","metabase.lib.options/ensure-uuid","G__78295","G__78296","metabase.lib.util/format","column","metabase.lib.common/->op-arg","metabase.lib.aggregation/SelectedOperatorWithColumns","metabase.lib.aggregation/selected-aggregation-operators","agg-operators","agg-clause","vec__78302","_","agg-col","agg-temporal-unit","metabase.lib.options/options","cljs.core.mapv","agg-op","G__78305","medley.core.update_existing","metabase.lib.util/ref-clause?","metabase.lib.equality.mark_selected_columns","metabase.lib.options.update_options","cljs.core/dissoc","c","G__78323","metabase.lib.temporal-bucket/with-temporal-bucket","metabase.lib.aggregation/aggregation-ref","ag-index","temp__5802__auto__","vec__78328","map__78331","metabase.lib.aggregation/aggregation-at-index","ags","metabase.lib.aggregation.aggregations","p__78335","vec__78336","metabase.lib.aggregation/aggregation-column","_operator","column-ref","_aggregation","metabase.lib.equality.find_matching_column"],"sourcesContent":["(ns metabase.lib.aggregation\n  (:refer-clojure :exclude [count distinct max min var])\n  (:require\n   [medley.core :as m]\n   [metabase.lib.common :as lib.common]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.equality :as lib.equality]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.ref :as lib.ref]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.aggregation :as lib.schema.aggregation]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.lib.temporal-bucket :as lib.temporal-bucket]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.lib.util :as lib.util]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util :as u]\n   [metabase.util.malli :as mu]))\n\n(mu/defn column-metadata->aggregation-ref :- :mbql.clause/aggregation\n  \"Given `:metadata/column` column metadata for an aggregation, construct an `:aggregation` reference.\"\n  [metadata :- ::lib.schema.metadata/column]\n  (let [options {:lib/uuid        (str (random-uuid))\n                 :effective-type  ((some-fn :effective-type :base-type) metadata)\n                 :lib/source-name (:name metadata)}\n        ag-uuid (:lib/source-uuid metadata)]\n    (assert ag-uuid \"Metadata for an aggregation reference should include :lib/source-uuid\")\n    [:aggregation options ag-uuid]))\n\n(mu/defn resolve-aggregation :- ::lib.schema.aggregation/aggregation\n  \"Resolve an aggregation with a specific `ag-uuid`.\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   ag-uuid      :- :string]\n  (let [{aggregations :aggregation} (lib.util/query-stage query stage-number)\n        found (m/find-first (comp #{ag-uuid} :lib/uuid second) aggregations)]\n    (when-not found\n      (throw (ex-info (i18n/tru \"No aggregation with uuid {0}\" ag-uuid)\n                      {:uuid         ag-uuid\n                       :query        query\n                       :stage-number stage-number})))\n    found))\n\n(defmethod lib.metadata.calculation/describe-top-level-key-method :aggregation\n  [query stage-number _k]\n  (when-let [aggregations (not-empty (:aggregation (lib.util/query-stage query stage-number)))]\n    (lib.util/join-strings-with-conjunction\n     (i18n/tru \"and\")\n     (for [aggregation aggregations]\n       (lib.metadata.calculation/display-name query stage-number aggregation :long)))))\n\n(defmethod lib.metadata.calculation/metadata-method :aggregation\n  [query stage-number [_ag {:keys [base-type effective-type], :as _opts} index, :as _aggregation-ref]]\n  (let [aggregation (resolve-aggregation query stage-number index)]\n    (merge\n     (lib.metadata.calculation/metadata query stage-number aggregation)\n     {:lib/source :source/aggregations\n      :lib/source-uuid (:lib/uuid (second aggregation))}\n     (when base-type\n       {:base-type base-type})\n     (when effective-type\n       {:effective-type effective-type}))))\n\n;;; TODO -- merge this stuff into `defop` somehow.\n\n(defmethod lib.metadata.calculation/display-name-method :aggregation\n  [query stage-number [_tag _opts index] style]\n  (lib.metadata.calculation/display-name query stage-number (resolve-aggregation query stage-number index) style))\n\n(lib.hierarchy/derive ::count-aggregation ::aggregation)\n\n;;; count and cumulative count can both be used either with no args (count of rows) or with one arg (count of X, which\n;;; I think means count where X is not NULL or something like that. Basically `count(x)` in SQL)\n(doseq [tag [:count\n             :cum-count\n             :count-where]]\n  (lib.hierarchy/derive tag ::count-aggregation))\n\n(defmethod lib.metadata.calculation/display-name-method ::count-aggregation\n  [query stage-number [tag _opts x] style]\n  ;; x is optional.\n  (if x\n    (let [x-display-name (lib.metadata.calculation/display-name query stage-number x style)]\n      (case tag\n        :count     (i18n/tru \"Count of {0}\" x-display-name)\n        :cum-count (i18n/tru \"Cumulative count of {0}\" x-display-name)))\n    (case tag\n      :count     (i18n/tru \"Count\")\n      :cum-count (i18n/tru \"Cumulative count\"))))\n\n(defmethod lib.metadata.calculation/column-name-method ::count-aggregation\n  [_query _stage-number [tag :as _clause]]\n  (case tag\n    :count       \"count\"\n    :cum-count   \"count\"\n    :count-where \"count_where\"))\n\n(defmethod lib.metadata.calculation/metadata-method ::quantity-aggregation\n  [query stage-number clause]\n  (assoc ((get-method lib.metadata.calculation/metadata-method ::aggregation) query stage-number clause)\n         :semantic-type :type/Quantity))\n\n(lib.hierarchy/derive ::quantity-aggregation ::aggregation)\n(lib.hierarchy/derive ::count-aggregation ::quantity-aggregation)\n(lib.hierarchy/derive :distinct ::quantity-aggregation)\n\n(defmethod lib.metadata.calculation/display-name-method :case\n  [_query _stage-number _case _style]\n  (i18n/tru \"Case\"))\n\n(defmethod lib.metadata.calculation/column-name-method :case\n  [_query _stage-number _case]\n  \"case\")\n\n;;; TODO - Should `:case` derive from `::aggregation` as well???\n\n(lib.hierarchy/derive ::unary-aggregation ::aggregation)\n\n(doseq [tag [:avg\n             :cum-sum\n             :distinct\n             :max\n             :median\n             :min\n             :stddev\n             :sum\n             :var]]\n  (lib.hierarchy/derive tag ::unary-aggregation))\n\n(defmethod lib.metadata.calculation/column-name-method ::unary-aggregation\n  [_query _stage-number [tag _opts _arg]]\n  (case tag\n    :avg       \"avg\"\n    :cum-sum   \"sum\"\n    :distinct  \"count\"\n    :max       \"max\"\n    :median    \"median\"\n    :min       \"min\"\n    :stddev    \"stddev\"\n    :sum       \"sum\"\n    :var       \"var\"))\n\n(defmethod lib.metadata.calculation/display-name-method ::unary-aggregation\n  [query stage-number [tag _opts arg] style]\n  (let [arg (lib.metadata.calculation/display-name query stage-number arg style)]\n    (case tag\n      :avg       (i18n/tru \"Average of {0}\"            arg)\n      :cum-sum   (i18n/tru \"Cumulative sum of {0}\"     arg)\n      :distinct  (i18n/tru \"Distinct values of {0}\"    arg)\n      :max       (i18n/tru \"Max of {0}\"                arg)\n      :median    (i18n/tru \"Median of {0}\"             arg)\n      :min       (i18n/tru \"Min of {0}\"                arg)\n      :stddev    (i18n/tru \"Standard deviation of {0}\" arg)\n      :sum       (i18n/tru \"Sum of {0}\"                arg)\n      :var       (i18n/tru \"Variance of {0}\"           arg))))\n\n(defmethod lib.metadata.calculation/display-name-method :percentile\n  [query stage-number [_percentile _opts x p] style]\n  (i18n/tru \"{0}th percentile of {1}\" p (lib.metadata.calculation/display-name query stage-number x style)))\n\n(defmethod lib.metadata.calculation/column-name-method :percentile\n  [_query _stage-number _clause]\n  \"percentile\")\n\n(lib.hierarchy/derive ::no-semantic-type ::aggregation)\n(doseq [tag [:percentile :var]]\n  (lib.hierarchy/derive tag ::no-semantic-type))\n\n;; The default preserves the semantic type.\n;; But for ::no-semantic-type we should drop\n\n(defmethod lib.metadata.calculation/metadata-method ::no-semantic-type\n  [query stage-number clause]\n  (dissoc ((get-method lib.metadata.calculation/metadata-method ::aggregation) query stage-number clause)\n          :semantic-type))\n\n;;; we don't currently have sophisticated logic for generating nice display names for filter clauses.\n;;;\n;;; TODO : wait a minute, we do have that stuff now!\n\n(defmethod lib.metadata.calculation/display-name-method :sum-where\n  [query stage-number [_sum-where _opts x _pred] style]\n  (i18n/tru \"Sum of {0} matching condition\" (lib.metadata.calculation/display-name query stage-number x style)))\n\n(defmethod lib.metadata.calculation/column-name-method :sum-where\n  [query stage-number [_sum-where _opts x _pred]]\n  (str \"sum_where_\" (lib.metadata.calculation/column-name query stage-number x)))\n\n(lib.hierarchy/derive :sum-where ::aggregation)\n\n(defmethod lib.metadata.calculation/display-name-method :share\n  [_query _stage-number _share _style]\n  (i18n/tru \"Share of rows matching condition\"))\n\n(defmethod lib.metadata.calculation/column-name-method :share\n  [_query _stage-number _share]\n  \"share\")\n\n(defmethod lib.metadata.calculation/metadata-method :share\n  [query stage-number clause]\n  (assoc ((get-method lib.metadata.calculation/metadata-method ::aggregation) query stage-number clause)\n         :semantic-type :type/Percentage))\n\n(lib.hierarchy/derive :share ::aggregation)\n\n(defmethod lib.metadata.calculation/display-name-method :count-where\n  [_query _stage-number _count-where _style]\n  (i18n/tru \"Count of rows matching condition\"))\n\n(defmethod lib.metadata.calculation/metadata-method ::aggregation\n  [query stage-number [_tag _opts first-arg :as clause]]\n  (merge\n   ;; flow the `:options` from the field we're aggregating. This is important, for some reason.\n   ;; See [[metabase.query-processor-test.aggregation-test/field-settings-for-aggregate-fields-test]]\n   (when first-arg\n     (select-keys (lib.metadata.calculation/metadata query stage-number first-arg) [:settings :semantic-type]))\n   ((get-method lib.metadata.calculation/metadata-method :default) query stage-number clause)))\n\n(lib.common/defop count       [] [x])\n(lib.common/defop cum-count   [] [x])\n(lib.common/defop count-where [x y])\n(lib.common/defop avg         [x])\n(lib.common/defop distinct    [x])\n(lib.common/defop max         [x])\n(lib.common/defop median      [x])\n(lib.common/defop min         [x])\n(lib.common/defop percentile  [x y])\n(lib.common/defop share       [x])\n(lib.common/defop stddev      [x])\n(lib.common/defop sum         [x])\n(lib.common/defop cum-sum     [x])\n(lib.common/defop sum-where   [x y])\n(lib.common/defop var         [x])\n\n(defmethod lib.ref/ref-method :aggregation\n  [aggregation-clause]\n  aggregation-clause)\n\n(def ^:private Aggregable\n  \"Schema for something you can pass to [[aggregate]] to add to a query as an aggregation.\"\n  [:or\n   ::lib.schema.aggregation/aggregation\n   ::lib.schema.common/external-op\n   ::lib.schema.metadata/metric])\n\n(mu/defn aggregate :- ::lib.schema/query\n  \"Adds an aggregation to query.\"\n  ([query aggregable]\n   (aggregate query -1 aggregable))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    aggregable :- Aggregable]\n   ;; if this is a Metric metadata, convert it to `:metric` MBQL clause before adding.\n   (if (= (lib.dispatch/dispatch-value aggregable) :metadata/metric)\n     (recur query stage-number (lib.ref/ref aggregable))\n     (lib.util/add-summary-clause query stage-number :aggregation aggregable))))\n\n(mu/defn aggregations :- [:maybe [:sequential ::lib.schema.aggregation/aggregation]]\n  \"Get the aggregations in a given stage of a query.\"\n  ([query]\n   (aggregations query -1))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int]\n   (not-empty (:aggregation (lib.util/query-stage query stage-number)))))\n\n(mu/defn aggregations-metadata :- [:maybe [:sequential ::lib.schema.metadata/column]]\n  \"Get metadata about the aggregations in a given stage of a query.\"\n  ([query]\n   (aggregations-metadata query -1))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int]\n   (some->> (not-empty (:aggregation (lib.util/query-stage query stage-number)))\n            (into [] (map (fn [aggregation]\n                            (let [metadata (lib.metadata.calculation/metadata query stage-number aggregation)]\n                              (-> metadata\n                                  (u/assoc-default :effective-type (or (:base-type metadata) :type/*))\n                                  (assoc :lib/source :source/aggregations\n                                         :lib/source-uuid (:lib/uuid (second aggregation)))))))))))\n\n(def ^:private OperatorWithColumns\n  [:merge\n   ::lib.schema.aggregation/operator\n   [:map\n    [:columns {:optional true} [:sequential ::lib.schema.metadata/column]]]])\n\n(defmethod lib.metadata.calculation/display-name-method :operator/aggregation\n  [_query _stage-number {:keys [display-info]} _display-name-style]\n  (:display-name (display-info)))\n\n(defmethod lib.metadata.calculation/display-info-method :operator/aggregation\n  [_query _stage-number {:keys [display-info requires-column? selected?] short-name :short}]\n  (cond-> (assoc (display-info)\n                 :short-name (u/qualified-name short-name)\n                 :requires-column requires-column?)\n    (some? selected?) (assoc :selected selected?)))\n\n(mu/defn aggregation-operator-columns :- [:maybe [:sequential ::lib.schema.metadata/column]]\n  \"Returns the columns for which `aggregation-operator` is applicable.\"\n  [aggregation-operator :- OperatorWithColumns]\n  (:columns aggregation-operator))\n\n(mu/defn available-aggregation-operators :- [:maybe [:sequential OperatorWithColumns]]\n  \"Returns the available aggegation operators for the stage with `stage-number` of `query`.\n  If `stage-number` is omitted, uses the last stage.\"\n  ([query]\n   (available-aggregation-operators query -1))\n\n  ([query :- ::lib.schema/query\n    stage-number :- :int]\n   (let [db-features (or (:features (lib.metadata/database query)) #{})\n         stage (lib.util/query-stage query stage-number)\n         columns (lib.metadata.calculation/visible-columns query stage-number stage)\n         with-columns (fn [{:keys [requires-column? supported-field] :as operator}]\n                        (cond\n                          (not requires-column?)\n                          operator\n\n                          (= supported-field :any)\n                          (assoc operator :columns columns)\n\n                          :else\n                          (when-let [cols (->> columns\n                                               (filterv #(lib.types.isa/field-type? supported-field %))\n                                               not-empty)]\n                            (assoc operator :columns cols))))]\n     (not-empty\n      (into []\n            (comp (filter (fn [op]\n                            (let [feature (:driver-feature op)]\n                              (or (nil? feature) (db-features feature)))))\n                  (keep with-columns)\n                  (map #(assoc % :lib/type :operator/aggregation)))\n            lib.schema.aggregation/aggregation-operators)))))\n\n(mu/defn aggregation-clause :- ::lib.schema.aggregation/aggregation\n  \"Returns a standalone aggregation clause for an `aggregation-operator` and\n  a `column`.\n  For aggregations requiring an argument `column` is mandatory, otherwise\n  it is optional.\"\n  ([aggregation-operator :- ::lib.schema.aggregation/operator]\n   (if-not (:requires-column? aggregation-operator)\n     (lib.options/ensure-uuid [(:short aggregation-operator) {}])\n     (throw (ex-info (lib.util/format \"aggregation operator %s requires an argument\"\n                                      (:short aggregation-operator))\n                     {:aggregation-operator aggregation-operator}))))\n\n  ([aggregation-operator :- ::lib.schema.aggregation/operator\n    column]\n   (lib.options/ensure-uuid [(:short aggregation-operator) {} (lib.common/->op-arg column)])))\n\n(def ^:private SelectedOperatorWithColumns\n  [:merge\n   ::lib.schema.aggregation/operator\n   [:map\n    [:columns {:optional true} [:sequential ::lib.schema.metadata/column]]\n    [:selected? {:optional true} :boolean]]])\n\n(mu/defn selected-aggregation-operators :- [:maybe [:sequential SelectedOperatorWithColumns]]\n  \"Mark the operator and the column (if any) in `agg-operators` selected by `agg-clause`.\"\n  [agg-operators :- [:maybe [:sequential OperatorWithColumns]]\n   agg-clause]\n  (when (seq agg-operators)\n    (let [[op _ agg-col] agg-clause\n          agg-temporal-unit (-> agg-col lib.options/options :temporal-unit)]\n      (mapv (fn [agg-op]\n              (cond-> agg-op\n                (= (:short agg-op) op)\n                (-> (assoc :selected? true)\n                    (m/update-existing\n                      :columns\n                      (fn [cols]\n                        (if (lib.util/ref-clause? agg-col)\n                          (let [cols (lib.equality/mark-selected-columns\n                                       cols\n                                       [(lib.options/update-options agg-col dissoc :temporal-unit)])]\n                            (mapv (fn [c]\n                                    (cond-> c\n                                      (some? agg-temporal-unit)\n                                      (lib.temporal-bucket/with-temporal-bucket agg-temporal-unit)))\n                                  cols))\n                          cols))))))\n            agg-operators))))\n\n(mu/defn aggregation-ref :- :mbql.clause/aggregation\n  \"Find the aggregation at `ag-index` and create an `:aggregation` ref for it. Intended for use\n  when creating queries using threading macros e.g.\n\n    (-> (lib/query ...)\n        (lib/aggregate (lib/avg ...))\n        (as-> <> (lib/order-by <> (lib/aggregation-ref <> 0))))\"\n  ([query ag-index]\n   (aggregation-ref query -1 ag-index))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    ag-index     :- ::lib.schema.common/int-greater-than-or-equal-to-zero]\n   (if-let [[_ {ag-uuid :lib/uuid}] (get (:aggregation (lib.util/query-stage query stage-number)) ag-index)]\n     (lib.options/ensure-uuid [:aggregation {} ag-uuid])\n     (throw (ex-info (str \"Undefined aggregation \" ag-index)\n                     {:aggregation-index ag-index\n                      :query             query\n                      :stage-number      stage-number})))))\n\n(mu/defn aggregation-at-index :- [:maybe ::lib.schema.aggregation/aggregation]\n  \"Get the aggregation at `index` in a stage of the query if it exists, otherwise `nil`. This is mostly for working\n  with legacy references like\n\n    [:aggregation 0]\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   index        :- ::lib.schema.common/int-greater-than-or-equal-to-zero]\n  (let [ags (aggregations query stage-number)]\n    (when (> (clojure.core/count ags) index)\n      (nth ags index))))\n\n(mu/defn aggregation-column :- [:maybe ::lib.schema.metadata/column]\n  \"Returns the column consumed by this aggregation, eg. the column being summed.\n\n  Returns nil for aggregations like `[:count]` that don't specify a column.\"\n  [query                                         :- ::lib.schema/query\n   stage-number                                  :- :int\n   [_operator _opts column-ref :as _aggregation] :- ::lib.schema.aggregation/aggregation]\n  (when column-ref\n    (->> (lib.util/query-stage query stage-number)\n         (lib.metadata.calculation/visible-columns query stage-number)\n         (lib.equality/find-matching-column column-ref))))\n"]}