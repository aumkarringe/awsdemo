{"version":3,"sources":["metabase/lib/filter/operator.cljc"],"mappings":"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","names":["metabase.lib.filter.operator/operator-def","tag","display-name-style","metabase.lib.filter.operator/numeric-key-operators","metabase.lib.filter.operator.operator_def","metabase.lib.filter.operator/location-operators","metabase.lib.filter.operator/temporal-operators","metabase.lib.filter.operator/coordinate-operators","metabase.lib.filter.operator/number-operators","metabase.lib.filter.operator/text-operators","metabase.lib.filter.operator/text-like-operators","metabase.lib.filter.operator/boolean-operators","metabase.lib.filter.operator/default-operators","metabase.lib.filter.operator/join-operators","cljs.core.assoc","metabase.lib.filter.operator/key-operators-for","column","pred__77598","expr__77599","metabase.lib.types.isa/field-type?","metabase.lib.filter.operator/filter-operators","pred__77601","expr__77602","metabase.lib.filter.operator/filter-operator-long-display-name","display-name-variant","G__77605","cljs.core/Keyword","js/Error","G__77607","metabase.shared.util.i18n/js-i18n","G__77608","G__77609","G__77610","G__77615","G__77622","G__77630","G__77635","G__77636","G__77637","G__77638","G__77641","G__77642","G__77644","G__77646","G__77647","metabase.lib.filter.operator/filter-operator-display-name","G__77648","metabase.lib.metadata.calculation/display-name-method","p__77649","map__77650","cljs.core/--destructure-map","cljs.core.get","_query","_stage-number","short-name","G__77651","metabase.lib.metadata.calculation/display-info-method","p__77654","map__77658","default","G__77664","metabase.util/qualified-name"],"sourcesContent":["(ns metabase.lib.filter.operator\n  (:require\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.filter :as lib.schema.filter]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util :as u]\n   [metabase.util.malli :as mu]))\n\n(mu/defn operator-def :- ::lib.schema.filter/operator\n  \"Get a filter operator definition for the MBQL filter with `tag`, e.g. `:=`. In some cases various tags have alternate\n  display names used for different situations e.g. for numbers vs temporal values; pass in the\n  `display-name-style` to choose a non-default display-name.\"\n  ([tag]\n   (operator-def tag :default))\n\n  ([tag display-name-style]\n   {:lib/type             :operator/filter\n    :short                tag\n    :display-name-variant display-name-style}))\n\n(def ^:private numeric-key-operators\n  [(operator-def :=)\n   (operator-def :!=)\n   (operator-def :>)\n   (operator-def :<)\n   (operator-def :between)\n   (operator-def :>=)\n   (operator-def :<=)\n   (operator-def :is-null :is-empty)\n   (operator-def :not-null :not-empty)])\n\n(def ^:private location-operators\n  [(operator-def :=)\n   (operator-def :!=)\n   (operator-def :is-empty)\n   (operator-def :not-empty)\n   (operator-def :contains)\n   (operator-def :does-not-contain)\n   (operator-def :starts-with)\n   (operator-def :ends-with)])\n\n(def ^:private temporal-operators\n  [(operator-def :!= :excludes)\n   (operator-def :=)\n   (operator-def :< :before)\n   (operator-def :> :after)\n   (operator-def :between)\n   (operator-def :is-null :is-empty)\n   (operator-def :not-null :not-empty)])\n\n(def ^:private coordinate-operators\n  [(operator-def :=)\n   (operator-def :!=)\n   (operator-def :inside)\n   (operator-def :>)\n   (operator-def :<)\n   (operator-def :between)\n   (operator-def :>=)\n   (operator-def :<=)])\n\n(def ^:private number-operators\n  [(operator-def := :equal-to)\n   (operator-def :!= :not-equal-to)\n   (operator-def :>)\n   (operator-def :<)\n   (operator-def :between)\n   (operator-def :>=)\n   (operator-def :<=)\n   (operator-def :is-null :is-empty)\n   (operator-def :not-null :not-empty)])\n\n(def ^:private text-operators\n  [(operator-def :=)\n   (operator-def :!=)\n   (operator-def :contains)\n   (operator-def :does-not-contain)\n   (operator-def :is-null)\n   (operator-def :not-null)\n   (operator-def :is-empty)\n   (operator-def :not-empty)\n   (operator-def :starts-with)\n   (operator-def :ends-with)])\n\n(def ^:private text-like-operators\n  [(operator-def :=)\n   (operator-def :!=)\n   (operator-def :is-null)\n   (operator-def :not-null)\n   (operator-def :is-empty)\n   (operator-def :not-empty)])\n\n(def ^:private boolean-operators\n  [(operator-def :=)\n   (operator-def :is-null :is-empty)\n   (operator-def :not-null :not-empty)])\n\n(def ^:private default-operators\n  [(operator-def :=)\n   (operator-def :!=)\n   (operator-def :is-null)\n   (operator-def :not-null)])\n\n(def join-operators\n  \"Operators that should be listed as options in join conditions.\"\n  [(assoc (operator-def :=) :default true)\n   (operator-def :>)\n   (operator-def :<)\n   (operator-def :>=)\n   (operator-def :<=)\n   (operator-def :!=)])\n\n(defn- key-operators-for [column]\n  (condp lib.types.isa/field-type? column\n    :metabase.lib.types.constants/string      text-operators\n    :metabase.lib.types.constants/string_like text-like-operators\n    ;; default\n    numeric-key-operators))\n\n(mu/defn filter-operators :- [:sequential ::lib.schema.filter/operator]\n  \"The list of available filter operators.\n   The order of operators is relevant for the front end.\n   There are slight differences between names and ordering for the different base types.\"\n  [column :- ::lib.schema.metadata/column]\n  ;; The order of these clauses is important since we want to match the most relevant type\n  ;; the order is different than `lib.types.isa/field-type` as filters need to operate\n  ;; on the effective-type rather than the semantic-type, eg boolean and number cannot become\n  ;; string if semantic type is type/Category\n  (condp lib.types.isa/field-type? column\n    :metabase.lib.types.constants/primary_key (key-operators-for column)\n    :metabase.lib.types.constants/foreign_key (key-operators-for column)\n    :metabase.lib.types.constants/location    location-operators\n    :metabase.lib.types.constants/temporal    temporal-operators\n    :metabase.lib.types.constants/coordinate  coordinate-operators\n    :metabase.lib.types.constants/number      number-operators\n    :metabase.lib.types.constants/boolean     boolean-operators\n    :metabase.lib.types.constants/string      text-operators\n    :metabase.lib.types.constants/string_like text-like-operators\n    ;; default\n    default-operators))\n\n(mu/defn ^:private filter-operator-long-display-name :- ::lib.schema.common/non-blank-string\n  [tag                  :- :keyword\n   display-name-variant :- :keyword]\n  (case tag\n    :=                (case display-name-variant\n                        :equal-to (i18n/tru \"Equal to\")\n                        :default  (i18n/tru \"Is\"))\n    :!=               (case display-name-variant\n                        :not-equal-to (i18n/tru \"Not equal to\")\n                        :excludes     (i18n/tru \"Excludes\")\n                        :default      (i18n/tru \"Is not\"))\n    :>                (case display-name-variant\n                        :after   (i18n/tru \"After\")\n                        :default (i18n/tru \"Greater than\"))\n    :<                (case display-name-variant\n                        :before  (i18n/tru \"Before\")\n                        :default (i18n/tru \"Less than\"))\n    :>=               (case display-name-variant\n                        :default (i18n/tru \"Greater than or equal to\"))\n    :<=               (case display-name-variant\n                        :default (i18n/tru \"Less than or equal to\"))\n    :between          (case display-name-variant\n                        :default (i18n/tru \"Between\"))\n    :is-null          (case display-name-variant\n                        :is-empty (i18n/tru \"Is empty\")\n                        :default  (i18n/tru \"Is null\"))\n    :not-null         (case display-name-variant\n                        :not-empty (i18n/tru \"Not empty\")\n                        :default   (i18n/tru \"Not null\"))\n    :is-empty         (case display-name-variant\n                        :default (i18n/tru \"Is empty\"))\n    :not-empty        (case display-name-variant\n                        :default (i18n/tru \"Not empty\"))\n    :contains         (case display-name-variant\n                        :default (i18n/tru \"Contains\"))\n    :does-not-contain (case display-name-variant\n                        :default (i18n/tru \"Does not contain\"))\n    :starts-with      (case display-name-variant\n                        :default (i18n/tru \"Starts with\"))\n    :ends-with        (case display-name-variant\n                        :default (i18n/tru \"Ends with\"))\n    :inside           (case display-name-variant\n                        :default (i18n/tru \"Inside\"))))\n\n(mu/defn ^:private filter-operator-display-name :- ::lib.schema.common/non-blank-string\n  [tag                  :- :keyword\n   display-name-variant :- :keyword]\n  (case tag\n    :=  \"=\"\n    :!= \"\u2260\"\n    :>  \">\"\n    :<  \"<\"\n    :>= \"\u2265\"\n    :<= \"\u2264\"\n    (filter-operator-long-display-name tag display-name-variant)))\n\n(defmethod lib.metadata.calculation/display-name-method :operator/filter\n  [_query _stage-number {short-name :short, :keys [display-name-variant]} display-name-style]\n  (case display-name-style\n    :default (filter-operator-display-name short-name display-name-variant)\n    :long    (filter-operator-long-display-name short-name display-name-variant)))\n\n(defmethod lib.metadata.calculation/display-info-method :operator/filter\n  [_query _stage-number {short-name :short, :keys [display-name-variant default]}]\n  (cond-> {:short-name        (u/qualified-name short-name)\n           :display-name      (filter-operator-display-name short-name display-name-variant)\n           :long-display-name (filter-operator-long-display-name short-name display-name-variant)}\n    default (assoc :default true)))\n"]}