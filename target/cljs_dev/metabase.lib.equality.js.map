{"version":3,"sources":["metabase/lib/equality.cljc"],"mappings":"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","names":["js/metabase","js/metabase.lib","js/metabase.lib.equality","js/metabase.lib.equality.=","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","cljs.core.get","fexpr__77822","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.equality/=","x","y","x-dispatch-value","metabase.lib.dispatch/dispatch-value","y-dispatch-value","cljs.core.not_EQ_","metabase.lib.hierarchy/hierarchy","_x","_y","metabase.lib.equality/relevant-keys-set","m","cljs.core.into","cljs.core.remove","k","cljs.core/qualified-keyword?","cljs.core/keys","m1","m2","m1-keys","m2-keys","cljs.core._EQ_","cljs.core/every?","xs","ys","and__5000__auto__","cljs.core/count","G__77829","vec__77831","seq__77832","cljs.core/seq","first__77833","cljs.core/first","cljs.core/next","G__77830","vec__77834","seq__77835","first__77836","vec__77837","seq__77838","first__77839","vec__77840","seq__77841","first__77842","more-x","more-y","or__5002__auto__","cljs.core/empty?","metabase.lib.equality/*side->uuid->index*","metabase.lib.equality/aggregation-uuid->index","stage","cljs.core.map_indexed","p__77843","vec__77844","cljs.core.nth","map__77847","cljs.core/--destructure-map","idx","_tag","ag-uuid","*side->uuid->index*-orig-val__77848","*side->uuid->index*-temp-val__77849","fexpr__77850","cljs.core/get-method","p__77851","p__77852","vec__77853","vec__77856","x-tag","x-opts","x-uuid","y-tag","y-opts","y-uuid","cljs.core.get_in","cljs.core/map?","fexpr__77859","cljs.core/sequential?","fexpr__77860","metabase.lib.equality/resolve-field-id","query","stage-number","field-id","cljs.core.merge","metabase.lib.util/first-stage?","temp__5804__auto__","card-id","metabase.lib.util/source-card-id","card-metadata","metabase.lib.card/saved-question-metadata","p1__77861#","medley.core.find_first","e77862","metabase.lib.metadata/field","_","metabase.lib.equality/column-join-alias","column","cljs.core.some_fn","p__77863","vec__77864","map__77867","metabase.lib.equality/matching-join?","_ref-kind","join-alias","source-field","_ref-id","p__77870","vec__77871","metabase.lib.equality/plausible-matches-for-name","_opts","ref-name","a-ref","columns","cljs.core/not-empty","p1__77868#","cljs.core.filter","p1__77869#","p__77876","vec__77877","metabase.lib.equality/plausible-matches-for-id","opts","ref-id","generous?","p1__77874#","cljs.core/not","G__77881","fexpr__77880","p1__77875#","metabase.lib.equality/ambiguous-match-error","cljs.core.ex_info","metabase.lib.equality/expression-column?","metabase.lib.equality/disambiguate-matches-dislike-field-refs-to-expressions","non-exprs","js/console.warn","metabase.lib.equality/disambiguate-matches-find-match-with-same-temporal-bucket","temporal-bucket","metabase.lib.temporal-bucket/raw-temporal-bucket","matching-columns","col","metabase.lib.equality/disambiguate-matches-prefer-explicit","temp__5802__auto__","no-implicit","metabase.lib.equality/disambiguate-matches-no-alias","no-alias","p1__77883#","G__77885","fexpr__77884","metabase.lib.equality/disambiguate-matches","map__77887","metabase.lib.options/options","matches","p1__77886#","metabase.lib.equality/FindMatchingColumnOptions","p__77890","p__77891","vec__77895","map__77898","metabase.lib.equality/find-matching-column","G__77892","G__77893","G__77894","ref-kind","G__77899","cljs.core/Keyword","p1__77888#","plausible","G__77900","a-ref-or-column","G__77901","G__77902","G__77903","G__77904","G__77905","vec__77906","ref-opts","metabase.lib.util/clause?","metabase.lib.ref/ref","p1__77889#","no-id-columns","resolved","G__77909","G__77910","G__77911","cljs.core.assoc","metabase.lib.options/update-options","cljs.core.partial","cljs.core/merge","p__77912","vec__77913","metabase.lib.equality/ref-id-or-name","id-or-name","metabase.lib.equality/find-matching-ref","refs","ref-tails","cljs.core/group-by","G__77916","G__77917","metabase.lib.equality/find-column-indexes-for-refs","needles","haystack","by-column","index","iter__5480__auto__","s__77919","cljs.core/LazySeq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","b__77921","cljs.core/chunk-buffer","i__77920","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__77918","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","needle","matched","metabase.lib.equality.find_matching_column","metabase.lib.equality/find-column-for-legacy-ref","legacy-ref","metadatas","metabase.lib.convert.legacy_ref__GT_pMBQL","var_args","G__77925","metabase.lib.equality/mark-selected-columns","js/Error","cols","selected-columns-or-refs","metabase.lib.equality.mark_selected_columns","selected-refs","cljs.core.mapv","matching-selected-cols","p1__77922#","cljs.core.map","p1__77923#","cljs.core/contains?","metabase.lib.equality/matching-column-sets?","matching","p1__77926#","p1__77927#","cljs.core/vals","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.lib.equality\n  \"Logic for determining whether two pMBQL queries are equal.\"\n  (:refer-clojure :exclude [=])\n  (:require\n   [medley.core :as m]\n   [metabase.lib.card :as lib.card]\n   [metabase.lib.convert :as lib.convert]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.ref :as lib.ref]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.id :as lib.schema.id]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.lib.schema.ref :as lib.schema.ref]\n   [metabase.lib.temporal-bucket :as lib.temporal-bucket]\n   [metabase.lib.util :as lib.util]\n   [metabase.util.malli :as mu]\n   #?@(:clj ([metabase.util.log :as log]))))\n\n(defmulti =\n  \"Determine whether two already-normalized pMBQL maps, clauses, or other sorts of expressions are equal. The basic rule\n  is that two things are considered equal if they are [[clojure.core/=]], or, if they are both maps, if they\n  are [[clojure.core/=]] if you ignore all qualified keyword keys besides `:lib/type`.\"\n  {:arglists '([x y])}\n  ;; two things with different dispatch values (for maps, the `:lib/type` key; for MBQL clauses, the tag, and for\n  ;; everything else, the `:dispatch-type/*` key) can't be equal.\n  (fn [x y]\n    (let [x-dispatch-value (lib.dispatch/dispatch-value x)\n          y-dispatch-value (lib.dispatch/dispatch-value y)]\n      (if (not= x-dispatch-value y-dispatch-value)\n        ::different-dispatch-values\n        x-dispatch-value)))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod = ::different-dispatch-values\n  [_x _y]\n  false)\n\n(defn- relevant-keys-set\n  \"Set of keys in a map that we consider relevant for [[=]] purposes.\"\n  [m]\n  (into #{}\n        (remove (fn [k]\n                  (and (qualified-keyword? k)\n                       (not= k :lib/type))))\n        (keys m)))\n\n(defmethod = :dispatch-type/map\n  [m1 m2]\n  (let [m1-keys (relevant-keys-set m1)\n        m2-keys (relevant-keys-set m2)]\n    (and (clojure.core/= m1-keys m2-keys)\n         (every? (fn [k]\n                   (= (get m1 k)\n                      (get m2 k)))\n                 m1-keys))))\n\n(defmethod = :dispatch-type/sequential\n  [xs ys]\n  (and (clojure.core/= (count xs) (count ys))\n       (loop [[x & more-x] xs, [y & more-y] ys]\n         (and (= x y)\n              (or (empty? more-x)\n                  (recur more-x more-y))))))\n\n(def ^:private ^:dynamic *side->uuid->index* nil)\n\n(defn- aggregation-uuid->index\n  [stage]\n  (into {}\n        (map-indexed (fn [idx [_tag {ag-uuid :lib/uuid}]]\n                       [ag-uuid idx]))\n        (:aggregation stage)))\n\n(defmethod = :mbql.stage/mbql\n  [x y]\n  (binding [*side->uuid->index* {:left (aggregation-uuid->index x)\n                                 :right (aggregation-uuid->index y)}]\n    ((get-method = :dispatch-type/map) x y)))\n\n(defmethod = :aggregation\n  [[x-tag x-opts x-uuid :as x] [y-tag y-opts y-uuid :as y]]\n  (and (clojure.core/= 3 (count x) (count y))\n       (clojure.core/= x-tag y-tag)\n       (= x-opts y-opts)\n       ;; If nil, it means we aren't comparing a stage, so just compare the uuid directly\n       (if *side->uuid->index*\n         (clojure.core/= (get-in *side->uuid->index* [:left x-uuid] ::no-left)\n                         (get-in *side->uuid->index* [:right y-uuid] ::no-right))\n         (clojure.core/= x-uuid y-uuid))))\n\n;;; if we've gotten here we at least know the dispatch values for `x` and `y` are the same, which means the types will\n;;; be the same.\n(defmethod = :default\n  [x y]\n  (cond\n    (map? x)        ((get-method = :dispatch-type/map) x y)\n    (sequential? x) ((get-method = :dispatch-type/sequential) x y)\n    :else           (clojure.core/= x y)))\n\n(mu/defn resolve-field-id :- ::lib.schema.metadata/column\n  \"Integer Field ID: get metadata from the metadata provider. If this is the first stage of the query, merge in\n  Saved Question metadata if available.\n\n  This doesn't really have a good home. It's used here and by [[metabase.lib.field]], but because it depends on eg.\n  [[metabase.lib.card]] and [[metabase.lib.convert]] it can't go in [[metabase.lib.metadata.calculation]].\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   field-id     :- ::lib.schema.id/field]\n  (merge\n   (when (lib.util/first-stage? query stage-number)\n     (when-let [card-id (lib.util/source-card-id query)]\n       (when-let [card-metadata (lib.card/saved-question-metadata query card-id)]\n         (m/find-first #(clojure.core/= (:id %) field-id)\n                       card-metadata))))\n   (try\n     (lib.metadata/field query field-id)\n     (catch #?(:clj Throwable :cljs :default) _\n       nil))))\n\n(mu/defn ^:private column-join-alias :- [:maybe :string]\n  [column :- ::lib.schema.metadata/column]\n  ((some-fn :metabase.lib.join/join-alias :source-alias) column))\n\n(mu/defn ^:private matching-join? :- :boolean\n  [[_ref-kind {:keys [join-alias source-field]} _ref-id] :- ::lib.schema.ref/ref\n   column                                                :- ::lib.schema.metadata/column]\n  ;; If the ref has a source-field, and it matches the column's :fk-field-id then this is an implicitly joined field.\n  ;; Implicitly joined columns have :source-alias (\"PRODUCTS__via__PRODUCT_ID\") but the refs don't have any join alias.\n  (or (and source-field\n           (clojure.core/= source-field (:fk-field-id column)))\n      ;; If it's not an implicit join, then either the join aliases must match for an explicit join, or both be nil for\n      ;; an own column.\n      (clojure.core/= (column-join-alias column) join-alias)))\n\n(mu/defn ^:private plausible-matches-for-name :- [:sequential ::lib.schema.metadata/column]\n  [[_ref-kind _opts ref-name :as a-ref] :- ::lib.schema.ref/ref\n   columns                              :- [:sequential ::lib.schema.metadata/column]]\n  (or (not-empty (filter #(and (clojure.core/= (:lib/desired-column-alias %) ref-name)\n                               (matching-join? a-ref %))\n                         columns))\n      (filter #(and (clojure.core/= (:name %) ref-name)\n                    (matching-join? a-ref %))\n              columns)))\n\n(mu/defn ^:private plausible-matches-for-id :- [:sequential ::lib.schema.metadata/column]\n  [[_ref-kind opts ref-id :as a-ref] :- ::lib.schema.ref/ref\n   columns                           :- [:sequential ::lib.schema.metadata/column]\n   generous?                         :- [:maybe :boolean]]\n  (or (not-empty (filter #(and (clojure.core/= (:id %) ref-id)\n                               ;; TODO: If the target ref has no join-alias, AND the source is fields or card, the join\n                               ;; alias on the column can be ignored. QP can set it when it shouldn't. See #33972.\n                               (or (and (not (:join-alias opts))\n                                        (#{:source/fields :source/card} (:lib/source %)))\n                                   (matching-join? a-ref %)))\n                         columns))\n      (when generous?\n        (not-empty (filter #(clojure.core/= (:id %) ref-id) columns)))\n      []))\n\n(defn- ambiguous-match-error [a-ref columns]\n  (ex-info \"Ambiguous match! Implement more logic in disambiguate-matches.\"\n           {:ref a-ref\n            :columns columns}))\n\n(mu/defn ^:private expression-column? [column]\n  (or (= (:lib/source column) :source/expressions)\n      (:lib/expression-name column)))\n\n(mu/defn ^:private disambiguate-matches-dislike-field-refs-to-expressions :- [:maybe ::lib.schema.metadata/column]\n  \"If a custom column is a simple wrapper for a field, that column gets `:id`, `:table_id`, etc.\n  A custom column should get a ref like `[:expression {} \\\"expr name\\\"]`, not `[:field {} 17]`.\n  If we got a `:field` ref, prefer matches which are not `:lib/source :source/expressions`.\"\n  [a-ref   :- ::lib.schema.ref/ref\n   columns :- [:sequential ::lib.schema.metadata/column]]\n  (or (when (= (first a-ref) :field)\n        (when-let [non-exprs (not-empty (remove expression-column? columns))]\n          (when-not (next non-exprs)\n            (first non-exprs))))\n      ;; In all other cases, this is an ambiguous match.\n      #_(throw (ambiguous-match-error a-ref columns))\n      #?(:cljs (js/console.warn (ambiguous-match-error a-ref columns))\n         :clj  (log/warn (ambiguous-match-error a-ref columns)))))\n\n(mu/defn ^:private disambiguate-matches-find-match-with-same-temporal-bucket :- [:maybe ::lib.schema.metadata/column]\n  \"If there are multiple matching columns and `a-ref` has a temporal bucket, check if only one column has that same\n  unit.\"\n  [a-ref   :- ::lib.schema.ref/ref\n   columns :- [:sequential {:min 2} ::lib.schema.metadata/column]]\n  (or (when-let [temporal-bucket (lib.temporal-bucket/raw-temporal-bucket a-ref)]\n        (let [matching-columns (filter (fn [col]\n                                         (= (lib.temporal-bucket/raw-temporal-bucket col) temporal-bucket))\n                                       columns)]\n          (when (= (count matching-columns) 1)\n            (first matching-columns))))\n      (disambiguate-matches-dislike-field-refs-to-expressions a-ref columns)))\n\n(mu/defn ^:private disambiguate-matches-prefer-explicit :- [:maybe ::lib.schema.metadata/column]\n  \"Prefers table-default or explicitly joined columns over implicitly joinable ones.\"\n  [a-ref   :- ::lib.schema.ref/ref\n   columns :- [:sequential ::lib.schema.metadata/column]]\n  (if-let [no-implicit (not-empty (remove :fk-field-id columns))]\n    (if-not (next no-implicit)\n      (first no-implicit)\n      (disambiguate-matches-find-match-with-same-temporal-bucket a-ref no-implicit))\n    nil))\n\n(mu/defn ^:private disambiguate-matches-no-alias :- [:maybe ::lib.schema.metadata/column]\n  [a-ref   :- ::lib.schema.ref/ref\n   columns :- [:sequential ::lib.schema.metadata/column]]\n  ;; a-ref without :join-alias - if exactly one column has no :source-alias, that's the match.\n  ;; ignore the source alias on columns with :source/card or :source/fields\n  (if-let [no-alias (not-empty (remove #(and (column-join-alias %)\n                                             (not (#{:source/card} (:lib/source %))))\n                                       columns))]\n    ;; At least 1 matching column with no :source-alias.\n    (if-not (next no-alias)\n      (first no-alias)\n      ;; More than 1, keep digging.\n      (disambiguate-matches-prefer-explicit a-ref no-alias))\n    ;; No columns are missing :source-alias - pass them all to the next stage.\n    ;; TODO: I'm not certain this one is sound, but it's necessary to make `lib.join/select-home-column` work as\n    ;; written. If this case causes issues, that logic may need rewriting.\n    nil))\n\n(mu/defn ^:private disambiguate-matches :- [:maybe ::lib.schema.metadata/column]\n  [a-ref   :- ::lib.schema.ref/ref\n   columns :- [:sequential ::lib.schema.metadata/column]]\n  (let [{:keys [join-alias]} (lib.options/options a-ref)]\n    (if join-alias\n      ;; a-ref has a :join-alias, match on that. Return nil if nothing matches.\n      (when-let [matches (not-empty (filter #(clojure.core/= (column-join-alias %) join-alias) columns))]\n        (if-not (next matches)\n          (first matches)\n          (#?(:cljs js/console.warn :clj log/warn)\n           \"Multiple plausible matches with the same :join-alias - more disambiguation needed\"\n           {:ref     a-ref\n            :matches matches})\n          #_(throw (ex-info \"Multiple plausible matches with the same :join-alias - more disambiguation needed\"\n                          {:ref     a-ref\n                           :matches matches}))))\n      (disambiguate-matches-no-alias a-ref columns))))\n\n(def ^:private FindMatchingColumnOptions\n  [:map [:generous? {:optional true} :boolean]])\n\n(mu/defn find-matching-column :- [:maybe ::lib.schema.metadata/column]\n  \"Given `a-ref-or-column` and a list of `columns`, finds the column that best matches this ref or column.\n\n  Matching is based on finding the basically plausible matches first. There is often zero or one plausible matches, and\n  this can return quickly.\n\n  If there are multiple plausible matches, they are disambiguated by the most important extra included in the `ref`.\n  (`:join-alias` first, then `:temporal-unit`, etc.)\n\n  - Integer IDs in the `ref` are matched by ID; this usually is unambiguous.\n    - If there are multiple joins on one table (including possible implicit joins), check `:join-alias` next.\n      - If `a-ref` has a `:join-alias`, only a column which matches it can be the match, and it should be unique.\n      - If `a-ref` doesn't have a `:join-alias`, prefer the column with no `:join-alias`, and prefer already selected\n        columns over implicitly joinable ones.\n    - There may be broken cases where the ref has an ID but the column does not. Therefore the ID must be resolved to a\n      name or `:lib/desired-column-alias` and matched that way.\n      - `query` and `stage-number` are required for this case, since they're needed to resolve the correct name.\n      - Columns with `:id` set are dropped to prevent them matching. (If they didn't match by `:id` above they shouldn't\n        match by name due to a coincidence of column names in different tables.)\n  - String IDs are checked against `:lib/desired-column-alias` first.\n    - If that doesn't match any columns, `:name` is compared next.\n    - The same disambiguation (by `:join-alias` etc.) is applied if there are multiple plausible matches.\n\n  Returns the matching column, or nil if no match is found.\"\n  ([a-ref columns]\n   (find-matching-column a-ref columns {}))\n\n  ([[ref-kind _opts ref-id :as a-ref] :- ::lib.schema.ref/ref\n    columns                           :- [:sequential ::lib.schema.metadata/column]\n    {:keys [generous?]}               :- FindMatchingColumnOptions]\n   (case ref-kind\n     ;; Aggregations are referenced by the UUID of the column being aggregated.\n     :aggregation  (m/find-first #(and (clojure.core/= (:lib/source %) :source/aggregations)\n                                       (clojure.core/= (:lib/source-uuid %) ref-id))\n                                 columns)\n     ;; Expressions are referenced by name; fields by ID or name.\n     (:expression\n       :field)     (let [plausible (if (string? ref-id)\n                                     (plausible-matches-for-name a-ref columns)\n                                     (plausible-matches-for-id   a-ref columns generous?))]\n                     (case (count plausible)\n                       0 nil\n                       1 (first plausible)\n                       (disambiguate-matches a-ref plausible)))\n     (throw (ex-info \"Unknown type of ref\" {:ref a-ref}))))\n\n  ([query stage-number a-ref-or-column columns]\n   (find-matching-column query stage-number a-ref-or-column columns {}))\n\n  ([query           :- [:maybe ::lib.schema/query]\n    stage-number    :- :int\n    a-ref-or-column :- [:or ::lib.schema.metadata/column ::lib.schema.ref/ref]\n    columns         :- [:sequential ::lib.schema.metadata/column]\n    opts            :- FindMatchingColumnOptions]\n   (let [[ref-kind ref-opts ref-id :as a-ref] (if (lib.util/clause? a-ref-or-column)\n                                                a-ref-or-column\n                                                (lib.ref/ref a-ref-or-column))]\n     (or (find-matching-column a-ref columns opts)\n         ;; Aggregations are matched by `:source-uuid` but if we're comparing old columns to new refs or vice versa\n         ;; the random UUIDs won't match up. This falls back to the `:lib/source-name` option on aggregation refs, if\n         ;; present.\n         (when (and (= ref-kind :aggregation)\n                    (:lib/source-name ref-opts))\n           (m/find-first #(and (= (:lib/source %) :source/aggregations)\n                               (= (:name %) (:lib/source-name ref-opts)))\n                         columns))\n         ;; We failed to match by ID, so try again with the column's name. Any columns with `:id` set are dropped.\n         ;; Why? Suppose there are two CREATED_AT columns in play - if one has an :id and it failed to match above, then\n         ;; it certainly shouldn't match by name just because of the coincidence of column names!\n         (when (and query (number? ref-id))\n           (when-let [no-id-columns (not-empty (remove :id columns))]\n             (when-let [resolved (if (lib.util/clause? a-ref-or-column)\n                                   (resolve-field-id query stage-number ref-id)\n                                   a-ref-or-column)]\n               (find-matching-column (-> (assoc a-ref 2 (or (:lib/desired-column-alias resolved)\n                                                            (:name resolved)))\n                                         ;; make sure the :field ref has a `:base-type`, it's against the rules for a\n                                         ;; nominal :field ref not to have a base-type -- this can fail schema\n                                         ;; validation if it's missing in the Field ID ref we generate the nominal ref\n                                         ;; from.\n                                         (lib.options/update-options (partial merge {:base-type :type/*})))\n                                     no-id-columns\n                                     opts))))))))\n\n(defn- ref-id-or-name [[_ref-kind _opts id-or-name]]\n  id-or-name)\n\n(mu/defn find-matching-ref :- [:maybe ::lib.schema.ref/ref]\n  \"Given `column` and a list of `refs`, finds the ref that best matches this column.\n\n  Throws if there are multiple, ambiguous matches.\n\n  Returns the matching ref, or nil if no plausible matches are found.\"\n  [column :- ::lib.schema.metadata/column\n   refs   :- [:sequential ::lib.schema.ref/ref]]\n  (let [ref-tails (group-by ref-id-or-name refs)\n        matches   (or (some->> column :lib/source-uuid (get ref-tails) not-empty)\n                      (not-empty (get ref-tails (:id column)))\n                      (not-empty (get ref-tails (:lib/desired-column-alias column)))\n                      (get ref-tails (:name column))\n                      [])]\n    (case (count matches)\n      0 nil\n      1 (first matches)\n      (throw (ex-info \"Ambiguous match: given column matches multiple refs\"\n                      {:column        column\n                       :matching-refs matches})))))\n\n(mu/defn find-column-indexes-for-refs :- [:sequential :int]\n  \"Given a list `haystack` of columns or refs, and a list `needles` of refs to searc for, this returns a list parallel\n  to `needles` with the corresponding index into the `haystack`, or -1 if not found.\n\n  DISCOURAGED: This is intended for use only by [[metabase.lib.js/find-column-indexes-from-legacy-refs]].\n  Other MLv2 code should use [[find-matching-column]] if the `haystack` is columns, or\n  [[find-matching-ref]] if it's refs.\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   needles      :- [:sequential ::lib.schema.ref/ref]\n   haystack     :- [:sequential ::lib.schema.metadata/column]]\n  (let [by-column (into {}\n                        (map-indexed (fn [index column]\n                                       [column index]))\n                        haystack)]\n    (for [needle needles\n          :let [matched (find-matching-column query stage-number needle haystack)]]\n      (get by-column matched -1))))\n\n;; TODO: Refactor this away. Handle legacy refs in `lib.js`, then call [[find-matching-column]] directly.\n(mu/defn find-column-for-legacy-ref :- [:maybe ::lib.schema.metadata/column]\n  \"Like [[find-matching-column]], but takes a legacy MBQL reference. The name here is for consistency with other\n  FE names for similar functions.\"\n  ([query legacy-ref metadatas]\n   (find-column-for-legacy-ref query -1 legacy-ref metadatas))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    legacy-ref   :- :some\n    metadatas    :- [:maybe [:sequential ::lib.schema.metadata/column]]]\n   (find-matching-column query stage-number (lib.convert/legacy-ref->pMBQL query stage-number legacy-ref) metadatas)))\n\n(defn mark-selected-columns\n  \"Mark `columns` as `:selected?` if they appear in `selected-columns-or-refs`. Uses fuzzy matching with\n  [[find-matching-column]].\n\n  Example usage:\n\n    ;; example (simplified) implementation of [[metabase.lib.field/fieldable-columns]]\n    ;;\n    ;; return (visibile-columns query), but if any of those appear in `:fields`, mark then `:selected?`\n    (mark-selected-columns (visible-columns query) (:fields stage))\"\n  ([cols selected-columns-or-refs]\n   (mark-selected-columns nil -1 cols selected-columns-or-refs))\n\n  ([query stage-number cols selected-columns-or-refs]\n   (when (seq cols)\n     (let [selected-refs          (mapv lib.ref/ref selected-columns-or-refs)\n           matching-selected-cols (into #{}\n                                        (map #(find-matching-column query stage-number % cols))\n                                        selected-refs)]\n       (mapv #(assoc % :selected? (contains? matching-selected-cols %)) cols)))))\n\n(mu/defn matching-column-sets? :- :boolean\n  \"Returns true if the provided `refs` is the same set as the provided `columns`.\n\n  Order is ignored. Only returns true if each of the `refs` matches a column, and each of the `columns` is matched by\n  exactly 1 of the `refs`. (A bijection, in math terms.)\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   refs         :- [:sequential ::lib.schema.ref/ref]\n   columns      :- [:sequential ::lib.schema.metadata/column]]\n  ;; The lists match iff:\n  ;; - Each ref matches a column; AND\n  ;; - Each column was matched by exactly one ref\n  ;; So we return true if nil is not a key in the matching, AND all vals in the matching have length 1,\n  ;; AND the matching has as many elements as `columns` (usually the list of columns returned by default).\n  (and (= (count refs) (count columns))\n       (let [matching (group-by #(find-matching-column query stage-number % columns) refs)]\n         (and (not (contains? matching nil))\n              (= (count matching) (count columns))\n              (every? #(= (count %) 1) (vals matching))))))\n"]}