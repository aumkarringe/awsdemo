{"version":3,"sources":["metabase/lib/drill_thru/summarize_column.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;kEAAA,6FAAAA,/JAASI,4IAGNC,MACAC;AAJH,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;aAAA,AAAAE,4CAAAF,eAAA,pEAKWM;YALX,AAAAJ,4CAAAF,eAAA,nEAKkBO;AALlB,AAME,oBAAM,iBAAAC,oBAAK,AAACC,iDAAkCL,MAAMC;AAA9C,AAAA,GAAAG;AAAA,IAAAA,wBACKF;AADL,AAAA,oBAAAE;AAAA,8BAAA,6DAAA,lFAEK,UAAA,TAAMD,sBACN,GAAK,AAACG,yCAA0BJ,iBAChC,oJAAA,pJAACK,gDAAK,AAAA,4FAAaL,+FACnB,AAACM,cAAI,AAACC,6CAA8BT,MAAMC,aAAaC;;AAL5DE;;;AAAAA;;;AAAN,AAOE,IAAMM,kBAAgB,+CAAA,mFAAA,lIAACC,wMACO,kDAAA,AAAA,mFAAA,kDAAA,0DAAA,/OAAM,AAACC,uCAAwBV;AAD7D,AAAA,kDAAA,0DAAA,6GAAA,qDAAA,gGAAA,gEAAA,PAKiBA,6EACAQ;;AAbnB;;;AAeF,AAAAG,kGAAA,gGAAA,gCAAAC,rBACGE,OAAOC;AADV,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAAlB,4BAAAkB;mBAAA,AAAAjB,4CAAAiB,eAAA,1EACgCG;AADhC,AAAA,kDAAA,qDAAA,gGAAA,sEAGiBA;;AAEjB,AAAAC,6FAAA,gGAAA,8BAAAC,nBACGpB,MACAC,sBAEAsB;AAJH,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAAxB,4BAAAwB;kBAAAA,dAGuBC;aAHvB,AAAAxB,4CAAAuB,eAAA,pEAGWnB;AAHX,AASE,IAAMsB,iBAAe,iBAAAC,WAAM,AAACG,gDAAQL;IAAfE,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACYI;;;KADZ;AAEYC;;;KAFZ;AAGYC;;;;AAHZ,MAAA,KAAAJ,MAAA,CAAA,mEAAAF;;;;AAArB,AAIE,OAACO,iEAA0BhC,MAAMC,aAAa,CAACuB,+CAAAA,uDAAAA,VAAetB,mCAAAA","names":["p__79413","map__79414","cljs.core/--destructure-map","cljs.core.get","metabase.lib.drill-thru.summarize-column/summarize-column-drill","query","stage-number","column","value","and__5000__auto__","metabase.lib.drill-thru.common/mbql-stage?","metabase.lib.types.isa/structured?","cljs.core.not_EQ_","cljs.core/not","metabase.lib.breakout/breakout-column?","aggregation-ops","cljs.core.concat","metabase.lib.types.isa/summable?","metabase.lib.drill-thru.common/drill-thru-info-method","p__79415","map__79416","_query","_stage-number","aggregations","metabase.lib.drill-thru.common/drill-thru-method","p__79417","map__79418","_drill-thru","aggregation","aggregation-fn","G__79419","cljs.core/Keyword","js/Error","cljs.core.keyword","metabase.lib.aggregation/distinct","metabase.lib.aggregation/sum","metabase.lib.aggregation/avg","metabase.lib.aggregation.aggregate"],"sourcesContent":["(ns metabase.lib.drill-thru.summarize-column\n  \"Adds an aggregation clause based on the selected column. Could be either `sum`, `avg`, or `distinct`.\n\n  Entry points:\n\n  - Column header\n\n  Requirements:\n\n  - No aggregation or breakout clauses in the query\n\n  - Return operators that are compatible with the column. For `Summable` columns, all 3 are supported. For other\n    columns only `distinct`.\n\n  Query transformation:\n\n  - Add an aggregation clause with the selected operator\n\n  Question transformation:\n\n  - Set default display\"\n  (:require\n   [metabase.lib.aggregation :as lib.aggregation]\n   [metabase.lib.breakout :as lib.breakout]\n   [metabase.lib.drill-thru.common :as lib.drill-thru.common]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.drill-thru :as lib.schema.drill-thru]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.util.malli :as mu]))\n\n(mu/defn summarize-column-drill :- [:maybe ::lib.schema.drill-thru/drill-thru.summarize-column]\n  \"A set of possible aggregations that can summarize this column: distinct values, sum, average.\n  Separate from [[summarize-column-by-time-drill]] which breaks out a column over time.\"\n  [query                  :- ::lib.schema/query\n   stage-number           :- :int\n   {:keys [column value]} :- ::lib.schema.drill-thru/context]\n  (when (and (lib.drill-thru.common/mbql-stage? query stage-number)\n             column\n             (nil? value)\n             (not (lib.types.isa/structured? column))\n             (not= (:lib/source column) :source/aggregations)\n             (not (lib.breakout/breakout-column? query stage-number column)))\n    ;; I'm not really super clear on how the FE is supposed to be able to display these.\n    (let [aggregation-ops (concat [:distinct]\n                                  (when (lib.types.isa/summable? column)\n                                    [:sum :avg]))]\n      {:lib/type     :metabase.lib.drill-thru/drill-thru\n       :type         :drill-thru/summarize-column\n       :column       column\n       :aggregations aggregation-ops})))\n\n(defmethod lib.drill-thru.common/drill-thru-info-method :drill-thru/summarize-column\n  [_query _stage-number {:keys [aggregations]}]\n  {:type         :drill-thru/summarize-column\n   :aggregations aggregations})\n\n(mu/defmethod lib.drill-thru.common/drill-thru-method :drill-thru/summarize-column :- ::lib.schema/query\n  [query                            :- ::lib.schema/query\n   stage-number                     :- :int\n   {:keys [column] :as _drill-thru} :- ::lib.schema.drill-thru/drill-thru.summarize-column\n   aggregation                      :- [:or\n                                        ::lib.schema.drill-thru/drill-thru.summarize-column.aggregation-type\n                                        ;; I guess we'll be ok with strings too for now.\n                                        [:enum \"distinct\" \"sum\" \"avg\"]]]\n  ;; TODO: The original FE code for this does `setDefaultDisplay` as well.\n  (let [aggregation-fn (case (keyword aggregation)\n                         :distinct lib.aggregation/distinct\n                         :sum      lib.aggregation/sum\n                         :avg      lib.aggregation/avg)]\n    (lib.aggregation/aggregate query stage-number (aggregation-fn column))))\n"]}