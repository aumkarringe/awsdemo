var $CLJS = require("./cljs_env");
var $jscomp = $CLJS.$jscomp;
var COMPILED = false;
require("./cljs.core.js");
require("./clojure.set.js");
require("./malli.core.js");
require("./malli.error.js");
require("./metabase.legacy_mbql.schema.helpers.js");
require("./metabase.legacy_mbql.schema.macros.js");
require("./metabase.lib.schema.actions.js");
require("./metabase.lib.schema.binning.js");
require("./metabase.lib.schema.common.js");
require("./metabase.lib.schema.expression.temporal.js");
require("./metabase.lib.schema.expression.window.js");
require("./metabase.lib.schema.id.js");
require("./metabase.lib.schema.info.js");
require("./metabase.lib.schema.literal.js");
require("./metabase.lib.schema.template_tag.js");
require("./metabase.shared.util.i18n.js");
require("./metabase.util.malli.registry.js");
var cognitect=$CLJS.cognitect || ($CLJS.cognitect = {});
var weavejester=$CLJS.weavejester || ($CLJS.weavejester = {});
var borkdude=$CLJS.borkdude || ($CLJS.borkdude = {});
var module$shadow_js_shim_module$ttag=$CLJS.module$shadow_js_shim_module$ttag || ($CLJS.module$shadow_js_shim_module$ttag = {});
var clojure=$CLJS.clojure || ($CLJS.clojure = {});
var module$shadow_js_shim_module$moment_timezone=$CLJS.module$shadow_js_shim_module$moment_timezone || ($CLJS.module$shadow_js_shim_module$moment_timezone = {});
var module$shadow_js_shim_module$moment=$CLJS.module$shadow_js_shim_module$moment || ($CLJS.module$shadow_js_shim_module$moment = {});
var tailrecursion=$CLJS.tailrecursion || ($CLJS.tailrecursion = {});
var module$shadow_js_shim_module$crc_32=$CLJS.module$shadow_js_shim_module$crc_32 || ($CLJS.module$shadow_js_shim_module$crc_32 = {});
var devtools=$CLJS.devtools || ($CLJS.devtools = {});
var cljs=$CLJS.cljs || ($CLJS.cljs = {});
var inflections=$CLJS.inflections || ($CLJS.inflections = {});
var net=$CLJS.net || ($CLJS.net = {});
var shadow=$CLJS.shadow || ($CLJS.shadow = {});
var goog=$CLJS.goog || ($CLJS.goog = {});
var camel_snake_kebab=$CLJS.camel_snake_kebab || ($CLJS.camel_snake_kebab = {});
var flatland=$CLJS.flatland || ($CLJS.flatland = {});
var lambdaisland=$CLJS.lambdaisland || ($CLJS.lambdaisland = {});
var medley=$CLJS.medley || ($CLJS.medley = {});
var no=$CLJS.no || ($CLJS.no = {});
var metabase=$CLJS.metabase || ($CLJS.metabase = {});
var malli=$CLJS.malli || ($CLJS.malli = {});
var com=$CLJS.com || ($CLJS.com = {});

$CLJS.SHADOW_ENV.setLoaded("metabase.legacy_mbql.schema.js");

goog.provide('metabase.legacy_mbql.schema');
metabase.legacy_mbql.schema.PositiveInt = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("doc","message","doc/message",-406025466),"Must be a positive integer."], null),cljs.core.pos_int_QMARK_], null);
/**
 * Set of valid units for bucketing or comparing against a *date* Field.
 */
metabase.legacy_mbql.schema.date_bucketing_units = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [new cljs.core.Keyword(null,"quarter","quarter",-508147616),null,new cljs.core.Keyword(null,"day","day",-274800446),null,new cljs.core.Keyword(null,"week","week",-1326473278),null,new cljs.core.Keyword(null,"default","default",-1987822328),null,new cljs.core.Keyword(null,"day-of-week","day-of-week",1639326729),null,new cljs.core.Keyword(null,"month","month",-1960248533),null,new cljs.core.Keyword(null,"month-of-year","month-of-year",760756492),null,new cljs.core.Keyword(null,"day-of-month","day-of-month",-1096650288),null,new cljs.core.Keyword(null,"year","year",335913393),null,new cljs.core.Keyword(null,"day-of-year","day-of-year",478600113),null,new cljs.core.Keyword(null,"week-of-year","week-of-year",-910114435),null,new cljs.core.Keyword(null,"quarter-of-year","quarter-of-year",-472803491),null], null), null);
/**
 * Set of valid units for bucketing or comparing against a *time* Field.
 */
metabase.legacy_mbql.schema.time_bucketing_units = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,"hour","hour",-555989214),null,new cljs.core.Keyword(null,"second","second",-444702010),null,new cljs.core.Keyword(null,"default","default",-1987822328),null,new cljs.core.Keyword(null,"hour-of-day","hour-of-day",2086777099),null,new cljs.core.Keyword(null,"millisecond","millisecond",-540123566),null,new cljs.core.Keyword(null,"minute-of-hour","minute-of-hour",1903220478),null,new cljs.core.Keyword(null,"minute","minute",-642875969),null], null), null);
/**
 * Set of valid units for bucketing or comparing against a *datetime* Field.
 */
metabase.legacy_mbql.schema.datetime_bucketing_units = clojure.set.union.cljs$core$IFn$_invoke$arity$2(metabase.legacy_mbql.schema.date_bucketing_units,metabase.legacy_mbql.schema.time_bucketing_units);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","DateUnit","metabase.legacy-mbql.schema/DateUnit",-825855498),metabase.util.malli.registry._with_doc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"enum","enum",1679018432),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"date bucketing unit"], null)], null),metabase.legacy_mbql.schema.date_bucketing_units),"Valid unit for date bucketing."));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","TimeUnit","metabase.legacy-mbql.schema/TimeUnit",-1982119479),metabase.util.malli.registry._with_doc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"enum","enum",1679018432),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"time bucketing unit"], null)], null),metabase.legacy_mbql.schema.time_bucketing_units),"Valid unit for time bucketing."));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","DateTimeUnit","metabase.legacy-mbql.schema/DateTimeUnit",-36297945),metabase.util.malli.registry._with_doc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"enum","enum",1679018432),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"datetime bucketing unit"], null)], null),metabase.legacy_mbql.schema.datetime_bucketing_units),"Valid unit for *datetime* bucketing."));
/**
 * Valid timezone id.
 */
metabase.legacy_mbql.schema.TimezoneId = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.lib.schema.expression.temporal","timezone-id","metabase.lib.schema.expression.temporal/timezone-id",-1909635091)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","TemporalExtractUnit","metabase.legacy-mbql.schema/TemporalExtractUnit",-691523416),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"enum","enum",1679018432),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"temporal extract unit"], null),new cljs.core.Keyword(null,"year-of-era","year-of-era",682445876),new cljs.core.Keyword(null,"quarter-of-year","quarter-of-year",-472803491),new cljs.core.Keyword(null,"month-of-year","month-of-year",760756492),new cljs.core.Keyword(null,"week-of-year-iso","week-of-year-iso",-1827744293),new cljs.core.Keyword(null,"week-of-year-us","week-of-year-us",849423511),new cljs.core.Keyword(null,"week-of-year-instance","week-of-year-instance",2047974624),new cljs.core.Keyword(null,"day-of-month","day-of-month",-1096650288),new cljs.core.Keyword(null,"day-of-week","day-of-week",1639326729),new cljs.core.Keyword(null,"hour-of-day","hour-of-day",2086777099),new cljs.core.Keyword(null,"minute-of-hour","minute-of-hour",1903220478),new cljs.core.Keyword(null,"second-of-minute","second-of-minute",222734326)], null),"Valid units to extract from a temporal."));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","DatetimeDiffUnit","metabase.legacy-mbql.schema/DatetimeDiffUnit",-345401041),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"enum","enum",1679018432),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"datetime-diff unit"], null),new cljs.core.Keyword(null,"second","second",-444702010),new cljs.core.Keyword(null,"minute","minute",-642875969),new cljs.core.Keyword(null,"hour","hour",-555989214),new cljs.core.Keyword(null,"day","day",-274800446),new cljs.core.Keyword(null,"week","week",-1326473278),new cljs.core.Keyword(null,"month","month",-1960248533),new cljs.core.Keyword(null,"quarter","quarter",-508147616),new cljs.core.Keyword(null,"year","year",335913393)], null),"Valid units for a datetime-diff clause."));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","ExtractWeekMode","metabase.legacy-mbql.schema/ExtractWeekMode",438908251),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"enum","enum",1679018432),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"temporal-extract week extraction mode"], null),new cljs.core.Keyword(null,"iso","iso",-1366207543),new cljs.core.Keyword(null,"us","us",746429226),new cljs.core.Keyword(null,"instance","instance",-2121349050)], null),"Valid modes to extract weeks."));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","RelativeDatetimeUnit","metabase.legacy-mbql.schema/RelativeDatetimeUnit",-52225489),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"enum","enum",1679018432),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"relative-datetime unit"], null),new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.Keyword(null,"minute","minute",-642875969),new cljs.core.Keyword(null,"hour","hour",-555989214),new cljs.core.Keyword(null,"day","day",-274800446),new cljs.core.Keyword(null,"week","week",-1326473278),new cljs.core.Keyword(null,"month","month",-1960248533),new cljs.core.Keyword(null,"quarter","quarter",-508147616),new cljs.core.Keyword(null,"year","year",335913393)], null));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","relative-datetime","metabase.legacy-mbql.schema/relative-datetime",-1469207281),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"relative-datetime","relative-datetime",1285169278),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["n",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=","=",1152933628),new cljs.core.Keyword(null,"current","current",-1088038603)], null),new cljs.core.Keyword(null,"int","int",-1741416922)], null),"unit",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","RelativeDatetimeUnit","metabase.legacy-mbql.schema/RelativeDatetimeUnit",-52225489)], null)], null)], 0)));

/**
 * Schema for a valid relative-datetime clause.
 */
metabase.legacy_mbql.schema.relative_datetime = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","relative-datetime","metabase.legacy-mbql.schema/relative-datetime",-1469207281)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","interval","metabase.legacy-mbql.schema/interval",-905770964),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"interval","interval",1708495417),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["n",new cljs.core.Keyword(null,"int","int",-1741416922),"unit",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","RelativeDatetimeUnit","metabase.legacy-mbql.schema/RelativeDatetimeUnit",-52225489)], null)], 0)));

/**
 * Schema for a valid interval clause.
 */
metabase.legacy_mbql.schema.interval = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","interval","metabase.legacy-mbql.schema/interval",-905770964)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","absolute-datetime","metabase.legacy-mbql.schema/absolute-datetime",988363898),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"multi","multi",-190293005),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("error","message","error/message",-502809098),"valid :absolute-datetime clause",new cljs.core.Keyword("doc","title","doc/title",636406695),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"span","span",1394872991),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"code","code",1586293142),":absolute-datetime"], null)," clause"], null),new cljs.core.Keyword(null,"dispatch","dispatch",1319337009),(function (x){
if(cljs.core.not(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(new cljs.core.Keyword(null,"absolute-datetime","absolute-datetime",-560340465),x))){
return new cljs.core.Keyword(null,"invalid","invalid",412869516);
} else {
if(cljs.core.truth_(metabase.util.malli.registry.validate(new cljs.core.Keyword("metabase.lib.schema.literal","date","metabase.lib.schema.literal/date",-906463835),cljs.core.second(x)))){
return new cljs.core.Keyword(null,"date","date",-1463434462);
} else {
return new cljs.core.Keyword(null,"datetime","datetime",494675702);

}
}
})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"invalid","invalid",412869516),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fn","fn",-1175266204),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"not an :absolute-datetime clause"], null),cljs.core.constantly(false)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"date","date",-1463434462),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"absolute-datetime","absolute-datetime",-560340465),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["date",new cljs.core.Keyword("metabase.lib.schema.literal","date","metabase.lib.schema.literal/date",-906463835),"unit",new cljs.core.Keyword("metabase.legacy-mbql.schema","DateUnit","metabase.legacy-mbql.schema/DateUnit",-825855498)], 0))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"datetime","datetime",494675702),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"absolute-datetime","absolute-datetime",-560340465),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["datetime",new cljs.core.Keyword("metabase.lib.schema.literal","datetime","metabase.lib.schema.literal/datetime",985830761),"unit",new cljs.core.Keyword("metabase.legacy-mbql.schema","DateTimeUnit","metabase.legacy-mbql.schema/DateTimeUnit",-36297945)], 0))], null)], null));
/**
 * Schema for an `:absolute-datetime` clause.
 */
metabase.legacy_mbql.schema.absolute_datetime = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","absolute-datetime","metabase.legacy-mbql.schema/absolute-datetime",988363898)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","time","metabase.legacy-mbql.schema/time",-297316611),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"time","time",1385887882),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["time",new cljs.core.Keyword("metabase.lib.schema.literal","time","metabase.lib.schema.literal/time",1928421901),"unit",new cljs.core.Keyword("metabase.legacy-mbql.schema","TimeUnit","metabase.legacy-mbql.schema/TimeUnit",-1982119479)], 0)));

/**
 * Schema for a valid time clause.
 */
metabase.legacy_mbql.schema.time = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","time","metabase.legacy-mbql.schema/time",-297316611)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","DateOrDatetimeLiteral","metabase.legacy-mbql.schema/DateOrDatetimeLiteral",-1908148698),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"date or datetime literal"], null),metabase.legacy_mbql.schema.relative_datetime,metabase.legacy_mbql.schema.absolute_datetime,new cljs.core.Keyword("metabase.lib.schema.literal","datetime","metabase.lib.schema.literal/datetime",985830761),new cljs.core.Keyword("metabase.lib.schema.literal","date","metabase.lib.schema.literal/date",-906463835)], null),"Schema for a valid date or datetime literal."));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","TimeLiteral","metabase.legacy-mbql.schema/TimeLiteral",-68209038),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"time literal"], null),metabase.legacy_mbql.schema.time,new cljs.core.Keyword("metabase.lib.schema.literal","time","metabase.lib.schema.literal/time",1928421901)], null),"Schema for valid time literals."));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","TemporalLiteral","metabase.legacy-mbql.schema/TemporalLiteral",1831610098),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"temporal literal"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","DateOrDatetimeLiteral","metabase.legacy-mbql.schema/DateOrDatetimeLiteral",-1908148698)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","TimeLiteral","metabase.legacy-mbql.schema/TimeLiteral",-68209038)], null)], null),"Schema for valid temporal literals."));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","DateTimeValue","metabase.legacy-mbql.schema/DateTimeValue",1461689109),metabase.util.malli.registry._with_doc(metabase.legacy_mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.absolute_datetime !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.absolute_datetime;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","absolute-datetime","metabase.legacy-mbql.schema/absolute-datetime",-1666071871,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"internal","internal",-854870097),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"absolute-datetime","absolute-datetime",1080191062,null),"metabase/legacy_mbql/schema.cljc",69,new cljs.core.Keyword(null,"absolute-datetime","absolute-datetime",-560340465),1,true,146,146,cljs.core.List.EMPTY,"Schema for an `:absolute-datetime` clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.absolute_datetime)?metabase.legacy_mbql.schema.absolute_datetime.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"absolute-datetime","absolute-datetime",1080191062,null);
}
})(),metabase.legacy_mbql.schema.absolute_datetime], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.relative_datetime !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.relative_datetime;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","relative-datetime","metabase.legacy-mbql.schema/relative-datetime",171324246,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"relative-datetime","relative-datetime",-1369266491,null),"metabase/legacy_mbql/schema.cljc",29,new cljs.core.Keyword(null,"relative-datetime","relative-datetime",1285169278),1,108,108,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"relative-datetime","relative-datetime",1285169278),new cljs.core.Keyword(null,"n","n",562130025),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=","=",1152933628),new cljs.core.Keyword(null,"current","current",-1088038603)], null),new cljs.core.Keyword(null,"int","int",-1741416922)], null)),new cljs.core.Keyword(null,"unit","unit",375175175),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","RelativeDatetimeUnit","metabase.legacy-mbql.schema/RelativeDatetimeUnit",-52225489)], null)))], null),cljs.core.List.EMPTY,"Schema for a valid relative-datetime clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.relative_datetime)?metabase.legacy_mbql.schema.relative_datetime.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"relative-datetime","relative-datetime",-1369266491,null);
}
})(),metabase.legacy_mbql.schema.relative_datetime], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.time !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.time;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","time","metabase.legacy-mbql.schema/time",1343214916,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"internal","internal",-854870097),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"time","time",-1268547887,null),"metabase/legacy_mbql/schema.cljc",27,new cljs.core.Keyword(null,"time","time",1385887882),1,true,153,153,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"time","time",1385887882),new cljs.core.Keyword(null,"time","time",1385887882),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Keyword("metabase.lib.schema.literal","time","metabase.lib.schema.literal/time",1928421901)),new cljs.core.Keyword(null,"unit","unit",375175175),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Keyword("metabase.legacy-mbql.schema","TimeUnit","metabase.legacy-mbql.schema/TimeUnit",-1982119479))], null),cljs.core.List.EMPTY,"Schema for a valid time clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.time)?metabase.legacy_mbql.schema.time.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"time","time",-1268547887,null);
}
})(),metabase.legacy_mbql.schema.time], null)], 0)),"Schema for a datetime value drivers will personally have to handle, either an `absolute-datetime` form or a\n  `relative-datetime` form."));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","ValueTypeInfo","metabase.legacy-mbql.schema/ValueTypeInfo",606120856),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("doc","message","doc/message",-406025466),["Type info about a value in a `:value` clause. Added automatically by `wrap-value-literals`"," middleware to values in filter clauses based on the Field in the clause."].join('')], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"database_type","database_type",-54700895),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"base_type","base_type",1908272670),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.common","base-type","metabase.lib.schema.common/base-type",999524206)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"semantic_type","semantic_type",272485089),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.common","semantic-or-relation-type","metabase.lib.schema.common/semantic-or-relation-type",-158604052)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"unit","unit",375175175),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.legacy-mbql.schema","DateTimeUnit","metabase.legacy-mbql.schema/DateTimeUnit",-36297945)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)], null)], null)], null));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","value","metabase.legacy-mbql.schema/value",1864437982),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"value","value",305978217),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["value",new cljs.core.Keyword(null,"any","any",1705907423),"type-info",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.legacy-mbql.schema","ValueTypeInfo","metabase.legacy-mbql.schema/ValueTypeInfo",606120856)], null)], 0)));

/**
 * Schema for a valid value clause.
 */
metabase.legacy_mbql.schema.value = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","value","metabase.legacy-mbql.schema/value",1864437982)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","expression","metabase.legacy-mbql.schema/expression",1731832637),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"expression","expression",202311876),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["expression-name",new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619),"options",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),new cljs.core.Keyword(null,"map","map",1371690461)], null)], 0)));

/**
 * Schema for a valid expression clause.
 */
metabase.legacy_mbql.schema.expression = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","expression","metabase.legacy-mbql.schema/expression",1731832637)], null);
/**
 * Whether `temporal-unit` (e.g. `:day`) is valid for the given `base-type` (e.g. `:type/Date`). If either is `nil` this
 *   will return truthy. Accepts either map of `field-options` or `base-type` and `temporal-unit` passed separately.
 */
metabase.legacy_mbql.schema.valid_temporal_unit_for_base_type_QMARK_ = (function metabase$legacy_mbql$schema$valid_temporal_unit_for_base_type_QMARK_(var_args){
var G__75273 = arguments.length;
switch (G__75273) {
case 1:
return metabase.legacy_mbql.schema.valid_temporal_unit_for_base_type_QMARK_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return metabase.legacy_mbql.schema.valid_temporal_unit_for_base_type_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(metabase.legacy_mbql.schema.valid_temporal_unit_for_base_type_QMARK_.cljs$core$IFn$_invoke$arity$1 = (function (p__75274){
var map__75275 = p__75274;
var map__75275__$1 = cljs.core.__destructure_map(map__75275);
var _field_options = map__75275__$1;
var base_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__75275__$1,new cljs.core.Keyword(null,"base-type","base-type",1167971299));
var temporal_unit = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__75275__$1,new cljs.core.Keyword(null,"temporal-unit","temporal-unit",-1892306358));
return metabase.legacy_mbql.schema.valid_temporal_unit_for_base_type_QMARK_.cljs$core$IFn$_invoke$arity$2(base_type,temporal_unit);
}));

(metabase.legacy_mbql.schema.valid_temporal_unit_for_base_type_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (base_type,temporal_unit){
var temp__5802__auto__ = (cljs.core.truth_((function (){var and__5000__auto__ = temporal_unit;
if(cljs.core.truth_(and__5000__auto__)){
return base_type;
} else {
return and__5000__auto__;
}
})())?(function (){var pred__75276 = (function (p1__75271_SHARP_,p2__75270_SHARP_){
return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(p2__75270_SHARP_,p1__75271_SHARP_);
});
var expr__75277 = base_type;
if(pred__75276(new cljs.core.Keyword("type","Date","type/Date",-690428629),expr__75277)){
return metabase.legacy_mbql.schema.date_bucketing_units;
} else {
if(pred__75276(new cljs.core.Keyword("type","Time","type/Time",-814852413),expr__75277)){
return metabase.legacy_mbql.schema.time_bucketing_units;
} else {
if(pred__75276(new cljs.core.Keyword("type","DateTime","type/DateTime",352113310),expr__75277)){
return metabase.legacy_mbql.schema.datetime_bucketing_units;
} else {
return null;
}
}
}
})():null);
if(cljs.core.truth_(temp__5802__auto__)){
var units = temp__5802__auto__;
return cljs.core.contains_QMARK_(units,temporal_unit);
} else {
return true;
}
}));

(metabase.legacy_mbql.schema.valid_temporal_unit_for_base_type_QMARK_.cljs$lang$maxFixedArity = 2);

metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","validate-temporal-unit","metabase.legacy-mbql.schema/validate-temporal-unit",-257899202),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fn","fn",-1175266204),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"Invalid :temporal-unit for the specified :base-type."], null),metabase.legacy_mbql.schema.valid_temporal_unit_for_base_type_QMARK_], null));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","no-binning-options-at-top-level","metabase.legacy-mbql.schema/no-binning-options-at-top-level",504959606),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fn","fn",-1175266204),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),":binning keys like :strategy are not allowed at the top level of :field options."], null),cljs.core.complement(new cljs.core.Keyword(null,"strategy","strategy",-1471631918))], null));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOptions","metabase.legacy-mbql.schema/FieldOptions",1592351439),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"and","and",-971899817),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"field options"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"base-type","base-type",1167971299),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.common","base-type","metabase.lib.schema.common/base-type",999524206)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"source-field","source-field",933829534),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"Replaces `fk->`.\n\n  `:source-field` is used to refer to a FieldOrExpression from a different Table you would like IMPLICITLY JOINED to\n     the source table.\n\n  If both `:source-field` and `:join-alias` are supplied, `:join-alias` should be used to perform the join;\n  `:source-field` should be for information purposes only."], null),new cljs.core.Keyword("metabase.lib.schema.id","field","metabase.lib.schema.id/field",-985236431)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"temporal-unit","temporal-unit",-1892306358),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"`:temporal-unit` is used to specify DATE BUCKETING for a FieldOrExpression that represents a moment in time of\n  some sort.\n\n  There is no requirement that all `:type/Temporal` derived FieldOrExpressions specify a `:temporal-unit`, but for\n  legacy reasons `:field` clauses that refer to `:type/DateTime` FieldOrExpressions will be automatically \"bucketed\"\n  in the `:breakout` and `:filter` clauses, but nowhere else. Auto-bucketing only applies to `:filter` clauses when\n  values for comparison are `yyyy-MM-dd` date strings. See the `auto-bucket-datetimes` middleware for more details.\n  `:field` clauses elsewhere will not be automatically bucketed, so drivers still need to make sure they do any\n  special datetime handling for plain `:field` clauses when their FieldOrExpression derives from `:type/DateTime`."], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.legacy-mbql.schema","DateTimeUnit","metabase.legacy-mbql.schema/DateTimeUnit",-36297945)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"join-alias","join-alias",1454206794),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"Replaces `joined-field`.\n\n  `:join-alias` is used to refer to a FieldOrExpression from a different Table/nested query that you are EXPLICITLY\n  JOINING against."], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"binning","binning",1709835866),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"Replaces `binning-strategy`.\n\n  Using binning requires the driver to support the `:binning` feature."], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.lib.schema.binning","binning","metabase.lib.schema.binning/binning",-806522293)], null)], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("doc","message","doc/message",-406025466),"If `:base-type` is specified, the `:temporal-unit` must make sense, e.g. no bucketing by `:year`for\n  a `:type/Time` column."], null),new cljs.core.Keyword("metabase.legacy-mbql.schema","validate-temporal-unit","metabase.legacy-mbql.schema/validate-temporal-unit",-257899202)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("doc","message","doc/message",-406025466),"You cannot use `:binning` keys like `:strategy` in the top level."], null),new cljs.core.Keyword("metabase.legacy-mbql.schema","no-binning-options-at-top-level","metabase.legacy-mbql.schema/no-binning-options-at-top-level",504959606)], null)], null));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","require-base-type-for-field-name","metabase.legacy-mbql.schema/require-base-type-for-field-name",-608356445),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fn","fn",-1175266204),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),":field clauses using a string field name must specify :base-type."], null),(function (p__75279){
var vec__75280 = p__75279;
var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__75280,(0),null);
var id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__75280,(1),null);
var map__75283 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__75280,(2),null);
var map__75283__$1 = cljs.core.__destructure_map(map__75283);
var base_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__75283__$1,new cljs.core.Keyword(null,"base-type","base-type",1167971299));
if(typeof id_or_name === 'string'){
return base_type;
} else {
return true;
}
})], null));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","field","metabase.legacy-mbql.schema/field",1451423365),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"and","and",-971899817),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("doc","title","doc/title",636406695),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"span","span",1394872991),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"code","code",1586293142),":field"], null)," clause"], null)], null),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["id-or-name",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.Keyword("metabase.lib.schema.id","field","metabase.lib.schema.id/field",-985236431),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)], null),"options",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOptions","metabase.legacy-mbql.schema/FieldOptions",1592351439)], null)], null)], 0)),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("doc","message","doc/message",-406025466),"Fields using names rather than integer IDs are required to specify `:base-type`."], null),new cljs.core.Keyword("metabase.legacy-mbql.schema","require-base-type-for-field-name","metabase.legacy-mbql.schema/require-base-type-for-field-name",-608356445)], null)], null));
/**
 * Schema for a `:field` clause.
 */
metabase.legacy_mbql.schema.field = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","field","metabase.legacy-mbql.schema/field",1451423365)], null);
/**
 * Schema for a `:field` clause, with the added constraint that it must use an integer Field ID.
 */
metabase.legacy_mbql.schema.field_COLON_id = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"and","and",-971899817),metabase.legacy_mbql.schema.field,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fn","fn",-1175266204),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"Must be a :field with an integer Field ID."], null),(function (p__75284){
var vec__75285 = p__75284;
var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__75285,(0),null);
var id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__75285,(1),null);
return cljs.core.integer_QMARK_(id_or_name);
})], null)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","Field","metabase.legacy-mbql.schema/Field",472661841),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("doc","title","doc/title",636406695),"`:field` or `:expression` ref"], null),metabase.legacy_mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.expression !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.expression;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","expression","metabase.legacy-mbql.schema/expression",-922603132,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"expression","expression",1842843403,null),"metabase/legacy_mbql/schema.cljc",60,new cljs.core.Keyword(null,"expression","expression",202311876),1,219,219,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"expression","expression",202311876),new cljs.core.Keyword(null,"expression-name","expression-name",-1798450709),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)),new cljs.core.Keyword(null,"options","options",99638489),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Keyword(null,"map","map",1371690461)))], null),cljs.core.List.EMPTY,"Schema for a valid expression clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.expression)?metabase.legacy_mbql.schema.expression.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"expression","expression",1842843403,null);
}
})(),metabase.legacy_mbql.schema.expression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.field !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.field;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","field","metabase.legacy-mbql.schema/field",-1203012404,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"added","added",2057651688),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],["0.39.0",cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"field","field",338095027,null),"metabase/legacy_mbql/schema.cljc",51,new cljs.core.Keyword(null,"field","field",-1302436500),1,328,328,cljs.core.List.EMPTY,"Schema for a `:field` clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.field)?metabase.legacy_mbql.schema.field.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"field","field",338095027,null);
}
})(),metabase.legacy_mbql.schema.field], null)], 0))], null));
/**
 * Schema for either a `:field` clause (reference to a Field) or an `:expression` clause (reference to an expression).
 */
metabase.legacy_mbql.schema.Field = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","Field","metabase.legacy-mbql.schema/Field",472661841)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","aggregation","metabase.legacy-mbql.schema/aggregation",57607333),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"aggregation","aggregation",1597476696),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["aggregation-clause-index",new cljs.core.Keyword(null,"int","int",-1741416922),"options",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),new cljs.core.Keyword(null,"map","map",1371690461)], null)], 0)));

/**
 * Schema for a valid aggregation clause.
 */
metabase.legacy_mbql.schema.aggregation = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","aggregation","metabase.legacy-mbql.schema/aggregation",57607333)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","Reference","metabase.legacy-mbql.schema/Reference",-1154983228),metabase.legacy_mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.aggregation !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.aggregation;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","aggregation","metabase.legacy-mbql.schema/aggregation",1698138860,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"aggregation","aggregation",-1056959073,null),"metabase/legacy_mbql/schema.cljc",23,new cljs.core.Keyword(null,"aggregation","aggregation",1597476696),1,366,366,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"aggregation","aggregation",1597476696),new cljs.core.Keyword(null,"aggregation-clause-index","aggregation-clause-index",-1510292261),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Keyword(null,"int","int",-1741416922)),new cljs.core.Keyword(null,"options","options",99638489),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Keyword(null,"map","map",1371690461)))], null),cljs.core.List.EMPTY,"Schema for a valid aggregation clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.aggregation)?metabase.legacy_mbql.schema.aggregation.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"aggregation","aggregation",-1056959073,null);
}
})(),metabase.legacy_mbql.schema.aggregation], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.expression !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.expression;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","expression","metabase.legacy-mbql.schema/expression",-922603132,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"expression","expression",1842843403,null),"metabase/legacy_mbql/schema.cljc",60,new cljs.core.Keyword(null,"expression","expression",202311876),1,219,219,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"expression","expression",202311876),new cljs.core.Keyword(null,"expression-name","expression-name",-1798450709),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)),new cljs.core.Keyword(null,"options","options",99638489),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Keyword(null,"map","map",1371690461)))], null),cljs.core.List.EMPTY,"Schema for a valid expression clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.expression)?metabase.legacy_mbql.schema.expression.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"expression","expression",1842843403,null);
}
})(),metabase.legacy_mbql.schema.expression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.field !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.field;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","field","metabase.legacy-mbql.schema/field",-1203012404,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"added","added",2057651688),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],["0.39.0",cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"field","field",338095027,null),"metabase/legacy_mbql/schema.cljc",51,new cljs.core.Keyword(null,"field","field",-1302436500),1,328,328,cljs.core.List.EMPTY,"Schema for a `:field` clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.field)?metabase.legacy_mbql.schema.field.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"field","field",338095027,null);
}
})(),metabase.legacy_mbql.schema.field], null)], 0)));
/**
 * Schema for any type of valid Field clause, or for an indexed reference to an aggregation clause.
 */
metabase.legacy_mbql.schema.Reference = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","Reference","metabase.legacy-mbql.schema/Reference",-1154983228)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","offset","metabase.legacy-mbql.schema/offset",1993836812),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"offset","offset",296498311),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["opts",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.lib.schema.common","options","metabase.lib.schema.common/options",-1078359294)], null),"expr",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","UnnamedAggregation","metabase.legacy-mbql.schema/UnnamedAggregation",-780956389)], null)], null),"n",new cljs.core.Keyword("metabase.lib.schema.expression.window","offset.n","metabase.lib.schema.expression.window/offset.n",1502346783)], 0)));

/**
 * Schema for a valid offset clause.
 */
metabase.legacy_mbql.schema.offset = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","offset","metabase.legacy-mbql.schema/offset",1993836812)], null);
/**
 * Functions that return string values. Should match [[StringExpression]].
 */
metabase.legacy_mbql.schema.string_functions = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [new cljs.core.Keyword(null,"month-name","month-name",-605509534),null,new cljs.core.Keyword(null,"quarter-name","quarter-name",2130472226),null,new cljs.core.Keyword(null,"upper","upper",246243906),null,new cljs.core.Keyword(null,"ltrim","ltrim",1654269283),null,new cljs.core.Keyword(null,"substring","substring",1140866276),null,new cljs.core.Keyword(null,"replace","replace",-786587770),null,new cljs.core.Keyword(null,"concat","concat",-2108183992),null,new cljs.core.Keyword(null,"coalesce","coalesce",654622029),null,new cljs.core.Keyword(null,"subdomain","subdomain",-524487312),null,new cljs.core.Keyword(null,"day-name","day-name",1806125744),null,new cljs.core.Keyword(null,"host","host",-1558485167),null,new cljs.core.Keyword(null,"case","case",1143702196),null,new cljs.core.Keyword(null,"lower","lower",1120320821),null,new cljs.core.Keyword(null,"trim","trim",774319767),null,new cljs.core.Keyword(null,"domain","domain",1847214937),null,new cljs.core.Keyword(null,"regex-match-first","regex-match-first",-657299718),null,new cljs.core.Keyword(null,"rtrim","rtrim",-661336449),null], null), null);
/**
 * Schema for the definition of an string expression.
 */
metabase.legacy_mbql.schema.StringExpression = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","StringExpression","metabase.legacy-mbql.schema/StringExpression",-184637163)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","StringExpressionArg","metabase.legacy-mbql.schema/StringExpressionArg",-21698572),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"multi","multi",-190293005),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"dispatch","dispatch",1319337009),(function (x){
if(typeof x === 'string'){
return new cljs.core.Keyword(null,"string","string",-1989541586);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(metabase.legacy_mbql.schema.string_functions,x))){
return new cljs.core.Keyword(null,"string-expression","string-expression",-1395337766);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(new cljs.core.Keyword(null,"value","value",305978217),x))){
return new cljs.core.Keyword(null,"value","value",305978217);
} else {
return new cljs.core.Keyword(null,"else","else",-1508377146);

}
}
}
})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"string","string",-1989541586)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"string-expression","string-expression",-1395337766),metabase.legacy_mbql.schema.StringExpression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"value","value",305978217),metabase.legacy_mbql.schema.value], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"else","else",-1508377146),metabase.legacy_mbql.schema.Field], null)], null));
metabase.legacy_mbql.schema.StringExpressionArg = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","StringExpressionArg","metabase.legacy-mbql.schema/StringExpressionArg",-21698572)], null);
/**
 * Functions that return numeric values. Should match [[NumericExpression]].
 */
metabase.legacy_mbql.schema.numeric_functions = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 26, [new cljs.core.Keyword(null,"ceil","ceil",-1824929952),null,new cljs.core.Keyword(null,"get-quarter","get-quarter",1327778593),null,new cljs.core.Keyword(null,"*","*",-1294732318),null,new cljs.core.Keyword(null,"temporal-extract","temporal-extract",1781686405),null,new cljs.core.Keyword(null,"get-minute","get-minute",1468086343),null,new cljs.core.Keyword(null,"sqrt","sqrt",-1270051929),null,new cljs.core.Keyword(null,"-","-",-2112348439),null,new cljs.core.Keyword(null,"exp","exp",-261706262),null,new cljs.core.Keyword(null,"get-hour","get-hour",622714059),null,new cljs.core.Keyword(null,"get-week","get-week",-888059349),null,new cljs.core.Keyword(null,"coalesce","coalesce",654622029),null,new cljs.core.Keyword(null,"/","/",1282502798),null,new cljs.core.Keyword(null,"get-day-of-week","get-day-of-week",2010140752),null,new cljs.core.Keyword(null,"round","round",2009433328),null,new cljs.core.Keyword(null,"power","power",-937852079),null,new cljs.core.Keyword(null,"get-second","get-second",-2065946318),null,new cljs.core.Keyword(null,"+","+",1913524883),null,new cljs.core.Keyword(null,"abs","abs",-246026477),null,new cljs.core.Keyword(null,"case","case",1143702196),null,new cljs.core.Keyword(null,"get-month","get-month",-369374731),null,new cljs.core.Keyword(null,"length","length",588987862),null,new cljs.core.Keyword(null,"get-year","get-year",-936011274),null,new cljs.core.Keyword(null,"get-day","get-day",127568857),null,new cljs.core.Keyword(null,"datetime-diff","datetime-diff",1133112155),null,new cljs.core.Keyword(null,"log","log",-1595516004),null,new cljs.core.Keyword(null,"floor","floor",1882041021),null], null), null);
/**
 * Functions that return boolean values. Should match [[BooleanExpression]].
 */
metabase.legacy_mbql.schema.boolean_functions = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [new cljs.core.Keyword(null,"<=","<=",-395636158),null,new cljs.core.Keyword(null,">",">",-555517146),null,new cljs.core.Keyword(null,"or","or",235744169),null,new cljs.core.Keyword(null,"not","not",-595976884),null,new cljs.core.Keyword(null,">=",">=",-623615505),null,new cljs.core.Keyword(null,"!=","!=",-1841737356),null,new cljs.core.Keyword(null,"and","and",-971899817),null,new cljs.core.Keyword(null,"=","=",1152933628),null,new cljs.core.Keyword(null,"<","<",-646864291),null], null), null);
metabase.legacy_mbql.schema.aggregations = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [new cljs.core.Keyword(null,"min","min",444991522),null,new cljs.core.Keyword(null,"stddev","stddev",-865474939),null,new cljs.core.Keyword(null,"offset","offset",296498311),null,new cljs.core.Keyword(null,"count-where","count-where",385407720),null,new cljs.core.Keyword(null,"cum-count","cum-count",-1964431543),null,new cljs.core.Keyword(null,"sum-where","sum-where",2135348428),null,new cljs.core.Keyword(null,"cum-sum","cum-sum",2064902349),null,new cljs.core.Keyword(null,"distinct","distinct",-1788879121),null,new cljs.core.Keyword(null,"percentile","percentile",-601188752),null,new cljs.core.Keyword(null,"aggregation-options","aggregation-options",-1904917550),null,new cljs.core.Keyword(null,"var","var",-769682797),null,new cljs.core.Keyword(null,"median","median",569566131),null,new cljs.core.Keyword(null,"share","share",-589433933),null,new cljs.core.Keyword(null,"max","max",61366548),null,new cljs.core.Keyword(null,"count","count",2139924085),null,new cljs.core.Keyword(null,"avg","avg",197406200),null,new cljs.core.Keyword(null,"metric","metric",408798077),null,new cljs.core.Keyword(null,"sum","sum",136986814),null], null), null);
/**
 * Functions that return Date or DateTime values. Should match [[DatetimeExpression]].
 */
metabase.legacy_mbql.schema.datetime_functions = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,"now","now",-1650525531),null,new cljs.core.Keyword(null,"convert-timezone","convert-timezone",-124803001),null,new cljs.core.Keyword(null,"datetime-subtract","datetime-subtract",275307697),null,new cljs.core.Keyword(null,"+","+",1913524883),null,new cljs.core.Keyword(null,"datetime-add","datetime-add",209603411),null], null), null);
/**
 * Schema for the definition of a numeric expression. All numeric expressions evaluate to numeric values.
 */
metabase.legacy_mbql.schema.NumericExpression = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","NumericExpression","metabase.legacy-mbql.schema/NumericExpression",-838627617)], null);
/**
 * Schema for the definition of an arithmetic expression.
 */
metabase.legacy_mbql.schema.BooleanExpression = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","BooleanExpression","metabase.legacy-mbql.schema/BooleanExpression",929644905)], null);
/**
 * Schema for the definition of a date function expression.
 */
metabase.legacy_mbql.schema.DatetimeExpression = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","DatetimeExpression","metabase.legacy-mbql.schema/DatetimeExpression",1980776843)], null);
/**
 * Schema for anything that is a valid `:aggregation` clause.
 */
metabase.legacy_mbql.schema.Aggregation = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","Aggregation","metabase.legacy-mbql.schema/Aggregation",23634892)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","NumericExpressionArg","metabase.legacy-mbql.schema/NumericExpressionArg",-1379919489),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"multi","multi",-190293005),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("error","message","error/message",-502809098),"numeric expression argument",new cljs.core.Keyword(null,"dispatch","dispatch",1319337009),(function (x){
if(typeof x === 'number'){
return new cljs.core.Keyword(null,"number","number",1570378438);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(metabase.legacy_mbql.schema.numeric_functions,x))){
return new cljs.core.Keyword(null,"numeric-expression","numeric-expression",-1661337235);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(metabase.legacy_mbql.schema.aggregations,x))){
return new cljs.core.Keyword(null,"aggregation","aggregation",1597476696);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(new cljs.core.Keyword(null,"value","value",305978217),x))){
return new cljs.core.Keyword(null,"value","value",305978217);
} else {
return new cljs.core.Keyword(null,"field","field",-1302436500);

}
}
}
}
})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"number","number",1570378438),cljs.core.number_QMARK_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"numeric-expression","numeric-expression",-1661337235),metabase.legacy_mbql.schema.NumericExpression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"aggregation","aggregation",1597476696),metabase.legacy_mbql.schema.Aggregation], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"value","value",305978217),metabase.legacy_mbql.schema.value], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"field","field",-1302436500),metabase.legacy_mbql.schema.Field], null)], null));
metabase.legacy_mbql.schema.NumericExpressionArg = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","NumericExpressionArg","metabase.legacy-mbql.schema/NumericExpressionArg",-1379919489)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","DateTimeExpressionArg","metabase.legacy-mbql.schema/DateTimeExpressionArg",-525464595),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"multi","multi",-190293005),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("error","message","error/message",-502809098),"datetime expression argument",new cljs.core.Keyword(null,"dispatch","dispatch",1319337009),(function (x){
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(metabase.legacy_mbql.schema.aggregations,x))){
return new cljs.core.Keyword(null,"aggregation","aggregation",1597476696);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(new cljs.core.Keyword(null,"value","value",305978217),x))){
return new cljs.core.Keyword(null,"value","value",305978217);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(metabase.legacy_mbql.schema.datetime_functions,x))){
return new cljs.core.Keyword(null,"datetime-expression","datetime-expression",391782195);
} else {
return new cljs.core.Keyword(null,"else","else",-1508377146);

}
}
}
})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"aggregation","aggregation",1597476696),metabase.legacy_mbql.schema.Aggregation], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"value","value",305978217),metabase.legacy_mbql.schema.value], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"datetime-expression","datetime-expression",391782195),metabase.legacy_mbql.schema.DatetimeExpression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"else","else",-1508377146),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","DateOrDatetimeLiteral","metabase.legacy-mbql.schema/DateOrDatetimeLiteral",-1908148698)], null),metabase.legacy_mbql.schema.Field], null)], null)], null));
metabase.legacy_mbql.schema.DateTimeExpressionArg = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","DateTimeExpressionArg","metabase.legacy-mbql.schema/DateTimeExpressionArg",-525464595)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","ExpressionArg","metabase.legacy-mbql.schema/ExpressionArg",-114983312),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"multi","multi",-190293005),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("error","message","error/message",-502809098),"expression argument",new cljs.core.Keyword(null,"dispatch","dispatch",1319337009),(function (x){
if(typeof x === 'number'){
return new cljs.core.Keyword(null,"number","number",1570378438);
} else {
if(cljs.core.boolean_QMARK_(x)){
return new cljs.core.Keyword(null,"boolean","boolean",-1919418404);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(metabase.legacy_mbql.schema.boolean_functions,x))){
return new cljs.core.Keyword(null,"boolean-expression","boolean-expression",-394924008);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(metabase.legacy_mbql.schema.numeric_functions,x))){
return new cljs.core.Keyword(null,"numeric-expression","numeric-expression",-1661337235);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(metabase.legacy_mbql.schema.datetime_functions,x))){
return new cljs.core.Keyword(null,"datetime-expression","datetime-expression",391782195);
} else {
if(typeof x === 'string'){
return new cljs.core.Keyword(null,"string","string",-1989541586);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(metabase.legacy_mbql.schema.string_functions,x))){
return new cljs.core.Keyword(null,"string-expression","string-expression",-1395337766);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(new cljs.core.Keyword(null,"value","value",305978217),x))){
return new cljs.core.Keyword(null,"value","value",305978217);
} else {
return new cljs.core.Keyword(null,"else","else",-1508377146);

}
}
}
}
}
}
}
}
})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"number","number",1570378438),cljs.core.number_QMARK_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"boolean","boolean",-1919418404),new cljs.core.Keyword(null,"boolean","boolean",-1919418404)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"boolean-expression","boolean-expression",-394924008),metabase.legacy_mbql.schema.BooleanExpression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"numeric-expression","numeric-expression",-1661337235),metabase.legacy_mbql.schema.NumericExpression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"datetime-expression","datetime-expression",391782195),metabase.legacy_mbql.schema.DatetimeExpression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.Keyword(null,"string","string",-1989541586)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"string-expression","string-expression",-1395337766),metabase.legacy_mbql.schema.StringExpression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"value","value",305978217),metabase.legacy_mbql.schema.value], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"else","else",-1508377146),metabase.legacy_mbql.schema.Field], null)], null));
metabase.legacy_mbql.schema.ExpressionArg = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","ExpressionArg","metabase.legacy-mbql.schema/ExpressionArg",-114983312)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","Addable","metabase.legacy-mbql.schema/Addable",-768904014),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"numeric expression arg or interval"], null),metabase.legacy_mbql.schema.DateTimeExpressionArg,metabase.legacy_mbql.schema.interval,metabase.legacy_mbql.schema.NumericExpressionArg], null));
metabase.legacy_mbql.schema.Addable = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","Addable","metabase.legacy-mbql.schema/Addable",-768904014)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","IntGreaterThanZeroOrNumericExpression","metabase.legacy-mbql.schema/IntGreaterThanZeroOrNumericExpression",928792096),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"multi","multi",-190293005),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("error","message","error/message",-502809098),"int greater than zero or numeric expression",new cljs.core.Keyword(null,"dispatch","dispatch",1319337009),(function (x){
if(typeof x === 'number'){
return new cljs.core.Keyword(null,"number","number",1570378438);
} else {
return new cljs.core.Keyword(null,"else","else",-1508377146);
}
})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"number","number",1570378438),metabase.legacy_mbql.schema.PositiveInt], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"else","else",-1508377146),metabase.legacy_mbql.schema.NumericExpression], null)], null));
metabase.legacy_mbql.schema.IntGreaterThanZeroOrNumericExpression = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","IntGreaterThanZeroOrNumericExpression","metabase.legacy-mbql.schema/IntGreaterThanZeroOrNumericExpression",928792096)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","coalesce","metabase.legacy-mbql.schema/coalesce",-1027033120),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"coalesce","coalesce",654622029),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["a",metabase.legacy_mbql.schema.ExpressionArg,"b",metabase.legacy_mbql.schema.ExpressionArg,"more",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.legacy_mbql.schema.ExpressionArg], null)], 0)));

/**
 * Schema for a valid coalesce clause.
 */
metabase.legacy_mbql.schema.coalesce = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","coalesce","metabase.legacy-mbql.schema/coalesce",-1027033120)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","substring","metabase.legacy-mbql.schema/substring",-430774441),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"substring","substring",1140866276),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.legacy_mbql.schema.StringExpressionArg,"start",metabase.legacy_mbql.schema.IntGreaterThanZeroOrNumericExpression,"length",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),metabase.legacy_mbql.schema.NumericExpressionArg], null)], 0)));

/**
 * Schema for a valid substring clause.
 */
metabase.legacy_mbql.schema.substring = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","substring","metabase.legacy-mbql.schema/substring",-430774441)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","length","metabase.legacy-mbql.schema/length",-1089023159),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"length","length",588987862),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.legacy_mbql.schema.StringExpressionArg], 0)));

/**
 * Schema for a valid length clause.
 */
metabase.legacy_mbql.schema.length = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","length","metabase.legacy-mbql.schema/length",-1089023159)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","trim","metabase.legacy-mbql.schema/trim",-906914804),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"trim","trim",774319767),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.legacy_mbql.schema.StringExpressionArg], 0)));

/**
 * Schema for a valid trim clause.
 */
metabase.legacy_mbql.schema.trim = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","trim","metabase.legacy-mbql.schema/trim",-906914804)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","rtrim","metabase.legacy-mbql.schema/rtrim",883501326),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"rtrim","rtrim",-661336449),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.legacy_mbql.schema.StringExpressionArg], 0)));

/**
 * Schema for a valid rtrim clause.
 */
metabase.legacy_mbql.schema.rtrim = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","rtrim","metabase.legacy-mbql.schema/rtrim",883501326)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","ltrim","metabase.legacy-mbql.schema/ltrim",-26378094),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"ltrim","ltrim",1654269283),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.legacy_mbql.schema.StringExpressionArg], 0)));

/**
 * Schema for a valid ltrim clause.
 */
metabase.legacy_mbql.schema.ltrim = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","ltrim","metabase.legacy-mbql.schema/ltrim",-26378094)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","upper","metabase.legacy-mbql.schema/upper",-1168050497),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"upper","upper",246243906),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.legacy_mbql.schema.StringExpressionArg], 0)));

/**
 * Schema for a valid upper clause.
 */
metabase.legacy_mbql.schema.upper = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","upper","metabase.legacy-mbql.schema/upper",-1168050497)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","lower","metabase.legacy-mbql.schema/lower",-1498388316),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"lower","lower",1120320821),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.legacy_mbql.schema.StringExpressionArg], 0)));

/**
 * Schema for a valid lower clause.
 */
metabase.legacy_mbql.schema.lower = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","lower","metabase.legacy-mbql.schema/lower",-1498388316)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","replace","metabase.legacy-mbql.schema/replace",217123095),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"replace","replace",-786587770),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.legacy_mbql.schema.StringExpressionArg,"match",new cljs.core.Keyword(null,"string","string",-1989541586),"replacement",new cljs.core.Keyword(null,"string","string",-1989541586)], 0)));

/**
 * Schema for a valid replace clause.
 */
metabase.legacy_mbql.schema.replace = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","replace","metabase.legacy-mbql.schema/replace",217123095)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","concat","metabase.legacy-mbql.schema/concat",-1635041589),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"concat","concat",-2108183992),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["a",metabase.legacy_mbql.schema.StringExpressionArg,"b",metabase.legacy_mbql.schema.StringExpressionArg,"more",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.legacy_mbql.schema.StringExpressionArg], null)], 0)));

/**
 * Schema for a valid concat clause.
 */
metabase.legacy_mbql.schema.concat = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","concat","metabase.legacy-mbql.schema/concat",-1635041589)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","regex-match-first","metabase.legacy-mbql.schema/regex-match-first",-39928403),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"regex-match-first","regex-match-first",-657299718),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.legacy_mbql.schema.StringExpressionArg,"pattern",new cljs.core.Keyword(null,"string","string",-1989541586)], 0)));

/**
 * Schema for a valid regex-match-first clause.
 */
metabase.legacy_mbql.schema.regex_match_first = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","regex-match-first","metabase.legacy-mbql.schema/regex-match-first",-39928403)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","host","metabase.legacy-mbql.schema/host",-26279728),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"host","host",-1558485167),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.legacy_mbql.schema.StringExpressionArg], 0)));

/**
 * Schema for a valid host clause.
 */
metabase.legacy_mbql.schema.host = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","host","metabase.legacy-mbql.schema/host",-26279728)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","domain","metabase.legacy-mbql.schema/domain",168618956),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"domain","domain",1847214937),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.legacy_mbql.schema.StringExpressionArg], 0)));

/**
 * Schema for a valid domain clause.
 */
metabase.legacy_mbql.schema.domain = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","domain","metabase.legacy-mbql.schema/domain",168618956)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","subdomain","metabase.legacy-mbql.schema/subdomain",-1121884029),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"subdomain","subdomain",-524487312),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["s",metabase.legacy_mbql.schema.StringExpressionArg], 0)));

/**
 * Schema for a valid subdomain clause.
 */
metabase.legacy_mbql.schema.subdomain = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","subdomain","metabase.legacy-mbql.schema/subdomain",-1121884029)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","month-name","metabase.legacy-mbql.schema/month-name",2140417237),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"month-name","month-name",-605509534),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["n",metabase.legacy_mbql.schema.NumericExpressionArg], 0)));

/**
 * Schema for a valid month-name clause.
 */
metabase.legacy_mbql.schema.month_name = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","month-name","metabase.legacy-mbql.schema/month-name",2140417237)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","quarter-name","metabase.legacy-mbql.schema/quarter-name",-81206625),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"quarter-name","quarter-name",2130472226),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["n",metabase.legacy_mbql.schema.NumericExpressionArg], 0)));

/**
 * Schema for a valid quarter-name clause.
 */
metabase.legacy_mbql.schema.quarter_name = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","quarter-name","metabase.legacy-mbql.schema/quarter-name",-81206625)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","day-name","metabase.legacy-mbql.schema/day-name",-1350907597),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"day-name","day-name",1806125744),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["n",metabase.legacy_mbql.schema.NumericExpressionArg], 0)));

/**
 * Schema for a valid day-name clause.
 */
metabase.legacy_mbql.schema.day_name = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","day-name","metabase.legacy-mbql.schema/day-name",-1350907597)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","+","metabase.legacy-mbql.schema/+",367160334),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"+","+",1913524883),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.legacy_mbql.schema.Addable,"y",metabase.legacy_mbql.schema.Addable,"more",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.legacy_mbql.schema.Addable], null)], 0)));

/**
 * Schema for a valid + clause.
 */
metabase.legacy_mbql.schema._PLUS_ = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","+","metabase.legacy-mbql.schema/+",367160334)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","-","metabase.legacy-mbql.schema/-",759464542),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"-","-",-2112348439),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.legacy_mbql.schema.NumericExpressionArg,"y",metabase.legacy_mbql.schema.Addable,"more",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.legacy_mbql.schema.Addable], null)], 0)));

/**
 * Schema for a valid - clause.
 */
metabase.legacy_mbql.schema._ = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","-","metabase.legacy-mbql.schema/-",759464542)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","/","metabase.legacy-mbql.schema//",-264448495),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"/","/",1282502798),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.legacy_mbql.schema.NumericExpressionArg,"y",metabase.legacy_mbql.schema.NumericExpressionArg,"more",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.legacy_mbql.schema.NumericExpressionArg], null)], 0)));

/**
 * Schema for a valid / clause.
 */
metabase.legacy_mbql.schema._SLASH_ = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","/","metabase.legacy-mbql.schema//",-264448495)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","*","metabase.legacy-mbql.schema/*",1322805013),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"*","*",-1294732318),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.legacy_mbql.schema.NumericExpressionArg,"y",metabase.legacy_mbql.schema.NumericExpressionArg,"more",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.legacy_mbql.schema.NumericExpressionArg], null)], 0)));

/**
 * Schema for a valid * clause.
 */
metabase.legacy_mbql.schema._STAR_ = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","*","metabase.legacy-mbql.schema/*",1322805013)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","floor","metabase.legacy-mbql.schema/floor",307874156),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"floor","floor",1882041021),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.legacy_mbql.schema.NumericExpressionArg], 0)));

/**
 * Schema for a valid floor clause.
 */
metabase.legacy_mbql.schema.floor = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","floor","metabase.legacy-mbql.schema/floor",307874156)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","ceil","metabase.legacy-mbql.schema/ceil",795828467),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"ceil","ceil",-1824929952),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.legacy_mbql.schema.NumericExpressionArg], 0)));

/**
 * Schema for a valid ceil clause.
 */
metabase.legacy_mbql.schema.ceil = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","ceil","metabase.legacy-mbql.schema/ceil",795828467)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","round","metabase.legacy-mbql.schema/round",-737537959),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"round","round",2009433328),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.legacy_mbql.schema.NumericExpressionArg], 0)));

/**
 * Schema for a valid round clause.
 */
metabase.legacy_mbql.schema.round = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","round","metabase.legacy-mbql.schema/round",-737537959)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","abs","metabase.legacy-mbql.schema/abs",-1375634046),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"abs","abs",-246026477),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.legacy_mbql.schema.NumericExpressionArg], 0)));

/**
 * Schema for a valid abs clause.
 */
metabase.legacy_mbql.schema.abs = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","abs","metabase.legacy-mbql.schema/abs",-1375634046)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","power","metabase.legacy-mbql.schema/power",1651370948),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"power","power",-937852079),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.legacy_mbql.schema.NumericExpressionArg,"y",metabase.legacy_mbql.schema.NumericExpressionArg], 0)));

/**
 * Schema for a valid power clause.
 */
metabase.legacy_mbql.schema.power = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","power","metabase.legacy-mbql.schema/power",1651370948)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","sqrt","metabase.legacy-mbql.schema/sqrt",-1872677588),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"sqrt","sqrt",-1270051929),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.legacy_mbql.schema.NumericExpressionArg], 0)));

/**
 * Schema for a valid sqrt clause.
 */
metabase.legacy_mbql.schema.sqrt = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","sqrt","metabase.legacy-mbql.schema/sqrt",-1872677588)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","exp","metabase.legacy-mbql.schema/exp",-736885923),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"exp","exp",-261706262),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.legacy_mbql.schema.NumericExpressionArg], 0)));

/**
 * Schema for a valid exp clause.
 */
metabase.legacy_mbql.schema.exp = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","exp","metabase.legacy-mbql.schema/exp",-736885923)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","log","metabase.legacy-mbql.schema/log",-2067139575),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"log","log",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["x",metabase.legacy_mbql.schema.NumericExpressionArg], 0)));

/**
 * Schema for a valid log clause.
 */
metabase.legacy_mbql.schema.log = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","log","metabase.legacy-mbql.schema/log",-2067139575)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","datetime-diff","metabase.legacy-mbql.schema/datetime-diff",-557949488),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"datetime-diff","datetime-diff",1133112155),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["datetime-x",metabase.legacy_mbql.schema.DateTimeExpressionArg,"datetime-y",metabase.legacy_mbql.schema.DateTimeExpressionArg,"unit",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","DatetimeDiffUnit","metabase.legacy-mbql.schema/DatetimeDiffUnit",-345401041)], null)], 0)));

/**
 * Schema for a valid datetime-diff clause.
 */
metabase.legacy_mbql.schema.datetime_diff = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","datetime-diff","metabase.legacy-mbql.schema/datetime-diff",-557949488)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","temporal-extract","metabase.legacy-mbql.schema/temporal-extract",368957300),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"temporal-extract","temporal-extract",1781686405),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["datetime",metabase.legacy_mbql.schema.DateTimeExpressionArg,"unit",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","TemporalExtractUnit","metabase.legacy-mbql.schema/TemporalExtractUnit",-691523416)], null),"mode",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","ExtractWeekMode","metabase.legacy-mbql.schema/ExtractWeekMode",438908251)], null)], null)], 0)));

/**
 * Schema for a valid temporal-extract clause.
 */
metabase.legacy_mbql.schema.temporal_extract = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","temporal-extract","metabase.legacy-mbql.schema/temporal-extract",368957300)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","get-year","metabase.legacy-mbql.schema/get-year",727320681),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"get-year","get-year",-936011274),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["date",metabase.legacy_mbql.schema.DateTimeExpressionArg], 0)));

/**
 * Schema for a valid get-year clause.
 */
metabase.legacy_mbql.schema.get_year = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","get-year","metabase.legacy-mbql.schema/get-year",727320681)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","get-quarter","metabase.legacy-mbql.schema/get-quarter",-217004650),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"get-quarter","get-quarter",1327778593),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["date",metabase.legacy_mbql.schema.DateTimeExpressionArg], 0)));

/**
 * Schema for a valid get-quarter clause.
 */
metabase.legacy_mbql.schema.get_quarter = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","get-quarter","metabase.legacy-mbql.schema/get-quarter",-217004650)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","get-month","metabase.legacy-mbql.schema/get-month",-1913572280),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"get-month","get-month",-369374731),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["date",metabase.legacy_mbql.schema.DateTimeExpressionArg], 0)));

/**
 * Schema for a valid get-month clause.
 */
metabase.legacy_mbql.schema.get_month = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","get-month","metabase.legacy-mbql.schema/get-month",-1913572280)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","get-week","metabase.legacy-mbql.schema/get-week",650428826),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"get-week","get-week",-888059349),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["date",metabase.legacy_mbql.schema.DateTimeExpressionArg,"mode",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","ExtractWeekMode","metabase.legacy-mbql.schema/ExtractWeekMode",438908251)], null)], null)], 0)));

/**
 * Schema for a valid get-week clause.
 */
metabase.legacy_mbql.schema.get_week = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","get-week","metabase.legacy-mbql.schema/get-week",650428826)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","get-day","metabase.legacy-mbql.schema/get-day",1810374926),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"get-day","get-day",127568857),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["date",metabase.legacy_mbql.schema.DateTimeExpressionArg], 0)));

/**
 * Schema for a valid get-day clause.
 */
metabase.legacy_mbql.schema.get_day = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","get-day","metabase.legacy-mbql.schema/get-day",1810374926)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","get-day-of-week","metabase.legacy-mbql.schema/get-day-of-week",467940819),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"get-day-of-week","get-day-of-week",2010140752),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["date",metabase.legacy_mbql.schema.DateTimeExpressionArg], 0)));

/**
 * Schema for a valid get-day-of-week clause.
 */
metabase.legacy_mbql.schema.get_day_of_week = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","get-day-of-week","metabase.legacy-mbql.schema/get-day-of-week",467940819)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","get-hour","metabase.legacy-mbql.schema/get-hour",-926787738),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"get-hour","get-hour",622714059),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["datetime",metabase.legacy_mbql.schema.DateTimeExpressionArg], 0)));

/**
 * Schema for a valid get-hour clause.
 */
metabase.legacy_mbql.schema.get_hour = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","get-hour","metabase.legacy-mbql.schema/get-hour",-926787738)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","get-minute","metabase.legacy-mbql.schema/get-minute",-2083750196),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"get-minute","get-minute",1468086343),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["datetime",metabase.legacy_mbql.schema.DateTimeExpressionArg], 0)));

/**
 * Schema for a valid get-minute clause.
 */
metabase.legacy_mbql.schema.get_minute = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","get-minute","metabase.legacy-mbql.schema/get-minute",-2083750196)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","get-second","metabase.legacy-mbql.schema/get-second",-525877329),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"get-second","get-second",-2065946318),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["datetime",metabase.legacy_mbql.schema.DateTimeExpressionArg], 0)));

/**
 * Schema for a valid get-second clause.
 */
metabase.legacy_mbql.schema.get_second = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","get-second","metabase.legacy-mbql.schema/get-second",-525877329)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","convert-timezone","metabase.legacy-mbql.schema/convert-timezone",-600043050),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"convert-timezone","convert-timezone",-124803001),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["datetime",metabase.legacy_mbql.schema.DateTimeExpressionArg,"to",metabase.legacy_mbql.schema.TimezoneId,"from",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),metabase.legacy_mbql.schema.TimezoneId], null)], 0)));

/**
 * Schema for a valid convert-timezone clause.
 */
metabase.legacy_mbql.schema.convert_timezone = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","convert-timezone","metabase.legacy-mbql.schema/convert-timezone",-600043050)], null);
metabase.legacy_mbql.schema.ArithmeticDateTimeUnit = new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"enum","enum",1679018432),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"datetime arithmetic unit"], null),new cljs.core.Keyword(null,"millisecond","millisecond",-540123566),new cljs.core.Keyword(null,"second","second",-444702010),new cljs.core.Keyword(null,"minute","minute",-642875969),new cljs.core.Keyword(null,"hour","hour",-555989214),new cljs.core.Keyword(null,"day","day",-274800446),new cljs.core.Keyword(null,"week","week",-1326473278),new cljs.core.Keyword(null,"month","month",-1960248533),new cljs.core.Keyword(null,"quarter","quarter",-508147616),new cljs.core.Keyword(null,"year","year",335913393)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","datetime-add","metabase.legacy-mbql.schema/datetime-add",1618060232),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"datetime-add","datetime-add",209603411),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["datetime",metabase.legacy_mbql.schema.DateTimeExpressionArg,"amount",metabase.legacy_mbql.schema.NumericExpressionArg,"unit",metabase.legacy_mbql.schema.ArithmeticDateTimeUnit], 0)));

/**
 * Schema for a valid datetime-add clause.
 */
metabase.legacy_mbql.schema.datetime_add = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","datetime-add","metabase.legacy-mbql.schema/datetime-add",1618060232)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","now","metabase.legacy-mbql.schema/now",-108419820),metabase.legacy_mbql.schema.helpers.clause(new cljs.core.Keyword(null,"now","now",-1650525531)));

/**
 * Schema for a valid now clause.
 */
metabase.legacy_mbql.schema.now = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","now","metabase.legacy-mbql.schema/now",-108419820)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","datetime-subtract","metabase.legacy-mbql.schema/datetime-subtract",1964807984),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"datetime-subtract","datetime-subtract",275307697),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["datetime",metabase.legacy_mbql.schema.DateTimeExpressionArg,"amount",metabase.legacy_mbql.schema.NumericExpressionArg,"unit",metabase.legacy_mbql.schema.ArithmeticDateTimeUnit], 0)));

/**
 * Schema for a valid datetime-subtract clause.
 */
metabase.legacy_mbql.schema.datetime_subtract = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","datetime-subtract","metabase.legacy-mbql.schema/datetime-subtract",1964807984)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","DatetimeExpression","metabase.legacy-mbql.schema/DatetimeExpression",1980776843),metabase.legacy_mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema._PLUS_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema._PLUS_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","+","metabase.legacy-mbql.schema/+",2007691861,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"+","+",-740910886,null),"metabase/legacy_mbql/schema.cljc",51,new cljs.core.Keyword(null,"+","+",1913524883),1,584,584,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"+","+",1913524883),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Addable","Addable",1604273268,null)),new cljs.core.Keyword(null,"y","y",-1757859776),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Addable","Addable",1604273268,null)),new cljs.core.Keyword(null,"more","more",-2058821800),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"Addable","Addable",1604273268,null)))], null),cljs.core.List.EMPTY,"Schema for a valid + clause.",(cljs.core.truth_(metabase.legacy_mbql.schema._PLUS_)?metabase.legacy_mbql.schema._PLUS_.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"+","+",-740910886,null);
}
})(),metabase.legacy_mbql.schema._PLUS_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.datetime_add !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.datetime_add;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","datetime-add","metabase.legacy-mbql.schema/datetime-add",-1036375537,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"date-arithmetics","date-arithmetics",-1832808309),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"datetime-add","datetime-add",1850134938,null),"metabase/legacy_mbql/schema.cljc",67,new cljs.core.Keyword(null,"datetime-add","datetime-add",209603411),1,675,675,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"datetime-add","datetime-add",209603411),new cljs.core.Keyword(null,"datetime","datetime",494675702),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"DateTimeExpressionArg","DateTimeExpressionArg",-1507653823,null)),new cljs.core.Keyword(null,"amount","amount",364489504),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)),new cljs.core.Keyword(null,"unit","unit",375175175),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"ArithmeticDateTimeUnit","ArithmeticDateTimeUnit",-838492507,null))], null),cljs.core.List.EMPTY,"Schema for a valid datetime-add clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.datetime_add)?metabase.legacy_mbql.schema.datetime_add.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"datetime-add","datetime-add",1850134938,null);
}
})(),metabase.legacy_mbql.schema.datetime_add], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.datetime_subtract !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.datetime_subtract;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","datetime-subtract","metabase.legacy-mbql.schema/datetime-subtract",-689627785,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"date-arithmetics","date-arithmetics",-1832808309),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"datetime-subtract","datetime-subtract",1915839224,null),"metabase/legacy_mbql/schema.cljc",72,new cljs.core.Keyword(null,"datetime-subtract","datetime-subtract",275307697),1,682,682,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"datetime-subtract","datetime-subtract",275307697),new cljs.core.Keyword(null,"datetime","datetime",494675702),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"DateTimeExpressionArg","DateTimeExpressionArg",-1507653823,null)),new cljs.core.Keyword(null,"amount","amount",364489504),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)),new cljs.core.Keyword(null,"unit","unit",375175175),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"ArithmeticDateTimeUnit","ArithmeticDateTimeUnit",-838492507,null))], null),cljs.core.List.EMPTY,"Schema for a valid datetime-subtract clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.datetime_subtract)?metabase.legacy_mbql.schema.datetime_subtract.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"datetime-subtract","datetime-subtract",1915839224,null);
}
})(),metabase.legacy_mbql.schema.datetime_subtract], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.convert_timezone !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.convert_timezone;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","convert-timezone","metabase.legacy-mbql.schema/convert-timezone",1040488477,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"convert-timezone","convert-timezone",-124803001),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"convert-timezone","convert-timezone",1515728526,null),"metabase/legacy_mbql/schema.cljc",71,new cljs.core.Keyword(null,"convert-timezone","convert-timezone",-124803001),1,667,667,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"convert-timezone","convert-timezone",-124803001),new cljs.core.Keyword(null,"datetime","datetime",494675702),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"DateTimeExpressionArg","DateTimeExpressionArg",-1507653823,null)),new cljs.core.Keyword(null,"to","to",192099007),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"TimezoneId","TimezoneId",-1406242397,null)),new cljs.core.Keyword(null,"from","from",1815293044),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Symbol(null,"TimezoneId","TimezoneId",-1406242397,null)))], null),cljs.core.List.EMPTY,"Schema for a valid convert-timezone clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.convert_timezone)?metabase.legacy_mbql.schema.convert_timezone.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"convert-timezone","convert-timezone",1515728526,null);
}
})(),metabase.legacy_mbql.schema.convert_timezone], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.now !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.now;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","now","metabase.legacy-mbql.schema/now",1532111707,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"now","now",-1650525531),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"now","now",-9994004,null),"metabase/legacy_mbql/schema.cljc",45,new cljs.core.Keyword(null,"now","now",-1650525531),1,680,680,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"now","now",-1650525531)], null),cljs.core.List.EMPTY,"Schema for a valid now clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.now)?metabase.legacy_mbql.schema.now.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"now","now",-9994004,null);
}
})(),metabase.legacy_mbql.schema.now], null)], 0)));
/**
 * Schema for a valid MBQL `:filter` clause.
 */
metabase.legacy_mbql.schema.Filter = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","Filter","metabase.legacy-mbql.schema/Filter",690996372)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","and","metabase.legacy-mbql.schema/and",434475468),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"and","and",-971899817),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["first-clause",metabase.legacy_mbql.schema.Filter,"second-clause",metabase.legacy_mbql.schema.Filter,"other-clauses",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.legacy_mbql.schema.Filter], null)], 0)));

/**
 * Schema for a valid and clause.
 */
metabase.legacy_mbql.schema.and = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","and","metabase.legacy-mbql.schema/and",434475468)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","or","metabase.legacy-mbql.schema/or",1773720862),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"or","or",235744169),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["first-clause",metabase.legacy_mbql.schema.Filter,"second-clause",metabase.legacy_mbql.schema.Filter,"other-clauses",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.legacy_mbql.schema.Filter], null)], 0)));

/**
 * Schema for a valid or clause.
 */
metabase.legacy_mbql.schema.or = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","or","metabase.legacy-mbql.schema/or",1773720862)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","not","metabase.legacy-mbql.schema/not",946111929),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"not","not",-595976884),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["clause",metabase.legacy_mbql.schema.Filter], 0)));

/**
 * Schema for a valid not clause.
 */
metabase.legacy_mbql.schema.not = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","not","metabase.legacy-mbql.schema/not",946111929)], null);
metabase.legacy_mbql.schema.FieldOrExpressionRefOrRelativeDatetime = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"multi","multi",-190293005),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("error","message","error/message",-502809098),":field or :expression reference or :relative-datetime",new cljs.core.Keyword("error","fn","error/fn",-1263293860),cljs.core.constantly(":field or :expression reference or :relative-datetime"),new cljs.core.Keyword(null,"dispatch","dispatch",1319337009),(function (x){
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(new cljs.core.Keyword(null,"relative-datetime","relative-datetime",1285169278),x))){
return new cljs.core.Keyword(null,"relative-datetime","relative-datetime",1285169278);
} else {
return new cljs.core.Keyword(null,"else","else",-1508377146);
}
})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"relative-datetime","relative-datetime",1285169278),metabase.legacy_mbql.schema.relative_datetime], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"else","else",-1508377146),metabase.legacy_mbql.schema.Field], null)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","EqualityComparable","metabase.legacy-mbql.schema/EqualityComparable",-1099238918),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"equality comparable"], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.Keyword(null,"boolean","boolean",-1919418404),cljs.core.number_QMARK_,new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","TemporalLiteral","metabase.legacy-mbql.schema/TemporalLiteral",1831610098)], null),metabase.legacy_mbql.schema.FieldOrExpressionRefOrRelativeDatetime,metabase.legacy_mbql.schema.ExpressionArg,metabase.legacy_mbql.schema.value], null)], null));
/**
 * Schema for things that make sense in a `=` or `!=` filter, i.e. things that can be compared for equality.
 */
metabase.legacy_mbql.schema.EqualityComparable = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","EqualityComparable","metabase.legacy-mbql.schema/EqualityComparable",-1099238918)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","OrderComparable","metabase.legacy-mbql.schema/OrderComparable",-1872762139),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"multi","multi",-190293005),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("error","message","error/message",-502809098),"order comparable",new cljs.core.Keyword(null,"dispatch","dispatch",1319337009),(function (x){
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(new cljs.core.Keyword(null,"value","value",305978217),x))){
return new cljs.core.Keyword(null,"value","value",305978217);
} else {
return new cljs.core.Keyword(null,"else","else",-1508377146);
}
})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"value","value",305978217),metabase.legacy_mbql.schema.value], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"else","else",-1508377146),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),cljs.core.number_QMARK_,new cljs.core.Keyword(null,"string","string",-1989541586),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","TemporalLiteral","metabase.legacy-mbql.schema/TemporalLiteral",1831610098)], null),metabase.legacy_mbql.schema.ExpressionArg,metabase.legacy_mbql.schema.FieldOrExpressionRefOrRelativeDatetime], null)], null)], null));
/**
 * Schema for things that make sense in a filter like `>` or `<`, i.e. things that can be sorted.
 */
metabase.legacy_mbql.schema.OrderComparable = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","OrderComparable","metabase.legacy-mbql.schema/OrderComparable",-1872762139)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","=","metabase.legacy-mbql.schema/=",-1450378859),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"=","=",1152933628),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.legacy_mbql.schema.EqualityComparable,"value-or-field",metabase.legacy_mbql.schema.EqualityComparable,"more-values-or-fields",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.legacy_mbql.schema.EqualityComparable], null)], 0)));

/**
 * Schema for a valid = clause.
 */
metabase.legacy_mbql.schema._EQ_ = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","=","metabase.legacy-mbql.schema/=",-1450378859)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","!=","metabase.legacy-mbql.schema/!=",778378221),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"!=","!=",-1841737356),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.legacy_mbql.schema.EqualityComparable,"value-or-field",metabase.legacy_mbql.schema.EqualityComparable,"more-values-or-fields",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.legacy_mbql.schema.EqualityComparable], null)], 0)));

/**
 * Schema for a valid != clause.
 */
metabase.legacy_mbql.schema._BANG__EQ_ = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","!=","metabase.legacy-mbql.schema/!=",778378221)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","<","metabase.legacy-mbql.schema/<",1042350050),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"<","<",-646864291),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.legacy_mbql.schema.OrderComparable,"value-or-field",metabase.legacy_mbql.schema.OrderComparable], 0)));

/**
 * Schema for a valid < clause.
 */
metabase.legacy_mbql.schema._LT_ = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","<","metabase.legacy-mbql.schema/<",1042350050)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema",">","metabase.legacy-mbql.schema/>",-1703186029),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,">",">",-555517146),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.legacy_mbql.schema.OrderComparable,"value-or-field",metabase.legacy_mbql.schema.OrderComparable], 0)));

/**
 * Schema for a valid > clause.
 */
metabase.legacy_mbql.schema._GT_ = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema",">","metabase.legacy-mbql.schema/>",-1703186029)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","<=","metabase.legacy-mbql.schema/<=",-2045281035),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"<=","<=",-395636158),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.legacy_mbql.schema.OrderComparable,"value-or-field",metabase.legacy_mbql.schema.OrderComparable], 0)));

/**
 * Schema for a valid <= clause.
 */
metabase.legacy_mbql.schema._LT__EQ_ = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","<=","metabase.legacy-mbql.schema/<=",-2045281035)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema",">=","metabase.legacy-mbql.schema/>=",922778878),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,">=",">=",-623615505),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.legacy_mbql.schema.OrderComparable,"value-or-field",metabase.legacy_mbql.schema.OrderComparable], 0)));

/**
 * Schema for a valid >= clause.
 */
metabase.legacy_mbql.schema._GT__EQ_ = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema",">=","metabase.legacy-mbql.schema/>=",922778878)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","between","metabase.legacy-mbql.schema/between",-1491621633),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"between","between",1131099276),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.legacy_mbql.schema.OrderComparable,"min",metabase.legacy_mbql.schema.OrderComparable,"max",metabase.legacy_mbql.schema.OrderComparable], 0)));

/**
 * Schema for a valid between clause.
 */
metabase.legacy_mbql.schema.between = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","between","metabase.legacy-mbql.schema/between",-1491621633)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","inside","metabase.legacy-mbql.schema/inside",1373560082),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"inside","inside",1972503011),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["lat-field",metabase.legacy_mbql.schema.OrderComparable,"lon-field",metabase.legacy_mbql.schema.OrderComparable,"lat-max",metabase.legacy_mbql.schema.OrderComparable,"lon-min",metabase.legacy_mbql.schema.OrderComparable,"lat-min",metabase.legacy_mbql.schema.OrderComparable,"lon-max",metabase.legacy_mbql.schema.OrderComparable], 0)));

/**
 * Schema for a valid inside clause.
 */
metabase.legacy_mbql.schema.inside = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","inside","metabase.legacy-mbql.schema/inside",1373560082)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","is-null","metabase.legacy-mbql.schema/is-null",-452804271),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"is-null","is-null",-1997050930),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.legacy_mbql.schema.Field], 0)));

/**
 * Schema for a valid is-null clause.
 */
metabase.legacy_mbql.schema.is_null = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","is-null","metabase.legacy-mbql.schema/is-null",-452804271)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","not-null","metabase.legacy-mbql.schema/not-null",1401961582),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"not-null","not-null",-1326718535),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.legacy_mbql.schema.Field], 0)));

/**
 * Schema for a valid not-null clause.
 */
metabase.legacy_mbql.schema.not_null = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","not-null","metabase.legacy-mbql.schema/not-null",1401961582)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","is-empty","metabase.legacy-mbql.schema/is-empty",-439210121),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"is-empty","is-empty",-1040302908),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.legacy_mbql.schema.Field], 0)));

/**
 * Schema for a valid is-empty clause.
 */
metabase.legacy_mbql.schema.is_empty = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","is-empty","metabase.legacy-mbql.schema/is-empty",-439210121)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","not-empty","metabase.legacy-mbql.schema/not-empty",1113787988),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"not-empty","not-empty",388922063),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.legacy_mbql.schema.Field], 0)));

/**
 * Schema for a valid not-empty clause.
 */
metabase.legacy_mbql.schema.not_empty = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","not-empty","metabase.legacy-mbql.schema/not-empty",1113787988)], null);
metabase.legacy_mbql.schema.StringFilterOptions = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"case-sensitive","case-sensitive",-1005239404),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.Keyword(null,"boolean","boolean",-1919418404)], null)], null);
var seq__75305_75995 = cljs.core.seq(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("metabase.legacy-mbql.schema","starts-with","metabase.legacy-mbql.schema/starts-with",-1165191276),new cljs.core.Keyword("metabase.legacy-mbql.schema","ends-with","metabase.legacy-mbql.schema/ends-with",-2129313374),new cljs.core.Keyword("metabase.legacy-mbql.schema","contains","metabase.legacy-mbql.schema/contains",210576221),new cljs.core.Keyword("metabase.legacy-mbql.schema","does-not-contain","metabase.legacy-mbql.schema/does-not-contain",-1821305014)], null));
var chunk__75306_75996 = null;
var count__75307_75997 = (0);
var i__75308_75998 = (0);
while(true){
if((i__75308_75998 < count__75307_75997)){
var clause_keyword_75999 = chunk__75306_75996.cljs$core$IIndexed$_nth$arity$2(null,i__75308_75998);
metabase.util.malli.registry.register_BANG_(clause_keyword_75999,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.name(clause_keyword_75999)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.legacy_mbql.schema.StringExpressionArg,"string-or-field",metabase.legacy_mbql.schema.StringExpressionArg,"options",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),metabase.legacy_mbql.schema.StringFilterOptions], null)], 0)),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.name(clause_keyword_75999)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["options",metabase.legacy_mbql.schema.StringFilterOptions,"field",metabase.legacy_mbql.schema.StringExpressionArg,"string-or-field",metabase.legacy_mbql.schema.StringExpressionArg,"second-string-or-field",metabase.legacy_mbql.schema.StringExpressionArg,"more-strings-or-fields",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.legacy_mbql.schema.StringExpressionArg], null)], 0))], null));


var G__76001 = seq__75305_75995;
var G__76002 = chunk__75306_75996;
var G__76003 = count__75307_75997;
var G__76004 = (i__75308_75998 + (1));
seq__75305_75995 = G__76001;
chunk__75306_75996 = G__76002;
count__75307_75997 = G__76003;
i__75308_75998 = G__76004;
continue;
} else {
var temp__5804__auto___76005 = cljs.core.seq(seq__75305_75995);
if(temp__5804__auto___76005){
var seq__75305_76006__$1 = temp__5804__auto___76005;
if(cljs.core.chunked_seq_QMARK_(seq__75305_76006__$1)){
var c__5525__auto___76007 = cljs.core.chunk_first(seq__75305_76006__$1);
var G__76008 = cljs.core.chunk_rest(seq__75305_76006__$1);
var G__76009 = c__5525__auto___76007;
var G__76010 = cljs.core.count(c__5525__auto___76007);
var G__76011 = (0);
seq__75305_75995 = G__76008;
chunk__75306_75996 = G__76009;
count__75307_75997 = G__76010;
i__75308_75998 = G__76011;
continue;
} else {
var clause_keyword_76013 = cljs.core.first(seq__75305_76006__$1);
metabase.util.malli.registry.register_BANG_(clause_keyword_76013,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.name(clause_keyword_76013)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.legacy_mbql.schema.StringExpressionArg,"string-or-field",metabase.legacy_mbql.schema.StringExpressionArg,"options",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),metabase.legacy_mbql.schema.StringFilterOptions], null)], 0)),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.name(clause_keyword_76013)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["options",metabase.legacy_mbql.schema.StringFilterOptions,"field",metabase.legacy_mbql.schema.StringExpressionArg,"string-or-field",metabase.legacy_mbql.schema.StringExpressionArg,"second-string-or-field",metabase.legacy_mbql.schema.StringExpressionArg,"more-strings-or-fields",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rest","rest",-1241696419),metabase.legacy_mbql.schema.StringExpressionArg], null)], 0))], null));


var G__76015 = cljs.core.next(seq__75305_76006__$1);
var G__76016 = null;
var G__76017 = (0);
var G__76018 = (0);
seq__75305_75995 = G__76015;
chunk__75306_75996 = G__76016;
count__75307_75997 = G__76017;
i__75308_75998 = G__76018;
continue;
}
} else {
}
}
break;
}
/**
 * Schema for a valid :starts-with clause.
 */
metabase.legacy_mbql.schema.starts_with = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","starts-with","metabase.legacy-mbql.schema/starts-with",-1165191276)], null);
/**
 * Schema for a valid :ends-with clause.
 */
metabase.legacy_mbql.schema.ends_with = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","ends-with","metabase.legacy-mbql.schema/ends-with",-2129313374)], null);
/**
 * Schema for a valid :contains clause.
 */
metabase.legacy_mbql.schema.contains = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","contains","metabase.legacy-mbql.schema/contains",210576221)], null);
/**
 * Schema for a valid :does-not-contain clause.
 */
metabase.legacy_mbql.schema.does_not_contain = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","does-not-contain","metabase.legacy-mbql.schema/does-not-contain",-1821305014)], null);
metabase.legacy_mbql.schema.TimeIntervalOptions = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"include-current","include-current",-1602371981),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.Keyword(null,"boolean","boolean",-1919418404)], null)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","time-interval","metabase.legacy-mbql.schema/time-interval",225786964),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"time-interval","time-interval",704622015),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.legacy_mbql.schema.Field,"n",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"enum","enum",1679018432),new cljs.core.Keyword(null,"current","current",-1088038603),new cljs.core.Keyword(null,"last","last",1105735132),new cljs.core.Keyword(null,"next","next",-117701485)], null)], null),"unit",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","RelativeDatetimeUnit","metabase.legacy-mbql.schema/RelativeDatetimeUnit",-52225489)], null),"options",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),metabase.legacy_mbql.schema.TimeIntervalOptions], null)], 0)));

/**
 * Schema for a valid time-interval clause.
 */
metabase.legacy_mbql.schema.time_interval = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","time-interval","metabase.legacy-mbql.schema/time-interval",225786964)], null);
metabase.legacy_mbql.schema.SegmentID = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.lib.schema.id","segment","metabase.lib.schema.id/segment",-983297351)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","segment","metabase.legacy-mbql.schema/segment",715112973),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"segment","segment",-964921196),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["segment-id",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),metabase.legacy_mbql.schema.SegmentID,new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)], null)], 0)));

/**
 * Schema for a valid segment clause.
 */
metabase.legacy_mbql.schema.segment = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","segment","metabase.legacy-mbql.schema/segment",715112973)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","BooleanExpression","metabase.legacy-mbql.schema/BooleanExpression",929644905),metabase.legacy_mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.and !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.and;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","and","metabase.legacy-mbql.schema/and",2075006995,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"and","and",668631710,null),"metabase/legacy_mbql/schema.cljc",15,new cljs.core.Keyword(null,"and","and",-971899817),1,696,696,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"and","and",-971899817),new cljs.core.Keyword(null,"first-clause","first-clause",-20953491),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null)),new cljs.core.Keyword(null,"second-clause","second-clause",-461435645),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null)),new cljs.core.Keyword(null,"other-clauses","other-clauses",1570511021),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null)))], null),cljs.core.List.EMPTY,"Schema for a valid and clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.and)?metabase.legacy_mbql.schema.and.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"and","and",668631710,null);
}
})(),metabase.legacy_mbql.schema.and], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.or !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.or;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","or","metabase.legacy-mbql.schema/or",-880714907,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"or","or",1876275696,null),"metabase/legacy_mbql/schema.cljc",14,new cljs.core.Keyword(null,"or","or",235744169),1,701,701,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.Keyword(null,"first-clause","first-clause",-20953491),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null)),new cljs.core.Keyword(null,"second-clause","second-clause",-461435645),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null)),new cljs.core.Keyword(null,"other-clauses","other-clauses",1570511021),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null)))], null),cljs.core.List.EMPTY,"Schema for a valid or clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.or)?metabase.legacy_mbql.schema.or.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"or","or",1876275696,null);
}
})(),metabase.legacy_mbql.schema.or], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.not !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.not;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","not","metabase.legacy-mbql.schema/not",-1708323840,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"not","not",1044554643,null),"metabase/legacy_mbql/schema.cljc",15,new cljs.core.Keyword(null,"not","not",-595976884),1,706,706,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"not","not",-595976884),new cljs.core.Keyword(null,"clause","clause",1479668060),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null))], null),cljs.core.List.EMPTY,"Schema for a valid not clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.not)?metabase.legacy_mbql.schema.not.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"not","not",1044554643,null);
}
})(),metabase.legacy_mbql.schema.not], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema._LT_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema._LT_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","<","metabase.legacy-mbql.schema/<",-1612085719,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"<","<",993667236,null),"metabase/legacy_mbql/schema.cljc",13,new cljs.core.Keyword(null,"<","<",-646864291),1,770,770,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"<","<",-646864291),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"value-or-field","value-or-field",-1387286309),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null))], null),cljs.core.List.EMPTY,"Schema for a valid < clause.",(cljs.core.truth_(metabase.legacy_mbql.schema._LT_)?metabase.legacy_mbql.schema._LT_.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"<","<",993667236,null);
}
})(),metabase.legacy_mbql.schema._LT_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema._LT__EQ_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema._LT__EQ_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","<=","metabase.legacy-mbql.schema/<=",-404749508,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"<=","<=",1244895369,null),"metabase/legacy_mbql/schema.cljc",14,new cljs.core.Keyword(null,"<=","<=",-395636158),1,772,772,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"<=","<=",-395636158),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"value-or-field","value-or-field",-1387286309),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null))], null),cljs.core.List.EMPTY,"Schema for a valid <= clause.",(cljs.core.truth_(metabase.legacy_mbql.schema._LT__EQ_)?metabase.legacy_mbql.schema._LT__EQ_.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"<=","<=",1244895369,null);
}
})(),metabase.legacy_mbql.schema._LT__EQ_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema._GT_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema._GT_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema",">","metabase.legacy-mbql.schema/>",-62654502,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,">",">",1085014381,null),"metabase/legacy_mbql/schema.cljc",13,new cljs.core.Keyword(null,">",">",-555517146),1,771,771,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,">",">",-555517146),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"value-or-field","value-or-field",-1387286309),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null))], null),cljs.core.List.EMPTY,"Schema for a valid > clause.",(cljs.core.truth_(metabase.legacy_mbql.schema._GT_)?metabase.legacy_mbql.schema._GT_.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,">",">",1085014381,null);
}
})(),metabase.legacy_mbql.schema._GT_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema._GT__EQ_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema._GT__EQ_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema",">=","metabase.legacy-mbql.schema/>=",-1731656891,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,">=",">=",1016916022,null),"metabase/legacy_mbql/schema.cljc",14,new cljs.core.Keyword(null,">=",">=",-623615505),1,773,773,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,">=",">=",-623615505),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"value-or-field","value-or-field",-1387286309),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null))], null),cljs.core.List.EMPTY,"Schema for a valid >= clause.",(cljs.core.truth_(metabase.legacy_mbql.schema._GT__EQ_)?metabase.legacy_mbql.schema._GT__EQ_.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,">=",">=",1016916022,null);
}
})(),metabase.legacy_mbql.schema._GT__EQ_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema._EQ_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema._EQ_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","=","metabase.legacy-mbql.schema/=",190152668,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"=","=",-1501502141,null),"metabase/legacy_mbql/schema.cljc",13,new cljs.core.Keyword(null,"=","=",1152933628),1,767,767,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=","=",1152933628),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"EqualityComparable","EqualityComparable",-2076258858,null)),new cljs.core.Keyword(null,"value-or-field","value-or-field",-1387286309),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"EqualityComparable","EqualityComparable",-2076258858,null)),new cljs.core.Keyword(null,"more-values-or-fields","more-values-or-fields",-886177554),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"EqualityComparable","EqualityComparable",-2076258858,null)))], null),cljs.core.List.EMPTY,"Schema for a valid = clause.",(cljs.core.truth_(metabase.legacy_mbql.schema._EQ_)?metabase.legacy_mbql.schema._EQ_.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"=","=",-1501502141,null);
}
})(),metabase.legacy_mbql.schema._EQ_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema._BANG__EQ_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema._BANG__EQ_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","!=","metabase.legacy-mbql.schema/!=",-1876057548,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"!=","!=",-201205829,null),"metabase/legacy_mbql/schema.cljc",14,new cljs.core.Keyword(null,"!=","!=",-1841737356),1,768,768,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"!=","!=",-1841737356),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"EqualityComparable","EqualityComparable",-2076258858,null)),new cljs.core.Keyword(null,"value-or-field","value-or-field",-1387286309),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"EqualityComparable","EqualityComparable",-2076258858,null)),new cljs.core.Keyword(null,"more-values-or-fields","more-values-or-fields",-886177554),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"EqualityComparable","EqualityComparable",-2076258858,null)))], null),cljs.core.List.EMPTY,"Schema for a valid != clause.",(cljs.core.truth_(metabase.legacy_mbql.schema._BANG__EQ_)?metabase.legacy_mbql.schema._BANG__EQ_.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"!=","!=",-201205829,null);
}
})(),metabase.legacy_mbql.schema._BANG__EQ_], null)], 0)));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","Filter","metabase.legacy-mbql.schema/Filter",690996372),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"multi","multi",-190293005),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("error","message","error/message",-502809098),"valid filter expression",new cljs.core.Keyword(null,"dispatch","dispatch",1319337009),(function (x){
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(metabase.legacy_mbql.schema.datetime_functions,x))){
return new cljs.core.Keyword(null,"datetime","datetime",494675702);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(metabase.legacy_mbql.schema.numeric_functions,x))){
return new cljs.core.Keyword(null,"numeric","numeric",-1495594714);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(metabase.legacy_mbql.schema.string_functions,x))){
return new cljs.core.Keyword(null,"string","string",-1989541586);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(metabase.legacy_mbql.schema.boolean_functions,x))){
return new cljs.core.Keyword(null,"boolean","boolean",-1919418404);
} else {
return new cljs.core.Keyword(null,"else","else",-1508377146);

}
}
}
}
})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"datetime","datetime",494675702),metabase.legacy_mbql.schema.DatetimeExpression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"numeric","numeric",-1495594714),metabase.legacy_mbql.schema.NumericExpression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"string","string",-1989541586),metabase.legacy_mbql.schema.StringExpression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"boolean","boolean",-1919418404),metabase.legacy_mbql.schema.BooleanExpression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"else","else",-1508377146),metabase.legacy_mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.and !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.and;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","and","metabase.legacy-mbql.schema/and",2075006995,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"and","and",668631710,null),"metabase/legacy_mbql/schema.cljc",15,new cljs.core.Keyword(null,"and","and",-971899817),1,696,696,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"and","and",-971899817),new cljs.core.Keyword(null,"first-clause","first-clause",-20953491),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null)),new cljs.core.Keyword(null,"second-clause","second-clause",-461435645),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null)),new cljs.core.Keyword(null,"other-clauses","other-clauses",1570511021),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null)))], null),cljs.core.List.EMPTY,"Schema for a valid and clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.and)?metabase.legacy_mbql.schema.and.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"and","and",668631710,null);
}
})(),metabase.legacy_mbql.schema.and], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.or !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.or;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","or","metabase.legacy-mbql.schema/or",-880714907,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"or","or",1876275696,null),"metabase/legacy_mbql/schema.cljc",14,new cljs.core.Keyword(null,"or","or",235744169),1,701,701,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.Keyword(null,"first-clause","first-clause",-20953491),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null)),new cljs.core.Keyword(null,"second-clause","second-clause",-461435645),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null)),new cljs.core.Keyword(null,"other-clauses","other-clauses",1570511021),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null)))], null),cljs.core.List.EMPTY,"Schema for a valid or clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.or)?metabase.legacy_mbql.schema.or.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"or","or",1876275696,null);
}
})(),metabase.legacy_mbql.schema.or], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.not !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.not;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","not","metabase.legacy-mbql.schema/not",-1708323840,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"not","not",1044554643,null),"metabase/legacy_mbql/schema.cljc",15,new cljs.core.Keyword(null,"not","not",-595976884),1,706,706,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"not","not",-595976884),new cljs.core.Keyword(null,"clause","clause",1479668060),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null))], null),cljs.core.List.EMPTY,"Schema for a valid not clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.not)?metabase.legacy_mbql.schema.not.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"not","not",1044554643,null);
}
})(),metabase.legacy_mbql.schema.not], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema._EQ_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema._EQ_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","=","metabase.legacy-mbql.schema/=",190152668,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"=","=",-1501502141,null),"metabase/legacy_mbql/schema.cljc",13,new cljs.core.Keyword(null,"=","=",1152933628),1,767,767,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=","=",1152933628),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"EqualityComparable","EqualityComparable",-2076258858,null)),new cljs.core.Keyword(null,"value-or-field","value-or-field",-1387286309),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"EqualityComparable","EqualityComparable",-2076258858,null)),new cljs.core.Keyword(null,"more-values-or-fields","more-values-or-fields",-886177554),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"EqualityComparable","EqualityComparable",-2076258858,null)))], null),cljs.core.List.EMPTY,"Schema for a valid = clause.",(cljs.core.truth_(metabase.legacy_mbql.schema._EQ_)?metabase.legacy_mbql.schema._EQ_.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"=","=",-1501502141,null);
}
})(),metabase.legacy_mbql.schema._EQ_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema._BANG__EQ_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema._BANG__EQ_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","!=","metabase.legacy-mbql.schema/!=",-1876057548,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"!=","!=",-201205829,null),"metabase/legacy_mbql/schema.cljc",14,new cljs.core.Keyword(null,"!=","!=",-1841737356),1,768,768,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"!=","!=",-1841737356),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"EqualityComparable","EqualityComparable",-2076258858,null)),new cljs.core.Keyword(null,"value-or-field","value-or-field",-1387286309),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"EqualityComparable","EqualityComparable",-2076258858,null)),new cljs.core.Keyword(null,"more-values-or-fields","more-values-or-fields",-886177554),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"EqualityComparable","EqualityComparable",-2076258858,null)))], null),cljs.core.List.EMPTY,"Schema for a valid != clause.",(cljs.core.truth_(metabase.legacy_mbql.schema._BANG__EQ_)?metabase.legacy_mbql.schema._BANG__EQ_.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"!=","!=",-201205829,null);
}
})(),metabase.legacy_mbql.schema._BANG__EQ_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema._LT_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema._LT_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","<","metabase.legacy-mbql.schema/<",-1612085719,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"<","<",993667236,null),"metabase/legacy_mbql/schema.cljc",13,new cljs.core.Keyword(null,"<","<",-646864291),1,770,770,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"<","<",-646864291),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"value-or-field","value-or-field",-1387286309),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null))], null),cljs.core.List.EMPTY,"Schema for a valid < clause.",(cljs.core.truth_(metabase.legacy_mbql.schema._LT_)?metabase.legacy_mbql.schema._LT_.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"<","<",993667236,null);
}
})(),metabase.legacy_mbql.schema._LT_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema._GT_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema._GT_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema",">","metabase.legacy-mbql.schema/>",-62654502,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,">",">",1085014381,null),"metabase/legacy_mbql/schema.cljc",13,new cljs.core.Keyword(null,">",">",-555517146),1,771,771,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,">",">",-555517146),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"value-or-field","value-or-field",-1387286309),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null))], null),cljs.core.List.EMPTY,"Schema for a valid > clause.",(cljs.core.truth_(metabase.legacy_mbql.schema._GT_)?metabase.legacy_mbql.schema._GT_.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,">",">",1085014381,null);
}
})(),metabase.legacy_mbql.schema._GT_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema._LT__EQ_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema._LT__EQ_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","<=","metabase.legacy-mbql.schema/<=",-404749508,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"<=","<=",1244895369,null),"metabase/legacy_mbql/schema.cljc",14,new cljs.core.Keyword(null,"<=","<=",-395636158),1,772,772,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"<=","<=",-395636158),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"value-or-field","value-or-field",-1387286309),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null))], null),cljs.core.List.EMPTY,"Schema for a valid <= clause.",(cljs.core.truth_(metabase.legacy_mbql.schema._LT__EQ_)?metabase.legacy_mbql.schema._LT__EQ_.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"<=","<=",1244895369,null);
}
})(),metabase.legacy_mbql.schema._LT__EQ_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema._GT__EQ_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema._GT__EQ_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema",">=","metabase.legacy-mbql.schema/>=",-1731656891,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,">=",">=",1016916022,null),"metabase/legacy_mbql/schema.cljc",14,new cljs.core.Keyword(null,">=",">=",-623615505),1,773,773,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,">=",">=",-623615505),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"value-or-field","value-or-field",-1387286309),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null))], null),cljs.core.List.EMPTY,"Schema for a valid >= clause.",(cljs.core.truth_(metabase.legacy_mbql.schema._GT__EQ_)?metabase.legacy_mbql.schema._GT__EQ_.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,">=",">=",1016916022,null);
}
})(),metabase.legacy_mbql.schema._GT__EQ_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.between !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.between;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","between","metabase.legacy-mbql.schema/between",148909894,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"between","between",-1523336493,null),"metabase/legacy_mbql/schema.cljc",19,new cljs.core.Keyword(null,"between","between",1131099276),1,776,776,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"between","between",1131099276),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"min","min",444991522),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"max","max",61366548),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null))], null),cljs.core.List.EMPTY,"Schema for a valid between clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.between)?metabase.legacy_mbql.schema.between.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"between","between",-1523336493,null);
}
})(),metabase.legacy_mbql.schema.between], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.starts_with !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.starts_with;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","starts-with","metabase.legacy-mbql.schema/starts-with",475340251,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"starts-with","starts-with",2007034536,null),"metabase/legacy_mbql/schema.cljc",46,new cljs.core.Keyword(null,"starts-with","starts-with",366503009),1,817,817,cljs.core.List.EMPTY,"Schema for a valid :starts-with clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.starts_with)?metabase.legacy_mbql.schema.starts_with.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"starts-with","starts-with",2007034536,null);
}
})(),metabase.legacy_mbql.schema.starts_with], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.ends_with !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.ends_with;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","ends-with","metabase.legacy-mbql.schema/ends-with",-488781847,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"ends-with","ends-with",1183740516,null),"metabase/legacy_mbql/schema.cljc",42,new cljs.core.Keyword(null,"ends-with","ends-with",-456791011),1,820,820,cljs.core.List.EMPTY,"Schema for a valid :ends-with clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.ends_with)?metabase.legacy_mbql.schema.ends_with.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"ends-with","ends-with",1183740516,null);
}
})(),metabase.legacy_mbql.schema.ends_with], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.contains !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.contains;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","contains","metabase.legacy-mbql.schema/contains",1851107748,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"contains","contains",-1977535957,null),"metabase/legacy_mbql/schema.cljc",40,new cljs.core.Keyword(null,"contains","contains",676899812),1,823,823,cljs.core.List.EMPTY,"Schema for a valid :contains clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.contains)?metabase.legacy_mbql.schema.contains.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"contains","contains",-1977535957,null);
}
})(),metabase.legacy_mbql.schema.contains], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.does_not_contain !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.does_not_contain;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","does-not-contain","metabase.legacy-mbql.schema/does-not-contain",-180773487,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"does-not-contain","does-not-contain",1365584674,null),"metabase/legacy_mbql/schema.cljc",19,new cljs.core.Keyword(null,"does-not-contain","does-not-contain",-274946853),1,828,830,true,cljs.core.List.EMPTY,"Schema for a valid :does-not-contain clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.does_not_contain)?metabase.legacy_mbql.schema.does_not_contain.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"does-not-contain","does-not-contain",1365584674,null);
}
})(),metabase.legacy_mbql.schema.does_not_contain], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.inside !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.inside;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","inside","metabase.legacy-mbql.schema/inside",-1280875687,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"inside","inside",-681932758,null),"metabase/legacy_mbql/schema.cljc",26,new cljs.core.Keyword(null,"inside","inside",1972503011),1,779,779,true,new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"inside","inside",1972503011),new cljs.core.Keyword(null,"lat-field","lat-field",-830652957),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"lon-field","lon-field",517872067),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"lat-max","lat-max",841568226),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"lon-min","lon-min",-787291357),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"lat-min","lat-min",1630784161),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null)),new cljs.core.Keyword(null,"lon-max","lon-max",1590224717),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"OrderComparable","OrderComparable",772072595,null))], null),cljs.core.List.EMPTY,"Schema for a valid inside clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.inside)?metabase.legacy_mbql.schema.inside.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"inside","inside",-681932758,null);
}
})(),metabase.legacy_mbql.schema.inside], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.is_empty !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.is_empty;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","is-empty","metabase.legacy-mbql.schema/is-empty",1201321406,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"is-empty","is-empty",600228619,null),"metabase/legacy_mbql/schema.cljc",28,new cljs.core.Keyword(null,"is-empty","is-empty",-1040302908),1,793,793,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"is-empty","is-empty",-1040302908),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Field","Field",430385967,null))], null),cljs.core.List.EMPTY,"Schema for a valid is-empty clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.is_empty)?metabase.legacy_mbql.schema.is_empty.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"is-empty","is-empty",600228619,null);
}
})(),metabase.legacy_mbql.schema.is_empty], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.not_empty !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.not_empty;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","not-empty","metabase.legacy-mbql.schema/not-empty",-1540647781,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"not-empty","not-empty",2029453590,null),"metabase/legacy_mbql/schema.cljc",29,new cljs.core.Keyword(null,"not-empty","not-empty",388922063),1,794,794,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"not-empty","not-empty",388922063),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Field","Field",430385967,null))], null),cljs.core.List.EMPTY,"Schema for a valid not-empty clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.not_empty)?metabase.legacy_mbql.schema.not_empty.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"not-empty","not-empty",2029453590,null);
}
})(),metabase.legacy_mbql.schema.not_empty], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.is_null !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.is_null;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","is-null","metabase.legacy-mbql.schema/is-null",1187727256,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"is-null","is-null",-356519403,null),"metabase/legacy_mbql/schema.cljc",27,new cljs.core.Keyword(null,"is-null","is-null",-1997050930),1,788,788,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"is-null","is-null",-1997050930),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Field","Field",430385967,null))], null),cljs.core.List.EMPTY,"Schema for a valid is-null clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.is_null)?metabase.legacy_mbql.schema.is_null.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"is-null","is-null",-356519403,null);
}
})(),metabase.legacy_mbql.schema.is_null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.not_null !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.not_null;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","not-null","metabase.legacy-mbql.schema/not-null",-1252474187,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"not-null","not-null",313812992,null),"metabase/legacy_mbql/schema.cljc",28,new cljs.core.Keyword(null,"not-null","not-null",-1326718535),1,789,789,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"not-null","not-null",-1326718535),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Field","Field",430385967,null))], null),cljs.core.List.EMPTY,"Schema for a valid not-null clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.not_null)?metabase.legacy_mbql.schema.not_null.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"not-null","not-null",313812992,null);
}
})(),metabase.legacy_mbql.schema.not_null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.time_interval !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.time_interval;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","time-interval","metabase.legacy-mbql.schema/time-interval",1866318491,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"time-interval","time-interval",-1949813754,null),"metabase/legacy_mbql/schema.cljc",33,new cljs.core.Keyword(null,"time-interval","time-interval",704622015),1,853,853,true,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"time-interval","time-interval",704622015),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Field","Field",430385967,null)),new cljs.core.Keyword(null,"n","n",562130025),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"enum","enum",1679018432),new cljs.core.Keyword(null,"current","current",-1088038603),new cljs.core.Keyword(null,"last","last",1105735132),new cljs.core.Keyword(null,"next","next",-117701485)], null)], null)),new cljs.core.Keyword(null,"unit","unit",375175175),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","RelativeDatetimeUnit","metabase.legacy-mbql.schema/RelativeDatetimeUnit",-52225489)], null)),new cljs.core.Keyword(null,"options","options",99638489),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Symbol(null,"TimeIntervalOptions","TimeIntervalOptions",1566864026,null)))], null),cljs.core.List.EMPTY,"Schema for a valid time-interval clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.time_interval)?metabase.legacy_mbql.schema.time_interval.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"time-interval","time-interval",-1949813754,null);
}
})(),metabase.legacy_mbql.schema.time_interval], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.segment !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.segment;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","segment","metabase.legacy-mbql.schema/segment",-1939322796,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"segment","segment",675610331,null),"metabase/legacy_mbql/schema.cljc",27,new cljs.core.Keyword(null,"segment","segment",-964921196),1,869,869,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"segment","segment",-964921196),new cljs.core.Keyword(null,"segment-id","segment-id",1810133590),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.Symbol(null,"SegmentID","SegmentID",-1773652704,null),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)], null))], null),cljs.core.List.EMPTY,"Schema for a valid segment clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.segment)?metabase.legacy_mbql.schema.segment.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"segment","segment",675610331,null);
}
})(),metabase.legacy_mbql.schema.segment], null)], 0))], null)], null));
metabase.legacy_mbql.schema.CaseClause = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"tuple","tuple",-472667284),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),":case subclause"], null),metabase.legacy_mbql.schema.Filter,metabase.legacy_mbql.schema.ExpressionArg], null);
metabase.legacy_mbql.schema.CaseClauses = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"sequential","sequential",-1082983960),metabase.legacy_mbql.schema.CaseClause], null)], null);
metabase.legacy_mbql.schema.CaseOptions = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),":case options"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),metabase.legacy_mbql.schema.ExpressionArg], null)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","case","metabase.legacy-mbql.schema/case",-1235525843),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"case","case",1143702196),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["clauses",metabase.legacy_mbql.schema.CaseClauses,"options",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),metabase.legacy_mbql.schema.CaseOptions], null)], 0)));

/**
 * Schema for a valid case clause.
 */
metabase.legacy_mbql.schema.case$ = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","case","metabase.legacy-mbql.schema/case",-1235525843)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","NumericExpression","metabase.legacy-mbql.schema/NumericExpression",-838627617),metabase.legacy_mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema._PLUS_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema._PLUS_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","+","metabase.legacy-mbql.schema/+",2007691861,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"+","+",-740910886,null),"metabase/legacy_mbql/schema.cljc",51,new cljs.core.Keyword(null,"+","+",1913524883),1,584,584,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"+","+",1913524883),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Addable","Addable",1604273268,null)),new cljs.core.Keyword(null,"y","y",-1757859776),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Addable","Addable",1604273268,null)),new cljs.core.Keyword(null,"more","more",-2058821800),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"Addable","Addable",1604273268,null)))], null),cljs.core.List.EMPTY,"Schema for a valid + clause.",(cljs.core.truth_(metabase.legacy_mbql.schema._PLUS_)?metabase.legacy_mbql.schema._PLUS_.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"+","+",-740910886,null);
}
})(),metabase.legacy_mbql.schema._PLUS_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema._ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema._;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","-","metabase.legacy-mbql.schema/-",-1894971227,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"-","-",-471816912,null),"metabase/legacy_mbql/schema.cljc",51,new cljs.core.Keyword(null,"-","-",-2112348439),1,587,587,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"-","-",-2112348439),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)),new cljs.core.Keyword(null,"y","y",-1757859776),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Addable","Addable",1604273268,null)),new cljs.core.Keyword(null,"more","more",-2058821800),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"Addable","Addable",1604273268,null)))], null),cljs.core.List.EMPTY,"Schema for a valid - clause.",(cljs.core.truth_(metabase.legacy_mbql.schema._)?metabase.legacy_mbql.schema._.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"-","-",-471816912,null);
}
})(),metabase.legacy_mbql.schema._], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema._SLASH_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","/","metabase.legacy-mbql.schema//",1376083032,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"/","/",-1371932971,null),"metabase/legacy_mbql/schema.cljc",new cljs.core.Keyword(null,"/","/",1282502798),1,590,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"/","/",1282502798),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)),new cljs.core.Keyword(null,"y","y",-1757859776),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)),new cljs.core.Keyword(null,"more","more",-2058821800),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)))], null),cljs.core.List.EMPTY,"Schema for a valid / clause.",(cljs.core.truth_(metabase.legacy_mbql.schema._SLASH_)?metabase.legacy_mbql.schema._SLASH_.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"/","/",-1371932971,null);
}
})(),metabase.legacy_mbql.schema._SLASH_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema._STAR_ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema._STAR_;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","*","metabase.legacy-mbql.schema/*",-1331630756,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"*","*",345799209,null),"metabase/legacy_mbql/schema.cljc",51,new cljs.core.Keyword(null,"*","*",-1294732318),1,592,592,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"*","*",-1294732318),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)),new cljs.core.Keyword(null,"y","y",-1757859776),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)),new cljs.core.Keyword(null,"more","more",-2058821800),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)))], null),cljs.core.List.EMPTY,"Schema for a valid * clause.",(cljs.core.truth_(metabase.legacy_mbql.schema._STAR_)?metabase.legacy_mbql.schema._STAR_.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"*","*",345799209,null);
}
})(),metabase.legacy_mbql.schema._STAR_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.coalesce !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.coalesce;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","coalesce","metabase.legacy-mbql.schema/coalesce",613498407,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"coalesce","coalesce",-1999813740,null),"metabase/legacy_mbql/schema.cljc",58,new cljs.core.Keyword(null,"coalesce","coalesce",654622029),1,533,533,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"coalesce","coalesce",654622029),new cljs.core.Keyword(null,"a","a",-2123407586),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"ExpressionArg","ExpressionArg",1060743736,null)),new cljs.core.Keyword(null,"b","b",1482224470),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"ExpressionArg","ExpressionArg",1060743736,null)),new cljs.core.Keyword(null,"more","more",-2058821800),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"ExpressionArg","ExpressionArg",1060743736,null)))], null),cljs.core.List.EMPTY,"Schema for a valid coalesce clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.coalesce)?metabase.legacy_mbql.schema.coalesce.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"coalesce","coalesce",-1999813740,null);
}
})(),metabase.legacy_mbql.schema.coalesce], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.length !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.length;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","length","metabase.legacy-mbql.schema/length",551508368,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"length","length",-2065447907,null),"metabase/legacy_mbql/schema.cljc",56,new cljs.core.Keyword(null,"length","length",588987862),1,539,539,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"length","length",588987862),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null))], null),cljs.core.List.EMPTY,"Schema for a valid length clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.length)?metabase.legacy_mbql.schema.length.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"length","length",-2065447907,null);
}
})(),metabase.legacy_mbql.schema.length], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.floor !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.floor;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","floor","metabase.legacy-mbql.schema/floor",1948405683,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"floor","floor",-772394748,null),"metabase/legacy_mbql/schema.cljc",55,new cljs.core.Keyword(null,"floor","floor",1882041021),1,594,594,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"floor","floor",1882041021),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid floor clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.floor)?metabase.legacy_mbql.schema.floor.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"floor","floor",-772394748,null);
}
})(),metabase.legacy_mbql.schema.floor], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.ceil !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.ceil;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","ceil","metabase.legacy-mbql.schema/ceil",-1858607302,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"ceil","ceil",-184398425,null),"metabase/legacy_mbql/schema.cljc",54,new cljs.core.Keyword(null,"ceil","ceil",-1824929952),1,597,597,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ceil","ceil",-1824929952),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid ceil clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.ceil)?metabase.legacy_mbql.schema.ceil.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"ceil","ceil",-184398425,null);
}
})(),metabase.legacy_mbql.schema.ceil], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.round !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.round;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","round","metabase.legacy-mbql.schema/round",902993568,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"round","round",-645002441,null),"metabase/legacy_mbql/schema.cljc",55,new cljs.core.Keyword(null,"round","round",2009433328),1,600,600,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"round","round",2009433328),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid round clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.round)?metabase.legacy_mbql.schema.round.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"round","round",-645002441,null);
}
})(),metabase.legacy_mbql.schema.round], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.abs !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.abs;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","abs","metabase.legacy-mbql.schema/abs",264897481,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"abs","abs",1394505050,null),"metabase/legacy_mbql/schema.cljc",53,new cljs.core.Keyword(null,"abs","abs",-246026477),1,603,603,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"abs","abs",-246026477),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid abs clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.abs)?metabase.legacy_mbql.schema.abs.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"abs","abs",1394505050,null);
}
})(),metabase.legacy_mbql.schema.abs], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.power !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.power;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","power","metabase.legacy-mbql.schema/power",-1003064821,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"advanced-math-expressions","advanced-math-expressions",1076581757),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"power","power",702679448,null),"metabase/legacy_mbql/schema.cljc",69,new cljs.core.Keyword(null,"power","power",-937852079),1,606,606,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"power","power",-937852079),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)),new cljs.core.Keyword(null,"y","y",-1757859776),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid power clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.power)?metabase.legacy_mbql.schema.power.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"power","power",702679448,null);
}
})(),metabase.legacy_mbql.schema.power], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.sqrt !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.sqrt;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","sqrt","metabase.legacy-mbql.schema/sqrt",-232146061,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"advanced-math-expressions","advanced-math-expressions",1076581757),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"sqrt","sqrt",370479598,null),"metabase/legacy_mbql/schema.cljc",68,new cljs.core.Keyword(null,"sqrt","sqrt",-1270051929),1,609,609,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"sqrt","sqrt",-1270051929),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid sqrt clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.sqrt)?metabase.legacy_mbql.schema.sqrt.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"sqrt","sqrt",370479598,null);
}
})(),metabase.legacy_mbql.schema.sqrt], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.exp !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.exp;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","exp","metabase.legacy-mbql.schema/exp",903645604,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"advanced-math-expressions","advanced-math-expressions",1076581757),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"exp","exp",1378825265,null),"metabase/legacy_mbql/schema.cljc",67,new cljs.core.Keyword(null,"exp","exp",-261706262),1,612,612,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"exp","exp",-261706262),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid exp clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.exp)?metabase.legacy_mbql.schema.exp.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"exp","exp",1378825265,null);
}
})(),metabase.legacy_mbql.schema.exp], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.log !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.log;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","log","metabase.legacy-mbql.schema/log",-426608048,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"advanced-math-expressions","advanced-math-expressions",1076581757),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"log","log",45015523,null),"metabase/legacy_mbql/schema.cljc",67,new cljs.core.Keyword(null,"log","log",-1595516004),1,615,615,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"log","log",-1595516004),new cljs.core.Keyword(null,"x","x",2099068185),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid log clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.log)?metabase.legacy_mbql.schema.log.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"log","log",45015523,null);
}
})(),metabase.legacy_mbql.schema.log], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.case$ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.case$;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","case","metabase.legacy-mbql.schema/case",405005684,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"case","case",-1510733573,null),"metabase/legacy_mbql/schema.cljc",61,new cljs.core.Keyword(null,"case","case",1143702196),1,906,906,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"case","case",1143702196),new cljs.core.Keyword(null,"clauses","clauses",1454841241),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"CaseClauses","CaseClauses",-1749071354,null)),new cljs.core.Keyword(null,"options","options",99638489),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Symbol(null,"CaseOptions","CaseOptions",1989286806,null)))], null),cljs.core.List.EMPTY,"Schema for a valid case clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.case$)?metabase.legacy_mbql.schema.case$.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"case","case",-1510733573,null);
}
})(),metabase.legacy_mbql.schema.case$], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.datetime_diff !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.datetime_diff;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","datetime-diff","metabase.legacy-mbql.schema/datetime-diff",1082582039,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"datetime-diff","datetime-diff",1133112155),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"datetime-diff","datetime-diff",-1521323614,null),"metabase/legacy_mbql/schema.cljc",65,new cljs.core.Keyword(null,"datetime-diff","datetime-diff",1133112155),1,628,628,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"datetime-diff","datetime-diff",1133112155),new cljs.core.Keyword(null,"datetime-x","datetime-x",1519265947),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"DateTimeExpressionArg","DateTimeExpressionArg",-1507653823,null)),new cljs.core.Keyword(null,"datetime-y","datetime-y",-1666955771),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"DateTimeExpressionArg","DateTimeExpressionArg",-1507653823,null)),new cljs.core.Keyword(null,"unit","unit",375175175),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","DatetimeDiffUnit","metabase.legacy-mbql.schema/DatetimeDiffUnit",-345401041)], null))], null),cljs.core.List.EMPTY,"Schema for a valid datetime-diff clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.datetime_diff)?metabase.legacy_mbql.schema.datetime_diff.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"datetime-diff","datetime-diff",-1521323614,null);
}
})(),metabase.legacy_mbql.schema.datetime_diff], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.temporal_extract !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.temporal_extract;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","temporal-extract","metabase.legacy-mbql.schema/temporal-extract",2009488827,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"temporal-extract","temporal-extract",1781686405),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"temporal-extract","temporal-extract",-872749364,null),"metabase/legacy_mbql/schema.cljc",71,new cljs.core.Keyword(null,"temporal-extract","temporal-extract",1781686405),1,633,633,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"temporal-extract","temporal-extract",1781686405),new cljs.core.Keyword(null,"datetime","datetime",494675702),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"DateTimeExpressionArg","DateTimeExpressionArg",-1507653823,null)),new cljs.core.Keyword(null,"unit","unit",375175175),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","TemporalExtractUnit","metabase.legacy-mbql.schema/TemporalExtractUnit",-691523416)], null)),new cljs.core.Keyword(null,"mode","mode",654403691),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","ExtractWeekMode","metabase.legacy-mbql.schema/ExtractWeekMode",438908251)], null)))], null),cljs.core.List.EMPTY,"Schema for a valid temporal-extract clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.temporal_extract)?metabase.legacy_mbql.schema.temporal_extract.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"temporal-extract","temporal-extract",-872749364,null);
}
})(),metabase.legacy_mbql.schema.temporal_extract], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.get_year !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.get_year;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","get-year","metabase.legacy-mbql.schema/get-year",-1927115088,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"temporal-extract","temporal-extract",1781686405),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"get-year","get-year",704520253,null),"metabase/legacy_mbql/schema.cljc",71,new cljs.core.Keyword(null,"get-year","get-year",-936011274),1,639,639,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"get-year","get-year",-936011274),new cljs.core.Keyword(null,"date","date",-1463434462),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"DateTimeExpressionArg","DateTimeExpressionArg",-1507653823,null))], null),cljs.core.List.EMPTY,"Schema for a valid get-year clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.get_year)?metabase.legacy_mbql.schema.get_year.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"get-year","get-year",704520253,null);
}
})(),metabase.legacy_mbql.schema.get_year], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.get_quarter !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.get_quarter;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","get-quarter","metabase.legacy-mbql.schema/get-quarter",1423526877,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"temporal-extract","temporal-extract",1781686405),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"get-quarter","get-quarter",-1326657176,null),"metabase/legacy_mbql/schema.cljc",74,new cljs.core.Keyword(null,"get-quarter","get-quarter",1327778593),1,642,642,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"get-quarter","get-quarter",1327778593),new cljs.core.Keyword(null,"date","date",-1463434462),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"DateTimeExpressionArg","DateTimeExpressionArg",-1507653823,null))], null),cljs.core.List.EMPTY,"Schema for a valid get-quarter clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.get_quarter)?metabase.legacy_mbql.schema.get_quarter.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"get-quarter","get-quarter",-1326657176,null);
}
})(),metabase.legacy_mbql.schema.get_quarter], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.get_month !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.get_month;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","get-month","metabase.legacy-mbql.schema/get-month",-273040753,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"temporal-extract","temporal-extract",1781686405),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"get-month","get-month",1271156796,null),"metabase/legacy_mbql/schema.cljc",72,new cljs.core.Keyword(null,"get-month","get-month",-369374731),1,645,645,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"get-month","get-month",-369374731),new cljs.core.Keyword(null,"date","date",-1463434462),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"DateTimeExpressionArg","DateTimeExpressionArg",-1507653823,null))], null),cljs.core.List.EMPTY,"Schema for a valid get-month clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.get_month)?metabase.legacy_mbql.schema.get_month.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"get-month","get-month",1271156796,null);
}
})(),metabase.legacy_mbql.schema.get_month], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.get_week !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.get_week;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","get-week","metabase.legacy-mbql.schema/get-week",-2004006943,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"temporal-extract","temporal-extract",1781686405),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"get-week","get-week",752472178,null),"metabase/legacy_mbql/schema.cljc",71,new cljs.core.Keyword(null,"get-week","get-week",-888059349),1,648,648,true,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"get-week","get-week",-888059349),new cljs.core.Keyword(null,"date","date",-1463434462),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"DateTimeExpressionArg","DateTimeExpressionArg",-1507653823,null)),new cljs.core.Keyword(null,"mode","mode",654403691),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","ExtractWeekMode","metabase.legacy-mbql.schema/ExtractWeekMode",438908251)], null)))], null),cljs.core.List.EMPTY,"Schema for a valid get-week clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.get_week)?metabase.legacy_mbql.schema.get_week.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"get-week","get-week",752472178,null);
}
})(),metabase.legacy_mbql.schema.get_week], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.get_day !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.get_day;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","get-day","metabase.legacy-mbql.schema/get-day",-844060843,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"temporal-extract","temporal-extract",1781686405),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"get-day","get-day",1768100384,null),"metabase/legacy_mbql/schema.cljc",70,new cljs.core.Keyword(null,"get-day","get-day",127568857),1,652,652,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"get-day","get-day",127568857),new cljs.core.Keyword(null,"date","date",-1463434462),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"DateTimeExpressionArg","DateTimeExpressionArg",-1507653823,null))], null),cljs.core.List.EMPTY,"Schema for a valid get-day clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.get_day)?metabase.legacy_mbql.schema.get_day.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"get-day","get-day",1768100384,null);
}
})(),metabase.legacy_mbql.schema.get_day], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.get_day_of_week !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.get_day_of_week;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","get-day-of-week","metabase.legacy-mbql.schema/get-day-of-week",2108472346,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"temporal-extract","temporal-extract",1781686405),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"get-day-of-week","get-day-of-week",-644295017,null),"metabase/legacy_mbql/schema.cljc",78,new cljs.core.Keyword(null,"get-day-of-week","get-day-of-week",2010140752),1,655,655,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"get-day-of-week","get-day-of-week",2010140752),new cljs.core.Keyword(null,"date","date",-1463434462),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"DateTimeExpressionArg","DateTimeExpressionArg",-1507653823,null))], null),cljs.core.List.EMPTY,"Schema for a valid get-day-of-week clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.get_day_of_week)?metabase.legacy_mbql.schema.get_day_of_week.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"get-day-of-week","get-day-of-week",-644295017,null);
}
})(),metabase.legacy_mbql.schema.get_day_of_week], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.get_hour !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.get_hour;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","get-hour","metabase.legacy-mbql.schema/get-hour",713743789,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"temporal-extract","temporal-extract",1781686405),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"get-hour","get-hour",-2031721710,null),"metabase/legacy_mbql/schema.cljc",71,new cljs.core.Keyword(null,"get-hour","get-hour",622714059),1,658,658,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"get-hour","get-hour",622714059),new cljs.core.Keyword(null,"datetime","datetime",494675702),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"DateTimeExpressionArg","DateTimeExpressionArg",-1507653823,null))], null),cljs.core.List.EMPTY,"Schema for a valid get-hour clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.get_hour)?metabase.legacy_mbql.schema.get_hour.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"get-hour","get-hour",-2031721710,null);
}
})(),metabase.legacy_mbql.schema.get_hour], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.get_minute !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.get_minute;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","get-minute","metabase.legacy-mbql.schema/get-minute",-443218669,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"temporal-extract","temporal-extract",1781686405),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"get-minute","get-minute",-1186349426,null),"metabase/legacy_mbql/schema.cljc",73,new cljs.core.Keyword(null,"get-minute","get-minute",1468086343),1,661,661,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"get-minute","get-minute",1468086343),new cljs.core.Keyword(null,"datetime","datetime",494675702),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"DateTimeExpressionArg","DateTimeExpressionArg",-1507653823,null))], null),cljs.core.List.EMPTY,"Schema for a valid get-minute clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.get_minute)?metabase.legacy_mbql.schema.get_minute.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"get-minute","get-minute",-1186349426,null);
}
})(),metabase.legacy_mbql.schema.get_minute], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.get_second !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.get_second;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","get-second","metabase.legacy-mbql.schema/get-second",1114654198,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"temporal-extract","temporal-extract",1781686405),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"get-second","get-second",-425414791,null),"metabase/legacy_mbql/schema.cljc",73,new cljs.core.Keyword(null,"get-second","get-second",-2065946318),1,664,664,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"get-second","get-second",-2065946318),new cljs.core.Keyword(null,"datetime","datetime",494675702),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"DateTimeExpressionArg","DateTimeExpressionArg",-1507653823,null))], null),cljs.core.List.EMPTY,"Schema for a valid get-second clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.get_second)?metabase.legacy_mbql.schema.get_second.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"get-second","get-second",-425414791,null);
}
})(),metabase.legacy_mbql.schema.get_second], null)], 0)));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","StringExpression","metabase.legacy-mbql.schema/StringExpression",-184637163),metabase.legacy_mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.substring !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.substring;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","substring","metabase.legacy-mbql.schema/substring",1209757086,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"substring","substring",-1513569493,null),"metabase/legacy_mbql/schema.cljc",59,new cljs.core.Keyword(null,"substring","substring",1140866276),1,536,536,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"substring","substring",1140866276),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)),new cljs.core.Keyword(null,"start","start",-355208981),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"IntGreaterThanZeroOrNumericExpression","IntGreaterThanZeroOrNumericExpression",2098230228,null)),new cljs.core.Keyword(null,"length","length",588987862),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null)))], null),cljs.core.List.EMPTY,"Schema for a valid substring clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.substring)?metabase.legacy_mbql.schema.substring.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"substring","substring",-1513569493,null);
}
})(),metabase.legacy_mbql.schema.substring], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.trim !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.trim;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","trim","metabase.legacy-mbql.schema/trim",733616723,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"trim","trim",-1880116002,null),"metabase/legacy_mbql/schema.cljc",54,new cljs.core.Keyword(null,"trim","trim",774319767),1,542,542,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"trim","trim",774319767),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null))], null),cljs.core.List.EMPTY,"Schema for a valid trim clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.trim)?metabase.legacy_mbql.schema.trim.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"trim","trim",-1880116002,null);
}
})(),metabase.legacy_mbql.schema.trim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.ltrim !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.ltrim;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","ltrim","metabase.legacy-mbql.schema/ltrim",1614153433,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"ltrim","ltrim",-1000166486,null),"metabase/legacy_mbql/schema.cljc",55,new cljs.core.Keyword(null,"ltrim","ltrim",1654269283),1,548,548,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ltrim","ltrim",1654269283),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null))], null),cljs.core.List.EMPTY,"Schema for a valid ltrim clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.ltrim)?metabase.legacy_mbql.schema.ltrim.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"ltrim","ltrim",-1000166486,null);
}
})(),metabase.legacy_mbql.schema.ltrim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.rtrim !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.rtrim;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","rtrim","metabase.legacy-mbql.schema/rtrim",-1770934443,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"rtrim","rtrim",979195078,null),"metabase/legacy_mbql/schema.cljc",55,new cljs.core.Keyword(null,"rtrim","rtrim",-661336449),1,545,545,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"rtrim","rtrim",-661336449),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null))], null),cljs.core.List.EMPTY,"Schema for a valid rtrim clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.rtrim)?metabase.legacy_mbql.schema.rtrim.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"rtrim","rtrim",979195078,null);
}
})(),metabase.legacy_mbql.schema.rtrim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.replace !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.replace;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","replace","metabase.legacy-mbql.schema/replace",1857654622,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"replace","replace",853943757,null),"metabase/legacy_mbql/schema.cljc",57,new cljs.core.Keyword(null,"replace","replace",-786587770),1,557,557,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"replace","replace",-786587770),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)),new cljs.core.Keyword(null,"match","match",1220059550),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Keyword(null,"string","string",-1989541586)),new cljs.core.Keyword(null,"replacement","replacement",-1836238839),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Keyword(null,"string","string",-1989541586))], null),cljs.core.List.EMPTY,"Schema for a valid replace clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.replace)?metabase.legacy_mbql.schema.replace.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"replace","replace",853943757,null);
}
})(),metabase.legacy_mbql.schema.replace], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.lower !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.lower;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","lower","metabase.legacy-mbql.schema/lower",142143211,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"lower","lower",-1534114948,null),"metabase/legacy_mbql/schema.cljc",55,new cljs.core.Keyword(null,"lower","lower",1120320821),1,554,554,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"lower","lower",1120320821),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null))], null),cljs.core.List.EMPTY,"Schema for a valid lower clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.lower)?metabase.legacy_mbql.schema.lower.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"lower","lower",-1534114948,null);
}
})(),metabase.legacy_mbql.schema.lower], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.upper !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.upper;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","upper","metabase.legacy-mbql.schema/upper",472481030,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"upper","upper",1886775433,null),"metabase/legacy_mbql/schema.cljc",55,new cljs.core.Keyword(null,"upper","upper",246243906),1,551,551,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"upper","upper",246243906),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null))], null),cljs.core.List.EMPTY,"Schema for a valid upper clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.upper)?metabase.legacy_mbql.schema.upper.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"upper","upper",1886775433,null);
}
})(),metabase.legacy_mbql.schema.upper], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.concat !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.concat;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","concat","metabase.legacy-mbql.schema/concat",5489938,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"concat","concat",-467652465,null),"metabase/legacy_mbql/schema.cljc",56,new cljs.core.Keyword(null,"concat","concat",-2108183992),1,560,560,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"concat","concat",-2108183992),new cljs.core.Keyword(null,"a","a",-2123407586),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)),new cljs.core.Keyword(null,"b","b",1482224470),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)),new cljs.core.Keyword(null,"more","more",-2058821800),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)))], null),cljs.core.List.EMPTY,"Schema for a valid concat clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.concat)?metabase.legacy_mbql.schema.concat.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"concat","concat",-467652465,null);
}
})(),metabase.legacy_mbql.schema.concat], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.regex_match_first !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.regex_match_first;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","regex-match-first","metabase.legacy-mbql.schema/regex-match-first",1600603124,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null",new cljs.core.Keyword(null,"regex","regex",939488856),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"regex-match-first","regex-match-first",983231809,null),"metabase/legacy_mbql/schema.cljc",74,new cljs.core.Keyword(null,"regex-match-first","regex-match-first",-657299718),1,563,563,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"regex-match-first","regex-match-first",-657299718),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null)),new cljs.core.Keyword(null,"pattern","pattern",242135423),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Keyword(null,"string","string",-1989541586))], null),cljs.core.List.EMPTY,"Schema for a valid regex-match-first clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.regex_match_first)?metabase.legacy_mbql.schema.regex_match_first.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"regex-match-first","regex-match-first",983231809,null);
}
})(),metabase.legacy_mbql.schema.regex_match_first], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.coalesce !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.coalesce;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","coalesce","metabase.legacy-mbql.schema/coalesce",613498407,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"coalesce","coalesce",-1999813740,null),"metabase/legacy_mbql/schema.cljc",58,new cljs.core.Keyword(null,"coalesce","coalesce",654622029),1,533,533,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"coalesce","coalesce",654622029),new cljs.core.Keyword(null,"a","a",-2123407586),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"ExpressionArg","ExpressionArg",1060743736,null)),new cljs.core.Keyword(null,"b","b",1482224470),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"ExpressionArg","ExpressionArg",1060743736,null)),new cljs.core.Keyword(null,"more","more",-2058821800),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"rest","rest",398835108,null),new cljs.core.Symbol(null,"ExpressionArg","ExpressionArg",1060743736,null)))], null),cljs.core.List.EMPTY,"Schema for a valid coalesce clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.coalesce)?metabase.legacy_mbql.schema.coalesce.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"coalesce","coalesce",-1999813740,null);
}
})(),metabase.legacy_mbql.schema.coalesce], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.case$ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.case$;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","case","metabase.legacy-mbql.schema/case",405005684,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"case","case",-1510733573,null),"metabase/legacy_mbql/schema.cljc",61,new cljs.core.Keyword(null,"case","case",1143702196),1,906,906,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"case","case",1143702196),new cljs.core.Keyword(null,"clauses","clauses",1454841241),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"CaseClauses","CaseClauses",-1749071354,null)),new cljs.core.Keyword(null,"options","options",99638489),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Symbol(null,"CaseOptions","CaseOptions",1989286806,null)))], null),cljs.core.List.EMPTY,"Schema for a valid case clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.case$)?metabase.legacy_mbql.schema.case$.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"case","case",-1510733573,null);
}
})(),metabase.legacy_mbql.schema.case$], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.host !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.host;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","host","metabase.legacy-mbql.schema/host",1614251799,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null",new cljs.core.Keyword(null,"regex","regex",939488856),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"host","host",82046360,null),"metabase/legacy_mbql/schema.cljc",61,new cljs.core.Keyword(null,"host","host",-1558485167),1,566,566,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"host","host",-1558485167),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null))], null),cljs.core.List.EMPTY,"Schema for a valid host clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.host)?metabase.legacy_mbql.schema.host.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"host","host",82046360,null);
}
})(),metabase.legacy_mbql.schema.host], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.domain !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.domain;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","domain","metabase.legacy-mbql.schema/domain",1809150483,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null",new cljs.core.Keyword(null,"regex","regex",939488856),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"domain","domain",-807220832,null),"metabase/legacy_mbql/schema.cljc",63,new cljs.core.Keyword(null,"domain","domain",1847214937),1,569,569,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"domain","domain",1847214937),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null))], null),cljs.core.List.EMPTY,"Schema for a valid domain clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.domain)?metabase.legacy_mbql.schema.domain.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"domain","domain",-807220832,null);
}
})(),metabase.legacy_mbql.schema.domain], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.subdomain !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.subdomain;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","subdomain","metabase.legacy-mbql.schema/subdomain",518647498,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null",new cljs.core.Keyword(null,"regex","regex",939488856),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"subdomain","subdomain",1116044215,null),"metabase/legacy_mbql/schema.cljc",66,new cljs.core.Keyword(null,"subdomain","subdomain",-524487312),1,572,572,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"subdomain","subdomain",-524487312),new cljs.core.Keyword(null,"s","s",1705939918),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"StringExpressionArg","StringExpressionArg",-1131357258,null))], null),cljs.core.List.EMPTY,"Schema for a valid subdomain clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.subdomain)?metabase.legacy_mbql.schema.subdomain.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"subdomain","subdomain",1116044215,null);
}
})(),metabase.legacy_mbql.schema.subdomain], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.month_name !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.month_name;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","month-name","metabase.legacy-mbql.schema/month-name",-514018532,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"month-name","month-name",1035021993,null),"metabase/legacy_mbql/schema.cljc",60,new cljs.core.Keyword(null,"month-name","month-name",-605509534),1,575,575,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"month-name","month-name",-605509534),new cljs.core.Keyword(null,"n","n",562130025),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid month-name clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.month_name)?metabase.legacy_mbql.schema.month_name.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"month-name","month-name",1035021993,null);
}
})(),metabase.legacy_mbql.schema.month_name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.quarter_name !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.quarter_name;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","quarter-name","metabase.legacy-mbql.schema/quarter-name",1559324902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"quarter-name","quarter-name",-523963543,null),"metabase/legacy_mbql/schema.cljc",62,new cljs.core.Keyword(null,"quarter-name","quarter-name",2130472226),1,578,578,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"quarter-name","quarter-name",2130472226),new cljs.core.Keyword(null,"n","n",562130025),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid quarter-name clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.quarter_name)?metabase.legacy_mbql.schema.quarter_name.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"quarter-name","quarter-name",-523963543,null);
}
})(),metabase.legacy_mbql.schema.quarter_name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.day_name !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.day_name;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","day-name","metabase.legacy-mbql.schema/day-name",289623930,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"expressions","expressions",255689909),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"day-name","day-name",-848310025,null),"metabase/legacy_mbql/schema.cljc",58,new cljs.core.Keyword(null,"day-name","day-name",1806125744),1,581,581,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"day-name","day-name",1806125744),new cljs.core.Keyword(null,"n","n",562130025),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid day-name clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.day_name)?metabase.legacy_mbql.schema.day_name.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"day-name","day-name",-848310025,null);
}
})(),metabase.legacy_mbql.schema.day_name], null)], 0)));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"multi","multi",-190293005),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("error","message","error/message",-502809098),":field or :expression reference or expression",new cljs.core.Keyword("doc","title","doc/title",636406695),"expression definition",new cljs.core.Keyword(null,"dispatch","dispatch",1319337009),(function (x){
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(metabase.legacy_mbql.schema.numeric_functions,x))){
return new cljs.core.Keyword(null,"numeric","numeric",-1495594714);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(metabase.legacy_mbql.schema.string_functions,x))){
return new cljs.core.Keyword(null,"string","string",-1989541586);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(metabase.legacy_mbql.schema.boolean_functions,x))){
return new cljs.core.Keyword(null,"boolean","boolean",-1919418404);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(metabase.legacy_mbql.schema.datetime_functions,x))){
return new cljs.core.Keyword(null,"datetime","datetime",494675702);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(new cljs.core.Keyword(null,"case","case",1143702196),x))){
return new cljs.core.Keyword(null,"case","case",1143702196);
} else {
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(new cljs.core.Keyword(null,"offset","offset",296498311),x))){
return new cljs.core.Keyword(null,"offset","offset",296498311);
} else {
return new cljs.core.Keyword(null,"else","else",-1508377146);

}
}
}
}
}
}
})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"numeric","numeric",-1495594714),metabase.legacy_mbql.schema.NumericExpression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"string","string",-1989541586),metabase.legacy_mbql.schema.StringExpression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"boolean","boolean",-1919418404),metabase.legacy_mbql.schema.BooleanExpression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"datetime","datetime",494675702),metabase.legacy_mbql.schema.DatetimeExpression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"case","case",1143702196),metabase.legacy_mbql.schema.case$], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"offset","offset",296498311),metabase.legacy_mbql.schema.offset], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"else","else",-1508377146),metabase.legacy_mbql.schema.Field], null)], null),"Schema for anything that is accepted as a top-level expression definition, either an arithmetic expression such as a\n  `:+` clause or a `:field` clause."));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","count","metabase.legacy-mbql.schema/count",-474940216),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"count","count",2139924085),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),metabase.legacy_mbql.schema.Field], null)], 0)));

/**
 * Schema for a valid count clause.
 */
metabase.legacy_mbql.schema.count = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","count","metabase.legacy-mbql.schema/count",-474940216)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","cum-count","metabase.legacy-mbql.schema/cum-count",-1630228036),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"cum-count","cum-count",-1964431543),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"optional","optional",2053951509),metabase.legacy_mbql.schema.Field], null)], 0)));

/**
 * Schema for a valid cum-count clause.
 */
metabase.legacy_mbql.schema.cum_count = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","cum-count","metabase.legacy-mbql.schema/cum-count",-1630228036)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","avg","metabase.legacy-mbql.schema/avg",1613200635),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"avg","avg",197406200),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null)], 0)));

/**
 * Schema for a valid avg clause.
 */
metabase.legacy_mbql.schema.avg = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","avg","metabase.legacy-mbql.schema/avg",1613200635)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","cum-sum","metabase.legacy-mbql.schema/cum-sum",-14707872),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"cum-sum","cum-sum",2064902349),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null)], 0)));

/**
 * Schema for a valid cum-sum clause.
 */
metabase.legacy_mbql.schema.cum_sum = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","cum-sum","metabase.legacy-mbql.schema/cum-sum",-14707872)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","distinct","metabase.legacy-mbql.schema/distinct",841717850),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"distinct","distinct",-1788879121),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null)], 0)));

/**
 * Schema for a valid distinct clause.
 */
metabase.legacy_mbql.schema.distinct = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","distinct","metabase.legacy-mbql.schema/distinct",841717850)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","sum","metabase.legacy-mbql.schema/sum",1617340241),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"sum","sum",136986814),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null)], 0)));

/**
 * Schema for a valid sum clause.
 */
metabase.legacy_mbql.schema.sum = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","sum","metabase.legacy-mbql.schema/sum",1617340241)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","min","metabase.legacy-mbql.schema/min",1607568725),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"min","min",444991522),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null)], 0)));

/**
 * Schema for a valid min clause.
 */
metabase.legacy_mbql.schema.min = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","min","metabase.legacy-mbql.schema/min",1607568725)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","max","metabase.legacy-mbql.schema/max",1603586951),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"max","max",61366548),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null)], 0)));

/**
 * Schema for a valid max clause.
 */
metabase.legacy_mbql.schema.max = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","max","metabase.legacy-mbql.schema/max",1603586951)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","sum-where","metabase.legacy-mbql.schema/sum-where",-1525990599),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"sum-where","sum-where",2135348428),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null),"pred",metabase.legacy_mbql.schema.Filter], 0)));

/**
 * Schema for a valid sum-where clause.
 */
metabase.legacy_mbql.schema.sum_where = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","sum-where","metabase.legacy-mbql.schema/sum-where",-1525990599)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","count-where","metabase.legacy-mbql.schema/count-where",1932281947),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"count-where","count-where",385407720),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["pred",metabase.legacy_mbql.schema.Filter], 0)));

/**
 * Schema for a valid count-where clause.
 */
metabase.legacy_mbql.schema.count_where = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","count-where","metabase.legacy-mbql.schema/count-where",1932281947)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","share","metabase.legacy-mbql.schema/share",-251048402),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"share","share",-589433933),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["pred",metabase.legacy_mbql.schema.Filter], 0)));

/**
 * Schema for a valid share clause.
 */
metabase.legacy_mbql.schema.share = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","share","metabase.legacy-mbql.schema/share",-251048402)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","stddev","metabase.legacy-mbql.schema/stddev",679048442),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"stddev","stddev",-865474939),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null)], 0)));

/**
 * Schema for a valid stddev clause.
 */
metabase.legacy_mbql.schema.stddev = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","stddev","metabase.legacy-mbql.schema/stddev",679048442)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","ag:var","metabase.legacy-mbql.schema/ag:var",108622160),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"var","var",-769682797),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null)], 0)));

/**
 * Schema for a valid var clause.
 */
metabase.legacy_mbql.schema.ag_COLON_var = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","ag:var","metabase.legacy-mbql.schema/ag:var",108622160)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","median","metabase.legacy-mbql.schema/median",-978944728),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"median","median",569566131),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null)], 0)));

/**
 * Schema for a valid median clause.
 */
metabase.legacy_mbql.schema.median = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","median","metabase.legacy-mbql.schema/median",-978944728)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","percentile","metabase.legacy-mbql.schema/percentile",2010574809),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"percentile","percentile",-601188752),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field-or-expression",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null),"percentile",metabase.legacy_mbql.schema.NumericExpressionArg], 0)));

/**
 * Schema for a valid percentile clause.
 */
metabase.legacy_mbql.schema.percentile = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","percentile","metabase.legacy-mbql.schema/percentile",2010574809)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","metric","metabase.legacy-mbql.schema/metric",-1129636350),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"metric","metric",408798077),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["metric-id",new cljs.core.Keyword("metabase.lib.schema.id","metric","metabase.lib.schema.id/metric",369478774)], 0)));

/**
 * Schema for a valid metric clause.
 */
metabase.legacy_mbql.schema.metric = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","metric","metabase.legacy-mbql.schema/metric",-1129636350)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","UnnamedAggregation","metabase.legacy-mbql.schema/UnnamedAggregation",-780956389),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"multi","multi",-190293005),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("error","message","error/message",-502809098),"unnamed aggregation clause or numeric expression",new cljs.core.Keyword(null,"dispatch","dispatch",1319337009),(function (x){
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(metabase.legacy_mbql.schema.numeric_functions,x))){
return new cljs.core.Keyword(null,"numeric-expression","numeric-expression",-1661337235);
} else {
return new cljs.core.Keyword(null,"else","else",-1508377146);
}
})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"numeric-expression","numeric-expression",-1661337235),metabase.legacy_mbql.schema.NumericExpression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"else","else",-1508377146),metabase.legacy_mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.avg !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.avg;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","avg","metabase.legacy-mbql.schema/avg",-1041235134,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"avg","avg",1837937727,null),"metabase/legacy_mbql/schema.cljc",60,new cljs.core.Keyword(null,"avg","avg",197406200),1,958,958,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"avg","avg",197406200),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null))], null),cljs.core.List.EMPTY,"Schema for a valid avg clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.avg)?metabase.legacy_mbql.schema.avg.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"avg","avg",1837937727,null);
}
})(),metabase.legacy_mbql.schema.avg], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.cum_sum !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.cum_sum;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","cum-sum","metabase.legacy-mbql.schema/cum-sum",1625823655,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"cum-sum","cum-sum",-589533420,null),"metabase/legacy_mbql/schema.cljc",64,new cljs.core.Keyword(null,"cum-sum","cum-sum",2064902349),1,959,959,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cum-sum","cum-sum",2064902349),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null))], null),cljs.core.List.EMPTY,"Schema for a valid cum-sum clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.cum_sum)?metabase.legacy_mbql.schema.cum_sum.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"cum-sum","cum-sum",-589533420,null);
}
})(),metabase.legacy_mbql.schema.cum_sum], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.distinct !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.distinct;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","distinct","metabase.legacy-mbql.schema/distinct",-1812717919,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"distinct","distinct",-148347594,null),"metabase/legacy_mbql/schema.cljc",65,new cljs.core.Keyword(null,"distinct","distinct",-1788879121),1,960,960,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"distinct","distinct",-1788879121),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null))], null),cljs.core.List.EMPTY,"Schema for a valid distinct clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.distinct)?metabase.legacy_mbql.schema.distinct.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"distinct","distinct",-148347594,null);
}
})(),metabase.legacy_mbql.schema.distinct], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.stddev !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.stddev;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","stddev","metabase.legacy-mbql.schema/stddev",-1975387327,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"standard-deviation-aggregations","standard-deviation-aggregations",-1683333464),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"stddev","stddev",775056588,null),"metabase/legacy_mbql/schema.cljc",76,new cljs.core.Keyword(null,"stddev","stddev",-865474939),1,974,974,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"stddev","stddev",-865474939),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null))], null),cljs.core.List.EMPTY,"Schema for a valid stddev clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.stddev)?metabase.legacy_mbql.schema.stddev.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"stddev","stddev",775056588,null);
}
})(),metabase.legacy_mbql.schema.stddev], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.sum !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.sum;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","sum","metabase.legacy-mbql.schema/sum",-1037095528,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"sum","sum",1777518341,null),"metabase/legacy_mbql/schema.cljc",60,new cljs.core.Keyword(null,"sum","sum",136986814),1,961,961,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"sum","sum",136986814),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null))], null),cljs.core.List.EMPTY,"Schema for a valid sum clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.sum)?metabase.legacy_mbql.schema.sum.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"sum","sum",1777518341,null);
}
})(),metabase.legacy_mbql.schema.sum], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.min !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.min;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","min","metabase.legacy-mbql.schema/min",-1046867044,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"min","min",2085523049,null),"metabase/legacy_mbql/schema.cljc",60,new cljs.core.Keyword(null,"min","min",444991522),1,962,962,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"min","min",444991522),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null))], null),cljs.core.List.EMPTY,"Schema for a valid min clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.min)?metabase.legacy_mbql.schema.min.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"min","min",2085523049,null);
}
})(),metabase.legacy_mbql.schema.min], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.max !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.max;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","max","metabase.legacy-mbql.schema/max",-1050848818,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"max","max",1701898075,null),"metabase/legacy_mbql/schema.cljc",60,new cljs.core.Keyword(null,"max","max",61366548),1,963,963,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"max","max",61366548),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null))], null),cljs.core.List.EMPTY,"Schema for a valid max clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.max)?metabase.legacy_mbql.schema.max.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"max","max",1701898075,null);
}
})(),metabase.legacy_mbql.schema.max], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.metric !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.metric;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","metric","metabase.legacy-mbql.schema/metric",510895177,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"metric","metric",2049329604,null),"metabase/legacy_mbql/schema.cljc",18,new cljs.core.Keyword(null,"metric","metric",408798077),1,989,989,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"metric","metric",408798077),new cljs.core.Keyword(null,"metric-id","metric-id",-686486942),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Keyword("metabase.lib.schema.id","metric","metabase.lib.schema.id/metric",369478774))], null),cljs.core.List.EMPTY,"Schema for a valid metric clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.metric)?metabase.legacy_mbql.schema.metric.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"metric","metric",2049329604,null);
}
})(),metabase.legacy_mbql.schema.metric], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.share !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.share;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","share","metabase.legacy-mbql.schema/share",1389483125,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"share","share",1051097594,null),"metabase/legacy_mbql/schema.cljc",62,new cljs.core.Keyword(null,"share","share",-589433933),1,971,971,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"share","share",-589433933),new cljs.core.Keyword(null,"pred","pred",1927423397),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null))], null),cljs.core.List.EMPTY,"Schema for a valid share clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.share)?metabase.legacy_mbql.schema.share.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"share","share",1051097594,null);
}
})(),metabase.legacy_mbql.schema.share], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.count_where !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.count_where;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","count-where","metabase.legacy-mbql.schema/count-where",-722153822,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"count-where","count-where",2025939247,null),"metabase/legacy_mbql/schema.cljc",68,new cljs.core.Keyword(null,"count-where","count-where",385407720),1,968,968,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"count-where","count-where",385407720),new cljs.core.Keyword(null,"pred","pred",1927423397),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null))], null),cljs.core.List.EMPTY,"Schema for a valid count-where clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.count_where)?metabase.legacy_mbql.schema.count_where.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"count-where","count-where",2025939247,null);
}
})(),metabase.legacy_mbql.schema.count_where], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.sum_where !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.sum_where;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","sum-where","metabase.legacy-mbql.schema/sum-where",114540928,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"sum-where","sum-where",-519087341,null),"metabase/legacy_mbql/schema.cljc",66,new cljs.core.Keyword(null,"sum-where","sum-where",2135348428),1,965,965,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"sum-where","sum-where",2135348428),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null)),new cljs.core.Keyword(null,"pred","pred",1927423397),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Filter","Filter",-424893332,null))], null),cljs.core.List.EMPTY,"Schema for a valid sum-where clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.sum_where)?metabase.legacy_mbql.schema.sum_where.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"sum-where","sum-where",-519087341,null);
}
})(),metabase.legacy_mbql.schema.sum_where], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.case$ !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.case$;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","case","metabase.legacy-mbql.schema/case",405005684,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"case","case",-1510733573,null),"metabase/legacy_mbql/schema.cljc",61,new cljs.core.Keyword(null,"case","case",1143702196),1,906,906,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"case","case",1143702196),new cljs.core.Keyword(null,"clauses","clauses",1454841241),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"CaseClauses","CaseClauses",-1749071354,null)),new cljs.core.Keyword(null,"options","options",99638489),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Symbol(null,"CaseOptions","CaseOptions",1989286806,null)))], null),cljs.core.List.EMPTY,"Schema for a valid case clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.case$)?metabase.legacy_mbql.schema.case$.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"case","case",-1510733573,null);
}
})(),metabase.legacy_mbql.schema.case$], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.median !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.median;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","median","metabase.legacy-mbql.schema/median",661586799,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"percentile-aggregations","percentile-aggregations",1241763983),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"median","median",-2084869638,null),"metabase/legacy_mbql/schema.cljc",68,new cljs.core.Keyword(null,"median","median",569566131),1,980,980,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"median","median",569566131),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null))], null),cljs.core.List.EMPTY,"Schema for a valid median clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.median)?metabase.legacy_mbql.schema.median.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"median","median",-2084869638,null);
}
})(),metabase.legacy_mbql.schema.median], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.percentile !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.percentile;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","percentile","metabase.legacy-mbql.schema/percentile",-643860960,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"percentile-aggregations","percentile-aggregations",1241763983),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"percentile","percentile",1039342775,null),"metabase/legacy_mbql/schema.cljc",72,new cljs.core.Keyword(null,"percentile","percentile",-601188752),1,983,983,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"percentile","percentile",-601188752),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null)),new cljs.core.Keyword(null,"percentile","percentile",-601188752),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"NumericExpressionArg","NumericExpressionArg",-1537445195,null))], null),cljs.core.List.EMPTY,"Schema for a valid percentile clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.percentile)?metabase.legacy_mbql.schema.percentile.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"percentile","percentile",1039342775,null);
}
})(),metabase.legacy_mbql.schema.percentile], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.ag_COLON_var !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.ag_COLON_var;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","ag:var","metabase.legacy-mbql.schema/ag:var",1749153687,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"ag:var","ag:var",-1804440286,null),"metabase/legacy_mbql/schema.cljc",77,new cljs.core.Keyword(null,"var","var",-769682797),1,977,977,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"var","var",-769682797),new cljs.core.Keyword(null,"field-or-expression","field-or-expression",-1409494368),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null))], null),cljs.core.List.EMPTY,"Schema for a valid var clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.ag_COLON_var)?metabase.legacy_mbql.schema.ag_COLON_var.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"ag:var","ag:var",-1804440286,null);
}
})(),metabase.legacy_mbql.schema.ag_COLON_var], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.cum_count !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.cum_count;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","cum-count","metabase.legacy-mbql.schema/cum-count",10303491,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"cum-count","cum-count",-323900016,null),"metabase/legacy_mbql/schema.cljc",74,new cljs.core.Keyword(null,"cum-count","cum-count",-1964431543),1,948,948,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cum-count","cum-count",-1964431543),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Symbol(null,"Field","Field",430385967,null)))], null),cljs.core.List.EMPTY,"Schema for a valid cum-count clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.cum_count)?metabase.legacy_mbql.schema.cum_count.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"cum-count","cum-count",-323900016,null);
}
})(),metabase.legacy_mbql.schema.cum_count], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.count !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.count;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","count","metabase.legacy-mbql.schema/count",1165591311,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"requires-features","requires-features",-101116256),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"sugar","sugar",-73788488),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"basic-aggregations","basic-aggregations",-1628959228),"null"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"count","count",-514511684,null),"metabase/legacy_mbql/schema.cljc",70,new cljs.core.Keyword(null,"count","count",2139924085),1,947,947,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"count","count",2139924085),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,"optional","optional",-600484260,null),new cljs.core.Symbol(null,"Field","Field",430385967,null)))], null),cljs.core.List.EMPTY,"Schema for a valid count clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.count)?metabase.legacy_mbql.schema.count.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"count","count",-514511684,null);
}
})(),metabase.legacy_mbql.schema.count], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.offset !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.offset;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","offset","metabase.legacy-mbql.schema/offset",-660598957,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"added","added",2057651688),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],["0.50.0",cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"offset","offset",1937029838,null),"metabase/legacy_mbql/schema.cljc",37,new cljs.core.Keyword(null,"offset","offset",296498311),1,377,377,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"offset","offset",296498311),new cljs.core.Keyword(null,"opts","opts",155075701),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.lib.schema.common","options","metabase.lib.schema.common/options",-1078359294)], null)),new cljs.core.Keyword(null,"expr","expr",745722291),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","UnnamedAggregation","metabase.legacy-mbql.schema/UnnamedAggregation",-780956389)], null)], null)),new cljs.core.Keyword(null,"n","n",562130025),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Keyword("metabase.lib.schema.expression.window","offset.n","metabase.lib.schema.expression.window/offset.n",1502346783))], null),cljs.core.List.EMPTY,"Schema for a valid offset clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.offset)?metabase.legacy_mbql.schema.offset.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"offset","offset",1937029838,null);
}
})(),metabase.legacy_mbql.schema.offset], null)], 0))], null)], null));
metabase.legacy_mbql.schema.UnnamedAggregation = new cljs.core.Keyword("metabase.legacy-mbql.schema","UnnamedAggregation","metabase.legacy-mbql.schema/UnnamedAggregation",-780956389);
/**
 * Additional options for any aggregation clause when wrapping it in `:aggregation-options`.
 */
metabase.legacy_mbql.schema.AggregationOptions = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),":aggregation-options options"], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"display-name","display-name",694513143),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)], null)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","aggregation-options","metabase.legacy-mbql.schema/aggregation-options",-1289750971),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"aggregation-options","aggregation-options",-1904917550),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["aggregation",metabase.legacy_mbql.schema.UnnamedAggregation,"options",metabase.legacy_mbql.schema.AggregationOptions], 0)));

/**
 * Schema for a valid aggregation-options clause.
 */
metabase.legacy_mbql.schema.aggregation_options = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","aggregation-options","metabase.legacy-mbql.schema/aggregation-options",-1289750971)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","Aggregation","metabase.legacy-mbql.schema/Aggregation",23634892),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"multi","multi",-190293005),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("error","message","error/message",-502809098),"aggregation clause or numeric expression",new cljs.core.Keyword(null,"dispatch","dispatch",1319337009),(function (x){
if(cljs.core.truth_(metabase.legacy_mbql.schema.helpers.is_clause_QMARK_(new cljs.core.Keyword(null,"aggregation-options","aggregation-options",-1904917550),x))){
return new cljs.core.Keyword(null,"aggregation-options","aggregation-options",-1904917550);
} else {
return new cljs.core.Keyword(null,"unnamed-aggregation","unnamed-aggregation",-93854280);
}
})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"aggregation-options","aggregation-options",-1904917550),metabase.legacy_mbql.schema.aggregation_options], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"unnamed-aggregation","unnamed-aggregation",-93854280),metabase.legacy_mbql.schema.UnnamedAggregation], null)], null));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","asc","metabase.legacy-mbql.schema/asc",-953645412),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"asc","asc",356854569),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.legacy_mbql.schema.Reference], 0)));

/**
 * Schema for a valid asc clause.
 */
metabase.legacy_mbql.schema.asc = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","asc","metabase.legacy-mbql.schema/asc",-953645412)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","desc","metabase.legacy-mbql.schema/desc",1089759549),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"desc","desc",2093485764),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["field",metabase.legacy_mbql.schema.Reference], 0)));

/**
 * Schema for a valid desc clause.
 */
metabase.legacy_mbql.schema.desc = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","desc","metabase.legacy-mbql.schema/desc",1089759549)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","OrderBy","metabase.legacy-mbql.schema/OrderBy",289647336),metabase.util.malli.registry._with_doc(metabase.legacy_mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.asc !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.asc;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","asc","metabase.legacy-mbql.schema/asc",686886115,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"asc","asc",1997386096,null),"metabase/legacy_mbql/schema.cljc",15,new cljs.core.Keyword(null,"asc","asc",356854569),1,1042,1042,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"asc","asc",356854569),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Reference","Reference",2024574086,null))], null),cljs.core.List.EMPTY,"Schema for a valid asc clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.asc)?metabase.legacy_mbql.schema.asc.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"asc","asc",1997386096,null);
}
})(),metabase.legacy_mbql.schema.asc], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.desc !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.desc;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","desc","metabase.legacy-mbql.schema/desc",-1564676220,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"desc","desc",-560950005,null),"metabase/legacy_mbql/schema.cljc",16,new cljs.core.Keyword(null,"desc","desc",2093485764),1,1043,1043,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"desc","desc",2093485764),new cljs.core.Keyword(null,"field","field",-1302436500),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"Reference","Reference",2024574086,null))], null),cljs.core.List.EMPTY,"Schema for a valid desc clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.desc)?metabase.legacy_mbql.schema.desc.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"desc","desc",-560950005,null);
}
})(),metabase.legacy_mbql.schema.desc], null)], 0)),"Schema for an `order-by` clause subclause."));
/**
 * Schema for valid values of template tag `:type`.
 */
metabase.legacy_mbql.schema.TemplateTagType = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"enum","enum",1679018432),new cljs.core.Keyword(null,"snippet","snippet",953581994),new cljs.core.Keyword(null,"card","card",-1430355152),new cljs.core.Keyword(null,"dimension","dimension",543254198),new cljs.core.Keyword(null,"number","number",1570378438),new cljs.core.Keyword(null,"text","text",-1790561697),new cljs.core.Keyword(null,"date","date",-1463434462)], null);
/**
 * Things required by all template tag types.
 */
metabase.legacy_mbql.schema.TemplateTag_COLON_Common = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"type","type",1174270348),metabase.legacy_mbql.schema.TemplateTagType], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"display-name","display-name",694513143),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"id","id",-1388402092),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)], null)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","TemplateTag:Snippet","metabase.legacy-mbql.schema/TemplateTag:Snippet",898303499),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"merge","merge",-1804319409),metabase.legacy_mbql.schema.TemplateTag_COLON_Common,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=","=",1152933628),new cljs.core.Keyword(null,"snippet","snippet",953581994)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"snippet-name","snippet-name",819240328),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"snippet-id","snippet-id",1987785841),metabase.legacy_mbql.schema.PositiveInt], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"database","database",1849087575),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),metabase.legacy_mbql.schema.PositiveInt], null)], null)], null),"Schema for a native query snippet template tag."));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","TemplateTag:SourceQuery","metabase.legacy-mbql.schema/TemplateTag:SourceQuery",1854148631),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"merge","merge",-1804319409),metabase.legacy_mbql.schema.TemplateTag_COLON_Common,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=","=",1152933628),new cljs.core.Keyword(null,"card","card",-1430355152)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"card-id","card-id",-1770060179),metabase.legacy_mbql.schema.PositiveInt], null)], null)], null),"Schema for a source query template tag."));
/**
 * Stuff shared between the Field filter and raw value template tag schemas.
 */
metabase.legacy_mbql.schema.TemplateTag_COLON_Value_COLON_Common = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"merge","merge",-1804319409),metabase.legacy_mbql.schema.TemplateTag_COLON_Common,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"default","default",-1987822328),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.Keyword(null,"any","any",1705907423)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"required","required",1807647006),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.Keyword(null,"boolean","boolean",-1919418404)], null)], null)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","TemplateTag:FieldFilter","metabase.legacy-mbql.schema/TemplateTag:FieldFilter",1432784230),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"merge","merge",-1804319409),metabase.legacy_mbql.schema.TemplateTag_COLON_Value_COLON_Common,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=","=",1152933628),new cljs.core.Keyword(null,"dimension","dimension",543254198)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"dimension","dimension",543254198),metabase.legacy_mbql.schema.field], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"widget-type","widget-type",1836256899),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("doc","message","doc/message",-406025466),"which type of widget the frontend should show for this Field Filter; this also affects which parameter types\n  are allowed to be specified for it."], null),new cljs.core.Keyword("metabase.legacy-mbql.schema","WidgetType","metabase.legacy-mbql.schema/WidgetType",-1950816116)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"options","options",99638489),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"optional map to be appended to filter clause"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map-of","map-of",1189682355),new cljs.core.Keyword(null,"keyword","keyword",811389747),new cljs.core.Keyword(null,"any","any",1705907423)], null)], null)], null)], null)], null),"Schema for a field filter template tag."));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","TemplateTag:RawValue","metabase.legacy-mbql.schema/TemplateTag:RawValue",-1659328377),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"merge","merge",-1804319409),metabase.legacy_mbql.schema.TemplateTag_COLON_Value_COLON_Common,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("doc","message","doc/message",-406025466),"`:type` is used be the FE to determine which type of widget to display for the template tag, and to determine\n  which types of parameters are allowed to be passed in for this template tag."], null)], null),new cljs.core.Keyword("metabase.lib.schema.template-tag","raw-value.type","metabase.lib.schema.template-tag/raw-value.type",-805651412)], null)], null)], null),"Schema for a raw value template tag."));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","TemplateTag","metabase.legacy-mbql.schema/TemplateTag",1996846229),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"multi","multi",-190293005),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"dispatch","dispatch",1319337009),new cljs.core.Keyword(null,"type","type",1174270348)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"dimension","dimension",543254198),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","TemplateTag:FieldFilter","metabase.legacy-mbql.schema/TemplateTag:FieldFilter",1432784230)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"snippet","snippet",953581994),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","TemplateTag:Snippet","metabase.legacy-mbql.schema/TemplateTag:Snippet",898303499)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"card","card",-1430355152),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","TemplateTag:SourceQuery","metabase.legacy-mbql.schema/TemplateTag:SourceQuery",1854148631)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("malli.core","default","malli.core/default",-1706204176),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","TemplateTag:RawValue","metabase.legacy-mbql.schema/TemplateTag:RawValue",-1659328377)], null)], null)], null),"Schema for a template tag as specified in a native query. There are four types of template tags, differentiated by\n  `:type`.\n\n  Template tags are used to specify {{placeholders}} in native queries that are replaced with some sort of value when\n  the query itself runs. There are four basic types of template tag for native queries:\n\n  1. Field filters, which are used like\n\n         SELECT * FROM table WHERE {{field_filter}}\n\n     These reference specific Fields and are replaced with entire conditions, e.g. `some_field > 1000`\n\n  2. Raw values, which are used like\n\n         SELECT * FROM table WHERE my_field = {{x}}\n\n     These are replaced with raw values.\n\n   3. Native query snippets, which might be used like\n\n          SELECT * FROM ({{snippet: orders}}) source\n\n      These are replaced with `NativeQuerySnippet`s from the application database.\n\n   4. Source query Card IDs, which are used like\n\n          SELECT * FROM ({{#123}}) source\n\n      These are replaced with the query from the Card with that ID.\n\n  Field filters and raw values usually have their value specified by `:parameters`."));
/**
 * Alias for ::TemplateTag; prefer that going forward.
 */
metabase.legacy_mbql.schema.TemplateTag = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","TemplateTag","metabase.legacy-mbql.schema/TemplateTag",1996846229)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","TemplateTagMap","metabase.legacy-mbql.schema/TemplateTagMap",1407821184),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"and","and",-971899817),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map-of","map-of",1189682355),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619),metabase.legacy_mbql.schema.TemplateTag], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fn","fn",-1175266204),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"keys in template tag map must match the :name of their values"], null),(function (m){
return cljs.core.every_QMARK_((function (p__75872){
var vec__75873 = p__75872;
var tag_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__75873,(0),null);
var tag_definition = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__75873,(1),null);
return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag_name,new cljs.core.Keyword(null,"name","name",1843675177).cljs$core$IFn$_invoke$arity$1(tag_definition));
}),m);
})], null)], null),"Schema for the `:template-tags` map passed in as part of a native query.\n\n  Map of template tag name -> template tag definition"));
metabase.legacy_mbql.schema.NativeQuery_COLON_Common = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"template-tags","template-tags",1853115685),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","TemplateTagMap","metabase.legacy-mbql.schema/TemplateTagMap",1407821184)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"collection","collection",-683361892),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)], null)], null)], null);
/**
 * Schema for a valid, normalized native [inner] query.
 */
metabase.legacy_mbql.schema.NativeQuery = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"merge","merge",-1804319409),metabase.legacy_mbql.schema.NativeQuery_COLON_Common,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"query","query",-1288509510),new cljs.core.Keyword(null,"any","any",1705907423)], null)], null)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","NativeSourceQuery","metabase.legacy-mbql.schema/NativeSourceQuery",-2139598676),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"merge","merge",-1804319409),metabase.legacy_mbql.schema.NativeQuery_COLON_Common,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"native","native",-613060878),new cljs.core.Keyword(null,"any","any",1705907423)], null)], null)], null));
/**
 * Schema for a valid, normalized MBQL [inner] query.
 */
metabase.legacy_mbql.schema.MBQLQuery = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","MBQLQuery","metabase.legacy-mbql.schema/MBQLQuery",-417591869)], null);
/**
 * Schema for a valid value for a `:source-query` clause.
 */
metabase.legacy_mbql.schema.SourceQuery = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"multi","multi",-190293005),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"dispatch","dispatch",1319337009),(function (x){
if(cljs.core.truth_(cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(cljs.core.map_QMARK_,new cljs.core.Keyword(null,"native","native",-613060878))(x))){
return new cljs.core.Keyword(null,"native","native",-613060878);
} else {
return new cljs.core.Keyword(null,"mbql","mbql",69346710);
}
})], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"native","native",-613060878),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","NativeSourceQuery","metabase.legacy-mbql.schema/NativeSourceQuery",-2139598676)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"mbql","mbql",69346710),metabase.legacy_mbql.schema.MBQLQuery], null)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","SourceQueryMetadata","metabase.legacy-mbql.schema/SourceQueryMetadata",-190242432),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"base_type","base_type",1908272670),new cljs.core.Keyword("metabase.lib.schema.common","base-type","metabase.lib.schema.common/base-type",999524206)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"display_name","display_name",-1494335013),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"semantic_type","semantic_type",272485089),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.common","semantic-or-relation-type","metabase.lib.schema.common/semantic-or-relation-type",-158604052)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fingerprint","fingerprint",598613022),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword(null,"map","map",1371690461)], null)], null)], null),"Schema for the expected keys for a single column in `:source-metadata` (`:source-metadata` is a sequence of these\n  entries), if it is passed in to the query.\n\n  This metadata automatically gets added for all source queries that are referenced via the `card__id` `:source-table`\n  form; for explicit `:source-query`s you should usually include this information yourself when specifying explicit\n  `:source-query`s."));
/**
 * Alias for ::SourceQueryMetadata -- prefer that instead.
 */
metabase.legacy_mbql.schema.SourceQueryMetadata = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","SourceQueryMetadata","metabase.legacy-mbql.schema/SourceQueryMetadata",-190242432)], null);
/**
 * Pattern that matches `card__id` strings that can be used as the `:source-table` of MBQL queries.
 */
metabase.legacy_mbql.schema.source_table_card_id_regex = /^card__[1-9]\d*$/;
/**
 * Schema for a valid value for the `:source-table` clause of an MBQL query.
 */
metabase.legacy_mbql.schema.SourceTable = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.Keyword("metabase.lib.schema.id","table","metabase.lib.schema.id/table",-583250693),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"re","re",228676202),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("error","message","error/message",-502809098),"'card__<id>' string Table ID",new cljs.core.Keyword("doc","message","doc/message",-406025466),"`card__<id>` string Table ID"], null),metabase.legacy_mbql.schema.source_table_card_id_regex], null)], null);
/**
 * Valid values of the `:strategy` key in a join map.
 */
metabase.legacy_mbql.schema.join_strategies = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"full-join","full-join",1305476385),null,new cljs.core.Keyword(null,"right-join","right-join",-56349359),null,new cljs.core.Keyword(null,"left-join","left-join",-672831855),null,new cljs.core.Keyword(null,"inner-join","inner-join",659431740),null], null), null);
/**
 * Strategy that should be used to perform the equivalent of a SQL `JOIN` against another table or a nested query.
 *   These correspond 1:1 to features of the same name in driver features lists; e.g. you should check that the current
 *   driver supports `:full-join` before generating a Join clause using that strategy.
 */
metabase.legacy_mbql.schema.JoinStrategy = cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"enum","enum",1679018432)], null),metabase.legacy_mbql.schema.join_strategies);
/**
 * Schema for valid values of the MBQL `:fields` clause.
 */
metabase.legacy_mbql.schema.Fields = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","Fields","metabase.legacy-mbql.schema/Fields",-1702063486)], null);
metabase.legacy_mbql.schema.JoinFields = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"Valid join `:fields`: `:all`, `:none`, or a sequence of `:field` clauses that have `:join-alias`."], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"enum","enum",1679018432),new cljs.core.Keyword(null,"all","all",892129742),new cljs.core.Keyword(null,"none","none",1333468478)], null),metabase.legacy_mbql.schema.Fields], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","Join","metabase.legacy-mbql.schema/Join",1742728231),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"and","and",-971899817),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"source-table","source-table",-225307692),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"*What* to JOIN. Self-joins can be done by using the same `:source-table` as in the query where\n  this is specified. YOU MUST SUPPLY EITHER `:source-table` OR `:source-query`, BUT NOT BOTH!"], null),metabase.legacy_mbql.schema.SourceTable], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"source-query","source-query",198004422),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),metabase.legacy_mbql.schema.SourceQuery], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"condition","condition",1668437652),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("doc","message","doc/message",-406025466),"The condition on which to JOIN. Can be anything that is a valid `:filter` clause. For automatically-generated\n  JOINs this is usually something like\n\n    [:= <source-table-fk-field> [:field <dest-table-pk-field> {:join-alias <join-table-alias>}]]"], null),metabase.legacy_mbql.schema.Filter], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"strategy","strategy",-1471631918),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"Defaults to `:left-join`; used for all automatically-generated JOINs\n\n  Driver implementations: this is guaranteed to be present after pre-processing."], null),metabase.legacy_mbql.schema.JoinStrategy], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fields","fields",-1932066230),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"The Fields from this join to include in parent-level results. This can be either `:none`, `:all`, or a sequence\n  of `:field` clauses.\n\n  * `:none`: no Fields from the joined table or nested query are included (unless indirectly included by breakouts or\n     other clauses). This is the default, and what is used for automatically-generated joins.\n\n  * `:all`: will include all of the Field from the joined table or query\n\n  * a sequence of Field clauses: include only the Fields specified. Valid clauses are the same as the top-level\n    `:fields` clause. This should be non-empty and all elements should be distinct. The normalizer will automatically\n    remove duplicate fields for you, and replace empty clauses with `:none`.\n\n  Driver implementations: you can ignore this clause. Relevant fields will be added to top-level `:fields` clause with\n  appropriate aliases."], null),metabase.legacy_mbql.schema.JoinFields], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"alias","alias",-2039751630),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"The name used to alias the joined table or query. This is usually generated automatically and generally looks\n  like `table__via__field`. You can specify this yourself if you need to reference a joined field with a `:join-alias`\n  in the options.\n\n  Driver implementations: This is guaranteed to be present after pre-processing."], null),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fk-field-id","fk-field-id",1124127357),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"Mostly used only internally. When a join is implicitly generated via a `:field` clause with\n  `:source-field`, the ID of the foreign key field in the source Table will be recorded here. This information is used\n  to add `fk_field_id` information to the `:cols` in the query results, and also for drill-thru. When generating\n  explicit joins by hand you can usually omit this information, altho it doesn't hurt to include it if you know it.\n\n  Don't set this information yourself. It will have no effect."], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.id","field","metabase.lib.schema.id/field",-985236431)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"source-metadata","source-metadata",-477816085),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"Metadata about the source query being used, if pulled in from a Card via the\n  `:source-table \"card__id\"` syntax. added automatically by the `resolve-card-id-source-tables` middleware."], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"sequential","sequential",-1082983960),metabase.legacy_mbql.schema.SourceQueryMetadata], null)], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fn","fn",-1175266204),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"Joins must have either a `source-table` or `source-query`, but not both."], null),cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,"source-table","source-table",-225307692),new cljs.core.Keyword(null,"source-query","source-query",198004422)),cljs.core.complement(cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,"source-table","source-table",-225307692),new cljs.core.Keyword(null,"source-query","source-query",198004422))))], null)], null),"Perform the equivalent of a SQL `JOIN` with another Table or nested `:source-query`. JOINs are either explicitly\n  specified in the incoming query, or implicitly generated when one uses a `:field` clause with `:source-field`.\n\n  In the top-level query, you can reference Fields from the joined table or nested query by including `:source-field`\n  in the `:field` options (known as implicit joins); for explicit joins, you *must* specify `:join-alias` yourself; in\n  the `:field` options, e.g.\n\n    ;; for joins against other Tables/MBQL source queries\n    [:field 1 {:join-alias \"my_join_alias\"}]\n\n    ;; for joins against native queries\n    [:field \"my_field\" {:base-type :field/Integer, :join-alias \"my_join_alias\"}]"));
/**
 * Alias for ::Join. Prefer that going forward.
 */
metabase.legacy_mbql.schema.Join = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","Join","metabase.legacy-mbql.schema/Join",1742728231)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","Joins","metabase.legacy-mbql.schema/Joins",790327506),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"and","and",-971899817),metabase.legacy_mbql.schema.helpers.non_empty(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"sequential","sequential",-1082983960),metabase.legacy_mbql.schema.Join], null)),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fn","fn",-1175266204),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"All join aliases must be unique."], null),(function (p1__75877_SHARP_){
return metabase.legacy_mbql.schema.helpers.empty_or_distinct_QMARK_(cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.some_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,"alias","alias",-2039751630),p1__75877_SHARP_)));
})], null)], null),"Schema for a valid sequence of `Join`s. Must be a non-empty sequence, and `:alias`, if specified, must be unique."));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","Fields","metabase.legacy-mbql.schema/Fields",-1702063486),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"Distinct, non-empty sequence of Field clauses"], null),metabase.legacy_mbql.schema.helpers.distinct(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"sequential","sequential",-1082983960),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"min","min",444991522),(1)], null),metabase.legacy_mbql.schema.Field], null))], null));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","Page","metabase.legacy-mbql.schema/Page",1487780667),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"page","page",849072397),metabase.legacy_mbql.schema.PositiveInt], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"items","items",1031954938),metabase.legacy_mbql.schema.PositiveInt], null)], null),"`page` = page num, starting with 1. `items` = number of items per page.\n  e.g.\n\n    {:page 1, :items 10} = items 1-10\n    {:page 2, :items 10} = items 11-20"));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","MBQLQuery","metabase.legacy-mbql.schema/MBQLQuery",-417591869),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"and","and",-971899817),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"source-query","source-query",198004422),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),metabase.legacy_mbql.schema.SourceQuery], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"source-table","source-table",-225307692),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),metabase.legacy_mbql.schema.SourceTable], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"aggregation","aggregation",1597476696),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"sequential","sequential",-1082983960),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"min","min",444991522),(1)], null),metabase.legacy_mbql.schema.Aggregation], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"breakout","breakout",-732419050),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"sequential","sequential",-1082983960),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"min","min",444991522),(1)], null),metabase.legacy_mbql.schema.Field], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"expressions","expressions",255689909),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map-of","map-of",1189682355),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","FieldOrExpressionDef","metabase.legacy-mbql.schema/FieldOrExpressionDef",336320065)], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fields","fields",-1932066230),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),metabase.legacy_mbql.schema.Fields], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"filter","filter",-948537934),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),metabase.legacy_mbql.schema.Filter], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"limit","limit",-1355822363),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.Keyword("metabase.lib.schema.common","int-greater-than-or-equal-to-zero","metabase.lib.schema.common/int-greater-than-or-equal-to-zero",-1646435681)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"order-by","order-by",1527318070),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),metabase.legacy_mbql.schema.helpers.distinct(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"sequential","sequential",-1082983960),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"min","min",444991522),(1)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","OrderBy","metabase.legacy-mbql.schema/OrderBy",289647336)], null)], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"page","page",849072397),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","Page","metabase.legacy-mbql.schema/Page",1487780667)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"joins","joins",1033962699),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","Joins","metabase.legacy-mbql.schema/Joins",790327506)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"source-metadata","source-metadata",-477816085),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"Info about the columns of the source query. Added in automatically by middleware. This metadata is\n  primarily used to let power things like binning when used with Field Literals instead of normal Fields."], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"sequential","sequential",-1082983960),metabase.legacy_mbql.schema.SourceQueryMetadata], null)], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fn","fn",-1175266204),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"Query must specify either `:source-table` or `:source-query`, but not both."], null),(function (query){
return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),cljs.core.count(cljs.core.select_keys(query,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"source-query","source-query",198004422),new cljs.core.Keyword(null,"source-table","source-table",-225307692)], null))));
})], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fn","fn",-1175266204),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"Fields specified in `:breakout` should not be specified in `:fields`; this is implied."], null),(function (p__75878){
var map__75879 = p__75878;
var map__75879__$1 = cljs.core.__destructure_map(map__75879);
var breakout = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__75879__$1,new cljs.core.Keyword(null,"breakout","breakout",-732419050));
var fields = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__75879__$1,new cljs.core.Keyword(null,"fields","fields",-1932066230));
return cljs.core.empty_QMARK_(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(breakout),cljs.core.set(fields)));
})], null)], null));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","WidgetType","metabase.legacy-mbql.schema/WidgetType",-1950816116),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.lib.schema.parameter","widget-type","metabase.lib.schema.parameter/widget-type",-1038864894)], null),"Schema for valid values of `:widget-type` for a [[::TemplateTag:FieldFilter]]."));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","template-tag","metabase.legacy-mbql.schema/template-tag",643021151),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"template-tag","template-tag",310841038),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["tag-name",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"id","id",-1388402092),new cljs.core.Keyword("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619)], null)], null)], null)], 0)));

/**
 * Schema for a valid template-tag clause.
 */
metabase.legacy_mbql.schema.template_tag = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","template-tag","metabase.legacy-mbql.schema/template-tag",643021151)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","dimension","metabase.legacy-mbql.schema/dimension",-998523641),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"dimension","dimension",543254198),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["target",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),metabase.legacy_mbql.schema.Field,metabase.legacy_mbql.schema.template_tag], null)], 0)));

/**
 * Schema for a valid dimension clause.
 */
metabase.legacy_mbql.schema.dimension = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","dimension","metabase.legacy-mbql.schema/dimension",-998523641)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","variable","metabase.legacy-mbql.schema/variable",-1956251593),metabase.legacy_mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,"variable","variable",-281346492),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["target",metabase.legacy_mbql.schema.template_tag], 0)));

/**
 * Schema for a valid variable clause.
 */
metabase.legacy_mbql.schema.variable = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","variable","metabase.legacy-mbql.schema/variable",-1956251593)], null);
/**
 * Schema for the value of `:target` in a [[Parameter]].
 */
metabase.legacy_mbql.schema.ParameterTarget = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),metabase.legacy_mbql.schema.Field,metabase.legacy_mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.dimension !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.dimension;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","dimension","metabase.legacy-mbql.schema/dimension",642007886,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"dimension","dimension",-2111181571,null),"metabase/legacy_mbql/schema.cljc",21,new cljs.core.Keyword(null,"dimension","dimension",543254198),1,1476,1476,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"dimension","dimension",543254198),new cljs.core.Keyword(null,"target","target",253001721),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.Symbol(null,"Field","Field",430385967,null),new cljs.core.Symbol(null,"template-tag","template-tag",1951372565,null)], null))], null),cljs.core.List.EMPTY,"Schema for a valid dimension clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.dimension)?metabase.legacy_mbql.schema.dimension.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"dimension","dimension",-2111181571,null);
}
})(),metabase.legacy_mbql.schema.dimension], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5002__auto__ = new cljs.core.Keyword(null,"clause-name","clause-name",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.legacy_mbql !== 'undefined') && (typeof metabase.legacy_mbql.schema !== 'undefined') && (typeof metabase.legacy_mbql.schema.variable !== 'undefined'))?(new cljs.core.Var((function (){
return metabase.legacy_mbql.schema.variable;
}),cljs.core.with_meta(new cljs.core.Symbol("metabase.legacy-mbql.schema","variable","metabase.legacy-mbql.schema/variable",-315720066,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.analyzer","no-resolve","cljs.analyzer/no-resolve",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"clause-name","clause-name",-996419059),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"clause-form","clause-form",1820463737),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,"metabase.legacy-mbql.schema","metabase.legacy-mbql.schema",1262859202,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"doc","doc",1913296891),"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!"], null)),new cljs.core.Symbol(null,"variable","variable",1359185035,null),"metabase/legacy_mbql/schema.cljc",20,new cljs.core.Keyword(null,"variable","variable",-281346492),1,1479,1479,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"variable","variable",-281346492),new cljs.core.Keyword(null,"target","target",253001721),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),new cljs.core.Symbol(null,"template-tag","template-tag",1951372565,null))], null),cljs.core.List.EMPTY,"Schema for a valid variable clause.",(cljs.core.truth_(metabase.legacy_mbql.schema.variable)?metabase.legacy_mbql.schema.variable.cljs$lang$test:null)]))):null)));
if(cljs.core.truth_(or__5002__auto__)){
return or__5002__auto__;
} else {
return new cljs.core.Symbol(null,"variable","variable",1359185035,null);
}
})(),metabase.legacy_mbql.schema.variable], null)], 0))], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","Parameter","metabase.legacy-mbql.schema/Parameter",-1701031028),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"merge","merge",-1804319409),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.lib.schema.parameter","parameter","metabase.lib.schema.parameter/parameter",-1567092974)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"target","target",253001721),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),metabase.legacy_mbql.schema.ParameterTarget], null)], null)], null),"Schema for the *value* of a parameter (e.g. a Dashboard parameter or a native query template tag) as passed in as\n  part of the `:parameters` list in a query."));
/**
 * Alias for ::Parameter. Prefer using that directly going forward.
 */
metabase.legacy_mbql.schema.Parameter = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","Parameter","metabase.legacy-mbql.schema/Parameter",-1701031028)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","ParameterList","metabase.legacy-mbql.schema/ParameterList",-400429237),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"sequential","sequential",-1082983960),metabase.legacy_mbql.schema.Parameter], null)], null));
/**
 * Schema for a list of `:parameters` as passed in to a query.
 */
metabase.legacy_mbql.schema.ParameterList = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","ParameterList","metabase.legacy-mbql.schema/ParameterList",-400429237)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","Settings","metabase.legacy-mbql.schema/Settings",-1301217075),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"report-timezone","report-timezone",-2053796389),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"The timezone the query should be ran in, overriding the default report timezone for the instance."], null),metabase.legacy_mbql.schema.TimezoneId], null)], null),"Options that tweak the behavior of the query processor."));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","Constraints","metabase.legacy-mbql.schema/Constraints",-729103120),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"and","and",-971899817),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"max-results","max-results",-32858165),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"Maximum number of results to allow for a query with aggregations. If `max-results-bare-rows` is unset, this\n  applies to all queries"], null),new cljs.core.Keyword("metabase.lib.schema.common","int-greater-than-or-equal-to-zero","metabase.lib.schema.common/int-greater-than-or-equal-to-zero",-1646435681)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"max-results-bare-rows","max-results-bare-rows",2096475889),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"Maximum number of results to allow for a query with no aggregations. If set, this should be LOWER than\n  `:max-results`."], null),new cljs.core.Keyword("metabase.lib.schema.common","int-greater-than-or-equal-to-zero","metabase.lib.schema.common/int-greater-than-or-equal-to-zero",-1646435681)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fn","fn",-1175266204),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"max-results-bare-rows must be less or equal to than max-results"], null),(function (p__75880){
var map__75881 = p__75880;
var map__75881__$1 = cljs.core.__destructure_map(map__75881);
var max_results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__75881__$1,new cljs.core.Keyword(null,"max-results","max-results",-32858165));
var max_results_bare_rows = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__75881__$1,new cljs.core.Keyword(null,"max-results-bare-rows","max-results-bare-rows",2096475889));
if(cljs.core.not((function (){var and__5000__auto__ = max_results;
if(cljs.core.truth_(and__5000__auto__)){
return max_results_bare_rows;
} else {
return and__5000__auto__;
}
})())){
return true;
} else {
return (max_results >= max_results_bare_rows);
}
})], null)], null),"Additional constraints added to a query limiting the maximum number of rows that can be returned. Mostly useful\n  because native queries don't support the MBQL `:limit` clause. For MBQL queries, if `:limit` is set, it will\n  override these values."));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","MiddlewareOptions","metabase.legacy-mbql.schema/MiddlewareOptions",2015114427),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"skip-results-metadata?","skip-results-metadata?",251010463),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"Should we skip adding `results_metadata` to query results after running the query? Used by\n     `metabase.query-processor.middleware.results-metadata`; default `false`. (Note: we may change the name of this\n     column in the near future, to `result_metadata`, to fix inconsistencies in how we name things.)"], null),new cljs.core.Keyword(null,"boolean","boolean",-1919418404)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"format-rows?","format-rows?",992129486),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"Should we skip converting datetime types to ISO-8601 strings with appropriate timezone when post-processing\n     results? Used by `metabase.query-processor.middleware.format-rows`default `false`."], null),new cljs.core.Keyword(null,"boolean","boolean",-1919418404)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"disable-mbql->native?","disable-mbql->native?",1103196677),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"Disable the MBQL->native middleware. If you do this, the query will not work at all, so there are no cases where\n  you should set this yourself. This is only used by the `metabase.query-processor.preprocess/preprocess` function to\n  get the fully pre-processed query without attempting to convert it to native."], null),new cljs.core.Keyword(null,"boolean","boolean",-1919418404)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"disable-max-results?","disable-max-results?",857693204),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"Disable applying a default limit on the query results. Handled in the `add-default-limit` middleware. If true,\n  this will override the `:max-results` and `:max-results-bare-rows` values in `Constraints`."], null),new cljs.core.Keyword(null,"boolean","boolean",-1919418404)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"userland-query?","userland-query?",-123699383),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"Userland queries are ones ran as a result of an API call, Pulse, or the like. Special handling is done in\n  certain userland-only middleware for such queries -- results are returned in a slightly different format, and\n  QueryExecution entries are normally saved, unless you pass `:no-save` as the option."], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword(null,"boolean","boolean",-1919418404)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"add-default-userland-constraints?","add-default-userland-constraints?",2039156190),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"Whether to add some default `max-results` and `max-results-bare-rows` constraints. By default, none are added,\n  although the functions that ultimately power most API endpoints tend to set this to `true`. See\n  `add-constraints` middleware for more details."], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword(null,"boolean","boolean",-1919418404)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"process-viz-settings?","process-viz-settings?",-173592315),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"Whether to process a question's visualization settings and include them in the result metadata so that they can\n  incorporated into an export. Used by `metabase.query-processor.middleware.visualization-settings`; default\n  `false`."], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword(null,"boolean","boolean",-1919418404)], null)], null)], null),"Additional options that can be used to toggle middleware on or off."));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","DatabaseID","metabase.legacy-mbql.schema/DatabaseID",502029897),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"valid Database ID"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.lib.schema.id","saved-questions-virtual-database","metabase.lib.schema.id/saved-questions-virtual-database",700243236)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.lib.schema.id","database","metabase.lib.schema.id/database",2063511424)], null)], null),"Schema for a valid `:database` ID, in the top-level 'outer' query. Either a positive integer (referring to an\n  actual Database), or the saved questions virtual ID, which is a placeholder used for queries using the\n  `:source-table \"card__id\"` shorthand for a source query resolved by middleware (since clients might not know the\n  actual DB for that source query.)"));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","check-keys-for-query-type","metabase.legacy-mbql.schema/check-keys-for-query-type",689766344),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"and","and",-971899817),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fn","fn",-1175266204),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"Query must specify either `:native` or `:query`, but not both."], null),cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,"native","native",-613060878),new cljs.core.Keyword(null,"query","query",-1288509510)),cljs.core.complement(cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,"native","native",-613060878),new cljs.core.Keyword(null,"query","query",-1288509510))))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fn","fn",-1175266204),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"Native queries must specify `:native`; MBQL queries must specify `:query`."], null),(function (p__75890){
var map__75891 = p__75890;
var map__75891__$1 = cljs.core.__destructure_map(map__75891);
var native$ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__75891__$1,new cljs.core.Keyword(null,"native","native",-613060878));
var mbql = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__75891__$1,new cljs.core.Keyword(null,"query","query",-1288509510));
var query_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__75891__$1,new cljs.core.Keyword(null,"type","type",1174270348));
var G__75892 = query_type;
var G__75892__$1 = (((G__75892 instanceof cljs.core.Keyword))?G__75892.fqn:null);
switch (G__75892__$1) {
case "native":
return native$;

break;
case "query":
return mbql;

break;
default:
throw (new Error(["No matching clause: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__75892__$1)].join('')));

}
})], null)], null));
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","check-query-does-not-have-source-metadata","metabase.legacy-mbql.schema/check-query-does-not-have-source-metadata",19968277),metabase.util.malli.registry._with_doc(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"fn","fn",-1175266204),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("error","message","error/message",-502809098),"`:source-metadata` should be added in the same level as `:source-query` (i.e., the 'inner' MBQL query.)"], null),cljs.core.complement(new cljs.core.Keyword(null,"source-metadata","source-metadata",-477816085))], null),"`:source-metadata` is added to queries when `card__id` source queries are resolved. It contains info about the\n  columns in the source query.\n\n  Where this is added was changed in Metabase 0.33.0 -- previously, when `card__id` source queries were resolved, the\n  middleware would add `:source-metadata` to the top-level; to support joins against source queries, this has been\n  changed so it is always added at the same level the resolved `:source-query` is added.\n\n  This should automatically be fixed by `normalize`; if we encounter it, it means some middleware is not functioning\n  properly."));
/**
 * Schema for an [outer] query, e.g. the sort of thing you'd pass to the query processor or save in `Card.dataset_query`.
 */
metabase.legacy_mbql.schema.Query = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","Query","metabase.legacy-mbql.schema/Query",-239382516)], null);
metabase.util.malli.registry.register_BANG_(new cljs.core.Keyword("metabase.legacy-mbql.schema","Query","metabase.legacy-mbql.schema/Query",-239382516),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"and","and",-971899817),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"map","map",1371690461),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"database","database",1849087575),new cljs.core.Keyword("metabase.legacy-mbql.schema","DatabaseID","metabase.legacy-mbql.schema/DatabaseID",502029897)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"type","type",1174270348),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"enum","enum",1679018432),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("doc","message","doc/message",-406025466),"Type of query. `:query` = MBQL; `:native` = native."], null),new cljs.core.Keyword(null,"query","query",-1288509510),new cljs.core.Keyword(null,"native","native",-613060878)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"native","native",-613060878),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),metabase.legacy_mbql.schema.NativeQuery], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"query","query",-1288509510),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),metabase.legacy_mbql.schema.MBQLQuery], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"parameters","parameters",-1229919748),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),metabase.legacy_mbql.schema.ParameterList], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"settings","settings",1556144875),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","Settings","metabase.legacy-mbql.schema/Settings",-1301217075)], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"constraints","constraints",422775616),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","Constraints","metabase.legacy-mbql.schema/Constraints",-729103120)], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"middleware","middleware",1462115504),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","MiddlewareOptions","metabase.legacy-mbql.schema/MiddlewareOptions",2015114427)], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"info","info",-317069002),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"optional","optional",2053951509),true,new cljs.core.Keyword("doc","message","doc/message",-406025466),"Used when recording info about this run in the QueryExecution log; things like context query was\n  ran in and User who ran it."], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.lib.schema.info","info","metabase.lib.schema.info/info",2011194452)], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"create-row","create-row",1226455653),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.lib.schema.actions","row","metabase.lib.schema.actions/row",751956816)], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"update-row","update-row",-2028796244),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"optional","optional",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.lib.schema.actions","row","metabase.lib.schema.actions/row",751956816)], null)], null)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","check-keys-for-query-type","metabase.legacy-mbql.schema/check-keys-for-query-type",689766344)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"ref","ref",1289896967),new cljs.core.Keyword("metabase.legacy-mbql.schema","check-query-does-not-have-source-metadata","metabase.legacy-mbql.schema/check-query-does-not-have-source-metadata",19968277)], null)], null));
/**
 * Is this a valid outer query? (Pre-compling a validator is more efficient.)
 */
metabase.legacy_mbql.schema.valid_query_QMARK_ = metabase.util.malli.registry.validator(metabase.legacy_mbql.schema.Query);
/**
 * Validator for an outer query; throw an Exception explaining why the query is invalid if it is. Returns query if
 *   valid.
 */
metabase.legacy_mbql.schema.validate_query = (function (){var explainer = metabase.util.malli.registry.explainer(metabase.legacy_mbql.schema.Query);
return (function (query){
if(cljs.core.truth_((metabase.legacy_mbql.schema.valid_query_QMARK_.cljs$core$IFn$_invoke$arity$1 ? metabase.legacy_mbql.schema.valid_query_QMARK_.cljs$core$IFn$_invoke$arity$1(query) : metabase.legacy_mbql.schema.valid_query_QMARK_.call(null,query)))){
return query;
} else {
var error = (explainer.cljs$core$IFn$_invoke$arity$1 ? explainer.cljs$core$IFn$_invoke$arity$1(query) : explainer.call(null,query));
var humanized = malli.error.humanize.cljs$core$IFn$_invoke$arity$1(error);
throw cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic("Invalid query: {0}",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([humanized], 0))], 0)),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"error","error",-978969032),humanized,new cljs.core.Keyword(null,"original","original",-445386197),error], null));
}
});
})();

//# sourceMappingURL=metabase.legacy_mbql.schema.js.map
