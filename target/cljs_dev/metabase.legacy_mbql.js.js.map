{"version":3,"sources":["metabase/legacy_mbql/js.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;;iCAAA,jCAAMA,0EAIHC;AAJH,AAKE,GAGE,EAAK,cAAWC,bAAUD,0BACrB,AAACE,oBAAI,AAAOF;AAAY,IAAAG,WAAA,mDAAIH,AAAE,nDAAOI;AAAb,AAAA,oIAAAD,qDAAAA,jLAAqBJ,+DAAAA,yEAAAA;;AAJpD,GAKE,AAACM,qBAAKL;AAAuB,OAACM,sBAAYN,EAAED;;AAL9C,GAME,AAACQ,4BAAYP;AAAgB,OAACQ,6CAAKT,+BAAOC;;AAN5C,AAO+BA;;;;;;AAEjC;;;;;yCAAA,zCAAMS,0FAIHC;AAJH,AAKE,gDAAA,+BAAA,mDAAIA,nDAAMN,/BAAQL,zCAAOY;;AAE3B;;;;;oCAAA,pCAAeC,gFAIZF;AAJH,wGAKMA,vCAAMD,jEAAe,iEAAA,gGAAA,1JAACI,0NAAoBC","names":["metabase.legacy-mbql.js/unwrap","x","js/Object","cljs.core/fn?","G__77882","cljs.core.js__GT_clj","cljs.core/map?","cljs.core/update-vals","cljs.core/sequential?","cljs.core.mapv","metabase.legacy-mbql.js/normalize-cljs","query","metabase.legacy-mbql.normalize/normalize","metabase.legacy-mbql.js/normalize","cljs.core.clj__GT_js","metabase.util/qualified-name"],"sourcesContent":["(ns metabase.legacy-mbql.js\n  \"JavaScript-friendly interface to metabase.legacy-mbql util functions.\"\n  (:require\n   [metabase.legacy-mbql.normalize :as mbql.normalize]\n   [metabase.util :as u]))\n\n(defn unwrap\n  \"Sometimes JS queries are passed in with a `Join` or `Aggregation` clause object instead of a simple Array.\n  These clauses `extend Array` so `Array.isArray(x)` is true, but they're treated as opaque by `js->clj`.\n  This recurses over the whole query, unwrapping these values to their `.raw()` form.\"\n  [x]\n  (cond\n    ;; (object? x) only matches for things that are plain objects. eg. `(object? (js/Date.))` is false.\n    ;; This matches anything that descends from `Object`, like `Join` clause, and has a `.raw()` method.\n    (and (instance? js/Object x)\n         (fn? (.-raw x)))        (-> x (.raw) js->clj unwrap)\n    (map? x)                     (update-vals x unwrap)\n    (sequential? x)              (mapv unwrap x)\n    :else                        x))\n\n(defn normalize-cljs\n  \"Normalize an MBQL query, and convert it to the latest and greatest version of MBQL.\n\n  Returns the CLJS form of the normalized query. Use [[normalize]] for the JS form.\"\n  [query]\n  (-> query js->clj unwrap mbql.normalize/normalize))\n\n(defn ^:export normalize\n  \"Normalize an MBQL query, and convert it to the latest and greatest version of MBQL.\n\n  Returns the JS form of the normalized query. Use [[normalize-cljs]] for the CLJS form.\"\n  [query]\n  (-> query normalize-cljs (clj->js :keyword-fn u/qualified-name)))\n"]}