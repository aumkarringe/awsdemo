{"version":3,"sources":["metabase/lib/column_group.cljc"],"mappings":"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","names":["metabase.lib.column-group/GroupType","metabase.lib.column-group/group-type-ordering","metabase.lib.column-group/ColumnGroup","cljs.core/any?","m","cljs.core/count","cljs.core/keys","cljs.core/select-keys","metabase.lib.metadata.calculation/metadata-method","_query","_stage-number","column-group","js/metabase","js/metabase.lib","js/metabase.lib.column-group","js/metabase.lib.column-group.display-info-for-group-method","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","cljs.core.get","fexpr__78723","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.column-group/display-info-for-group-method","query","stage-number","_column-group","cljs.core.merge","stage","metabase.lib.util/query-stage","or__5002__auto__","temp__5804__auto__","table","G__78724","metabase.lib.metadata/table","metabase.lib.metadata.calculation.display_info","card","G__78725","metabase.lib.metadata/card","cljs.core/next","metabase.lib.metadata.calculation.display_name","p__78726","map__78727","cljs.core/--destructure-map","join-alias","table-id","card-id","join","metabase.lib.join/resolve-join","temp__5802__auto__","metabase.lib.card/fallback-display-name","p__78729","map__78730","fk-field-id","fk-column","metabase.lib.metadata.calculation.visible_columns","p1__78728#","medley.core.find_first","and__5000__auto__","cljs.core._EQ_","fk-info","cljs.core.update","metabase.lib.util/strip-id","metabase.lib.metadata.calculation/display-info-method","js/metabase.lib.column-group.column-group-info-method","fexpr__78731","metabase.lib.column-group/column-group-info-method","column-metadata","p__78732","map__78733","metabase.lib.join.util/current-join-alias","_column-metadata","metabase.lib.column-group/column-group-info","p__78734","map__78735","metabase.lib.column-group/column-group-ordering","fk-field-names","group-type","cljs.core.into","G__78736","cljs.core/Keyword","js/Error","G__78737","G__78738","metabase.lib.column-group/group-columns","column-metadatas","cljs.core.comp","cljs.core.filter","cljs.core.map","cljs.core.juxt","cljs.core/group-by","p__78739","vec__78740","cljs.core.nth","group-info","columns","cljs.core.assoc","cljs.core.sort_by","cljs.core.partial","cljs.core/vec","metabase.lib.column-group/columns-group-columns","metabase.lib.metadata.calculation/display-name-method","_display-name-style"],"sourcesContent":["(ns metabase.lib.column-group\n  (:require\n   [medley.core :as m]\n   [metabase.lib.card :as lib.card]\n   [metabase.lib.join :as lib.join]\n   [metabase.lib.join.util :as lib.join.util]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.id :as lib.schema.id]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.lib.util :as lib.util]\n   [metabase.util.malli :as mu]))\n\n(def ^:private GroupType\n  [:enum\n   ;; the `:group-type/main` group includes all the columns from the source Table/Card/previous stage as well as ones\n   ;; added in this stage.\n   :group-type/main\n   ;; the other two group types are for various types of joins.\n   :group-type/join.explicit\n   :group-type/join.implicit])\n\n(def ^:private group-type-ordering\n  {:group-type/main          1\n   :group-type/join.explicit 2\n   :group-type/join.implicit 3})\n\n(def ^:private ColumnGroup\n  \"Schema for the metadata returned by [[group-columns]], and accepted by [[columns-group-columns]].\"\n  [:and\n   [:map\n    [:lib/type    [:= :metadata/column-group]]\n    [::group-type GroupType]\n    [::columns    [:sequential [:ref ::lib.schema.metadata/column]]]]\n   [:multi\n    {:dispatch ::group-type}\n    [:group-type/main\n     any?]\n    ;; if we're in the process of BUILDING a join and using this in combination\n    ;; with [[metabase.lib.join/join-condition-rhs-columns]], the alias won't be present yet, so group things by the\n    ;; joinable -- either the Card we're joining, or the Table we're joining. See #32493\n    [:group-type/join.explicit\n     [:and\n      [:map\n       [:join-alias {:optional true} [:ref ::lib.schema.common/non-blank-string]]\n       [:table-id   {:optional true} [:ref ::lib.schema.id/table]]\n       [:card-id    {:optional true} [:ref ::lib.schema.id/card]]]\n      [:fn\n       {:error/message \":group-type/join.explicit should only have at most one of :join-alias, :table-id, or :card-id\"}\n       (fn [m]\n         (>= (count (keys (select-keys m [:join-alias :table-id :card-id]))) 1))]]]\n    [:group-type/join.implicit\n     [:map\n      [:fk-field-id [:ref ::lib.schema.id/field]]]]]])\n\n(defmethod lib.metadata.calculation/metadata-method :metadata/column-group\n  [_query _stage-number column-group]\n  column-group)\n\n(defmulti ^:private display-info-for-group-method\n  {:arglists '([query stage-number column-group])}\n  (fn [_query _stage-number column-group]\n    (::group-type column-group)))\n\n(defmethod display-info-for-group-method :group-type/main\n  [query stage-number _column-group]\n  (merge\n   (let [stage (lib.util/query-stage query stage-number)]\n     (or\n      (when-let [table (some->> (:source-table stage) (lib.metadata/table query))]\n        (lib.metadata.calculation/display-info query stage-number table))\n      (when-let [card (some->> (:source-card stage) (lib.metadata/card query))]\n        (lib.metadata.calculation/display-info query stage-number card))\n      ;; for multi-stage queries return an empty string (#30108)\n      (when (next (:stages query))\n        {:display-name \"\"})\n      ;; if this is a native query or something else that doesn't have a source Table or source Card then use the\n      ;; stage display name.\n      {:display-name (lib.metadata.calculation/display-name query stage-number stage)}))\n   {:is-from-join           false\n    :is-implicitly-joinable false}))\n\n(defmethod display-info-for-group-method :group-type/join.explicit\n  [query stage-number {:keys [join-alias table-id card-id], :as _column-group}]\n  (merge\n   (or\n    (when join-alias\n      (when-let [join (lib.join/resolve-join query stage-number join-alias)]\n        (lib.metadata.calculation/display-info query stage-number join)))\n    (when table-id\n      (when-let [table (lib.metadata/table query table-id)]\n        (lib.metadata.calculation/display-info query stage-number table)))\n    (when card-id\n      (if-let [card (lib.metadata/card query card-id)]\n        (lib.metadata.calculation/display-info query stage-number card)\n        {:display-name (lib.card/fallback-display-name card-id)})))\n   {:is-from-join           true\n    :is-implicitly-joinable false}))\n\n(defmethod display-info-for-group-method :group-type/join.implicit\n  [query stage-number {:keys [fk-field-id], :as _column-group}]\n  (merge\n   (when-let [;; TODO: This is clumsy and expensive; there is likely a neater way to find the full FK column.\n              ;; Note that using `lib.metadata/field` is out - we need to respect metadata overrides etc. in models, and\n              ;; `lib.metadata/field` uses the field's original status.\n              fk-column (->> (lib.util/query-stage query stage-number)\n                             (lib.metadata.calculation/visible-columns query stage-number)\n                             (m/find-first #(and (= (:id %) fk-field-id)\n                                                 (:fk-target-field-id %))))]\n     (let [fk-info (lib.metadata.calculation/display-info query stage-number fk-column)]\n       ;; Implicitly joined column pickers don't use the target table's name, they use the FK field's name with\n       ;; \"ID\" dropped instead.\n       ;; This is very intentional: one table might have several FKs to one foreign table, each with different\n       ;; meaning (eg. ORDERS.customer_id vs. ORDERS.supplier_id both linking to a PEOPLE table).\n       ;; See #30109 for more details.\n       (update fk-info :display-name lib.util/strip-id)))\n   {:is-from-join           false\n    :is-implicitly-joinable true}))\n\n(defmethod lib.metadata.calculation/display-info-method :metadata/column-group\n  [query stage-number column-group]\n  (display-info-for-group-method query stage-number column-group))\n\n(defmulti ^:private column-group-info-method\n  {:arglists '([column-metadata])}\n  :lib/source)\n\n(defmethod column-group-info-method :source/implicitly-joinable\n  [column-metadata]\n  {::group-type :group-type/join.implicit,\n   :fk-field-id (:fk-field-id column-metadata)\n   :fk-join-alias (:fk-join-alias column-metadata)})\n\n(defmethod column-group-info-method :source/joins\n  [{:keys [table-id], :lib/keys [card-id], :as column-metadata}]\n  (merge\n   {::group-type :group-type/join.explicit}\n   ;; if we're in the process of BUILDING a join and using this in combination\n   ;; with [[metabase.lib.join/join-condition-rhs-columns]], the alias won't be present yet, so group things by the\n   ;; joinable -- either the Card we're joining, or the Table we're joining. Prefer `:lib/card-id` because when we\n   ;; join a Card the Fields might have `:table-id` but we want the entire Card to appear as one group. See #32493\n   (or\n    (when-let [join-alias (lib.join.util/current-join-alias column-metadata)]\n      {:join-alias join-alias})\n    (when card-id\n      {:card-id card-id})\n    (when table-id\n      {:table-id table-id}))))\n\n(defmethod column-group-info-method :default\n  [_column-metadata]\n  {::group-type :group-type/main})\n\n(mu/defn ^:private column-group-info :- [:map [::group-type GroupType]]\n  \"The value we should use to `group-by` inside [[group-columns]].\"\n  [column-metadata :- ::lib.schema.metadata/column]\n  (column-group-info-method column-metadata))\n\n(defn- column-group-ordering\n  [fk-field-names {::keys [group-type] :as column-group}]\n  (into [(group-type-ordering group-type)]\n        (case group-type\n          :group-type/main          [\"main\"] ; There's only ever one main group, so no need to sort them further.\n          :group-type/join.explicit [(:join-alias column-group)]\n          :group-type/join.implicit [(or (:fk-join-alias column-group) \"\")\n                                     (fk-field-names (:fk-field-id column-group) \"\")])))\n\n(mu/defn group-columns :- [:sequential ColumnGroup]\n  \"Given a group of columns returned by a function like [[metabase.lib.order-by/orderable-columns]], group the columns\n  by Table or equivalent (e.g. Saved Question) so that they're in an appropriate shape for showing in the Query\n  Builder. e.g a sequence of columns like\n\n    [venues.id\n     venues.name\n     venues.category-id\n     ;; implicitly joinable\n     categories.id\n     categories.name]\n\n  would get grouped into groups like\n\n    [{::columns [venues.id\n                 venues.name\n                 venues.category-id]}\n     {::columns [categories.id\n                 categories.name]}]\n\n  Groups have the type `:metadata/column-group` and can be passed directly\n  to [[metabase.lib.metadata.calculation/display-info]].\n\n  Ordered to put own columns first, then explicit joins alphabetically by join alias, then implicit joins alphabetically\n  by FK join alias + FK field name (which is used as the table name). So if the same FK is available multiple times,\n  they are ordered: own first, then alphabetically by the join alias for that FK.\"\n  [column-metadatas :- [:sequential ::lib.schema.metadata/column]]\n  (let [fk-field-names (into {} (comp (filter :id)\n                                      (map (juxt :id :name)))\n                             column-metadatas)]\n    (->> (group-by column-group-info column-metadatas)\n         (map (fn [[group-info columns]]\n                (assoc group-info\n                       :lib/type :metadata/column-group\n                       ::columns columns)))\n         (sort-by (partial column-group-ordering fk-field-names))\n         vec)))\n\n(mu/defn columns-group-columns :- [:sequential ::lib.schema.metadata/column]\n  \"Get the columns associated with a column group\"\n  [column-group :- ColumnGroup]\n  (::columns column-group))\n\n(defmethod lib.metadata.calculation/display-name-method :metadata/column-group\n  [query stage-number column-group _display-name-style]\n  (:display-name (lib.metadata.calculation/display-info query stage-number column-group)))\n"]}