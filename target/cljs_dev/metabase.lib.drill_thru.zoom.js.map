{"version":3,"sources":["metabase/lib/drill_thru/zoom.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA,gDAAA,hDAAOA,wGAAaC,OAAOC;AAA3B,AAAA,kDAAA,0DAAA,6GAAA,qDAAA,yEAAA,gEAAA,qEAAA,+DAAA,3IAGcD,sEACAC;;AAGd;;;;;;;0CAAA,qEAAAC,/GAASI,4FAENC,MACAC;AAHH,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;eAAAA,XAIiCO;aAJjC,AAAAL,4CAAAF,eAAA,pEAIWH;YAJX,AAAAK,4CAAAF,eAAA,nEAIkBF;UAJlB,AAAAI,4CAAAF,eAAA,jEAIwBM;AAJxB,AAKE,GAAM,4BAAA,1BAEC,GAAA,UAAA,TAAOR,wBACP,AAACU,iDAAkCJ,MAAMC,mBAEzC,GAAK,AAACI,+CAAgCL;AAL7C,AAME,GAAI,AAACM,0CAA2Bb;AAE9B,GAAU,mDAAA,nDAACc,6CAAEb;AAAb;;AAAA,AACE,OAACF,8CAAYC,OAAOC;;;AAEtB,IAAAc,aAAkB,AAACG,+CAAsCX;gBAAzD,AAAAS,4CAAAD,WAAA,IAAA,vEAAOE;AAAP,AACE,IAAAE,qBAAoB,AAAA,oFACK,qDAAA,WAAAE,hEAACC;AAAD,AAAmC,oDAAA,AAAA,mFAAA,AAAA,uFAAAD,vNAACP,0OAAE,AAAA,mFAAOG;GAD7CR;AAAzB,AAAA,oBAAAU;AAAA,AAAA,eAAAA,XAAWC;AAAX,AAGE,GAAU,aAAA,ZAAMA;AAAhB;;AAAA,AACE,OAACrB,8CAAYkB,UAAUG;;;AAJ3B;;;;AAZN;;;AAkBF,AAAAG,kGAAA,yEAAA,WACGC,OAAOC,cAAcC;AADxB,AAEE,wCAAA,mFAAA,+DAAA,+DAAA,lPAACC,sBAAYD;;AAEf,AAAAE,6FAAA,yEAAA,WACGrB,MACAkB,cACAI;AAHH,AAMEtB","names":["metabase.lib.drill-thru.zoom/zoom-drill*","column","value","p__79293","map__79294","cljs.core/--destructure-map","cljs.core.get","metabase.lib.drill-thru.zoom/zoom-drill","query","stage-number","row","_context","metabase.lib.drill-thru.common/mbql-stage?","metabase.lib.drill-thru.common/many-pks?","metabase.lib.types.isa/primary-key?","cljs.core._EQ_","vec__79295","cljs.core.nth","pk-column","metabase.lib.metadata.calculation/primary-keys","temp__5804__auto__","pk-value","p1__79292#","medley.core.find_first","metabase.lib.drill-thru.common/drill-thru-info-method","_query","_stage-number","drill-thru","cljs.core/select-keys","metabase.lib.drill-thru.common/drill-thru-method","_drill"],"sourcesContent":["(ns metabase.lib.drill-thru.zoom\n  \"Object details drill for PK columns when there is a single PK column available.\n\n  Entry points:\n\n  - Cell\n\n  Requirements:\n\n  - There is only on PK column available in returned columns\n\n  - Selected column is not a FK\n\n  - Selected column is either a FK OR the query has no aggregations (in this case the PK column should be used instead\n    of the selected column)\n\n  - The value for the PK column (which can be different to selected column) in the data row is not `null`.\n\n  Query transformation:\n\n  - None/identity\n\n  Question transformation:\n\n  - None\n\n  A `:zoom` drill is a 'View details' drill when you click on the value of a PK column in a Table that has EXACTLY ONE\n  PK column. In MLv2, it is a no-op; in the frontend it changes the URL to take you to the 'object details' view for\n  the row in question. For Tables with multiple PK columns, a [[metabase.lib.drill-thru.pk]] drill is returned\n  instead.\n\n  We will only possibly return one of the 'object details'\n  drills ([[metabase.lib.drill-thru.pk]], [[metabase.lib.drill-thru.fk-details]],\n  or [[metabase.lib.drill-thru.zoom]]); see [[metabase.lib.drill-thru.object-details]] for the high-level logic that\n  calls out to the individual implementations.\"\n  (:require\n   [medley.core :as m]\n   [metabase.lib.drill-thru.common :as lib.drill-thru.common]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.drill-thru :as lib.schema.drill-thru]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.util.malli :as mu]))\n\n(defn- zoom-drill* [column value]\n  {:lib/type  :metabase.lib.drill-thru/drill-thru\n   :type      :drill-thru/zoom\n   :column    column\n   :object-id value\n   :many-pks? false})\n\n(mu/defn zoom-drill :- [:maybe ::lib.schema.drill-thru/drill-thru.zoom]\n  \"Return a `:zoom` drill when clicking on the value of a PK column in a Table that has only one PK column.\"\n  [query                                   :- ::lib.schema/query\n   stage-number                            :- :int\n   {:keys [column value row] :as _context} :- ::lib.schema.drill-thru/context]\n  (when (and\n         ;; ignore clicks on headers (value = nil rather than :null)\n         (some? value)\n         (lib.drill-thru.common/mbql-stage? query stage-number)\n         ;; if this table has more than one PK we should be returning a [[metabase.lib.drill-thru.pk]] instead.\n         (not (lib.drill-thru.common/many-pks? query)))\n    (if (lib.types.isa/primary-key? column)\n      ;; PK column was clicked. Ignore NULL values.\n      (when-not (= value :null)\n        (zoom-drill* column value))\n      ;; some other column was clicked. Find the PK column and create a filter for its value.\n      (let [[pk-column] (lib.metadata.calculation/primary-keys query)]\n        (when-let [pk-value (->> row\n                                 (m/find-first #(-> % :column :name (= (:name pk-column))))\n                                 :value)]\n          (when-not (nil? pk-value)\n            (zoom-drill* pk-column pk-value)))))))\n\n(defmethod lib.drill-thru.common/drill-thru-info-method :drill-thru/zoom\n  [_query _stage-number drill-thru]\n  (select-keys drill-thru [:many-pks? :object-id :type]))\n\n(mu/defmethod lib.drill-thru.common/drill-thru-method :drill-thru/zoom :- ::lib.schema/query\n  [query         :- ::lib.schema/query\n   _stage-number :- :int\n   _drill        :- ::lib.schema.drill-thru/drill-thru.zoom]\n  ;; this is just an identity transformation, see\n  ;; https://metaboat.slack.com/archives/C04CYTEL9N2/p1693965932617369\n  query)\n"]}