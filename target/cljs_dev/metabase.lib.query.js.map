{"version":3,"sources":["metabase/lib/query.cljc"],"mappings":"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","names":["metabase.lib.metadata.calculation/metadata-method","_query","_stage-number","_x","cljs.core.ex_info","metabase.lib.metadata.calculation/returned-columns-method","query","stage-number","a-query","options","metabase.lib.metadata.calculation.returned_columns","metabase.lib.util/query-stage","metabase.lib.metadata.calculation/display-name-method","x","style","metabase.lib.metadata.calculation.display_name","metabase.lib.query/native?","stage","cljs.core._EQ_","metabase.lib.metadata.calculation/display-info-method","metabase.lib.metadata/editable?","metabase.lib.query/stage-count","cljs.core/count","js/metabase","js/metabase.lib","js/metabase.lib.query","js/metabase.lib.query.can-run-method","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","cljs.core.get","fexpr__77726","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.query/can-run-method","_card-type","card-type","or__5002__auto__","cljs.core.not_EQ_","last-stage","metabase.lib.query/can-run","and__5000__auto__","*suppress-expression-type-check?*-orig-val__77727","*suppress-expression-type-check?*-temp-val__77728","metabase.lib.schema.expression/*suppress-expression-type-check?*","metabase.util.malli.registry/validate","cljs.core/boolean","js/metabase.lib.query.can-save-method","fexpr__77729","metabase.lib.query/can-save-method","metabase.lib.query/can-save","metabase.lib.query/can-preview","cljs.core/every?","cljs.core/seq","cljs.core/not","cljs.core/first","cljs.core.filter","cljs.core/some?","&parents","&match","cljs.core/vector?","&match_left__77733","cljs.core.subvec","&match_left__77733_0__77735","cljs.core.nth","cljs.core/keyword-identical?","cljs.core.match/backtrack","e77751","js/Error","e__46214__auto__","e77750","e77749","metabase.lib.util.match.impl/match-in-collection","match-77730","metabase.lib.query/add-types-to-fields","metadata-provider","temp__5802__auto__","field-ids","&match_0__77754","&match_1__77755","&match_2__77756","e77760","e77759","e77758","e77757","match-77752","_options","cljs.core.every_pred","cljs.core/map?","cljs.core/complement","id","cljs.core/integer?","cljs.core/some","metabase.lib.metadata/bulk-metadata","&match_0__77763","&match_1__77764","&match_2__77765","e77769","e77768","e77767","e77766","metabase.lib.util.match.impl/replace-in-collection","replace-77761","cljs.core.update","cljs.core/merge","metabase.lib.metadata/field","cljs.core.merge","cljs.core/contains?","cljs.core/select-keys","metabase.lib.query/query-with-stages","metadata-providerable","stages","G__77770","G__77771","G__77772","metabase.lib.metadata/database","database-id","metabase.lib.metadata/->metadata-provider","metabase.lib.query/query-from-legacy-query","legacy-query","e77773","pmbql-query","*suppress-expression-type-check?*-orig-val__77774","*suppress-expression-type-check?*-temp-val__77775","metabase.lib.convert/->pMBQL","metabase.legacy-mbql.normalize/normalize-or-throw","metabase.lib.query.query_with_stages","e","metabase.shared.util.i18n.js_i18n","cljs.core/ex-message","js/metabase.lib.query.query-method","fexpr__77776","metabase.lib.query/query-method","_metadata-providerable","metabase.lib.util/normalized-query-type","metabase.lib.dispatch/dispatch-value","metabase.lib.hierarchy/hierarchy","cljs.core.assoc","p__77778","map__77779","cljs.core/--destructure-map","converted?","cljs.core.dissoc","metabase.lib.normalize.normalize","G__77780","cljs.core.mapv","p__77781","vec__77782","&match_0__77787","&match_1__77788","p1__77777#","e77793","e77792","e77791","e77790","replace-77785","opts","expression-name","found-ref","medley.core/remove-vals","metabase.lib.expression.expression_ref","cljs.core/second","_","medley.core.indexed","table-metadata","metabase.util/the-id","metabase.lib.query/metric-query","card-metadata","card-id","base-query","metric-breakouts","G__77796","G__77797","metabase.lib.query/query","p1__77794#","p2__77795#","cljs.core.reduce","metabase.lib.util/add-summary-clause","metabase.lib.options/ensure-uuid","mbql-stage","native-stage","metabase.lib.query/query-from-legacy-inner-query","inner-query","metabase.lib.convert/legacy-query-from-inner-query","metabase.lib.query/->legacy-MBQL","metabase.lib.convert/->legacy-MBQL","metabase.lib.query/with-different-table","original-query","table-id","metabase.lib.metadata/table-or-card","metabase.lib.query/occurs-in-expression?","expression-clause","clause-type","expression-body","metabase.lib.util/clause-of-type?","cljs.core/sequential?","p1__77798#","cljs.core/nnext","metabase.lib.query/occurs-in-stage-clause?","query-or-join","clause","pred","p1__77799#","metabase.lib.query/uses-segment?","segment-id","p1__77800#","metabase.lib.query/uses-metric?","metric-id","p1__77801#","metabase.lib.query/clause-types-order","metabase.lib.query/preview-stage","clause-index","to-drop","p1__77802#","cljs.core.take_while","G__77804","cljs.core/dissoc","p1__77803#","cljs.core/vec","cljs.core.take","metabase.lib.query/preview-query","metabase.lib.util/canonical-stage-index","p1__77805#","cljs.core.update_in"],"sourcesContent":["(ns metabase.lib.query\n  (:refer-clojure :exclude [remove])\n  (:require\n   [medley.core :as m]\n   [metabase.legacy-mbql.normalize :as mbql.normalize]\n   [metabase.lib.convert :as lib.convert]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.expression :as lib.expression]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.normalize :as lib.normalize]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.expression :as lib.schema.expression]\n   [metabase.lib.schema.id :as lib.schema.id]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.lib.util :as lib.util]\n   [metabase.lib.util.match :as lib.util.match]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util :as u]\n   [metabase.util.malli :as mu]\n   [metabase.util.malli.registry :as mr]))\n\n(defmethod lib.metadata.calculation/metadata-method :mbql/query\n  [_query _stage-number _x]\n  ;; not i18n'ed because this shouldn't be developer-facing.\n  (throw (ex-info \"You can't calculate a metadata map for a query! Use lib.metadata.calculation/returned-columns-method instead.\"\n                  {})))\n\n(defmethod lib.metadata.calculation/returned-columns-method :mbql/query\n  [query stage-number a-query options]\n  (lib.metadata.calculation/returned-columns query stage-number (lib.util/query-stage a-query stage-number) options))\n\n(defmethod lib.metadata.calculation/display-name-method :mbql/query\n  [query stage-number x style]\n  (lib.metadata.calculation/display-name query stage-number (lib.util/query-stage x stage-number) style))\n\n(mu/defn native? :- :boolean\n  \"Given a query, return whether it is a native query.\"\n  [query :- ::lib.schema/query]\n  (let [stage (lib.util/query-stage query 0)]\n    (= (:lib/type stage) :mbql.stage/native)))\n\n(defmethod lib.metadata.calculation/display-info-method :mbql/query\n  [_query _stage-number query]\n  {:is-native   (native? query)\n   :is-editable (lib.metadata/editable? query)})\n\n(mu/defn stage-count :- ::lib.schema.common/int-greater-than-or-equal-to-zero\n  \"Returns the count of stages in query\"\n  [query :- ::lib.schema/query]\n  (count (:stages query)))\n\n(defmulti can-run-method\n  \"Returns whether the query is runnable based on first stage :lib/type\"\n  (fn [query _card-type]\n    (:lib/type (lib.util/query-stage query 0))))\n\n(defmethod can-run-method :default\n  [_query _card-type]\n  true)\n\n(defmethod can-run-method :mbql.stage/mbql\n  [query card-type]\n  (or (not= card-type :metric)\n      (let [last-stage (lib.util/query-stage query -1)]\n        (= (-> last-stage :aggregation count) 1))))\n\n(mu/defn can-run :- :boolean\n  \"Returns whether the query is runnable. Manually validate schema for cljs.\"\n  [query :- ::lib.schema/query\n   card-type :- ::lib.schema.metadata/card.type]\n  (and (binding [lib.schema.expression/*suppress-expression-type-check?* true]\n         (mr/validate ::lib.schema/query query))\n       (boolean (can-run-method query card-type))))\n\n(defmulti can-save-method\n  \"Returns whether the query can be saved based on first stage :lib/type.\"\n  (fn [query _card-type]\n    (:lib/type (lib.util/query-stage query 0))))\n\n(defmethod can-save-method :default\n  [_query _card-type]\n  true)\n\n(mu/defn can-save :- :boolean\n  \"Returns whether `query` for a card of `card-type` can be saved.\"\n  [query :- ::lib.schema/query\n   card-type :- ::lib.schema.metadata/card.type]\n  (and (lib.metadata/editable? query)\n       (can-run query card-type)\n       (boolean (can-save-method query card-type))))\n\n(mu/defn can-preview :- :boolean\n  \"Returns whether the query can be previewed.\n\n  See [[metabase.lib.js/can-preview]] for how this differs from [[can-run]].\"\n  [query :- ::lib.schema/query]\n  (and (can-run query \"question\")\n       ;; Either it contains no expressions with `:offset`, or there is at least one order-by.\n       (every? (fn [stage]\n                 (boolean\n                   (or (seq (:order-by stage))\n                       (not (lib.util.match/match-one (:expressions stage) :offset)))))\n               (:stages query))))\n\n(defn add-types-to-fields\n  \"Add `:base-type` and `:effective-type` to options of fields in `x` using `metadata-provider`. Works on pmbql fields.\n  `:effective-type` is required for coerced fields to pass schema checks.\"\n  [x metadata-provider]\n  (if-let [field-ids (lib.util.match/match x\n                       [:field\n                        (_options :guard (every-pred map? (complement (every-pred :base-type :effective-type))))\n                        (id :guard integer? pos?)]\n                       (when-not (some #{:mbql/stage-metadata} &parents)\n                         id))]\n    ;; \"pre-warm\" the metadata provider\n    (do (lib.metadata/bulk-metadata metadata-provider :metadata/column field-ids)\n        (lib.util.match/replace\n         x\n         [:field\n          (options :guard (every-pred map? (complement (every-pred :base-type :effective-type))))\n          (id :guard integer? pos?)]\n         (if (some #{:mbql/stage-metadata} &parents)\n           &match\n           (update &match 1 merge\n                   ;; TODO: For brush filters, query with different base type as in metadata is sent from FE. In that\n                   ;;       case no change is performed. Find a way how to handle this properly!\n                   (when-not (and (some? (:base-type options))\n                                  (not= (:base-type options)\n                                        (:base-type (lib.metadata/field metadata-provider id))))\n                     ;; Following key is used to track which base-types we added during `query` call. It is used in\n                     ;; [[metabase.lib.convert/options->legacy-MBQL]] to remove those, so query after conversion\n                     ;; as legacy -> pmbql -> legacy looks closer to the original.\n                     (merge (when-not (contains? options :base-type)\n                              {::transformation-added-base-type true})\n                            (-> (lib.metadata/field metadata-provider id)\n                                (select-keys [:base-type :effective-type]))))))))\n    x))\n\n(mu/defn query-with-stages :- ::lib.schema/query\n  \"Create a query from a sequence of stages.\"\n  ([metadata-providerable stages]\n   (query-with-stages (:id (lib.metadata/database metadata-providerable)) metadata-providerable stages))\n\n  ([database-id           :- ::lib.schema.id/database\n    metadata-providerable :- ::lib.schema.metadata/metadata-providerable\n    stages]\n   {:lib/type     :mbql/query\n    :lib/metadata (lib.metadata/->metadata-provider metadata-providerable)\n    :database     database-id\n    :stages       stages}))\n\n(defn- query-from-legacy-query\n  [metadata-providerable legacy-query]\n  (try\n    (let [pmbql-query (-> (binding [lib.schema.expression/*suppress-expression-type-check?* true]\n                            (lib.convert/->pMBQL (mbql.normalize/normalize-or-throw legacy-query)))\n                          (add-types-to-fields metadata-providerable))]\n      (merge\n       pmbql-query\n       (query-with-stages metadata-providerable (:stages pmbql-query))))\n    (catch #?(:clj Throwable :cljs :default) e\n      (throw (ex-info (i18n/tru \"Error creating query from legacy query: {0}\" (ex-message e))\n                      {:legacy-query legacy-query}\n                      e)))))\n\n(defmulti ^:private query-method\n  \"Implementation for [[query]].\"\n  {:arglists '([metadata-providerable x])}\n  (fn [_metadata-providerable x]\n    (or (lib.util/normalized-query-type x)\n        (lib.dispatch/dispatch-value x)))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod query-method :query ; legacy MBQL query\n  [metadata-providerable legacy-query]\n  (query-from-legacy-query metadata-providerable legacy-query))\n\n(defmethod query-method :native ; legacy native query\n  [metadata-providerable legacy-query]\n  (query-from-legacy-query metadata-providerable legacy-query))\n\n(defmethod query-method :dispatch-type/map\n  [metadata-providerable query]\n  (query-method metadata-providerable (assoc (lib.convert/->pMBQL query) :lib/type :mbql/query)))\n\n;;; this should already be a query in the shape we want but:\n;; - let's make sure it has the database metadata that was passed in\n;; - fill in field refs with metadata (#33680)\n;; - fill in top expression refs with metadata\n(defmethod query-method :mbql/query\n  [metadata-providerable {converted? :lib.convert/converted? :as query}]\n  (let [metadata-provider (lib.metadata/->metadata-provider metadata-providerable)\n        query (-> query\n                  (assoc :lib/metadata metadata-provider)\n                  (dissoc :lib.convert/converted?)\n                  lib.normalize/normalize)\n        stages (:stages query)]\n    (cond-> query\n      converted?\n      (assoc\n       :stages\n       (mapv (fn [[stage-number stage]]\n               (-> stage\n                   (add-types-to-fields metadata-provider)\n                   (lib.util.match/replace\n                    [:expression\n                     (opts :guard (every-pred map? (complement (every-pred :base-type :effective-type))))\n                     expression-name]\n                    (let [found-ref (try\n                                      (m/remove-vals\n                                       #(= :type/* %)\n                                       (-> (lib.expression/expression-ref query stage-number expression-name)\n                                           second\n                                           (select-keys [:base-type :effective-type])))\n                                      (catch #?(:clj Exception :cljs :default) _\n                                        ;; This currently does not find expressions defined in join stages\n                                        nil))]\n                      ;; Fallback if metadata is missing\n                      [:expression (merge found-ref opts) expression-name]))))\n             (m/indexed stages))))))\n\n(defmethod query-method :metadata/table\n  [metadata-providerable table-metadata]\n  (query-with-stages metadata-providerable\n                     [{:lib/type     :mbql.stage/mbql\n                       :source-table (u/the-id table-metadata)}]))\n\n(declare query)\n\n(defn- metric-query\n  [metadata-providerable card-metadata]\n  (let [card-id (u/the-id card-metadata)\n        base-query (query-with-stages metadata-providerable\n                                      [{:lib/type :mbql.stage/mbql\n                                        :source-card card-id}])\n        metric-breakouts (-> (query metadata-providerable (:dataset-query card-metadata))\n                             (lib.util/query-stage -1)\n                             :breakout)\n        base-query (reduce\n                    #(lib.util/add-summary-clause %1 0 :breakout %2)\n                    base-query\n                    metric-breakouts)]\n    (-> base-query\n        (lib.util/add-summary-clause\n         0 :aggregation\n         (lib.options/ensure-uuid [:metric {} card-id])))))\n\n(defmethod query-method :metadata/card\n  [metadata-providerable card-metadata]\n  (if (or (= (:type card-metadata) :metric)\n          (= (:lib/type card-metadata) :metdata/metric))\n    (metric-query metadata-providerable card-metadata)\n    (query-with-stages metadata-providerable\n                       [{:lib/type :mbql.stage/mbql\n                         :source-card (u/the-id card-metadata)}])))\n\n(defmethod query-method :metadata/metric\n  [metadata-providerable card-metadata]\n  (metric-query metadata-providerable card-metadata))\n\n(defmethod query-method :mbql.stage/mbql\n  [metadata-providerable mbql-stage]\n  (query-with-stages metadata-providerable [mbql-stage]))\n\n(defmethod query-method :mbql.stage/native\n  [metadata-providerable native-stage]\n  (query-with-stages metadata-providerable [native-stage]))\n\n(mu/defn query :- ::lib.schema/query\n  \"Create a new MBQL query from anything that could conceptually be an MBQL query, like a Database or Table or an\n  existing MBQL query or saved question or whatever. If the thing in question does not already include metadata, pass\n  it in separately -- metadata is needed for most query manipulation operations.\"\n  [metadata-providerable :- ::lib.schema.metadata/metadata-providerable\n   x]\n  (query-method metadata-providerable x))\n\n(mu/defn query-from-legacy-inner-query :- ::lib.schema/query\n  \"Create a pMBQL query from a legacy inner query.\"\n  [metadata-providerable :- ::lib.schema.metadata/metadata-providerable\n   database-id           :- ::lib.schema.id/database\n   inner-query           :- :map]\n  (->> (lib.convert/legacy-query-from-inner-query database-id inner-query)\n       lib.convert/->pMBQL\n       (query metadata-providerable)))\n\n(defn ->legacy-MBQL\n  \"Convert the pMBQL `a-query` into a legacy MBQL query.\"\n  [a-query]\n  (-> a-query lib.convert/->legacy-MBQL))\n\n(mu/defn with-different-table :- ::lib.schema/query\n  \"Changes an existing query to use a different source table or card.\n   Can be passed an integer table id or a legacy `card__<id>` string.\"\n  [original-query :- ::lib.schema/query\n   table-id :- [:or ::lib.schema.id/table :string]]\n  (let [metadata-provider (lib.metadata/->metadata-provider original-query)]\n   (query metadata-provider (lib.metadata/table-or-card metadata-provider table-id))))\n\n(defn- occurs-in-expression?\n  [expression-clause clause-type expression-body]\n  (or (and (lib.util/clause-of-type? expression-clause clause-type)\n           (= (nth expression-clause 2) expression-body))\n      (and (sequential? expression-clause)\n           (boolean\n            (some #(occurs-in-expression? % clause-type expression-body)\n                  (nnext expression-clause))))))\n\n(defn- occurs-in-stage-clause?\n  \"Tests whether predicate `pred` is true for an element of clause `clause` of `query-or-join`.\n  The test is transitive over joins.\"\n  [query-or-join clause pred]\n  (boolean\n   (some (fn [stage]\n           (or (some pred (clause stage))\n               (some #(occurs-in-stage-clause? % clause pred) (:joins stage))))\n         (:stages query-or-join))))\n\n(mu/defn uses-segment? :- :boolean\n  \"Tests whether `a-query` uses segment with ID `segment-id`.\n  `segment-id` can be a regular segment ID or a string. The latter is for symmetry\n  with [[uses-metric?]].\"\n  [a-query :- ::lib.schema/query\n   segment-id :- [:or ::lib.schema.id/segment :string]]\n  (occurs-in-stage-clause? a-query :filters #(occurs-in-expression? % :segment segment-id)))\n\n(mu/defn uses-metric? :- :boolean\n  \"Tests whether `a-query` uses metric with ID `metric-id`.\"\n  [a-query :- ::lib.schema/query\n   metric-id :- ::lib.schema.id/metric]\n  (occurs-in-stage-clause? a-query :aggregation #(occurs-in-expression? % :metric metric-id)))\n\n(def ^:private clause-types-order\n  ;; When previewing some clause type `:x`, we drop the prefix of this list up to but excluding `:x`.\n  ;; So if previewing `:aggregation`, we drop `:limit` and `:order-by`;\n  ;; if previewing `:filters` we drop `:limit`, `:order-by`, `:aggregation` and `:breakout`.\n  ;; (In practice `:breakout` is never previewed separately, but the order is important to get the behavior above.\n  ;; There are tests for this.)\n  [:limit :order-by :aggregation :breakout :filters :expressions :joins :data])\n\n(defn- preview-stage [stage clause-type clause-index]\n  (let [to-drop (take-while #(not= % clause-type) clause-types-order)]\n    (cond-> (reduce dissoc stage to-drop)\n      clause-index (update clause-type #(vec (take (inc clause-index) %))))))\n\n(mu/defn preview-query :- [:maybe ::lib.schema/query]\n  \"*Truncates* a query for use in the Notebook editor's \\\"preview\\\" system.\n\n  Takes `query` and `stage-index` as usual.\n\n  - Stages later than `stage-index` are dropped.\n  - `clause-type` is an enum (see below); all clauses of *later* types are dropped.\n  - `clause-index` is optional: if not provided then all clauses are kept; if it's a number than clauses\n    `[0, clause-index]` are kept. (To keep no clauses, specify the earlier `clause-type`.)\n\n  The `clause-type` enum represents the steps of the notebook editor, in the order they appear in the notebook:\n\n  - `:data` - just the source data for the stage\n  - `:joins`\n  - `:expressions`\n  - `:filters`\n  - `:breakout`\n  - `:aggregation`\n  - `:order-by`\n  - `:limit`\"\n  [a-query      :- ::lib.schema/query\n   stage-number :- :int\n   clause-type  :- [:enum :data :joins :expressions :filters :aggregation :breakout :order-by :limit]\n   clause-index :- [:maybe :int]]\n  (when (native? a-query)\n    (throw (ex-info \"preview-query cannot be called on native queries\" {:query a-query})))\n  (let [stage-number (lib.util/canonical-stage-index a-query stage-number)]\n    (-> a-query\n        (update :stages #(vec (take (inc stage-number) %)))\n        (update-in [:stages stage-number] preview-stage clause-type clause-index))))\n"]}