{"version":3,"sources":["metabase/lib/metadata/composed_provider.cljc"],"mappings":"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","names":["metabase.lib.metadata.composed-provider/cached-providers","providers","cljs.core.filter","metabase.lib.metadata.protocols/cached-metadata-provider?","metabase.lib.metadata.composed-provider/invocation-tracker-providers","p1__79744#","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","metabase.lib.metadata.protocols/InvocationTracker","metabase.lib.metadata.composed-provider/metadatas-for-f","f","metadata-type","ids","G__79749","vec__79750","seq__79751","cljs.core/seq","first__79752","cljs.core/first","cljs.core/next","vec__79756","seq__79757","first__79758","provider","more-providers","unfetched-ids","cljs.core/set","fetched","cljs.core/empty?","cljs.core/not","newly-fetched","newly-fetched-ids","cljs.core.into","cljs.core.map","clojure.set.difference","metabase.lib.metadata.composed-provider/metadatas","metabase.lib.metadata.protocols/metadatas","metabase.lib.metadata.composed-provider/cached-metadatas","metabase.lib.metadata.protocols/cached-metadatas","metabase.lib.metadata.composed-provider/store-metadata!","metadata-providers","metadata","temp__5804__auto__","xs__6360__auto__","metabase.lib.metadata.protocols/store-metadata!","metabase.lib.metadata.composed-provider/tables","medley.core.distinct_by","cljs.core.mapcat","metabase.lib.metadata.protocols/tables","metabase.lib.metadata.composed-provider/metadatas-for-table","table-id","cljs.core.comp","metabase.lib.metadata.protocols/metadatas-for-table","metabase.lib.metadata.composed-provider/metadatas-for-tables","table-ids","cljs.core.sequence","metabase.lib.metadata.protocols/metadatas-for-tables","metabase.lib.metadata.composed-provider/setting","setting-key","cljs.core/some","metabase.lib.metadata.protocols/setting","this__5287__auto__","writer__5288__auto__","opt__5289__auto__","cljs.core/-write","metabase.lib.metadata.composed-provider/ComposedMetadataProvider","metabase.lib.metadata.composed-provider/->ComposedMetadataProvider","_this","metabase.lib.metadata.protocols/database","metadata-ids","metabase.lib.metadata.protocols/invoked-ids","another","cljs.core._EQ_","cljs.core/cons","clojure.datafy/datafy","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","metabase.lib.metadata.composed-provider/composed-metadata-provider","seq79813","self__5712__auto__"],"sourcesContent":["(ns metabase.lib.metadata.composed-provider\n  (:require\n   #?(:clj [pretty.core :as pretty])\n   [clojure.core.protocols]\n   [clojure.datafy :as datafy]\n   [clojure.set :as set]\n   [medley.core :as m]\n   [metabase.lib.metadata.protocols :as metadata.protocols]))\n\n(defn- cached-providers [providers]\n  (filter metadata.protocols/cached-metadata-provider? providers))\n\n(defn- invocation-tracker-providers [providers]\n  (filter #(satisfies? metadata.protocols/InvocationTracker %)\n          providers))\n\n(defn- metadatas-for-f [f providers metadata-type ids]\n  (loop [[provider & more-providers] providers, unfetched-ids (set ids), fetched []]\n    (cond\n      (empty? unfetched-ids)\n      fetched\n\n      (not provider)\n      fetched\n\n      :else\n      (let [newly-fetched     (f provider metadata-type unfetched-ids)\n            newly-fetched-ids (into #{} (map :id) newly-fetched)\n            unfetched-ids     (set/difference unfetched-ids newly-fetched-ids)]\n        (recur more-providers\n               unfetched-ids\n               (into fetched newly-fetched))))))\n\n(defn- metadatas [providers metadata-type ids]\n  (metadatas-for-f metadata.protocols/metadatas providers metadata-type ids))\n\n(defn- cached-metadatas [providers metadata-type ids]\n  (metadatas-for-f metadata.protocols/cached-metadatas\n                   (cached-providers providers)\n                   metadata-type\n                   ids))\n\n(defn- store-metadata! [metadata-providers metadata]\n  (when-first [provider (cached-providers metadata-providers)]\n    (metadata.protocols/store-metadata! provider metadata)))\n\n(defn- tables [metadata-providers]\n  (m/distinct-by :id (mapcat metadata.protocols/tables metadata-providers)))\n\n(defn- metadatas-for-table [metadata-type table-id metadata-providers]\n  (into []\n        (comp\n         (mapcat (fn [provider]\n                   (metadata.protocols/metadatas-for-table provider metadata-type table-id)))\n         (m/distinct-by :id))\n        metadata-providers))\n\n(defn- metadatas-for-tables [metadata-type table-ids metadata-providers]\n  (sequence\n   (comp\n    (mapcat (fn [provider]\n              (metadata.protocols/metadatas-for-tables provider metadata-type table-ids)))\n    (m/distinct-by :id))\n   metadata-providers))\n\n(defn- setting [metadata-providers setting-key]\n  (some (fn [provider]\n          (metadata.protocols/setting provider setting-key))\n        metadata-providers))\n\n(deftype ComposedMetadataProvider [metadata-providers]\n  metadata.protocols/MetadataProvider\n  (database [_this]\n    (some metadata.protocols/database metadata-providers))\n  (metadatas [_this metadata-type ids]\n    (metadatas metadata-providers metadata-type ids))\n  (tables [_this]\n    (tables metadata-providers))\n  (metadatas-for-table [_this metadata-type table-id]\n    (metadatas-for-table metadata-type table-id metadata-providers))\n  (metadatas-for-tables [_this metadata-type table-ids]\n    (metadatas-for-tables metadata-type table-ids metadata-providers))\n  (setting [_this setting-key]\n    (setting metadata-providers setting-key))\n\n  metadata.protocols/CachedMetadataProvider\n  (cached-metadatas [_this metadata-type metadata-ids]\n    (cached-metadatas metadata-providers metadata-type metadata-ids))\n  (store-metadata! [_this metadata]\n    (store-metadata! metadata-providers metadata))\n\n  metadata.protocols/InvocationTracker\n  (invoked-ids [_this metadata-type]\n    (when-first [provider (invocation-tracker-providers metadata-providers)]\n      (metadata.protocols/invoked-ids provider metadata-type)))\n\n  #?(:clj Object :cljs IEquiv)\n  (#?(:clj equals :cljs -equiv) [_this another]\n    (and (instance? ComposedMetadataProvider another)\n         (= metadata-providers\n            (.-metadata-providers ^ComposedMetadataProvider another))))\n\n  clojure.core.protocols/Datafiable\n  (datafy [_this]\n    (cons `composed-metadata-provider (map datafy/datafy metadata-providers)))\n\n  #?@(:clj\n      [pretty/PrettyPrintable\n       (pretty [_this]\n               (list* `composed-metadata-provider metadata-providers))]))\n\n(defn composed-metadata-provider\n  \"A metadata provider composed of several different `metadata-providers`. Methods try each constituent provider in\n  turn from left to right until one returns a truthy result.\"\n  [& metadata-providers]\n  (->ComposedMetadataProvider metadata-providers))\n"]}