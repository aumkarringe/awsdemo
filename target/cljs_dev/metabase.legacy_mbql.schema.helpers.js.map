{"version":3,"sources":["metabase/legacy_mbql/schema/helpers.cljc"],"mappings":"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","names":["metabase.legacy-mbql.schema.helpers/wrap-clause-arg-schema","arg-schema","cljs.core/qualified-keyword?","metabase.legacy-mbql.schema.helpers/clause-arg-schema","cljs.core/vector?","vec__75000","cljs.core.nth","option","vector-arg-schema","G__75003","cljs.core/Keyword","metabase.legacy-mbql.schema.helpers/is-clause?","k-or-ks","x","and__5000__auto__","cljs.core/first","cljs.core/coll?","G__75010","fexpr__75009","cljs.core/set","cljs.core._EQ_","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","metabase.legacy-mbql.schema.helpers/clause","seq75015","G__75016","cljs.core/next","self__5711__auto__","tag","arg-schemas","cljs.core.pr_str","cljs.core.partial","cljs.core.into","iter__5480__auto__","s__75026","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__75028","cljs.core/chunk-buffer","i__75027","vec__75033","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__75025","cljs.core/chunk-rest","vec__75037","cljs.core/cons","cljs.core/rest","arg-name","cljs.core.partition","metabase.legacy-mbql.schema.helpers/clause-tag","a-clause","metabase.legacy-mbql.schema.helpers/one-of*","seq75043","self__5712__auto__","tags+schemas","clojure.string.join","cljs.core.map","cljs.core/second","s__75045","b__75047","i__75046","vec__75051","iter__75044","vec__75056","schema","metabase.legacy-mbql.schema.helpers/KeywordOrString","metabase.legacy-mbql.schema.helpers/non-empty","cljs.core/sequential?","vec__75060","seq__75061","first__75062","vec__75063","seq__75064","first__75065","_sequential","args","options","cljs.core/map?","cljs.core.assoc","metabase.legacy-mbql.schema.helpers/empty-or-distinct?","coll","cljs.core.apply","cljs.core/distinct?","metabase.util.malli.registry/register!","metabase.legacy-mbql.schema.helpers/distinct","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.legacy-mbql.schema.helpers\n  (:refer-clojure :exclude [distinct])\n  (:require\n   [clojure.string :as str]\n   [metabase.types]\n   [metabase.util.malli.registry :as mr]))\n\n(comment metabase.types/keep-me)\n\n;;; --------------------------------------------------- defclause ----------------------------------------------------\n\n(defn- wrap-clause-arg-schema [arg-schema]\n  [:schema (if (qualified-keyword? arg-schema)\n             [:ref arg-schema]\n             arg-schema)])\n\n(defn- clause-arg-schema [arg-schema]\n  ;; for things like optional schemas\n  (if-not (vector? arg-schema)\n    (wrap-clause-arg-schema arg-schema)\n    (let [[option arg-schema :as vector-arg-schema] arg-schema]\n      (case option\n        :optional [:? [:maybe (wrap-clause-arg-schema arg-schema)]]\n        :rest     [:* (wrap-clause-arg-schema arg-schema)]\n        (wrap-clause-arg-schema vector-arg-schema)))))\n\n;; TODO - this is a copy of the one in the [[metabase.legacy-mbql.util]] namespace. We need to reorganize things a bit\n;; so we can use the same fn and avoid circular refs\n(defn is-clause?\n  \"If `x` an MBQL clause, and an instance of clauses defined by keyword(s) `k-or-ks`?\n\n    (is-clause? :count [:count 10])        ; -> true\n    (is-clause? #{:+ :- :* :/} [:+ 10 20]) ; -> true\"\n  [k-or-ks x]\n  (and\n   (vector? x)\n   (keyword? (first x))\n   (if (coll? k-or-ks)\n     ((set k-or-ks) (first x))\n     (= k-or-ks (first x)))))\n\n(defn clause\n  \"Impl of [[metabase.legacy-mbql.schema.macros/defclause]] macro. Creates a Malli schema.\"\n  [tag & arg-schemas]\n  [:and\n   {:doc/title [:span [:code (pr-str tag)] \" clause\"]}\n   [:fn\n    {:error/message (str \"must be a `\" tag \"` clause\")}\n    (partial is-clause? tag)]\n   (into\n    [:catn\n     [\"tag\" [:= tag]]]\n    (for [[arg-name arg-schema] (partition 2 arg-schemas)]\n      [arg-name (clause-arg-schema arg-schema)]))])\n\n(defn- clause-tag [a-clause]\n  (when (and (vector? a-clause)\n             (keyword? (first a-clause)))\n    (first a-clause)))\n\n(defn one-of*\n  \"Interal impl of `one-of` macro.\"\n  [& tags+schemas]\n  (into\n   [:multi {:dispatch      clause-tag\n            :error/message (str \"valid instance of one of these MBQL clauses: \" (str/join \", \" (map first tags+schemas)))\n            :doc/schema    (into\n                            [:or\n                             {:doc/message \"valid instance of one of these MBQL clauses:\"}]\n                            (map second)\n                            tags+schemas)}]\n   (for [[tag schema] tags+schemas]\n     [tag (if (qualified-keyword? schema)\n            [:ref schema]\n            schema)])))\n\n(def KeywordOrString\n  \"Schema for any keyword or string.\"\n  [:or :keyword :string])\n\n(defn non-empty\n  \"Add an addditonal constraint to `schema` (presumably an array) that requires it to be non-empty\n   (i.e., it must satisfy `seq`).\"\n  [schema]\n  (if (and (sequential? schema)\n           (= (first schema) :sequential))\n    (let [[_sequential & args] schema\n          [options & args]     (if (map? (first args))\n                                 args\n                                 (cons nil args))]\n      (into [:sequential (assoc options :min 1)] args))\n    [:and\n     schema\n     [:fn\n      {:error/message \"non-empty\"}\n      seq]]))\n\n(defn empty-or-distinct?\n  \"True if `coll` is either empty or distinct.\"\n  [coll]\n  (if (seq coll)\n    (apply distinct? coll)\n    true))\n\n(mr/def ::distinct\n  [:fn\n   {:doc/message   \"values must be distinct\"\n    :error/message \"distinct\"}\n   empty-or-distinct?])\n\n(defn distinct\n  \"Add an additional constraint to `schema` (presumably an array) that requires all elements to be distinct.\"\n  [schema]\n  [:and\n   schema\n   [:ref ::distinct]])\n"]}