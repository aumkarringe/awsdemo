{"version":3,"sources":["metabase/lib/schema/template_tag.cljc"],"mappings":"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","names":["metabase.util.malli.registry/register!","cljs.core.into","metabase.lib.schema.common/normalize-keyword","cljs.core/keys","metabase.lib.schema.parameter/types","metabase.lib.schema.common/normalize-string-key","cljs.core/uuid?","cljs.core/any?","p1__75239#","p1__75240#","cljs.core.dissoc","cljs.core/contains?","metabase.lib.schema.template-tag/raw-value-template-tag-types","p1__75241#","metabase.lib.schema.common/normalize-map","cljs.core.keyword","m","cljs.core/every?","p__75242","vec__75243","cljs.core.nth","tag-name","tag-definition","cljs.core._EQ_"],"sourcesContent":["(ns metabase.lib.schema.template-tag\n  (:require\n   [malli.core :as mc]\n   [metabase.lib.schema.common :as common]\n   [metabase.lib.schema.id :as id]\n   [metabase.lib.schema.parameter :as lib.schema.parameter]\n   [metabase.util.malli.registry :as mr]))\n\n;; Schema for valid values of `:widget-type` for a [[TemplateTag:FieldFilter]].\n(mr/def ::widget-type\n  (into\n   [:enum\n    ;; this will be a nicer error message than Malli trying to list every single possible allowed type.\n    {:decode/normalize common/normalize-keyword\n     :error/message    \"Valid template tag :widget-type\"}\n    :none]\n   ;; TODO -- move this stuff into `metabase.lib`\n   (keys lib.schema.parameter/types)))\n\n;; Schema for valid values of template tag `:type`.\n(mr/def ::type\n  [:enum\n   {:decode/normalize common/normalize-keyword}\n   :snippet :card :dimension :number :text :date])\n\n(mr/def ::name\n  [:ref\n   {:decode/normalize common/normalize-string-key}\n   ::common/non-blank-string])\n\n;;; Things required by all template tag types.\n(mr/def ::common\n  [:map\n   [:name         ::name]\n   [:display-name ::common/non-blank-string]\n   ;; TODO -- `:id` is actually 100% required but we have a lot of tests that don't specify it because this constraint\n   ;; wasn't previously enforced; we need to go in and fix those tests and make this non-optional\n   [:id {:optional true} [:multi {:dispatch uuid?}\n                          [true  :uuid]\n                          [false ::common/non-blank-string]]]])\n\n;;; Stuff shared between the Field filter and raw value template tag schemas.\n(mr/def ::value.common\n  [:merge\n   [:ref ::common]\n   [:map\n    ;; default value for this parameter\n    [:default {:optional true} any?]\n    ;; whether or not a value for this parameter is required in order to run the query\n    [:required {:optional true} :boolean]]])\n\n;; Example:\n;;\n;;    {:id           \"c20851c7-8a80-0ffa-8a99-ae636f0e9539\"\n;;     :name         \"date\"\n;;     :display-name \"Date\"\n;;     :type         :dimension,\n;;     :dimension    [:field 4 nil]\n;;     :widget-type  :date/all-options}\n(mr/def ::field-filter\n  [:merge\n   [:ref ::value.common]\n   [:map\n    [:type        [:= :dimension]]\n    [:dimension   [:ref :mbql.clause/field]]\n    ;; which type of widget the frontend should show for this Field Filter; this also affects which parameter types\n    ;; are allowed to be specified for it.\n    [:widget-type [:ref ::widget-type]]\n    ;; optional map to be appended to filter clause\n    [:options {:optional true} [:maybe :map]]]])\n\n(mr/def ::disallow-dimension\n  [:fn\n   {:decode/normalize #(dissoc % :dimension)\n    :error/message    \":dimension is only allowed for :type :dimension template tags\"}\n   #(not (contains? % :dimension))])\n\n;; Example:\n;;\n;;    {:id           \"c2fc7310-44eb-4f21-c3a0-63806ffb7ddd\"\n;;     :name         \"snippet: select\"\n;;     :display-name \"Snippet: select\"\n;;     :type         :snippet\n;;     :snippet-name \"select\"\n;;     :snippet-id   1}\n(mr/def ::snippet\n  [:and\n   [:merge\n    [:ref ::common]\n    [:map\n     [:type         [:= :snippet]]\n     [:snippet-name ::common/non-blank-string]\n     [:snippet-id {:optional true} ::id/snippet]\n     ;; database to which this Snippet belongs. Doesn't always seem to be specified.\n     [:database {:optional true} ::id/database]]]\n   [:ref ::disallow-dimension]])\n\n;; Example:\n;;\n;;    {:id           \"fc5e14d9-7d14-67af-66b2-b2a6e25afeaf\"\n;;     :name         \"#1635\"\n;;     :display-name \"#1635\"\n;;     :type         :card\n;;     :card-id      1635}\n(mr/def ::source-query\n  [:and\n   [:merge\n    [:ref ::common]\n    [:map\n     [:type    [:= :card]]\n     [:card-id ::id/card]]]\n   [:ref ::disallow-dimension]])\n\n(def raw-value-template-tag-types\n  \"Set of valid values of `:type` for raw value template tags.\"\n  #{:number :text :date :boolean})\n\n;; Valid values of `:type` for raw value template tags.\n(mr/def ::raw-value.type\n  (into [:enum] raw-value-template-tag-types))\n\n;; Example:\n;;\n;;    {:id           \"35f1ecd4-d622-6d14-54be-750c498043cb\"\n;;     :name         \"id\"\n;;     :display-name \"Id\"\n;;     :type         :number\n;;     :required     true\n;;     :default      \"1\"}\n(mr/def ::raw-value\n  [:and\n   [:merge\n    [:ref ::value.common]\n    ;; `:type` is used be the FE to determine which type of widget to display for the template tag, and to determine\n    ;; which types of parameters are allowed to be passed in for this template tag.\n    [:map\n     [:type [:ref ::raw-value.type]]]]\n   [:ref ::disallow-dimension]])\n\n(mr/def ::template-tag\n  [:and\n   {:decode/normalize common/normalize-map}\n   [:map\n    [:type [:ref ::type]]]\n   [:multi {:dispatch #(keyword (:type %))}\n    [:dimension   [:ref ::field-filter]]\n    [:snippet     [:ref ::snippet]]\n    [:card        [:ref ::source-query]]\n    ;; :number, :text, :date\n    [::mc/default [:ref ::raw-value]]]])\n\n(mr/def ::template-tag-map\n  [:and\n   [:map-of ::name ::template-tag]\n   ;; make sure people don't try to pass in a `:name` that's different from the actual key in the map.\n   [:fn\n    {:error/message \"keys in template tag map must match the :name of their values\"}\n    (fn [m]\n      (every? (fn [[tag-name tag-definition]]\n                (= tag-name (:name tag-definition)))\n              m))]])\n"]}