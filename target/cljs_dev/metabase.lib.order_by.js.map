{"version":3,"sources":["metabase/lib/order_by.cljc"],"mappings":"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","names":["metabase.lib.hierarchy/derive","metabase.lib.metadata.calculation/describe-top-level-key-method","query","stage-number","_k","temp__5804__auto__","order-bys","cljs.core/not-empty","metabase.lib.util/query-stage","metabase.shared.util.i18n.js_i18n","metabase.lib.util/join-strings-with-conjunction","metabase.shared.util.i18n/js-i18n","iter__5480__auto__","s__79381","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__79383","cljs.core/chunk-buffer","i__79382","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__79380","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","order-by","metabase.lib.metadata.calculation.display_name","metabase.lib.metadata.calculation/display-name-method","p__79384","vec__79385","cljs.core.nth","tag","_opts","expr","style","expr-display-name","G__79388","cljs.core/Keyword","js/Error","metabase.lib.metadata.calculation/display-info-method","p__79389","vec__79390","cljs.core.assoc","metabase.lib.metadata.calculation.display_info","js/metabase","js/metabase.lib","js/metabase.lib.order-by","js/metabase.lib.order-by.order-by-clause-method","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","cljs.core.get","fexpr__79393","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.order-by/order-by-clause-method","metabase.lib.dispatch/dispatch-value","metabase.lib.hierarchy/hierarchy","clause","metabase.lib.options/ensure-uuid","x","cljs.core.ex_info","metabase.lib.ref/ref","metabase.lib.order-by/with-direction","direction","cljs.core/vec","metabase.lib.order-by/order-by-clause","orderable","or__5002__auto__","metabase.lib.order-by/order-by","new-order-by","G__79394","metabase.lib.util.update_query_stage","cljs.core/update","cljs.core.conj","metabase.lib.order-by/order-bys","p__79395","map__79396","cljs.core/--destructure-map","metabase.lib.order-by/orderable-column?","base-type","cljs.core/some","orderable-base-type","cljs.core.isa_QMARK_","metabase.lib.schema.expression/orderable-types","metabase.lib.order-by/orderable-columns","breakouts","metabase.lib.breakout.breakouts_metadata","aggregations","metabase.lib.aggregation.aggregations_metadata","columns","cljs.core.concat","stage","options","metabase.lib.metadata.calculation.visible_columns","cljs.core.filter","existing-order-bys","metabase.lib.order_by.order_bys","cljs.core.map","p__79398","vec__79399","_tag","cljs.core/empty?","matching","cljs.core.into","cljs.core.comp","cljs.core.keep_indexed","index","an-order-by","col","metabase.lib.equality.find_matching_column","p1__79397#","cljs.core.mapv","pos","G__79402","metabase.lib.order-by/opposite-direction","metabase.lib.order-by/change-direction","current-order-by","lib-uuid","metabase.lib.options/uuid","&parents","&match","cljs.core/vector?","&match_1__79409","p1__79403#","cljs.core.match/backtrack","e79412","e__46214__auto__","e79411","metabase.lib.util.match.impl/replace-in-collection","replace-79404","cljs.core._EQ_","metabase.lib.order-by/remove-all-order-bys","cljs.core/dissoc","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.lib.order-by\n  (:require\n   [metabase.lib.aggregation :as lib.aggregation]\n   [metabase.lib.breakout :as lib.breakout]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.equality :as lib.equality]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.ref :as lib.ref]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.expression :as lib.schema.expression]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.lib.schema.order-by :as lib.schema.order-by]\n   [metabase.lib.util :as lib.util]\n   [metabase.lib.util.match :as lib.util.match]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util.malli :as mu]))\n\n(lib.hierarchy/derive :asc  ::order-by-clause)\n(lib.hierarchy/derive :desc ::order-by-clause)\n\n(defmethod lib.metadata.calculation/describe-top-level-key-method :order-by\n  [query stage-number _k]\n  (when-let [order-bys (not-empty (:order-by (lib.util/query-stage query stage-number)))]\n    (i18n/tru \"Sorted by {0}\"\n              (lib.util/join-strings-with-conjunction\n               (i18n/tru \"and\")\n               (for [order-by order-bys]\n                 (lib.metadata.calculation/display-name query stage-number order-by :long))))))\n\n(defmethod lib.metadata.calculation/display-name-method ::order-by-clause\n  [query stage-number [tag _opts expr] style]\n  (let [expr-display-name (lib.metadata.calculation/display-name query stage-number expr style)]\n    (case tag\n      :asc  (i18n/tru \"{0} ascending\"  expr-display-name)\n      :desc (i18n/tru \"{0} descending\" expr-display-name))))\n\n(defmethod lib.metadata.calculation/display-info-method ::order-by-clause\n  [query stage-number [tag _opts expr]]\n  (assoc (lib.metadata.calculation/display-info query stage-number expr)\n         :direction tag))\n\n(defmulti ^:private order-by-clause-method\n  {:arglists '([orderable])}\n  lib.dispatch/dispatch-value\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod order-by-clause-method ::order-by-clause\n  [clause]\n  (lib.options/ensure-uuid clause))\n\n;;; by default, try to convert `x` to a ref and then order by `:asc`\n(defmethod order-by-clause-method :default\n  [x]\n  (when (nil? x)\n    (throw (ex-info (i18n/tru \"Can''t order by nil\") {})))\n  (lib.options/ensure-uuid [:asc (lib.ref/ref x)]))\n\n(mu/defn ^:private with-direction :- ::lib.schema.order-by/order-by\n  \"Update the direction of an order by clause.\"\n  [clause    :- ::lib.schema.order-by/order-by\n   direction :- ::lib.schema.order-by/direction]\n  (assoc (vec clause) 0 direction))\n\n(mu/defn order-by-clause\n  \"Create an order-by clause independently of a query, e.g. for `replace` or whatever.\"\n  ([orderable]\n   (order-by-clause orderable :asc))\n\n  ([orderable :- some?\n    direction :- [:maybe [:enum :asc :desc]]]\n   (-> (order-by-clause-method orderable)\n       (with-direction (or direction :asc)))))\n\n(mu/defn order-by\n  \"Add an MBQL order-by clause (i.e., `:asc` or `:desc`) from something that you can theoretically sort by -- maybe a\n  Field, or `:field` clause, or expression of some sort, etc.\n\n  You can teach Metabase lib how to generate order by clauses for different things by implementing the\n  underlying [[order-by-clause-method]] multimethod.\"\n  ([query orderable]\n   (order-by query -1 orderable nil))\n\n  ([query orderable direction]\n   (order-by query -1 orderable direction))\n\n  ([query\n    stage-number :- [:maybe :int]\n    orderable    :- some?\n    direction    :- [:maybe [:enum :asc :desc]]]\n   (let [stage-number (or stage-number -1)\n         new-order-by (cond-> (order-by-clause-method orderable)\n                        direction (with-direction direction))]\n     (lib.util/update-query-stage query stage-number update :order-by (fn [order-bys]\n                                                                        (conj (vec order-bys) new-order-by))))))\n\n(mu/defn order-bys :- [:maybe [:sequential ::lib.schema.order-by/order-by]]\n  \"Get the order-by clauses in a query.\"\n  ([query :- ::lib.schema/query]\n   (order-bys query -1))\n  ([query :- ::lib.schema/query\n    stage-number :- :int]\n   (not-empty (get (lib.util/query-stage query stage-number) :order-by))))\n\n(defn- orderable-column? [{:keys [base-type]}]\n  (some (fn [orderable-base-type]\n          (isa? base-type orderable-base-type))\n        lib.schema.expression/orderable-types))\n\n(mu/defn orderable-columns :- [:maybe [:sequential ::lib.schema.metadata/column]]\n  \"Get column metadata for all the columns you can order by in a given `stage-number` of a `query`. Rules are as\n  follows:\n\n  1. If the stage has aggregations or breakouts, you can only order by those columns. E.g.\n\n         SELECT id, count(*) AS count FROM core_user GROUP BY id ORDER BY count ASC;\n\n     You can't ORDER BY something not in the SELECT, e.g. ORDER BY user.first_name would not make sense here.\n\n  2. If the stage has no aggregations or breakouts, you can order by any visible Field:\n\n     a. You can filter by any custom `:expressions` in this stage of the query\n\n     b. You can filter by any Field 'exported' by the previous stage of the query, if there is one; otherwise you can\n        filter by any Fields from the current `:source-table`.\n\n     c. You can filter by any Fields exported by any explicit joins\n\n     d. You can filter by and Fields in Tables that are implicitly joinable.\"\n  ([query :- ::lib.schema/query]\n   (orderable-columns query -1))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int]\n   (let [breakouts          (not-empty (lib.breakout/breakouts-metadata query stage-number))\n         aggregations       (not-empty (lib.aggregation/aggregations-metadata query stage-number))\n         columns            (if (or breakouts aggregations)\n                              (concat breakouts aggregations)\n                              (let [stage   (lib.util/query-stage query stage-number)\n                                    options {:include-implicitly-joinable-for-source-card? false}]\n                                (lib.metadata.calculation/visible-columns query stage-number stage options)))\n         columns            (filter orderable-column? columns)\n         existing-order-bys (->> (order-bys query stage-number)\n                                 (map (fn [[_tag _opts expr]]\n                                        expr)))]\n     (cond\n       (empty? columns)\n       nil\n\n       (empty? existing-order-bys)\n       (vec columns)\n\n       :else\n       (let [matching (into {}\n                            (comp (map lib.ref/ref)\n                                  (keep-indexed (fn [index an-order-by]\n                                                  (when-let [col (lib.equality/find-matching-column\n                                                                  query stage-number an-order-by columns)]\n                                                    [col index]))))\n                            existing-order-bys)]\n         (mapv #(let [pos (matching %)]\n                  (cond-> %\n                    pos (assoc :order-by-position pos)))\n               columns))))))\n\n(def ^:private opposite-direction\n  {:asc :desc\n   :desc :asc})\n\n(mu/defn change-direction :- ::lib.schema/query\n  \"Flip the direction of `current-order-by` in `query`.\"\n  ([query :- ::lib.schema/query\n    current-order-by :- ::lib.schema.order-by/order-by]\n   (let [lib-uuid (lib.options/uuid current-order-by)]\n     (lib.util.match/replace query\n       [direction (_ :guard #(= (:lib/uuid %) lib-uuid)) _]\n       (assoc &match 0 (opposite-direction direction))))))\n\n(mu/defn remove-all-order-bys :- ::lib.schema/query\n  \"Remove all order bys from this stage of the query.\"\n  ([query]\n   (remove-all-order-bys query -1))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int]\n   (lib.util/update-query-stage query stage-number dissoc :order-by)))\n"]}