{"version":3,"sources":["metabase/xrays/domain_entities/queries/util.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;yDAAA,zDAAKA;AAIL;;;4DAAA,mFAAA,/IAAKC,wMAEMC,wBAAQF;AAEnB;;;6DAAA,mFAAA,yDAAA,mFAAA,mDAAA,mFAAA,qFAAA,mFAAA,1kBAAKG,udAEmBD,mLAAsBF;AAE9C,AAAeI,kEACJ,AAACC,mDAAoBJ;AAGhC,AAAeK,mEACJ,AAACC,mDAAoBJ;AAGhC;;;;;;;+DAAA,/DAAkBK,sIAEfC;AAFH,AAGE,IAAAC,WAEK,AAACC,6CAAK,WAAAC;AAAA,AAAA,IAAAC,aAAAD;WAAA,AAAAE,4CAAAD,WAAA,IAAA,lEAAME;WAAN,AAAAD,4CAAAD,WAAA,IAAA,lEAAWG;AAAX,AAAA,kDAAA,0DAAA,LAAyBD,qEAAiBC;kMAFhDP,yFAAAA,vRACAL,gGAAAA,6GAAAA,9MACA;AAFL,AAAA,wMAAAM,uFAAAA,vRAGKJ,iGAAAA,2GAAAA;;AAEP,0DAAA,1DAAOW,4HAAaC,MAAMC,cAAcC;;AAAxC,AACE,IAAMC,eAAa,4DAAA,wDAAA,vEAAKF,gEAAmBC;AAA3C,AACE,oBAAI,CAACF,sCAAAA,oDAAAA,hBAAMG,gCAAAA;AACT,eAAOH;eAAMC;eAAc,SAAA,RAAKC;;;;;;AAChCC;;;;;AAEN;;;;;;;qEAAA,rEAAkBC,kJAEfb,YACAU;AAHH,AAIE,IAAMI,mBAAiB,cAAA,eAAA,+LAAId,yFAAAA,vRAAYL,gGAAAA,6GAAAA,7NAAiBoB,dAAKC;AAA7D,AACE,GAAI,AAACC,cAAI,CAACH,iDAAAA,gEAAAA,jBAAiBJ,4CAAAA;AACzBA;;AACA,IAAMQ,gBAAc,AAACC,qBAAW,CAAA,+DAAA,fAAST;IACnCU,aAAc,AAACJ,cAAI,+CAAA,WAAAK,1DAACC;AAAD,AAAS,IAAAC,mBAAI,6CAAAF,7CAACG,8DAAId;AAAT,AAAA,GAAAa;AAAAA;;AACI,0CAAAF,nCAACI,qBAAWP;;GACjBJ;AAHjC,AAIE,OAACN,wDAAYY,WAAWV,cAAc,AAACgB,gBAAMN","names":["metabase.xrays.domain-entities.queries.util/Expression","metabase.xrays.domain-entities.queries.util/ExpressionMap","cljs.core/string?","metabase.xrays.domain-entities.queries.util/ExpressionList","metabase.xrays.domain-entities.queries.util/->expression-map","metabase.xrays.domain-entities.converters/incoming","metabase.xrays.domain-entities.queries.util/expression-list->","metabase.xrays.domain-entities.converters/outgoing","metabase.xrays.domain-entities.queries.util/expressions-list","expressions","G__80580","cljs.core.mapv","p__80581","vec__80582","cljs.core.nth","name","expr","metabase.xrays.domain-entities.queries.util/unique-name","names","original-name","index","indexed-name","metabase.xrays.domain-entities.queries.util/unique-expression-name","expression-names","cljs.core/keys","cljs.core/set","cljs.core/not","re-duplicates","cljs.core/re-pattern","duplicates","p1__80586#","cljs.core.filter","or__5002__auto__","cljs.core._EQ_","cljs.core/re-matches","cljs.core/count"],"sourcesContent":["(ns metabase.xrays.domain-entities.queries.util\n  \"Utility functions used by the Queries in metabase-lib.\"\n  (:require\n   [metabase.util.malli :as mu]\n   #?@(:cljs ([metabase.xrays.domain-entities.converters :as converters]))))\n\n(def Expression\n  \"Schema for an Expression that's part of a query filter.\"\n  :any)\n\n(def ExpressionMap\n  \"Malli schema for a map of expressions by name.\"\n  [:map-of string? Expression])\n\n(def ExpressionList\n  \"Malli schema for a list of {:name :expression} maps.\"\n  [:vector [:map [:name string?] [:expression Expression]]])\n\n(def ^:private ->expression-map\n  #?(:cljs (converters/incoming ExpressionMap)\n     :clj  identity))\n\n(def ^:private expression-list->\n  #?(:cljs (converters/outgoing ExpressionList)\n     :clj  identity))\n\n(mu/defn ^:export expressions-list :- ExpressionList\n  \"Turns a map of expressions by name into a list of `{:name name :expression expression}` objects.\"\n  [expressions :- ExpressionMap]\n  (->> expressions\n       ->expression-map\n       (mapv (fn [[name expr]] {:name name :expression expr}))\n       expression-list->))\n\n(defn- unique-name [names original-name index]\n  (let [indexed-name (str original-name \" (\" index \")\")]\n    (if (names indexed-name)\n      (recur names original-name (inc index))\n      indexed-name)))\n\n(mu/defn ^:export unique-expression-name :- string?\n  \"Generates an expression name that's unique in the given map of expressions.\"\n  [expressions   :- ExpressionMap\n   original-name :- string?]\n  (let [expression-names (-> expressions ->expression-map keys set)]\n    (if (not (expression-names original-name))\n      original-name\n      (let [re-duplicates (re-pattern (str \"^\" original-name \" \\\\([0-9]+\\\\)$\"))\n            duplicates    (set (filter #(or (= % original-name)\n                                            (re-matches re-duplicates %))\n                                       expression-names))]\n        (unique-name duplicates original-name (count duplicates))))))\n"]}