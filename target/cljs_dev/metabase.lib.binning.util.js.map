{"version":3,"sources":["metabase/lib/binning/util.cljc"],"mappings":"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","names":["metabase.lib.binning.util/calculate-bin-width","min-value","max-value","num-bins","metabase.util/round-to-decimals","metabase.lib.binning.util/calculate-num-bins","bin-width","x__5087__auto__","y__5088__auto__","cljs.core/long","cljs.math/ceil","metabase.lib.binning.util/ResolvedStrategy","metabase.lib.binning.util/resolve-default-strategy","metadata-providerable","column","metabase.lib.types.isa/coordinate?","metabase.lib.metadata/setting","metabase.lib.binning.util/ceil-to","precision","x","metabase.lib.binning.util/floor-to","cljs.math/floor","metabase.lib.binning.util/pleasing-numbers","metabase.lib.binning.util/nicer-bin-width","min-bin-width","scale","cljs.math/pow","metabase.util/order-of-magnitude","cljs.core/some","pleasing-number","candidate-width","metabase.lib.binning.util/nicer-bounds","metabase.lib.binning.util/max-steps","metabase.lib.binning.util/fixed-point","f","cljs.core/iterate","cljs.core.partition","cljs.core.take","cljs.core.drop_while","cljs.core.partial","cljs.core/apply","cljs.core/not=","cljs.core/ffirst","p__78290","map__78291","cljs.core/--destructure-map","cljs.core.get","metabase.lib.binning.util/nicer-breakout*","strategy","vec__78292","cljs.core.nth","cljs.core._EQ_","metabase.lib.binning.util/nicer-breakout","opts","metabase.lib.binning.util/resolve-options","strategy-param","G__78301","cljs.core/Keyword","js/Error"],"sourcesContent":["(ns metabase.lib.binning.util\n  (:require\n   [clojure.math :as math]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.schema.binning :as lib.schema.binning]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.util :as u]\n   [metabase.util.malli :as mu]))\n\n(mu/defn ^:private calculate-bin-width :- ::lib.schema.binning/bin-width\n  \"Calculate bin width required to cover interval [`min-value`, `max-value`] with `num-bins`.\"\n  [min-value :- number?\n   max-value :- number?\n   num-bins  :- ::lib.schema.binning/num-bins]\n  (u/round-to-decimals 5 (/ (- max-value min-value)\n                            num-bins)))\n\n(mu/defn ^:private calculate-num-bins :- ::lib.schema.binning/num-bins\n  \"Calculate number of bins of width `bin-width` required to cover interval [`min-value`, `max-value`].\"\n  [min-value :- number?\n   max-value :- number?\n   bin-width :- ::lib.schema.binning/bin-width]\n  (max (long (math/ceil (/ (- max-value min-value)\n                           bin-width)))\n       1))\n\n(def ^:private ResolvedStrategy\n  [:tuple\n   [:enum :bin-width :num-bins]\n   [:map\n    [:bin-width ::lib.schema.binning/bin-width]\n    [:num-bins  ::lib.schema.binning/num-bins]]])\n\n(mu/defn ^:private resolve-default-strategy :- ResolvedStrategy\n  \"Determine the approprate strategy & options to use when `:default` strategy was specified.\"\n  [metadata-providerable :- ::lib.schema.metadata/metadata-providerable\n   column                :- ::lib.schema.metadata/column\n   min-value             :- number?\n   max-value             :- number?]\n  (if (lib.types.isa/coordinate? column)\n    (let [bin-width (lib.metadata/setting metadata-providerable :breakout-bin-width)]\n      [:bin-width\n       {:bin-width bin-width\n        :num-bins  (calculate-num-bins min-value max-value bin-width)}])\n    (let [num-bins (lib.metadata/setting metadata-providerable :breakout-bins-num)]\n      [:num-bins\n       {:num-bins  num-bins\n        :bin-width (calculate-bin-width min-value max-value num-bins)}])))\n\n\n;;; ------------------------------------- Humanized binning with nicer-breakout --------------------------------------\n\n(defn- ceil-to\n  [precision x]\n  (* (math/ceil (/ x precision)) precision))\n\n(defn- floor-to\n  [precision x]\n  (* (math/floor (/ x precision)) precision))\n\n(def ^:private pleasing-numbers [1 1.25 2 2.5 3 5 7.5 10])\n\n(mu/defn nicer-bin-width :- ::lib.schema.binning/bin-width\n  \"Calculate the bin width we should use for `:num-bins` binning based on `min-value` and `max-value`, taken from a\n  column's fingerprint... rather than simply doing\n\n    (/ (- max-value min-value) num-bins)\n\n  this function attempts to return a 'pleasing' bin width, e.g. 20 instead of 15.01.\"\n  [min-value :- number?\n   max-value :- number?\n   num-bins  :- ::lib.schema.binning/num-bins]\n  (let [min-bin-width (calculate-bin-width min-value max-value num-bins)\n        scale         (math/pow 10 (u/order-of-magnitude min-bin-width))]\n    (some (fn [pleasing-number]\n            (let [candidate-width (* pleasing-number scale)]\n              (when (>= candidate-width min-bin-width)\n                candidate-width)))\n          pleasing-numbers)))\n\n(mu/defn ^:private nicer-bounds :- [:tuple number? number?]\n  [min-value :- number?\n   max-value :- number?\n   bin-width :- ::lib.schema.binning/bin-width]\n  [(floor-to bin-width min-value) (ceil-to bin-width max-value)])\n\n(def ^:private ^:const max-steps 10)\n\n(defn- fixed-point\n  [f]\n  (fn [x]\n    (->> (iterate f x)\n         (partition 2 1)\n         (take max-steps)\n         (drop-while (partial apply not=))\n         ffirst)))\n\n(mu/defn ^:private nicer-breakout* :- :map\n  \"Humanize binning: extend interval to start and end on a \\\"nice\\\" number and, when number of bins is fixed, have a\n  \\\"nice\\\" step (bin width).\"\n  [strategy                                         :- ::lib.schema.binning/strategy\n   {:keys [min-value max-value bin-width num-bins]} :- [:map\n                                                        [:min-value number?]\n                                                        [:max-value number?]\n                                                        [:bin-width {:optional true} ::lib.schema.binning/bin-width]\n                                                        [:num-bins  {:optional true} ::lib.schema.binning/num-bins]]]\n  (let [bin-width             (if (= strategy :num-bins)\n                                (nicer-bin-width min-value max-value num-bins)\n                                bin-width)\n        [min-value max-value] (nicer-bounds min-value max-value bin-width)]\n    {:min-value min-value\n     :max-value max-value\n     :num-bins  (if (= strategy :num-bins)\n                  num-bins\n                  (calculate-num-bins min-value max-value bin-width))\n     :bin-width bin-width}))\n\n(mu/defn nicer-breakout :- [:maybe :map]\n  \"Make the current breakout a little nicer? Not 100% sure exactly how this is used, refer\n  to [[metabase.query-processor.middleware.binning/update-binned-field]].\"\n  [strategy :- ::lib.schema.binning/strategy\n   opts     :- :map]\n  (let [f (partial nicer-breakout* strategy)]\n    ((fixed-point f) opts)))\n\n(mu/defn resolve-options :- ResolvedStrategy\n  \"Given any binning `:strategy`, determine the `:bin-width` and `:num-bins` we should use based on the column's\n  fingerprint.\"\n  [metadata-providerable :- ::lib.schema.metadata/metadata-providerable\n   strategy              :- ::lib.schema.binning/strategy\n   strategy-param        :- [:maybe number?]\n   column                :- ::lib.schema.metadata/column\n   min-value             :- number?\n   max-value             :- number?]\n  (case strategy\n    :num-bins\n    [:num-bins\n     {:num-bins  strategy-param\n      :bin-width (calculate-bin-width min-value max-value strategy-param)}]\n\n    :bin-width\n    [:bin-width\n     {:bin-width strategy-param\n      :num-bins  (calculate-num-bins min-value max-value strategy-param)}]\n\n    :default\n    (resolve-default-strategy metadata-providerable column min-value max-value)))\n"]}