{"version":3,"sources":["metabase/shared/util/time.cljc"],"mappings":"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","names":["args__70829__auto__","cljs.core.apply","metabase.shared.util.internal.time-common/local-date-regex","metabase.shared.util.internal.time-common/local-datetime-regex","metabase.shared.util.internal.time-common/local-time-regex","metabase.shared.util.internal.time-common/offset-datetime-regex","metabase.shared.util.internal.time-common/offset-time-regex","metabase.shared.util.internal.time-common/to-range","metabase.shared.util.internal.time-common/year-month-regex","metabase.shared.util.internal.time-common/year-regex","metabase.shared.util.internal.time-common/zone-offset-part-regex","metabase.shared.util.internal.time/valid?","metabase.shared.util.internal.time/same-day?","metabase.shared.util.internal.time/same-month?","metabase.shared.util.internal.time/same-year?","metabase.shared.util.internal.time/day-diff","metabase.shared.util.internal.time/unit-diff","metabase.shared.util.internal.time/truncate","metabase.shared.util.internal.time/add","metabase.shared.util.internal.time/format-for-base-type","metabase.shared.util.time/local-date-regex","metabase.shared.util.time/local-datetime-regex","metabase.shared.util.time/local-time-regex","metabase.shared.util.time/offset-datetime-regex","metabase.shared.util.time/offset-time-regex","metabase.shared.util.time/to-range","metabase.shared.util.time/year-month-regex","metabase.shared.util.time/year-regex","metabase.shared.util.time/zone-offset-part-regex","metabase.shared.util.time/valid?","metabase.shared.util.time/same-day?","metabase.shared.util.time/same-month?","metabase.shared.util.time/same-year?","metabase.shared.util.time/day-diff","metabase.shared.util.time/unit-diff","metabase.shared.util.time/truncate","metabase.shared.util.time/add","metabase.shared.util.time/format-for-base-type","metabase.shared.util.time/prep-options","options","cljs.core.merge","metabase.shared.util.internal.time/default-options","metabase.util/normalize-map","metabase.shared.util.time/timestamp-coercible?","value","or__5002__auto__","metabase.shared.util.internal.time/datetime?","var_args","G__75792","metabase.shared.util.time/coerce-to-timestamp","js/Error","metabase.shared.util.time.coerce_to_timestamp","base","metabase.shared.util.internal.time/normalize","and__5000__auto__","cljs.core/re-matches","metabase.shared.util.internal.time/parse-with-zone","metabase.shared.util.internal.time-common/string->timestamp","metabase.shared.util.internal.time-common/number->timestamp","metabase.shared.util.internal.time/localize","metabase.shared.util.time/coerce-to-time","metabase.shared.util.internal.time/time?","metabase.shared.util.internal.time-common/drop-trailing-time-zone","metabase.shared.util.internal.time/parse-time-string","cljs.core.ex_info","G__75794","metabase.shared.util.time/format-unit","temporal-value","unit","metabase.shared.util.internal.time.format_unit","locale","metabase.shared.util.time/format-diff","temporal-value-1","temporal-value-2","metabase.shared.util.internal.time/format-diff","G__75796","metabase.shared.util.time/format-relative-date-range","n","metabase.shared.util.time.format_relative_date_range","offset-n","offset-unit","metabase.shared.util.internal.time.format_relative_date_range","t"],"sourcesContent":["(ns metabase.shared.util.time\n  \"Time parsing helper functions.\n  In Java these return [[OffsetDateTime]], in JavaScript they return Moments.\n  Most of the implementations are in the split CLJ/CLJS files [[metabase.shared.util.internal.time]].\"\n  (:require\n   [metabase.shared.util.internal.time :as internal]\n   [metabase.shared.util.internal.time-common :as common]\n   [metabase.shared.util.namespaces :as shared.ns]\n   [metabase.util :as u]))\n\n;; Importing and re-exporting some functions defined in each implementation.\n(shared.ns/import-fns\n [common\n  local-date-regex\n  local-datetime-regex\n  local-time-regex\n  offset-datetime-regex\n  offset-time-regex\n  to-range\n  year-month-regex\n  year-regex\n  zone-offset-part-regex]\n [internal\n  valid?\n  same-day?\n  same-month?\n  same-year?\n  day-diff\n  unit-diff\n  truncate\n  add\n  format-for-base-type])\n\n(defn- prep-options [options]\n  (merge internal/default-options (u/normalize-map options)))\n\n(defn ^:export timestamp-coercible?\n  \"Check whether value is coercible to timestamp. Condition resembles [[coerce-to-timestamp]].\"\n  [value]\n  (or (internal/datetime? value)\n      (string? value)\n      (number? value)))\n\n(defn ^:export coerce-to-timestamp\n  \"Parses a timestamp value into a date object. This can be a straightforward Unix timestamp or ISO format string.\n  But the `:unit` field can be used to alter the parsing to, for example, treat the input number as a day-of-week or\n  day-of-month number.\n  Returns Moments in JS and OffsetDateTimes in Java for coercible values, otherwise nil.\"\n  ([value] (coerce-to-timestamp value {}))\n  ([value options]\n   (when (timestamp-coercible? value)\n     (let [options (prep-options options)\n           base (cond\n                  ;; Just return an already-parsed value. (Moment in CLJS, DateTime classes in CLJ.)\n                  (internal/datetime? value)                        (internal/normalize value)\n                  ;; If there's a timezone offset, or Z for Zulu/UTC time, parse it directly.\n                  (and (string? value)\n                       (re-matches #\".*(Z|[+-]\\d\\d:?\\d\\d)$\" value)) (internal/parse-with-zone value)\n                  ;; Then we fall back to two multimethods for coercing strings and number to timestamps per the :unit.\n                  (string? value)                                   (common/string->timestamp value options)\n                  (number? value)                                   (common/number->timestamp value options))]\n       (if (:local options)\n         (internal/localize base)\n         base)))))\n\n(defn ^:export coerce-to-time\n  \"Parses a standalone time, or the time portion of a timestamp.\n  Accepts a platform time value (eg. Moment, OffsetTime, LocalTime) or a string.\"\n  [value]\n  (cond\n    (internal/time? value) value\n    (string? value) (-> value common/drop-trailing-time-zone internal/parse-time-string)\n    :else           (throw (ex-info \"Unknown input to coerce-to-time; expecting a string\"\n                                    {:value value}))))\n\n(defn format-unit\n  \"Formats a temporal-value (iso date/time string, int for hour/minute) given the temporal-bucketing unit.\n  If unit is nil, formats the full date/time.\n\n  If `locale` is provided, that locale will be used for localizing the formatter. In CLJ this should be a `Locale`. Not\n  supported in CLJS since we have to rely on the browser's locale.\"\n  ([temporal-value unit]\n   (internal/format-unit temporal-value unit))\n  ([temporal-value unit locale]\n   (internal/format-unit temporal-value unit locale)))\n\n(defn format-diff\n  \"Formats a time difference between two temporal values.\n   Drops redundant information.\"\n  [temporal-value-1 temporal-value-2]\n  (internal/format-diff temporal-value-1 temporal-value-2))\n\n(defn format-relative-date-range\n  \"Given a `n` `unit` time interval and the current date, return a string representing the date-time range.\n   Provide an `offset-n` and `offset-unit` time interval to change the date used relative to the current date.\n   `options` is a map and supports `:include-current` to include the current given unit of time in the range.\"\n  ([n unit]\n   (format-relative-date-range n unit nil nil nil))\n  ([n unit offset-n offset-unit]\n   (format-relative-date-range n unit offset-n offset-unit nil))\n  ([n unit offset-n offset-unit options]\n   (internal/format-relative-date-range n unit offset-n offset-unit options))\n  ([t n unit offset-n offset-unit options]\n   (internal/format-relative-date-range (coerce-to-timestamp t) n unit offset-n offset-unit options)))\n"]}