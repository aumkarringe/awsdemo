{"version":3,"sources":["metabase/lib/schema/mbql_clause.cljc"],"mappings":"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","names":["js/metabase","js/metabase.lib","js/metabase.lib.schema","js/metabase.lib.schema.mbql-clause","js/metabase.lib.schema.mbql-clause.tag-registry","metabase.lib.schema.mbql-clause/tag-registry","cljs.core.atom","metabase.lib.schema.mbql-clause/tag->registered-schema-name","tag","cljs.core.keyword","cljs.core/name","metabase.lib.schema.mbql-clause/invalid-clause-schema","cljs.core/constantly","metabase.lib.schema.mbql-clause/clause-schema","cljs.core/deref","cljs.core.into","metabase.lib.schema.common/mbql-clause-tag","p__75100","map__75101","cljs.core/--destructure-map","cljs.core.get","value","_","temp__5802__auto__","cljs.core.pr_str","cljs.core.map","metabase.lib.schema.mbql-clause/update-clause-schema!","metabase.util.malli.registry/register!","cljs.core/add-watch","_key","_ref","_old-state","_new-state","metabase.lib.schema.mbql-clause/define-mbql-clause","schema","schema-name","cljs.core/contains?","cljs.core.swap_BANG_","cljs.core/conj","_arrow","return-type","metabase.lib.schema.expression/type-of-method","_clause","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","metabase.lib.schema.mbql-clause/catn-clause-schema","js/Error","seq75102","G__75103","cljs.core/first","cljs.core/next","self__5711__auto__","args","cljs.core/simple-keyword?","cljs.core/every?","cljs.core/vector?","cljs.core/keyword?","metabase.lib.schema.common/normalize-keyword","metabase.lib.schema.mbql-clause/tuple-clause-schema","seq75106","G__75107","metabase.lib.schema.mbql-clause/define-mbql-clause-with-schema-fn","seq75109","G__75110","G__75111","schema-fn","vec__75112","seq__75113","cljs.core/seq","first__75114","cljs.core._EQ_","cljs.core/cons","cljs.core/second","cljs.core.drop","cljs.core.apply","metabase.lib.schema.mbql_clause.define_mbql_clause","metabase.lib.schema.mbql-clause/define-tuple-mbql-clause","seq75115","G__75116","metabase.lib.schema.mbql-clause/define-catn-mbql-clause","seq75117","G__75118","metabase.lib.schema.mbql-clause/resolve-schema","metabase.util.malli.registry/resolve-schema"],"sourcesContent":["(ns metabase.lib.schema.mbql-clause\n  (:require\n   [malli.core :as mc]\n   [metabase.lib.schema.common :as common]\n   [metabase.lib.schema.expression :as expression]\n   [metabase.types]\n   [metabase.util.malli :as mu]\n   [metabase.util.malli.registry :as mr]))\n\n(comment metabase.types/keep-me)\n\n(defonce ^:private ^{:doc \"Set of all registered MBQL clause tags e.g. #{:starts-with}\"} tag-registry\n  (atom #{}))\n\n(defn tag->registered-schema-name\n  \"Given an MBQL clause tag like `:starts-with`, return the name of the schema we'll register for it, e.g.\n  `:mbql.clause/starts-with`.\"\n  [tag]\n  (keyword \"mbql.clause\" (name tag)))\n\n(def ^:private invalid-clause-schema\n  [:fn {:error/message \"not a known MBQL clause\"} (constantly false)])\n\n(defn- clause-schema\n  \"Build the schema for `::clause`, a `:multi` schema that maps MBQL clause tag -> the schema\n  in [[clause-schema-registry]].\"\n  []\n  (into [:multi\n         {:dispatch common/mbql-clause-tag\n          :error/fn (fn [{:keys [value]} _]\n                      (if-let [tag (common/mbql-clause-tag value)]\n                        (str \"Invalid \" tag \" clause: \" (pr-str value))\n                        \"not an MBQL clause\"))}\n         [::mc/default invalid-clause-schema]]\n        (map (fn [tag]\n               [tag [:ref (tag->registered-schema-name tag)]]))\n        @tag-registry))\n\n(defn- update-clause-schema! []\n  (mr/def ::clause\n    (clause-schema)))\n\n;;; create an initial empty definition of `::clause`\n(update-clause-schema!)\n\n;;; whenever [[tag-registry]] is updated, update the `::tag` and `::clause` schemas.\n(add-watch tag-registry\n           ::update-schemas\n           (fn [_key _ref _old-state _new-state]\n             (update-clause-schema!)))\n\n(mu/defn define-mbql-clause\n  \"Register the `schema` for an MBQL clause with `tag` keyword, and update the `:metabase.lib.schema.mbql-clause/clause`\n  so it knows about this clause. Optionally specify the [[expression/type-of]] that this clause returns, inline, if\n  the clause always returns a certain type; otherwise you can implement [[expression/type-of]] separately.\n\n  (define-mbql-clause :is-null :- :type/Boolean\n    [:tuple\n     [:= :is-null]\n     ::common/options\n     [:ref :metabase.lib.schema.expression/expression]])\"\n  ([tag :- simple-keyword?\n    schema]\n   (let [schema-name (tag->registered-schema-name tag)]\n     (mr/def schema-name schema)\n     ;; only need to update the registry and calculated schemas if this is the very first time we're defining this\n     ;; clause. Otherwise since they're wrapped in `:ref` we don't need to recalculate them. This way we can avoid tons\n     ;; of pointless recalculations every time we reload a namespace.\n     (when-not (contains? @tag-registry tag)\n       (swap! tag-registry conj tag)))\n   nil)\n\n  ([tag         :- simple-keyword?\n    _arrow      :- [:= :-]\n    return-type :- ::expression/base-type\n    schema]\n   (define-mbql-clause tag schema)\n   (defmethod expression/type-of-method tag\n     [_clause]\n     return-type)\n   nil))\n\n;;; TODO: Support options more nicely - these don't allow for overriding the options, but we have a few cases where that\n;;; is necessary. See for example the inclusion of `string-filter-options` in [[metabase.lib.filter]].\n\n(defn catn-clause-schema\n  \"Helper intended for use with [[define-mbql-clause]]. Create an MBQL clause schema with `:catn`. Use this for clauses\n  with variable length. For clauses with fixed argument length, use [[tuple-clause-schema]] instead, since that gives\n  slight better error messages and doesn't love to complain about 'potentially recursive seqexes' when you forget to\n  wrap args in `:schema`.\"\n  [tag & args]\n  {:pre [(simple-keyword? tag)\n         (every? vector? args)\n         (every? keyword? (map first args))]}\n  [:schema\n   (into [:catn\n          {:error/message (str \"Valid \" tag \" clause\")}\n          [:tag [:= {:decode/normalize common/normalize-keyword} tag]]\n          [:options [:schema [:ref ::common/options]]]]\n         args)])\n\n(defn tuple-clause-schema\n  \"Helper intended for use with [[define-mbql-clause]]. Create a clause schema with `:tuple`. Use this for fixed-length\n  MBQL clause schemas. Use [[catn-clause-schema]] for variable-length schemas.\"\n  [tag & args]\n  {:pre [(simple-keyword? tag)]}\n  (into [:tuple\n         {:error/message (str \"Valid \" tag \" clause\")}\n         [:= {:decode/normalize common/normalize-keyword} tag]\n         [:ref ::common/options]]\n        args))\n\n;;;; Even more convenient functions!\n\n(defn define-mbql-clause-with-schema-fn\n  \"Helper. Combines [[define-mbql-clause]] and the result of applying `schema-fn` to `tag` and `args`.\"\n  [schema-fn tag & args]\n  (let [[return-type & args] (if (= (first args) :-)\n                               (cons (second args) (drop 2 args))\n                               (cons nil args))\n        schema               (apply schema-fn tag args)]\n    (if return-type\n      (define-mbql-clause tag :- return-type schema)\n      (define-mbql-clause tag schema))))\n\n(defn define-tuple-mbql-clause\n  \"Helper. Combines [[define-mbql-clause]] and [[tuple-clause-schema]].\"\n  [tag & args]\n  (apply define-mbql-clause-with-schema-fn tuple-clause-schema tag args))\n\n(defn define-catn-mbql-clause\n  \"Helper. Combines [[define-mbql-clause]] and [[catn-clause-schema]].\"\n  [tag & args]\n  (apply define-mbql-clause-with-schema-fn catn-clause-schema tag args))\n\n(defn resolve-schema\n  \"For REPL/test usage: get the definition of the schema associated with an MBQL clause tag.\"\n  [tag]\n  (mr/resolve-schema (tag->registered-schema-name tag)))\n"]}