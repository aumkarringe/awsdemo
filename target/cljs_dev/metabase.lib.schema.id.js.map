{"version":3,"sources":["metabase/lib/schema/id.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,AAAAA,4CAAA,wGAAA,mFAAA,0DAAA,2CAAA,2DAAA,4BAC4CC;AAE5C;;;;;;;;;;;6DAAA,7DAAKC;AAiBL,AAAAF,4CAAA,uJAAA,mFAAA,+CAAA,2CAAA,2DAAA,sCAAA,gEAGiB,AAAA,iFAAM,eAAA,iGAAA,AAAA,kKAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,6FAAA,AAAA,uHAAA,AAAA,8BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,GAAA,AAAA,GAAA,AAAA,qBAAA,AAAA,gnBAAA,kBAAAE,4DAAA,AAAA,AAAAA,0EAAA,h4DAACC,m5DACrBD;AAEH,AAAAF,4CAAA,kGAAA,mFAAA,0DAAA,2CAAA,2DAAA,yBACyCC;AAEzC,AAAAD,4CAAA,kGAAA,mFAAA,0DAAA,2CAAA,2DAAA,yBACyCC;AAEzC,AAAAD,4CAAA,gGAAA,mFAAA,0DAAA,2CAAA,2DAAA,wBACwCC;AAExC,AAAAD,4CAAA,sGAAA,mFAAA,0DAAA,2CAAA,2DAAA,kCACkDC;AAElD,AAAAD,4CAAA,mGAAA,mFAAA,0DAAA,2CAAA,2DAAA,iCACiDC;AAEjD,AAAAD,4CAAA,qGAAA,mFAAA,0DAAA,2CAAA,2DAAA,2BAC2CC;AAE3C,AAAAD,4CAAA,0GAAA,mFAAA,0DAAA,2CAAA,2DAAA,6BAC6CC;AAE7C,AAAAD,4CAAA,oGAAA,mFAAA,0DAAA,2CAAA,2DAAA,0BAC0CC;AAE1C,AAAAD,4CAAA,0GAAA,mFAAA,0DAAA,2CAAA,2DAAA,6BAC6CC;AAE7C,AAAAD,4CAAA,uGAAA,mFAAA,0DAAA,2CAAA,2DAAA,iCACiDC;AAEjD,AAAAD,4CAAA,gGAAA,mFAAA,0DAAA,2CAAA,2DAAA,wBACwCC;AAExC,AAAAD,4CAAA,kGAAA,mFAAA,0DAAA,2CAAA,2DAAA,yBACyCC","names":["metabase.util.malli.registry/register!","cljs.core/pos-int?","metabase.lib.schema.id/saved-questions-virtual-database-id","cljs.core/meta"],"sourcesContent":["(ns metabase.lib.schema.id\n  (:require\n   [metabase.util.malli.registry :as mr]))\n\n;;; these aren't anything special right now, but maybe in the future we can do something special/intelligent with\n;;; them, e.g. when we start working on the generative stuff\n\n(mr/def ::database\n  [:schema {:doc/title \"Valid Database ID\"} pos-int?])\n\n(def saved-questions-virtual-database-id\n  \"The ID used to signify that a database is 'virtual' rather than physical.\n\n   A fake integer ID is used so as to minimize the number of changes that need to be made on the frontend -- by using\n   something that would otherwise be a legal ID, *nothing* need change there, and the frontend can query against this\n   'database' none the wiser. (This integer ID is negative which means it will never conflict with a *real* database\n   ID.)\n\n   This ID acts as a sort of flag. The relevant places in the middleware can check whether the DB we're querying is\n   this 'virtual' database and take the appropriate actions.\"\n  -1337)\n\n;;; not sure under what circumstances we actually want to allow this, this is an icky hack. How are we supposed to\n;;; resolve stuff with a fake Database ID? I guess as far as the schema is concerned we can allow this tho.\n;;;\n;;; EDIT: Sometimes the FE uses this when starting a query based on a Card if it doesn't know the database associated\n;;; with that Card. The QP will resolve this to the correct Database later.\n(mr/def ::saved-questions-virtual-database\n  [:=\n   {:doc/title   \"Saved Questions Virtual Database ID\"\n    :doc/message (:doc (meta #'saved-questions-virtual-database-id))}\n   saved-questions-virtual-database-id])\n\n(mr/def ::table\n  [:schema {:doc/title \"Valid Table ID\"} pos-int?])\n\n(mr/def ::field\n  [:schema {:doc/title \"Valid Field ID\"} pos-int?])\n\n(mr/def ::card\n  [:schema {:doc/title \"Valid Card ID\"} pos-int?])\n\n(mr/def ::segment\n  [:schema {:doc/title \"Valid legacy Segment ID\"} pos-int?])\n\n(mr/def ::metric\n  [:schema {:doc/title \"Valid legacy Metric ID\"} pos-int?])\n\n(mr/def ::snippet\n  [:schema {:doc/title \"Valid Snippet ID\"} pos-int?])\n\n(mr/def ::dimension\n  [:schema {:doc/title \"Valid Dimension ID\"} pos-int?])\n\n(mr/def ::action\n  [:schema {:doc/title \"Valid Action ID\"} pos-int?])\n\n(mr/def ::dashboard\n  [:schema {:doc/title \"Valid Dashboard ID\"} pos-int?])\n\n(mr/def ::dashcard\n  [:schema {:doc/title \"Valid DashboardCard ID\"} pos-int?])\n\n(mr/def ::user\n  [:schema {:doc/title \"Valid User ID\"} pos-int?])\n\n(mr/def ::pulse\n  [:schema {:doc/title \"Valid Pulse ID\"} pos-int?])\n"]}