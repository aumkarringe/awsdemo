{"version":3,"sources":["metabase/lib/drill_thru/common.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;mDAAA,nDAAMA,8GAEHC,MAAMC;AAFT,4IAGM,AAACC,8BAAqBF,MAAMC,hLAE5B,oDAAA,AAAA,2IAAA,xLAACE;;AAEP,AAAA,qDAAA,6DAAAC,lHAAOM;AAAP,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,wFAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,0FAAA,1FAAOE,qGAAqBQ,OAAOC,cAAcC,WAAaC;AAA9D,AACE,OAAA,mFAAOD;;;AADT,CAAA,6EAAA,7EAAOV;;AAAP;AAAA,CAAA,uEAAA,WAAAC,lFAAOD;AAAP,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAI,WAAA,AAAAF,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAK,WAAA,AAAAH,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAM,qBAAA;AAAA,AAAA,OAAAA,wDAAAL,SAAAG,SAAAC,SAAAL;;;AAAA,AAGA,GAAA,QAAAW,qCAAAC,yCAAAC,oDAAAC,2DAAAC;AAAA;AAAA,AAAA;;;;;;;;mDAAA,iBAAAC,6BAAA,AAAAC,6CAAA,9IAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,2CAAA,yGAAA,gEAAA,iBAAAC,eAAA,zIASaI;AATb,AAAA,QAAAJ,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,iCAAA,wEAAA,4DAAAJ,wBAAAL,2BAAAE,2BAAAC,2BAAAC,xNAQErB;;;AAGF,GAAA,QAAAY,qCAAAC,yCAAAC,oDAAAC,2DAAAc;AAAA;AAAA,AAAA;;;wDAAA,iBAAAZ,6BAAA,AAAAC,6CAAA,nJAAUa;IAAVZ,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,2CAAA,yGAAA,gEAAA,iBAAAO,eAAA,zIAIaF;AAJb,AAAA,QAAAE,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAL,kBAAA,AAAAC,+CAAA,iCAAA,6EAAA,4DAAAJ,wBAAAL,2BAAAE,2BAAAC,2BAAAC,xNAGErB;;;AAGF,AAAA+B,kGAAA,4DAAA,WACGvB,OAAOC,cAAcC;AADxB,AAIE,wCAAA,mFAAA,qDAAA,zKAACsB,sBAAYtB;;AAEf;;;iDAAA,jDAAMuB,0GAEH3C;AAFH,AAGE,iFAAA,zEAAG,AAAC4C,gBAAM,AAACC,+CAAsC7C;;AAEnD;;;oDAAA,pDAAM8C,gHAEHC;AAFH,AAGE,GAAI,mDAAA,nDAAC5C,6CAAE4C;AAAP;;AAAwBA","names":["metabase.lib.drill-thru.common/mbql-stage?","query","stage-number","metabase.lib.util/query-stage","cljs.core._EQ_","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","metabase.lib.drill-thru.common/drill-thru-dispatch","seq78641","G__78642","cljs.core/first","cljs.core/next","G__78644","G__78645","self__5711__auto__","_query","_stage-number","drill-thru","_args","js/metabase","js/metabase.lib","js/metabase.lib.drill-thru","js/metabase.lib.drill-thru.common","js/metabase.lib.drill-thru.common.drill-thru-method","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","cljs.core.get","fexpr__78666","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.drill-thru.common/drill-thru-method","metabase.lib.hierarchy/hierarchy","js/metabase.lib.drill-thru.common.drill-thru-info-method","fexpr__78668","metabase.lib.drill-thru.common/drill-thru-info-method","cljs.core/select-keys","metabase.lib.drill-thru.common/many-pks?","cljs.core/count","metabase.lib.metadata.calculation/primary-keys","metabase.lib.drill-thru.common/drill-value->js","value"],"sourcesContent":["(ns metabase.lib.drill-thru.common\n  (:require\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.util :as lib.util]))\n\n(defn mbql-stage?\n  \"Is this query stage an MBQL stage?\"\n  [query stage-number]\n  (-> (lib.util/query-stage query stage-number)\n      :lib/type\n      (= :mbql.stage/mbql)))\n\n(defn- drill-thru-dispatch [_query _stage-number drill-thru & _args]\n  (:type drill-thru))\n\n(defmulti drill-thru-method\n  \"e.g.\n\n    (drill-thru-method query stage-number drill-thru)`\n\n  Applies the `drill-thru` to the query and stage. Keyed on the `:type` of the drill-thru.\n  Returns the updated query.\"\n  {:arglists '([query stage-number drill-thru & args])}\n  drill-thru-dispatch\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmulti drill-thru-info-method\n  \"Helper for getting the display-info of each specific type of drill-thru.\"\n  {:arglists '([query stage-number drill-thru])}\n  drill-thru-dispatch\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod drill-thru-info-method :default\n  [_query _stage-number drill-thru]\n  ;; Several drill-thrus are rendered as a fixed label for that type, with no reference to the column or value,\n  ;; so the default is simply the drill-thru type.\n  (select-keys drill-thru [:type :display-name]))\n\n(defn many-pks?\n  \"Does the source table for this `query` have more than one primary key?\"\n  [query]\n  (> (count (lib.metadata.calculation/primary-keys query)) 1))\n\n(defn drill-value->js\n  \"Convert a drill value to a JS value\"\n  [value]\n  (if (= value :null) nil value))\n"]}