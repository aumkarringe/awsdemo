var $CLJS = require("./cljs_env");
var $jscomp = $CLJS.$jscomp;
var COMPILED = false;
require("./cljs.core.js");
require("./metabase.lib.drill_thru.automatic_insights.js");
require("./metabase.lib.drill_thru.column_extract.js");
require("./metabase.lib.drill_thru.column_filter.js");
require("./metabase.lib.drill_thru.combine_columns.js");
require("./metabase.lib.drill_thru.common.js");
require("./metabase.lib.drill_thru.compare_aggregations.js");
require("./metabase.lib.drill_thru.distribution.js");
require("./metabase.lib.drill_thru.fk_details.js");
require("./metabase.lib.drill_thru.fk_filter.js");
require("./metabase.lib.drill_thru.object_details.js");
require("./metabase.lib.drill_thru.pivot.js");
require("./metabase.lib.drill_thru.pk.js");
require("./metabase.lib.drill_thru.quick_filter.js");
require("./metabase.lib.drill_thru.sort.js");
require("./metabase.lib.drill_thru.summarize_column.js");
require("./metabase.lib.drill_thru.summarize_column_by_time.js");
require("./metabase.lib.drill_thru.underlying_records.js");
require("./metabase.lib.drill_thru.zoom.js");
require("./metabase.lib.drill_thru.zoom_in_bins.js");
require("./metabase.lib.drill_thru.zoom_in_geographic.js");
require("./metabase.lib.drill_thru.zoom_in_timeseries.js");
require("./metabase.lib.metadata.js");
require("./metabase.lib.metadata.calculation.js");
require("./metabase.lib.schema.js");
require("./metabase.lib.schema.drill_thru.js");
require("./metabase.util.js");
require("./metabase.util.log.js");
require("./metabase.util.malli.js");
var cognitect=$CLJS.cognitect || ($CLJS.cognitect = {});
var weavejester=$CLJS.weavejester || ($CLJS.weavejester = {});
var borkdude=$CLJS.borkdude || ($CLJS.borkdude = {});
var module$shadow_js_shim_module$ttag=$CLJS.module$shadow_js_shim_module$ttag || ($CLJS.module$shadow_js_shim_module$ttag = {});
var clojure=$CLJS.clojure || ($CLJS.clojure = {});
var module$shadow_js_shim_module$moment_timezone=$CLJS.module$shadow_js_shim_module$moment_timezone || ($CLJS.module$shadow_js_shim_module$moment_timezone = {});
var module$shadow_js_shim_module$moment=$CLJS.module$shadow_js_shim_module$moment || ($CLJS.module$shadow_js_shim_module$moment = {});
var tailrecursion=$CLJS.tailrecursion || ($CLJS.tailrecursion = {});
var module$shadow_js_shim_module$crc_32=$CLJS.module$shadow_js_shim_module$crc_32 || ($CLJS.module$shadow_js_shim_module$crc_32 = {});
var devtools=$CLJS.devtools || ($CLJS.devtools = {});
var cljs=$CLJS.cljs || ($CLJS.cljs = {});
var inflections=$CLJS.inflections || ($CLJS.inflections = {});
var net=$CLJS.net || ($CLJS.net = {});
var shadow=$CLJS.shadow || ($CLJS.shadow = {});
var goog=$CLJS.goog || ($CLJS.goog = {});
var camel_snake_kebab=$CLJS.camel_snake_kebab || ($CLJS.camel_snake_kebab = {});
var flatland=$CLJS.flatland || ($CLJS.flatland = {});
var lambdaisland=$CLJS.lambdaisland || ($CLJS.lambdaisland = {});
var medley=$CLJS.medley || ($CLJS.medley = {});
var no=$CLJS.no || ($CLJS.no = {});
var metabase=$CLJS.metabase || ($CLJS.metabase = {});
var malli=$CLJS.malli || ($CLJS.malli = {});
var com=$CLJS.com || ($CLJS.com = {});

$CLJS.SHADOW_ENV.setLoaded("metabase.lib.drill_thru.js");

goog.provide('metabase.lib.drill_thru');
metabase.lib.metadata.calculation.display_info_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword("metabase.lib.drill-thru","drill-thru","metabase.lib.drill-thru/drill-thru",-67424984),(function (query,stage_number,drill_thru){
return metabase.lib.drill_thru.common.drill_thru_info_method.cljs$core$IFn$_invoke$arity$3(query,stage_number,drill_thru);
}));
/**
 * Some drill thru functions are expected to return drills for just the specified `:column`; others are expected to
 *   ignore that column and return drills for all of the columns specified in `:dimensions`.
 *   `:return-drills-for-dimensions?` specifies which type we have.
 */
metabase.lib.drill_thru.available_drill_thru_fns = new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"f","f",-1597136552),new cljs.core.Var(function(){return metabase.lib.drill_thru.automatic_insights.automatic_insights_drill;},new cljs.core.Symbol("metabase.lib.drill-thru.automatic-insights","automatic-insights-drill","metabase.lib.drill-thru.automatic-insights/automatic-insights-drill",1471807986,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=>","=>",1841166128),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cat","cat",-1457810207),new cljs.core.Keyword("metabase.lib.schema","query","metabase.lib.schema/query",-1207387140),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.Keyword("metabase.lib.schema.drill-thru","context","metabase.lib.schema.drill-thru/context",122725764)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru","metabase.lib.schema.drill-thru/drill-thru",-124537581)], null)], null),new cljs.core.Symbol(null,"metabase.lib.drill-thru.automatic-insights","metabase.lib.drill-thru.automatic-insights",912989182,null),new cljs.core.Symbol(null,"automatic-insights-drill","automatic-insights-drill",-538289251,null),"metabase/lib/drill_thru/automatic_insights.cljc",34,1,11,11,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"query","query",352022017,null),new cljs.core.Symbol(null,"stage-number","stage-number",-112198111,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"column","column",-576213674,null),new cljs.core.Symbol(null,"column-ref","column-ref",-636247393,null),new cljs.core.Symbol(null,"dimensions","dimensions",1385713430,null),new cljs.core.Symbol(null,"value","value",1946509744,null)], null)], null)], null)),"Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [column column-ref dimensions value]} :- :metabase.lib.schema.drill-thru/context]\n  Return: [:maybe :metabase.lib.schema.drill-thru/drill-thru]\n          \n\n  Automatic insights appears:\n  - When clicking on a value with a breakout - eg. a point in a time series, a cell of a table, a bar or pie slice\n  - Or when clicking a pivot cell, with a value but no column.\n  - Or when clicking a chart legend, in which case there's no column or value set.\n  - There must be at least 1 breakout\n  - X-rays must be enabled (check the settings)\n\n  There are two forms: X-ray, and \"Compare to the rest\". This is a simple user choice and does not need extra data.",(cljs.core.truth_(metabase.lib.drill_thru.automatic_insights.automatic_insights_drill)?metabase.lib.drill_thru.automatic_insights.automatic_insights_drill.cljs$lang$test:null)])),new cljs.core.Keyword(null,"return-drills-for-dimensions?","return-drills-for-dimensions?",-1759804348),false], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"f","f",-1597136552),new cljs.core.Var(function(){return metabase.lib.drill_thru.column_filter.column_filter_drill;},new cljs.core.Symbol("metabase.lib.drill-thru.column-filter","column-filter-drill","metabase.lib.drill-thru.column-filter/column-filter-drill",-1130871894,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=>","=>",1841166128),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cat","cat",-1457810207),new cljs.core.Keyword("metabase.lib.schema","query","metabase.lib.schema/query",-1207387140),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.Keyword("metabase.lib.schema.drill-thru","context","metabase.lib.schema.drill-thru/context",122725764)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru.column-filter","metabase.lib.schema.drill-thru/drill-thru.column-filter",603928893)], null)], null),new cljs.core.Symbol(null,"metabase.lib.drill-thru.column-filter","metabase.lib.drill-thru.column-filter",23504270,null),new cljs.core.Symbol(null,"column-filter-drill","column-filter-drill",-1088669153,null),"metabase/lib/drill_thru/column_filter.cljc",29,1,90,90,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"query","query",352022017,null),new cljs.core.Symbol(null,"stage-number","stage-number",-112198111,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"column","column",-576213674,null),new cljs.core.Symbol(null,"column-ref","column-ref",-636247393,null),new cljs.core.Symbol(null,"value","value",1946509744,null)], null)], null)], null)),"Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [column column-ref value]} :- :metabase.lib.schema.drill-thru/context]\n  Return: [:maybe :metabase.lib.schema.drill-thru/drill-thru.column-filter]\n          \n\n  Filtering at the column level, based on its type. Displays a submenu of eg. \"Today\", \"This Week\", etc. for date\n  columns.\n\n  Note that if the clicked column is an aggregation, filtering by it will require a new stage. Therefore this drill\n  returns a possibly-updated `:query` and `:stage-number` along with a `:column` referencing that later stage.",(cljs.core.truth_(metabase.lib.drill_thru.column_filter.column_filter_drill)?metabase.lib.drill_thru.column_filter.column_filter_drill.cljs$lang$test:null)])),new cljs.core.Keyword(null,"return-drills-for-dimensions?","return-drills-for-dimensions?",-1759804348),true], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"f","f",-1597136552),new cljs.core.Var(function(){return metabase.lib.drill_thru.distribution.distribution_drill;},new cljs.core.Symbol("metabase.lib.drill-thru.distribution","distribution-drill","metabase.lib.drill-thru.distribution/distribution-drill",-2103693273,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=>","=>",1841166128),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cat","cat",-1457810207),new cljs.core.Keyword("metabase.lib.schema","query","metabase.lib.schema/query",-1207387140),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.Keyword("metabase.lib.schema.drill-thru","context","metabase.lib.schema.drill-thru/context",122725764)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru.distribution","metabase.lib.schema.drill-thru/drill-thru.distribution",937770403)], null)], null),new cljs.core.Symbol(null,"metabase.lib.drill-thru.distribution","metabase.lib.drill-thru.distribution",-514507852,null),new cljs.core.Symbol(null,"distribution-drill","distribution-drill",-898205041,null),"metabase/lib/drill_thru/distribution.cljc",28,1,42,42,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"query","query",352022017,null),new cljs.core.Symbol(null,"stage-number","stage-number",-112198111,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"column","column",-576213674,null),new cljs.core.Symbol(null,"value","value",1946509744,null)], null)], null)], null)),"Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [column value]} :- :metabase.lib.schema.drill-thru/context]\n  Return: [:maybe :metabase.lib.schema.drill-thru/drill-thru.distribution]\n          \n\n  Select a column and see a histogram of how many rows fall into an automatic set of bins/buckets.\n  - For dates, breaks out by month by default.\n  - For numeric values, by an auto-selected set of bins\n  - For strings, by each distinct value (which might be = the number of rows)",(cljs.core.truth_(metabase.lib.drill_thru.distribution.distribution_drill)?metabase.lib.drill_thru.distribution.distribution_drill.cljs$lang$test:null)])),new cljs.core.Keyword(null,"return-drills-for-dimensions?","return-drills-for-dimensions?",-1759804348),true], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"f","f",-1597136552),new cljs.core.Var(function(){return metabase.lib.drill_thru.fk_filter.fk_filter_drill;},new cljs.core.Symbol("metabase.lib.drill-thru.fk-filter","fk-filter-drill","metabase.lib.drill-thru.fk-filter/fk-filter-drill",-716335012,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=>","=>",1841166128),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cat","cat",-1457810207),new cljs.core.Keyword("metabase.lib.schema","query","metabase.lib.schema/query",-1207387140),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.Keyword("metabase.lib.schema.drill-thru","context","metabase.lib.schema.drill-thru/context",122725764)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru.fk-filter","metabase.lib.schema.drill-thru/drill-thru.fk-filter",-1219793148)], null)], null),new cljs.core.Symbol(null,"metabase.lib.drill-thru.fk-filter","metabase.lib.drill-thru.fk-filter",-1939155669,null),new cljs.core.Symbol(null,"fk-filter-drill","fk-filter-drill",-1258190784,null),"metabase/lib/drill_thru/fk_filter.cljc",25,1,37,37,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"query","query",352022017,null),new cljs.core.Symbol(null,"stage-number","stage-number",-112198111,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"column","column",-576213674,null),new cljs.core.Symbol(null,"column-ref","column-ref",-636247393,null),new cljs.core.Symbol(null,"value","value",1946509744,null)], null),new cljs.core.Keyword(null,"as","as",1148689641),new cljs.core.Symbol(null,"_context","_context",-1238791322,null)], null)], null)),"Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [column column-ref value], :as _context} :- :metabase.lib.schema.drill-thru/context]\n  Return: [:maybe :metabase.lib.schema.drill-thru/drill-thru.fk-filter]\n          \n\n  When clicking on a foreign key value, filter this query by that column.\n\n  This has the same effect as the `=` filter on a generic field (ie. not a key), but renders differently.\n\n  Contrast [[metabase.lib.drill-thru.object-details/object-detail-drill]], which shows the details of the foreign\n  object.",(cljs.core.truth_(metabase.lib.drill_thru.fk_filter.fk_filter_drill)?metabase.lib.drill_thru.fk_filter.fk_filter_drill.cljs$lang$test:null)])),new cljs.core.Keyword(null,"return-drills-for-dimensions?","return-drills-for-dimensions?",-1759804348),false], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"f","f",-1597136552),new cljs.core.Var(function(){return metabase.lib.drill_thru.object_details.object_detail_drill;},new cljs.core.Symbol("metabase.lib.drill-thru.object-details","object-detail-drill","metabase.lib.drill-thru.object-details/object-detail-drill",-1376576725,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=>","=>",1841166128),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cat","cat",-1457810207),new cljs.core.Keyword("metabase.lib.schema","query","metabase.lib.schema/query",-1207387140),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.Keyword("metabase.lib.schema.drill-thru","context","metabase.lib.schema.drill-thru/context",122725764)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"or","or",235744169),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru.pk","metabase.lib.schema.drill-thru/drill-thru.pk",339574481),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru.zoom","metabase.lib.schema.drill-thru/drill-thru.zoom",-262809778),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru.fk-details","metabase.lib.schema.drill-thru/drill-thru.fk-details",233147406)], null)], null)], null),new cljs.core.Symbol(null,"metabase.lib.drill-thru.object-details","metabase.lib.drill-thru.object-details",1788168194,null),new cljs.core.Symbol(null,"object-detail-drill","object-detail-drill",-613919053,null),"metabase/lib/drill_thru/object_details.cljc",29,1,10,10,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"query","query",352022017,null),new cljs.core.Symbol(null,"stage-number","stage-number",-112198111,null),new cljs.core.Symbol(null,"context","context",810340414,null)], null)),"Inputs: [query :- :metabase.lib.schema/query stage-number :- :int context :- :metabase.lib.schema.drill-thru/context]\n  Return: [:maybe\n           [:or\n            :metabase.lib.schema.drill-thru/drill-thru.pk\n            :metabase.lib.schema.drill-thru/drill-thru.zoom\n            :metabase.lib.schema.drill-thru/drill-thru.fk-details]]\n          \n\n  When clicking a foreign key or primary key value, drill through to the details for that specific object.\n\n  Contrast [[metabase.lib.drill-thru.fk-filter/fk-filter-drill]], which filters this query to only those rows with a\n  specific value for a FK column.",(cljs.core.truth_(metabase.lib.drill_thru.object_details.object_detail_drill)?metabase.lib.drill_thru.object_details.object_detail_drill.cljs$lang$test:null)])),new cljs.core.Keyword(null,"return-drills-for-dimensions?","return-drills-for-dimensions?",-1759804348),false], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"f","f",-1597136552),new cljs.core.Var(function(){return metabase.lib.drill_thru.pivot.pivot_drill;},new cljs.core.Symbol("metabase.lib.drill-thru.pivot","pivot-drill","metabase.lib.drill-thru.pivot/pivot-drill",1004065694,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=>","=>",1841166128),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cat","cat",-1457810207),new cljs.core.Keyword("metabase.lib.schema","query","metabase.lib.schema/query",-1207387140),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.Keyword("metabase.lib.schema.drill-thru","context","metabase.lib.schema.drill-thru/context",122725764)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru.pivot","metabase.lib.schema.drill-thru/drill-thru.pivot",-1408664484)], null)], null),new cljs.core.Symbol(null,"metabase.lib.drill-thru.pivot","metabase.lib.drill-thru.pivot",109208756,null),new cljs.core.Symbol(null,"pivot-drill","pivot-drill",-1794856768,null),"metabase/lib/drill_thru/pivot.cljc",21,1,118,118,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"query","query",352022017,null),new cljs.core.Symbol(null,"stage-number","stage-number",-112198111,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"column","column",-576213674,null),new cljs.core.Symbol(null,"dimensions","dimensions",1385713430,null),new cljs.core.Symbol(null,"value","value",1946509744,null)], null),new cljs.core.Keyword(null,"as","as",1148689641),new cljs.core.Symbol(null,"context","context",810340414,null)], null)], null)),"Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [column dimensions value], :as context} :- :metabase.lib.schema.drill-thru/context]\n  Return: [:maybe :metabase.lib.schema.drill-thru/drill-thru.pivot]\n          \n\n  Return all possible pivoting options on the given column and value.\n\n  See `:pivots` key, which holds a map `{t [breakouts...]}` where `t` is `:category`, `:location`, or `:time`.\n  If a key is missing, there are no breakouts of that kind.",(cljs.core.truth_(metabase.lib.drill_thru.pivot.pivot_drill)?metabase.lib.drill_thru.pivot.pivot_drill.cljs$lang$test:null)])),new cljs.core.Keyword(null,"return-drills-for-dimensions?","return-drills-for-dimensions?",-1759804348),false], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"f","f",-1597136552),new cljs.core.Var(function(){return metabase.lib.drill_thru.quick_filter.quick_filter_drill;},new cljs.core.Symbol("metabase.lib.drill-thru.quick-filter","quick-filter-drill","metabase.lib.drill-thru.quick-filter/quick-filter-drill",457872114,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=>","=>",1841166128),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cat","cat",-1457810207),new cljs.core.Keyword("metabase.lib.schema","query","metabase.lib.schema/query",-1207387140),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.Keyword("metabase.lib.schema.drill-thru","context","metabase.lib.schema.drill-thru/context",122725764)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru.quick-filter","metabase.lib.schema.drill-thru/drill-thru.quick-filter",-1703184103)], null)], null),new cljs.core.Symbol(null,"metabase.lib.drill-thru.quick-filter","metabase.lib.drill-thru.quick-filter",671398986,null),new cljs.core.Symbol(null,"quick-filter-drill","quick-filter-drill",534264366,null),"metabase/lib/drill_thru/quick_filter.cljc",28,1,99,99,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"query","query",352022017,null),new cljs.core.Symbol(null,"stage-number","stage-number",-112198111,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"column","column",-576213674,null),new cljs.core.Symbol(null,"column-ref","column-ref",-636247393,null),new cljs.core.Symbol(null,"dimensions","dimensions",1385713430,null),new cljs.core.Symbol(null,"value","value",1946509744,null)], null),new cljs.core.Keyword(null,"as","as",1148689641),new cljs.core.Symbol(null,"_context","_context",-1238791322,null)], null)], null)),"Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [column column-ref dimensions value], :as _context} :- :metabase.lib.schema.drill-thru/context]\n  Return: [:maybe :metabase.lib.schema.drill-thru/drill-thru.quick-filter]\n          \n\n  Filter the current query based on the value clicked.\n\n  The options vary depending on the type of the field:\n  - `:is-null` and `:not-null` for a `NULL` value;\n  - `:=` and `:!=` for everything else;\n  - plus `:<` and `:>` for numeric and date columns.\n\n  Note that this returns a single `::drill-thru` value with 1 or more `:operators`; these are rendered as a set of small\n  buttons in a single row of the drop-down.",(cljs.core.truth_(metabase.lib.drill_thru.quick_filter.quick_filter_drill)?metabase.lib.drill_thru.quick_filter.quick_filter_drill.cljs$lang$test:null)])),new cljs.core.Keyword(null,"return-drills-for-dimensions?","return-drills-for-dimensions?",-1759804348),false], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"f","f",-1597136552),new cljs.core.Var(function(){return metabase.lib.drill_thru.sort.sort_drill;},new cljs.core.Symbol("metabase.lib.drill-thru.sort","sort-drill","metabase.lib.drill-thru.sort/sort-drill",2019212116,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=>","=>",1841166128),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cat","cat",-1457810207),new cljs.core.Keyword("metabase.lib.schema","query","metabase.lib.schema/query",-1207387140),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.Keyword("metabase.lib.schema.drill-thru","context","metabase.lib.schema.drill-thru/context",122725764)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru.sort","metabase.lib.schema.drill-thru/drill-thru.sort",-920673199)], null)], null),new cljs.core.Symbol(null,"metabase.lib.drill-thru.sort","metabase.lib.drill-thru.sort",961185366,null),new cljs.core.Symbol(null,"sort-drill","sort-drill",600387798,null),"metabase/lib/drill_thru/sort.cljc",20,1,51,51,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"query","query",352022017,null),new cljs.core.Symbol(null,"stage-number","stage-number",-112198111,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"column","column",-576213674,null),new cljs.core.Symbol(null,"column-ref","column-ref",-636247393,null),new cljs.core.Symbol(null,"value","value",1946509744,null)], null),new cljs.core.Keyword(null,"as","as",1148689641),new cljs.core.Symbol(null,"_context","_context",-1238791322,null)], null)], null)),"Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [column column-ref value], :as _context} :- :metabase.lib.schema.drill-thru/context]\n  Return: [:maybe :metabase.lib.schema.drill-thru/drill-thru.sort]\n          \n\n  Sorting on a clicked column.",(cljs.core.truth_(metabase.lib.drill_thru.sort.sort_drill)?metabase.lib.drill_thru.sort.sort_drill.cljs$lang$test:null)])),new cljs.core.Keyword(null,"return-drills-for-dimensions?","return-drills-for-dimensions?",-1759804348),true], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"f","f",-1597136552),new cljs.core.Var(function(){return metabase.lib.drill_thru.summarize_column.summarize_column_drill;},new cljs.core.Symbol("metabase.lib.drill-thru.summarize-column","summarize-column-drill","metabase.lib.drill-thru.summarize-column/summarize-column-drill",-894275347,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=>","=>",1841166128),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cat","cat",-1457810207),new cljs.core.Keyword("metabase.lib.schema","query","metabase.lib.schema/query",-1207387140),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.Keyword("metabase.lib.schema.drill-thru","context","metabase.lib.schema.drill-thru/context",122725764)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru.summarize-column","metabase.lib.schema.drill-thru/drill-thru.summarize-column",1770935578)], null)], null),new cljs.core.Symbol(null,"metabase.lib.drill-thru.summarize-column","metabase.lib.drill-thru.summarize-column",490384430,null),new cljs.core.Symbol(null,"summarize-column-drill","summarize-column-drill",-1961542613,null),"metabase/lib/drill_thru/summarize_column.cljc",32,1,31,31,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"query","query",352022017,null),new cljs.core.Symbol(null,"stage-number","stage-number",-112198111,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"column","column",-576213674,null),new cljs.core.Symbol(null,"value","value",1946509744,null)], null)], null)], null)),"Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [column value]} :- :metabase.lib.schema.drill-thru/context]\n  Return: [:maybe :metabase.lib.schema.drill-thru/drill-thru.summarize-column]\n          \n\n  A set of possible aggregations that can summarize this column: distinct values, sum, average.\n  Separate from [[summarize-column-by-time-drill]] which breaks out a column over time.",(cljs.core.truth_(metabase.lib.drill_thru.summarize_column.summarize_column_drill)?metabase.lib.drill_thru.summarize_column.summarize_column_drill.cljs$lang$test:null)])),new cljs.core.Keyword(null,"return-drills-for-dimensions?","return-drills-for-dimensions?",-1759804348),true], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"f","f",-1597136552),new cljs.core.Var(function(){return metabase.lib.drill_thru.summarize_column_by_time.summarize_column_by_time_drill;},new cljs.core.Symbol("metabase.lib.drill-thru.summarize-column-by-time","summarize-column-by-time-drill","metabase.lib.drill-thru.summarize-column-by-time/summarize-column-by-time-drill",391970943,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=>","=>",1841166128),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cat","cat",-1457810207),new cljs.core.Keyword("metabase.lib.schema","query","metabase.lib.schema/query",-1207387140),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.Keyword("metabase.lib.schema.drill-thru","context","metabase.lib.schema.drill-thru/context",122725764)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru.summarize-column-by-time","metabase.lib.schema.drill-thru/drill-thru.summarize-column-by-time",1590982743)], null)], null),new cljs.core.Symbol(null,"metabase.lib.drill-thru.summarize-column-by-time","metabase.lib.drill-thru.summarize-column-by-time",-369504986,null),new cljs.core.Symbol(null,"summarize-column-by-time-drill","summarize-column-by-time-drill",1117784387,null),"metabase/lib/drill_thru/summarize_column_by_time.cljc",40,1,40,40,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"query","query",352022017,null),new cljs.core.Symbol(null,"stage-number","stage-number",-112198111,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"column","column",-576213674,null),new cljs.core.Symbol(null,"value","value",1946509744,null)], null)], null)], null)),"Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [column value]} :- :metabase.lib.schema.drill-thru/context]\n  Return: [:maybe :metabase.lib.schema.drill-thru/drill-thru.summarize-column-by-time]\n          \n\n  A breakout summarizing a column over time.\n  Separate from single-value [[summarize-column-drill]] for sum, average, and distinct value count.",(cljs.core.truth_(metabase.lib.drill_thru.summarize_column_by_time.summarize_column_by_time_drill)?metabase.lib.drill_thru.summarize_column_by_time.summarize_column_by_time_drill.cljs$lang$test:null)])),new cljs.core.Keyword(null,"return-drills-for-dimensions?","return-drills-for-dimensions?",-1759804348),true], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"f","f",-1597136552),new cljs.core.Var(function(){return metabase.lib.drill_thru.column_extract.column_extract_drill;},new cljs.core.Symbol("metabase.lib.drill-thru.column-extract","column-extract-drill","metabase.lib.drill-thru.column-extract/column-extract-drill",1741901851,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=>","=>",1841166128),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cat","cat",-1457810207),new cljs.core.Keyword("metabase.lib.schema","query","metabase.lib.schema/query",-1207387140),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.Keyword("metabase.lib.schema.drill-thru","context","metabase.lib.schema.drill-thru/context",122725764)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru.column-extract","metabase.lib.schema.drill-thru/drill-thru.column-extract",-1399743137)], null)], null),new cljs.core.Symbol(null,"metabase.lib.drill-thru.column-extract","metabase.lib.drill-thru.column-extract",-1260967728,null),new cljs.core.Symbol(null,"column-extract-drill","column-extract-drill",317747205,null),"metabase/lib/drill_thru/column_extract.cljc",30,1,37,37,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"query","query",352022017,null),new cljs.core.Symbol(null,"stage-number","stage-number",-112198111,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"column","column",-576213674,null),new cljs.core.Symbol(null,"column-ref","column-ref",-636247393,null),new cljs.core.Symbol(null,"value","value",1946509744,null)], null)], null)], null)),"Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [column column-ref value]} :- :metabase.lib.schema.drill-thru/context]\n  Return: [:maybe :metabase.lib.schema.drill-thru/drill-thru.column-extract]\n          \n\n  Column clicks on temporal columns only.\n\n  Might add a stage, like `:drill-thru/column-filter` does, if the current stage has aggregations.",(cljs.core.truth_(metabase.lib.drill_thru.column_extract.column_extract_drill)?metabase.lib.drill_thru.column_extract.column_extract_drill.cljs$lang$test:null)])),new cljs.core.Keyword(null,"return-drills-for-dimensions?","return-drills-for-dimensions?",-1759804348),false], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"f","f",-1597136552),new cljs.core.Var(function(){return metabase.lib.drill_thru.combine_columns.combine_columns_drill;},new cljs.core.Symbol("metabase.lib.drill-thru.combine-columns","combine-columns-drill","metabase.lib.drill-thru.combine-columns/combine-columns-drill",1675676252,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=>","=>",1841166128),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cat","cat",-1457810207),new cljs.core.Keyword("metabase.lib.schema","query","metabase.lib.schema/query",-1207387140),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.Keyword("metabase.lib.schema.drill-thru","context","metabase.lib.schema.drill-thru/context",122725764)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru.combine-columns","metabase.lib.schema.drill-thru/drill-thru.combine-columns",1211552830)], null)], null),new cljs.core.Symbol(null,"metabase.lib.drill-thru.combine-columns","metabase.lib.drill-thru.combine-columns",-1466166343,null),new cljs.core.Symbol(null,"combine-columns-drill","combine-columns-drill",1911222065,null),"metabase/lib/drill_thru/combine_columns.cljc",31,1,18,18,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"query","query",352022017,null),new cljs.core.Symbol(null,"stage-number","stage-number",-112198111,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"column","column",-576213674,null),new cljs.core.Symbol(null,"value","value",1946509744,null)], null)], null)], null)),"Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [column value]} :- :metabase.lib.schema.drill-thru/context]\n  Return: [:maybe :metabase.lib.schema.drill-thru/drill-thru.combine-columns]\n          \n\n  Column clicks on string columns.\n\n  Might add a stage, like `:drill-thru/column-filter` does, if the current stage has aggregations.",(cljs.core.truth_(metabase.lib.drill_thru.combine_columns.combine_columns_drill)?metabase.lib.drill_thru.combine_columns.combine_columns_drill.cljs$lang$test:null)])),new cljs.core.Keyword(null,"return-drills-for-dimensions?","return-drills-for-dimensions?",-1759804348),false], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"f","f",-1597136552),new cljs.core.Var(function(){return metabase.lib.drill_thru.compare_aggregations.compare_aggregations_drill;},new cljs.core.Symbol("metabase.lib.drill-thru.compare-aggregations","compare-aggregations-drill","metabase.lib.drill-thru.compare-aggregations/compare-aggregations-drill",-329068232,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=>","=>",1841166128),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cat","cat",-1457810207),new cljs.core.Keyword("metabase.lib.schema","query","metabase.lib.schema/query",-1207387140),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.Keyword("metabase.lib.schema.drill-thru","context","metabase.lib.schema.drill-thru/context",122725764)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru.compare-aggregations","metabase.lib.schema.drill-thru/drill-thru.compare-aggregations",-550610817)], null)], null),new cljs.core.Symbol(null,"metabase.lib.drill-thru.compare-aggregations","metabase.lib.drill-thru.compare-aggregations",1766491585,null),new cljs.core.Symbol(null,"compare-aggregations-drill","compare-aggregations-drill",-630509659,null),"metabase/lib/drill_thru/compare_aggregations.cljc",36,1,18,18,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"query","query",352022017,null),new cljs.core.Symbol(null,"stage-number","stage-number",-112198111,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"column","column",-576213674,null),new cljs.core.Symbol(null,"value","value",1946509744,null)], null)], null)], null)),"Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [column value]} :- :metabase.lib.schema.drill-thru/context]\n  Return: [:maybe :metabase.lib.schema.drill-thru/drill-thru.compare-aggregations]\n          \n\n  Column clicks on aggregated columns.",(cljs.core.truth_(metabase.lib.drill_thru.compare_aggregations.compare_aggregations_drill)?metabase.lib.drill_thru.compare_aggregations.compare_aggregations_drill.cljs$lang$test:null)])),new cljs.core.Keyword(null,"return-drills-for-dimensions?","return-drills-for-dimensions?",-1759804348),false], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"f","f",-1597136552),new cljs.core.Var(function(){return metabase.lib.drill_thru.underlying_records.underlying_records_drill;},new cljs.core.Symbol("metabase.lib.drill-thru.underlying-records","underlying-records-drill","metabase.lib.drill-thru.underlying-records/underlying-records-drill",1176519262,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=>","=>",1841166128),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cat","cat",-1457810207),new cljs.core.Keyword("metabase.lib.schema","query","metabase.lib.schema/query",-1207387140),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.Keyword("metabase.lib.schema.drill-thru","context","metabase.lib.schema.drill-thru/context",122725764)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru.underlying-records","metabase.lib.schema.drill-thru/drill-thru.underlying-records",1571614324)], null)], null),new cljs.core.Symbol(null,"metabase.lib.drill-thru.underlying-records","metabase.lib.drill-thru.underlying-records",-827008688,null),new cljs.core.Symbol(null,"underlying-records-drill","underlying-records-drill",713740052,null),"metabase/lib/drill_thru/underlying_records.cljc",34,1,49,49,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"query","query",352022017,null),new cljs.core.Symbol(null,"stage-number","stage-number",-112198111,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"column","column",-576213674,null),new cljs.core.Symbol(null,"column-ref","column-ref",-636247393,null),new cljs.core.Symbol(null,"dimensions","dimensions",1385713430,null),new cljs.core.Symbol(null,"value","value",1946509744,null)], null),new cljs.core.Keyword(null,"as","as",1148689641),new cljs.core.Symbol(null,"_context","_context",-1238791322,null)], null)], null)),"Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [column column-ref dimensions value], :as _context} :- :metabase.lib.schema.drill-thru/context]\n  Return: [:maybe :metabase.lib.schema.drill-thru/drill-thru.underlying-records]\n          \n\n  When clicking on a particular broken-out group, offer a look at the details of all the rows that went into this\n  bucket. Eg. distribution of People by State, then click New York and see the table of all People filtered by\n  `STATE = 'New York'`.\n\n  There is another quite different case: clicking the legend of a chart with multiple bars or lines broken out by\n  category. Then `column` is nil!",(cljs.core.truth_(metabase.lib.drill_thru.underlying_records.underlying_records_drill)?metabase.lib.drill_thru.underlying_records.underlying_records_drill.cljs$lang$test:null)])),new cljs.core.Keyword(null,"return-drills-for-dimensions?","return-drills-for-dimensions?",-1759804348),false], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"f","f",-1597136552),new cljs.core.Var(function(){return metabase.lib.drill_thru.zoom_in_timeseries.zoom_in_timeseries_drill;},new cljs.core.Symbol("metabase.lib.drill-thru.zoom-in-timeseries","zoom-in-timeseries-drill","metabase.lib.drill-thru.zoom-in-timeseries/zoom-in-timeseries-drill",313862423,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=>","=>",1841166128),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cat","cat",-1457810207),new cljs.core.Keyword("metabase.lib.schema","query","metabase.lib.schema/query",-1207387140),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.Keyword("metabase.lib.schema.drill-thru","context","metabase.lib.schema.drill-thru/context",122725764)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru.zoom-in.timeseries","metabase.lib.schema.drill-thru/drill-thru.zoom-in.timeseries",-890057316)], null)], null),new cljs.core.Symbol(null,"metabase.lib.drill-thru.zoom-in-timeseries","metabase.lib.drill-thru.zoom-in-timeseries",105846904,null),new cljs.core.Symbol(null,"zoom-in-timeseries-drill","zoom-in-timeseries-drill",-1304664195,null),"metabase/lib/drill_thru/zoom_in_timeseries.cljc",34,1,88,88,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"query","query",352022017,null),new cljs.core.Symbol(null,"stage-number","stage-number",-112198111,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"dimensions","dimensions",1385713430,null)], null),new cljs.core.Keyword(null,"as","as",1148689641),new cljs.core.Symbol(null,"_context","_context",-1238791322,null)], null)], null)),"Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [dimensions], :as _context} :- :metabase.lib.schema.drill-thru/context]\n  Return: [:maybe :metabase.lib.schema.drill-thru/drill-thru.zoom-in.timeseries]\n          \n\n  Zooms in on some window, showing it in finer detail.\n\n  For example: The month of a year, days or weeks of a quarter, smaller lat/long regions, etc.\n\n  This is different from the `:drill-thru/zoom` type, which is for showing the details of a single object.",(cljs.core.truth_(metabase.lib.drill_thru.zoom_in_timeseries.zoom_in_timeseries_drill)?metabase.lib.drill_thru.zoom_in_timeseries.zoom_in_timeseries_drill.cljs$lang$test:null)])),new cljs.core.Keyword(null,"return-drills-for-dimensions?","return-drills-for-dimensions?",-1759804348),false], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"f","f",-1597136552),new cljs.core.Var(function(){return metabase.lib.drill_thru.zoom_in_geographic.zoom_in_geographic_drill;},new cljs.core.Symbol("metabase.lib.drill-thru.zoom-in-geographic","zoom-in-geographic-drill","metabase.lib.drill-thru.zoom-in-geographic/zoom-in-geographic-drill",754461586,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=>","=>",1841166128),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cat","cat",-1457810207),new cljs.core.Keyword("metabase.lib.schema","query","metabase.lib.schema/query",-1207387140),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.Keyword("metabase.lib.schema.drill-thru","context","metabase.lib.schema.drill-thru/context",122725764)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru.zoom-in.geographic","metabase.lib.schema.drill-thru/drill-thru.zoom-in.geographic",927762586)], null)], null),new cljs.core.Symbol(null,"metabase.lib.drill-thru.zoom-in-geographic","metabase.lib.drill-thru.zoom-in-geographic",-1562146002,null),new cljs.core.Symbol(null,"zoom-in-geographic-drill","zoom-in-geographic-drill",312914971,null),"metabase/lib/drill_thru/zoom_in_geographic.cljc",34,1,189,189,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"query","query",352022017,null),new cljs.core.Symbol(null,"stage-number","stage-number",-112198111,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"value","value",1946509744,null)], null),new cljs.core.Keyword(null,"as","as",1148689641),new cljs.core.Symbol(null,"context","context",810340414,null)], null)], null)),"Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [value], :as context} :- :metabase.lib.schema.drill-thru/context]\n  Return: [:maybe :metabase.lib.schema.drill-thru/drill-thru.zoom-in.geographic]\n          \n\n  Return a `:drill-thru/zoom-in.geographic` drill if appropriate. See docstring\n  for [[metabase.lib.drill-thru.zoom-in-geographic]] for more information on what circumstances this is returned in\n  and what it means to apply this drill.",(cljs.core.truth_(metabase.lib.drill_thru.zoom_in_geographic.zoom_in_geographic_drill)?metabase.lib.drill_thru.zoom_in_geographic.zoom_in_geographic_drill.cljs$lang$test:null)])),new cljs.core.Keyword(null,"return-drills-for-dimensions?","return-drills-for-dimensions?",-1759804348),true], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"f","f",-1597136552),new cljs.core.Var(function(){return metabase.lib.drill_thru.zoom_in_bins.zoom_in_binning_drill;},new cljs.core.Symbol("metabase.lib.drill-thru.zoom-in-bins","zoom-in-binning-drill","metabase.lib.drill-thru.zoom-in-bins/zoom-in-binning-drill",-862934837,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,"schema","schema",-1582001791),new cljs.core.Keyword(null,"ns","ns",441598760),new cljs.core.Keyword(null,"name","name",1843675177),new cljs.core.Keyword(null,"file","file",-1269645878),new cljs.core.Keyword(null,"end-column","end-column",1425389514),new cljs.core.Keyword(null,"column","column",2078222095),new cljs.core.Keyword(null,"line","line",212345235),new cljs.core.Keyword(null,"end-line","end-line",1837326455),new cljs.core.Keyword(null,"arglists","arglists",1661989754),new cljs.core.Keyword(null,"doc","doc",1913296891),new cljs.core.Keyword(null,"test","test",577538877)],[new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"=>","=>",1841166128),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"cat","cat",-1457810207),new cljs.core.Keyword("metabase.lib.schema","query","metabase.lib.schema/query",-1207387140),new cljs.core.Keyword(null,"int","int",-1741416922),new cljs.core.Keyword("metabase.lib.schema.drill-thru","context","metabase.lib.schema.drill-thru/context",122725764)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"maybe","maybe",-314397560),new cljs.core.Keyword("metabase.lib.schema.drill-thru","drill-thru.zoom-in.binning","metabase.lib.schema.drill-thru/drill-thru.zoom-in.binning",1143883364)], null)], null),new cljs.core.Symbol(null,"metabase.lib.drill-thru.zoom-in-bins","metabase.lib.drill-thru.zoom-in-bins",477390405,null),new cljs.core.Symbol(null,"zoom-in-binning-drill","zoom-in-binning-drill",1550598377,null),"metabase/lib/drill_thru/zoom_in_bins.cljc",31,1,88,88,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"query","query",352022017,null),new cljs.core.Symbol(null,"stage-number","stage-number",-112198111,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"keys","keys",1068423698),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"column","column",-576213674,null),new cljs.core.Symbol(null,"value","value",1946509744,null)], null),new cljs.core.Keyword(null,"as","as",1148689641),new cljs.core.Symbol(null,"_context","_context",-1238791322,null)], null)], null)),"Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [column value], :as _context} :- :metabase.lib.schema.drill-thru/context]\n  Return: [:maybe :metabase.lib.schema.drill-thru/drill-thru.zoom-in.binning]\n          \n\n  Return a drill thru that 'zooms in' on a breakout that uses `:binning` if applicable.\n  See [[metabase.lib.drill-thru.zoom-in-bins]] docstring for more information.",(cljs.core.truth_(metabase.lib.drill_thru.zoom_in_bins.zoom_in_binning_drill)?metabase.lib.drill_thru.zoom_in_bins.zoom_in_binning_drill.cljs$lang$test:null)])),new cljs.core.Keyword(null,"return-drills-for-dimensions?","return-drills-for-dimensions?",-1759804348),true], null)], null);
/**
 * Inputs: [{:keys [dimensions], :as context} :- :metabase.lib.schema.drill-thru/context]
 *   Return: [:maybe [:sequential {:min 1} :metabase.lib.schema.drill-thru/context]]
 *        
 * 
 *   Create new context maps (with updated `:column` and `:value` keys) for each of the `:dimensions` passed in. Some
 *   drill thru functions are expected to return drills for each of these columns, while others are expected to ignore
 *   them. Why? Who knows.
 */
metabase.lib.drill_thru.dimension_contexts = (function metabase$lib$drill_thru$dimension_contexts(p__79533){
var map__79534 = p__79533;
var map__79534__$1 = cljs.core.__destructure_map(map__79534);
var context = map__79534__$1;
var dimensions = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79534__$1,new cljs.core.Keyword(null,"dimensions","dimensions",-254818097));
return cljs.core.not_empty((function (){var iter__5480__auto__ = (function metabase$lib$drill_thru$dimension_contexts_$_iter__79535(s__79536){
return (new cljs.core.LazySeq(null,(function (){
var s__79536__$1 = s__79536;
while(true){
var temp__5804__auto__ = cljs.core.seq(s__79536__$1);
if(temp__5804__auto__){
var s__79536__$2 = temp__5804__auto__;
if(cljs.core.chunked_seq_QMARK_(s__79536__$2)){
var c__5478__auto__ = cljs.core.chunk_first(s__79536__$2);
var size__5479__auto__ = cljs.core.count(c__5478__auto__);
var b__79538 = cljs.core.chunk_buffer(size__5479__auto__);
if((function (){var i__79537 = (0);
while(true){
if((i__79537 < size__5479__auto__)){
var dimension = cljs.core._nth(c__5478__auto__,i__79537);
cljs.core.chunk_append(b__79538,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([context,dimension], 0)));

var G__79569 = (i__79537 + (1));
i__79537 = G__79569;
continue;
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons(cljs.core.chunk(b__79538),metabase$lib$drill_thru$dimension_contexts_$_iter__79535(cljs.core.chunk_rest(s__79536__$2)));
} else {
return cljs.core.chunk_cons(cljs.core.chunk(b__79538),null);
}
} else {
var dimension = cljs.core.first(s__79536__$2);
return cljs.core.cons(cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([context,dimension], 0)),metabase$lib$drill_thru$dimension_contexts_$_iter__79535(cljs.core.rest(s__79536__$2)));
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__5480__auto__(dimensions);
})());
});
/**
 * Inputs: ([query context]
 *         [query :- :metabase.lib.schema/query stage-number :- :int context :- :metabase.lib.schema.drill-thru/context])
 *   Return: [:sequential [:ref :metabase.lib.schema.drill-thru/drill-thru]]
 *        
 * 
 *   Get a list (possibly empty) of available drill-thrus for a column, or a column + value pair.
 * 
 *   Note that if `:value nil` in the `context`, that implies the value is *missing*, ie. that this was a column click.
 *   For a value of `NULL` from the database, use the sentinel `:null`. Most of this file only cares whether the value
 *   was provided or not, but some things (eg. quick filters) treat `NULL` values differently.
 *   See [[metabase.lib.js/available-drill-thrus]].
 */
metabase.lib.drill_thru.available_drill_thrus = (function() {
var metabase$lib$drill_thru$available_drill_thrus = null;
var metabase$lib$drill_thru$available_drill_thrus__2 = (function (query,context){
return (metabase.lib.drill_thru.available_drill_thrus.cljs$core$IFn$_invoke$arity$3 ? metabase.lib.drill_thru.available_drill_thrus.cljs$core$IFn$_invoke$arity$3(query,(-1),context) : metabase.lib.drill_thru.available_drill_thrus.call(null,query,(-1),context));
});
var metabase$lib$drill_thru$available_drill_thrus__3 = (function (query,stage_number,context){
try{return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,((metabase.lib.metadata.editable_QMARK_(query))?(function (){var dim_contexts = metabase.lib.drill_thru.dimension_contexts(context);
var iter__5480__auto__ = (function metabase$lib$drill_thru$available_drill_thrus_$_iter__79540(s__79541){
return (new cljs.core.LazySeq(null,(function (){
var s__79541__$1 = s__79541;
while(true){
var temp__5804__auto__ = cljs.core.seq(s__79541__$1);
if(temp__5804__auto__){
var xs__6360__auto__ = temp__5804__auto__;
var map__79546 = cljs.core.first(xs__6360__auto__);
var map__79546__$1 = cljs.core.__destructure_map(map__79546);
var f = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79546__$1,new cljs.core.Keyword(null,"f","f",-1597136552));
var return_drills_for_dimensions_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79546__$1,new cljs.core.Keyword(null,"return-drills-for-dimensions?","return-drills-for-dimensions?",-1759804348));
var iterys__5476__auto__ = ((function (s__79541__$1,map__79546,map__79546__$1,f,return_drills_for_dimensions_QMARK_,xs__6360__auto__,temp__5804__auto__,dim_contexts){
return (function metabase$lib$drill_thru$available_drill_thrus_$_iter__79540_$_iter__79542(s__79543){
return (new cljs.core.LazySeq(null,((function (s__79541__$1,map__79546,map__79546__$1,f,return_drills_for_dimensions_QMARK_,xs__6360__auto__,temp__5804__auto__,dim_contexts){
return (function (){
var s__79543__$1 = s__79543;
while(true){
var temp__5804__auto____$1 = cljs.core.seq(s__79543__$1);
if(temp__5804__auto____$1){
var s__79543__$2 = temp__5804__auto____$1;
if(cljs.core.chunked_seq_QMARK_(s__79543__$2)){
var c__5478__auto__ = cljs.core.chunk_first(s__79543__$2);
var size__5479__auto__ = cljs.core.count(c__5478__auto__);
var b__79545 = cljs.core.chunk_buffer(size__5479__auto__);
if((function (){var i__79544 = (0);
while(true){
if((i__79544 < size__5479__auto__)){
var context__$1 = cljs.core._nth(c__5478__auto__,i__79544);
var drill = (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(query,stage_number,context__$1) : f.call(null,query,stage_number,context__$1));
if(cljs.core.truth_(drill)){
cljs.core.chunk_append(b__79545,drill);

var G__79570 = (i__79544 + (1));
i__79544 = G__79570;
continue;
} else {
var G__79571 = (i__79544 + (1));
i__79544 = G__79571;
continue;
}
} else {
return true;
}
break;
}
})()){
return cljs.core.chunk_cons(cljs.core.chunk(b__79545),metabase$lib$drill_thru$available_drill_thrus_$_iter__79540_$_iter__79542(cljs.core.chunk_rest(s__79543__$2)));
} else {
return cljs.core.chunk_cons(cljs.core.chunk(b__79545),null);
}
} else {
var context__$1 = cljs.core.first(s__79543__$2);
var drill = (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(query,stage_number,context__$1) : f.call(null,query,stage_number,context__$1));
if(cljs.core.truth_(drill)){
return cljs.core.cons(drill,metabase$lib$drill_thru$available_drill_thrus_$_iter__79540_$_iter__79542(cljs.core.rest(s__79543__$2)));
} else {
var G__79572 = cljs.core.rest(s__79543__$2);
s__79543__$1 = G__79572;
continue;
}
}
} else {
return null;
}
break;
}
});})(s__79541__$1,map__79546,map__79546__$1,f,return_drills_for_dimensions_QMARK_,xs__6360__auto__,temp__5804__auto__,dim_contexts))
,null,null));
});})(s__79541__$1,map__79546,map__79546__$1,f,return_drills_for_dimensions_QMARK_,xs__6360__auto__,temp__5804__auto__,dim_contexts))
;
var fs__5477__auto__ = cljs.core.seq(iterys__5476__auto__((cljs.core.truth_((function (){var and__5000__auto__ = return_drills_for_dimensions_QMARK_;
if(cljs.core.truth_(and__5000__auto__)){
return dim_contexts;
} else {
return and__5000__auto__;
}
})())?dim_contexts:new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [context], null))));
if(fs__5477__auto__){
return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(fs__5477__auto__,metabase$lib$drill_thru$available_drill_thrus_$_iter__79540(cljs.core.rest(s__79541__$1)));
} else {
var G__79573 = cljs.core.rest(s__79541__$1);
s__79541__$1 = G__79573;
continue;
}
} else {
return null;
}
break;
}
}),null,null));
});
return iter__5480__auto__(metabase.lib.drill_thru.available_drill_thru_fns);
})():null));
}catch (e79539){var e = e79539;
throw cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(["Error getting available drill thrus for query: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.ex_message(e))].join(''),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"query","query",-1288509510),query,new cljs.core.Keyword(null,"stage-number","stage-number",-1752729638),stage_number,new cljs.core.Keyword(null,"context","context",-830191113),context], null),e);
}});
metabase$lib$drill_thru$available_drill_thrus = function(query,stage_number,context){
switch(arguments.length){
case 2:
return metabase$lib$drill_thru$available_drill_thrus__2.call(this,query,stage_number);
case 3:
return metabase$lib$drill_thru$available_drill_thrus__3.call(this,query,stage_number,context);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
metabase$lib$drill_thru$available_drill_thrus.cljs$core$IFn$_invoke$arity$2 = metabase$lib$drill_thru$available_drill_thrus__2;
metabase$lib$drill_thru$available_drill_thrus.cljs$core$IFn$_invoke$arity$3 = metabase$lib$drill_thru$available_drill_thrus__3;
return metabase$lib$drill_thru$available_drill_thrus;
})()
;
/**
 * Inputs: ([query drill]
 *         [query :- :metabase.lib.schema/query stage-number :- :int drill :- :metabase.lib.schema.drill-thru/drill-thru & args])
 *   Return: :metabase.lib.schema/query
 *        
 * 
 *   `(drill-thru query stage-number drill-thru)`
 * 
 *   Applies the `drill-thru` to the query and stage. Keyed on the `:type` of the drill-thru. The `drill-thru` should be
 *   one of those returned by a call to [[available-drill-thrus]] with the same `query` and `stage-number`.
 * 
 *   Returns the updated query.
 * @param {...*} var_args
 */
metabase.lib.drill_thru.drill_thru = (function() {
var metabase$lib$drill_thru$drill_thru = null;
var metabase$lib$drill_thru$drill_thru__2 = (function (query,drill){
return (metabase.lib.drill_thru.drill_thru.cljs$core$IFn$_invoke$arity$3 ? metabase.lib.drill_thru.drill_thru.cljs$core$IFn$_invoke$arity$3(query,(-1),drill) : metabase.lib.drill_thru.drill_thru.call(null,query,(-1),drill));
});
var metabase$lib$drill_thru$drill_thru__4 = (function() { 
var G__79576__delegate = function (query,stage_number,drill,args){
var level__73199__auto___79577 = metabase.util.log.glogi_level(new cljs.core.Keyword(null,"debug","debug",-1608172596));
var logger__73200__auto___79578 = "metabase.lib.drill-thru";
if(cljs.core.truth_(metabase.util.log.is_loggable_QMARK_(logger__73200__auto___79578,level__73199__auto___79577))){
var x__73201__auto___79579 = "Applying drill thru: %s";
if((x__73201__auto___79579 instanceof Error)){
lambdaisland.glogi.log.cljs$core$IFn$_invoke$arity$4(logger__73200__auto___79578,level__73199__auto___79577,metabase.util.log.format_msg(metabase.util.pprint_to_str.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"query","query",-1288509510),query,new cljs.core.Keyword(null,"stage-number","stage-number",-1752729638),stage_number,new cljs.core.Keyword(null,"drill","drill",-1704624793),drill,new cljs.core.Keyword(null,"args","args",1315556576),args], null))),x__73201__auto___79579);
} else {
lambdaisland.glogi.log.cljs$core$IFn$_invoke$arity$4(logger__73200__auto___79578,level__73199__auto___79577,metabase.util.log.format_msg.cljs$core$IFn$_invoke$arity$variadic(x__73201__auto___79579,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.util.pprint_to_str.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,"query","query",-1288509510),query,new cljs.core.Keyword(null,"stage-number","stage-number",-1752729638),stage_number,new cljs.core.Keyword(null,"drill","drill",-1704624793),drill,new cljs.core.Keyword(null,"args","args",1315556576),args], null))], 0)),null);
}
} else {
}

return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(metabase.lib.drill_thru.common.drill_thru_method,query,stage_number,drill,args);
};
var G__79576 = function (query,stage_number,drill,var_args){
var args = null;
if (arguments.length > 3) {
var G__79580__i = 0, G__79580__a = new Array(arguments.length -  3);
while (G__79580__i < G__79580__a.length) {G__79580__a[G__79580__i] = arguments[G__79580__i + 3]; ++G__79580__i;}
  args = new cljs.core.IndexedSeq(G__79580__a,0,null);
} 
return G__79576__delegate.call(this,query,stage_number,drill,args);};
G__79576.cljs$lang$maxFixedArity = 3;
G__79576.cljs$lang$applyTo = (function (arglist__79581){
var query = cljs.core.first(arglist__79581);
arglist__79581 = cljs.core.next(arglist__79581);
var stage_number = cljs.core.first(arglist__79581);
arglist__79581 = cljs.core.next(arglist__79581);
var drill = cljs.core.first(arglist__79581);
var args = cljs.core.rest(arglist__79581);
return G__79576__delegate(query,stage_number,drill,args);
});
G__79576.cljs$core$IFn$_invoke$arity$variadic = G__79576__delegate;
return G__79576;
})()
;
metabase$lib$drill_thru$drill_thru = function(query,stage_number,drill,var_args){
var args = var_args;
switch(arguments.length){
case 2:
return metabase$lib$drill_thru$drill_thru__2.call(this,query,stage_number);
default:
var G__79582 = null;
if (arguments.length > 3) {
var G__79583__i = 0, G__79583__a = new Array(arguments.length -  3);
while (G__79583__i < G__79583__a.length) {G__79583__a[G__79583__i] = arguments[G__79583__i + 3]; ++G__79583__i;}
G__79582 = new cljs.core.IndexedSeq(G__79583__a,0,null);
}
return metabase$lib$drill_thru$drill_thru__4.cljs$core$IFn$_invoke$arity$variadic(query,stage_number,drill, G__79582);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
metabase$lib$drill_thru$drill_thru.cljs$lang$maxFixedArity = 3;
metabase$lib$drill_thru$drill_thru.cljs$lang$applyTo = metabase$lib$drill_thru$drill_thru__4.cljs$lang$applyTo;
metabase$lib$drill_thru$drill_thru.cljs$core$IFn$_invoke$arity$2 = metabase$lib$drill_thru$drill_thru__2;
metabase$lib$drill_thru$drill_thru.cljs$core$IFn$_invoke$arity$variadic = metabase$lib$drill_thru$drill_thru__4.cljs$core$IFn$_invoke$arity$variadic;
return metabase$lib$drill_thru$drill_thru;
})()
;

//# sourceMappingURL=metabase.lib.drill_thru.js.map
