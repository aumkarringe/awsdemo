{"version":3,"sources":["metabase/util/malli/registry.cljc"],"mappings":"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","names":["js/metabase","js/metabase.util","js/metabase.util.malli","js/metabase.util.malli.registry","js/metabase.util.malli.registry.cache","metabase.util.malli.registry/cache","cljs.core.atom","metabase.util.malli.registry/cached","k","schema","value-thunk","or__5002__auto__","cljs.core/deref","cljs.core.get_in","v","cljs.core.swap_BANG_","cljs.core/assoc-in","metabase.util.malli.registry/validator","malli.core.validator","metabase.util.malli.registry/validate","value","fexpr__74650","metabase.util.malli.registry/explainer","validator*","explainer*","malli.core.explainer","make-explainer","metabase.util.malli.registry/explain","fexpr__74671","js/metabase.util.malli.registry.registry*","metabase.util.malli.registry/registry*","cljs.core.merge","malli.core/default-schemas","malli.util/schemas","js/metabase.util.malli.registry.registry","metabase.util.malli.registry/registry","malli.registry/mutable-registry","malli.registry/set-default-registry!","metabase.util.malli.registry/register!","definition","cljs.core/assoc","cljs.core/reset!","metabase.util.malli.registry/schema","type","malli.registry/schema","metabase.util.malli.registry/-with-doc","docstring","cljs.core/vector?","cljs.core/map?","cljs.core/second","vec__74687","seq__74688","cljs.core/seq","first__74689","cljs.core/first","cljs.core/next","tag","opts","args","cljs.core.into","cljs.core.assoc","vec__74696","seq__74697","first__74698","metabase.util.malli.registry/resolve-schema","malli.core.deref_all","malli.core.schema"],"sourcesContent":["(ns metabase.util.malli.registry\n  (:refer-clojure :exclude [declare def])\n  (:require\n   [malli.core :as mc]\n   [malli.registry]\n   [malli.util :as mut]\n   #?@(:clj ([malli.experimental.time :as malli.time])))\n  #?(:cljs (:require-macros [metabase.util.malli.registry])))\n\n(defonce ^:private cache (atom {}))\n\n(defn cached\n  \"Get a cached value for `k` + `schema`. Cache is cleared whenever a schema is (re)defined\n  with [[metabase.util.malli.registry/def]]. If value doesn't exist, `value-thunk` is used to calculate (and cache)\n  it.\n\n  You generally shouldn't use this outside of this namespace unless you have a really good reason to do so! Make sure\n  you used namespaced keys if you are using it elsewhere.\"\n  [k schema value-thunk]\n  (or (get-in @cache [k schema])\n      (let [v (value-thunk)]\n        (swap! cache assoc-in [k schema] v)\n        v)))\n\n(defn validator\n  \"Fetch a cached [[mc/validator]] for `schema`, creating one if needed. The cache is flushed whenever the registry\n  changes.\"\n  [schema]\n  (cached :validator schema #(mc/validator schema)))\n\n(defn validate\n  \"[[mc/validate]], but uses a cached validator from [[validator]].\"\n  [schema value]\n  ((validator schema) value))\n\n(defn explainer\n  \"Fetch a cached [[mc/explainer]] for `schema`, creating one if needed. The cache is flushed whenever the registry\n  changes.\"\n  [schema]\n  (letfn [(make-explainer []\n            #_{:clj-kondo/ignore [:discouraged-var]}\n            (let [validator* (mc/validator schema)\n                  explainer* (mc/explainer schema)]\n              ;; for valid values, it's significantly faster to just call the validator. Let's optimize for the 99.9%\n              ;; of calls whose values are valid.\n              (fn schema-explainer [value]\n                (when-not (validator* value)\n                  (explainer* value)))))]\n    (cached :explainer schema make-explainer)))\n\n(defn explain\n  \"[[mc/explain]], but uses a cached explainer from [[explainer]].\"\n  [schema value]\n  ((explainer schema) value))\n\n(defonce ^:private registry*\n  (atom (merge (mc/default-schemas)\n               (mut/schemas)\n               #?(:clj (malli.time/schemas)))))\n\n(defonce ^:private registry (malli.registry/mutable-registry registry*))\n\n(malli.registry/set-default-registry! registry)\n\n(defn register!\n  \"Register a spec with our Malli spec registry.\"\n  [schema definition]\n  (swap! registry* assoc schema definition)\n  (reset! cache {})\n  nil)\n\n(defn schema\n  \"Get the Malli schema for `type` from the registry.\"\n  [type]\n  (malli.registry/schema registry type))\n\n(defn -with-doc\n  \"Add a `:doc/message` option to a `schema`. Tries to merge it in existing vector schemas to avoid unnecessary\n  indirection.\"\n  [schema docstring]\n  (cond\n    (and (vector? schema)\n         (map? (second schema)))\n    (let [[tag opts & args] schema]\n      (into [tag (assoc opts :doc/message docstring)] args))\n\n    (vector? schema)\n    (let [[tag & args] schema]\n      (into [tag {:doc/message docstring}] args))\n\n    :else\n    [:schema {:doc/message docstring} schema]))\n\n#?(:clj\n   (defmacro def\n     \"Like [[clojure.spec.alpha/def]]; add a Malli schema to our registry.\"\n     ([type schema]\n      `(register! ~type ~schema))\n     ([type docstring schema]\n      `(metabase.util.malli.registry/def ~type\n         (-with-doc ~schema ~docstring)))))\n\n(defn resolve-schema\n  \"For REPL/test usage: get the definition of a registered schema from the registry.\"\n  [schema]\n  (mc/deref-all (mc/schema schema)))\n"]}