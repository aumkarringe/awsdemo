{"version":3,"sources":["metabase/lib/schema/expression.cljc"],"mappings":"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","names":["js/metabase","js/metabase.lib","js/metabase.lib.schema","js/metabase.lib.schema.expression","js/metabase.lib.schema.expression.type-of-method","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","cljs.core.get","fexpr__75059","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.schema.expression/type-of-method","x","dispatch-value","metabase.lib.dispatch/dispatch-value","cljs.core._EQ_","cljs.core/type","metabase.lib.hierarchy/hierarchy","metabase.util.malli.registry/register!","cljs.core.partial","cljs.core/=","metabase.lib.schema.expression/type-of","expr","or__5002__auto__","and__5000__auto__","metabase.lib.schema.common/mbql-clause-tag","cljs.core/map?","cljs.core/second","cljs.core.ex_info","metabase.shared.util.i18n.js_i18n","cljs.core.pr_str","p__75073","vec__75074","cljs.core.nth","_tag","_opts","metabase.lib.schema.expression/is-type?","y","cljs.core/set?","p1__75077#","cljs.core/some","p1__75078#","cljs.core.isa_QMARK_","metabase.lib.schema.expression/type-of?","base-type","expr-type","js/Error","cljs.core.some_fn","cljs.core/keyword?","metabase.lib.schema.expression/*suppress-expression-type-check?*","p1__75083#","metabase.lib.schema.expression/expression-schema","description","cljs.core/vector?","metabase.lib.schema.expression/orderable-types","metabase.lib.schema.expression/comparable-expressions?","cljs.core/boolean","iter__5480__auto__","s__75092","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","cljs.core/first","iterys__5476__auto__","s__75094","s__75096","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__75098","cljs.core/chunk-buffer","i__75097","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__75095","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5477__auto__","cljs.core.concat","iter__75093","iter__75091","t1","metabase.util/one-or-many","t2","t","metabase.types/assignable?","metabase.lib.schema.expression/equality-comparable-types","cljs.core.derive","metabase.lib.schema.common/normalize-string-key","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.lib.schema.expression\n  (:require\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.schema.common :as common]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.types :as types]\n   [metabase.util :as u]\n   [metabase.util.malli :as mu]\n   [metabase.util.malli.registry :as mr]))\n\n(defmulti type-of-method\n  \"Impl for [[type-of]]. Use [[type-of]], but implement [[type-of-method]].\n\n  For MBQL clauses, try really hard not return an ambiguous set of possible types! Calculate things and determine what\n  the result type will be!\n\n  If we don't have enough information to determine the type (e.g. a `:field` clause that needs a metadata provider to\n  determine the type), return `::expression/type.unknown`. This is a temporary workaround until we figure out how to\n  always have type info!\"\n  {:arglists '([expr])}\n  (fn [x]\n    ;; For the fallback case: use the actual type/class name as the dispatch type rather than `:type/*`. This is so we\n    ;; can implement support for some platform-specific classes like `BigDecimal` or `java.time.OffsetDateTime`, for\n    ;; use inside QP code or whatever. In the future maybe we can add support for JS-specific stuff too.\n    (let [dispatch-value (lib.dispatch/dispatch-value x)]\n      (if (= dispatch-value :dispatch-type/*)\n        (type x)\n        dispatch-value)))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(mr/def ::base-type\n  [:multi {:dispatch (partial = ::type.unknown)}\n   [true  [:= ::type.unknown]]\n   [false [:ref ::common/base-type]]])\n\n(mu/defn type-of :- [:multi\n                     {:dispatch set?}\n                     [true  [:set {:min 2} [:ref ::base-type]]]\n                     [false [:ref ::base-type]]]\n  \"Determine the type of an MBQL expression. Returns either a type keyword, or if the type is ambiguous, a set of\n  possible types.\"\n  [expr]\n  (or\n   ;; for MBQL clauses with `:effective-type` or `:base-type` in their options: ignore their dumb [[type-of-method]] methods\n   ;; and return that type directly. Ignore everything else! Life hack!\n   (and (common/mbql-clause-tag expr)\n        (map? (second expr))\n        (or (:effective-type (second expr))\n            (:base-type (second expr))))\n   (type-of-method expr)))\n\n(defmethod type-of-method :default\n  [expr]\n  (throw (ex-info (i18n/tru \"{0}: Don''t know how to determine the type of {1}\" `type-of (pr-str expr))\n                  {:expr expr})))\n\n;;; for MBQL clauses whose type is the same as the type of the first arg. Also used\n;;; for [[metabase.lib.metadata.calculation/type-of-method]].\n(defmethod type-of-method :lib.type-of/type-is-type-of-first-arg\n  [[_tag _opts expr]]\n  (type-of expr))\n\n(defn- is-type? [x y]\n  (cond\n    (set? x)             (some #(is-type? % y) x)\n    (set? y)             (some #(is-type? x %) y)\n    (= x ::type.unknown) true\n    :else                (isa? x y)))\n\n(defn type-of?\n  \"Whether the [[type-of]] `expr` isa? [[metabase.types]] `base-type`.\"\n  [expr base-type]\n  (let [expr-type (type-of expr)]\n    (assert ((some-fn keyword? set?) expr-type)\n            (i18n/tru \"type-of {0} returned an invalid type {1}\" (pr-str expr) (pr-str expr-type)))\n    (is-type? expr-type base-type)))\n\n(def ^:dynamic *suppress-expression-type-check?*\n  \"Set this `true` to skip any type checks for expressions. This is useful while constructing expressions in MLv2 with\n  full metadata, but it breaks during legacy conversion in some cases.\n\n  In particular, if you override the metadata for a column to eg. treat a `:type/Integer` columns as a `:type/Instant`\n  with `:Coercion/UNIXSeconds->DateTime`, it will have `:base-type :type/Integer` and `:effective-type :type/Instant`.\n  But when converting from legacy, the `:field` refs in eg. a filter will only have `:base-type :type/Integer`, and then\n  the filter fails Malli validation. See #41122.\"\n  false)\n\n(defn- expression-schema\n  \"Schema that matches the following rules:\n\n  1a. expression is *not* an MBQL clause, OR\n\n  1b. expression is an registered MBQL clause and matches the schema registered\n      with [[metabase.lib.schema.mbql-clause]], AND\n\n  2. expression's [[type-of]] isa? `base-type`\"\n  [base-type description]\n  [:and\n   ;; vector = MBQL clause, anything else = not an MBQL clause\n   [:multi\n    {:dispatch vector?}\n    [true  [:ref :metabase.lib.schema.mbql-clause/clause]]\n    [false [:ref :metabase.lib.schema.literal/literal]]]\n   [:fn\n    {:error/message description}\n    #(or *suppress-expression-type-check?*\n         (type-of? % base-type))]])\n\n(mr/def ::boolean\n  (expression-schema :type/Boolean \"expression returning a boolean\"))\n\n(mr/def ::string\n  (expression-schema :type/Text \"expression returning a string\"))\n\n(mr/def ::integer\n  (expression-schema :type/Integer \"expression returning an integer\"))\n\n(mr/def ::non-integer-real\n  (expression-schema :type/Float \"expression returning a non-integer real number\"))\n\n(mr/def ::number\n  (expression-schema :type/Number \"expression returning a number\"))\n\n(mr/def ::date\n  (expression-schema :type/Date \"expression returning a date\"))\n\n(mr/def ::time\n  (expression-schema :type/Time \"expression returning a time\"))\n\n(mr/def ::datetime\n  (expression-schema :type/DateTime \"expression returning a date time\"))\n\n(mr/def ::temporal\n  (expression-schema :type/Temporal \"expression returning a date, time, or date time\"))\n\n(def orderable-types\n  \"Set of base types that are orderable.\"\n  #{:type/Text :type/Number :type/Temporal :type/Boolean})\n\n(mr/def ::orderable\n  (expression-schema orderable-types\n                     \"an expression that can be compared with :> or :<\"))\n\n(defn comparable-expressions?\n  \"Returns whether expressions `x` and `y` can be compared.\n\n  Expressions are comparable if their types are comparable.\n  Two types t1 and t2 are comparable if either one is ::type.unknown, or\n  there is an orderable type t such that both `t1` and `t2` are assignable to t.\"\n  [x y]\n  (some boolean\n        (for [t1 (u/one-or-many (type-of x))\n              t2 (u/one-or-many (type-of y))\n              t orderable-types]\n          (or (= t1 ::type.unknown)\n              (= t2 ::type.unknown)\n              (and (types/assignable? t1 t)\n                   (types/assignable? t2 t))))))\n\n(def equality-comparable-types\n  \"Set of base types that can be compared with equality.\"\n  ;; TODO: Adding :type/* here was necessary to prevent type errors for queries where a field's type in the DB could not\n  ;; be determined better than :type/*. See #36841, where a MySQL enum field used to get `:base-type :type/*`, and this check\n  ;; would fail on `[:= {} [:field ...] \"enum-str\"]` without `:type/*` here.\n  ;; This typing of each input should be replaced with an alternative scheme that checks that it's plausible to compare\n  ;; all the args to an `:=` clause. Eg. comparing `:type/*` and `:type/String` is cool. Comparing `:type/IPAddress` to\n  ;; `:type/Boolean` should fail; we can prove it's the wrong thing to do.\n  #{:type/Boolean :type/Text :type/Number :type/Temporal :type/IPAddress :type/MySQLEnum :type/MongoBSONID :type/Array :type/*})\n\n(derive :type/Text        ::emptyable)\n(derive :type/MongoBSONID ::emptyable)\n(derive :type/MySQLEnum   ::emptyable)\n\n(mr/def ::emptyable\n  (expression-schema ::emptyable \"expression returning something emptyable (e.g. a string or BSON ID)\"))\n\n(mr/def ::equality-comparable\n  [:maybe\n   (expression-schema equality-comparable-types\n                      \"an expression that can appear in := or :!=\")])\n\n;;; any type of expression.\n(mr/def ::expression\n  [:maybe (expression-schema :type/* \"any type of expression\")])\n\n(mr/def ::expression.definition\n  [:and\n   [:ref ::expression]\n   [:cat\n    #_tag :any\n    #_opts [:map\n            [:lib/expression-name [:string {:decode/normalize common/normalize-string-key}]]]\n    #_args [:* :any]]])\n\n;;; the `:expressions` definition map as found as a top-level key in an MBQL stage\n(mr/def ::expressions\n  [:sequential {:min 1} [:ref ::expression.definition]])\n"]}