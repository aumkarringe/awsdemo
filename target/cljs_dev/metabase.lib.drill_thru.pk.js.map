{"version":3,"sources":["metabase/lib/drill_thru/pk.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;;;;;;;;;;;;;sCAAA,iEAAAA,vGAASI,oFAQNC,MACAC;AATH,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;eAAAA,XAUiCS;aAVjC,AAAAP,4CAAAF,eAAA,pEAUWM;YAVX,AAAAJ,4CAAAF,eAAA,nEAUkBO;UAVlB,AAAAL,4CAAAF,eAAA,jEAUwBQ;AAVxB,AAWE,GAAM,4BAAA,4EAAA,tGAGC,GAAA,UAAA,TAAOD,wBACP,AAACG,iDAAkCN,MAAMC,qBAGzC,AAACM,+CAAgCP,YAEjC,GAAK,AAACQ,0CAA2BN;AATxC,AAUE,GAAI,AAACO,0CAA2BP;AAE9B,GAAM,EAAK,GAAA,UAAA,TAAOC,sBACP,sDAAA,tDAACO,gDAAKP;AADjB,AAAA,kDAAA,0DAAA,6GAAA,qDAAA,oEAAA,iEAAA,mFAAA,2CAAA,gEAAA,PAIyBD,6DACAC;;AALzB;;;AAQA,IAAMQ,aAAW,AAACC,+CAAsCZ;IAClDa,aAAW,iBAAAC,qBAAA,4DAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBAw4E4B,AAAAsC,sBAAA3C;IAx4E5BM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,gBAAA,AAAAK,eAAAN,gBAAAK,3CAAMU;AAAN,AAAA,IACiBhC,YAAM,AAAA,oFACK,qDAAA,rDAACkC;kBAADD;AAAA,AAAmC,oDAAA,AAAA,mFAAA,AAAA,uFAAAA,vNAACE,0OAAE,AAAA,mFAAOH;;CAD7C/B;AAD5B,AAAA,oBAKgBD;AALhB,AAAA,AAAAwB,uBAAAJ,SAAA,2CAAA,mEAAA,VAMWY,gEAAkBhC;;AAN7B,eAAA,CAAAsB,WAAA;;;;AAAA,eAAA,CAAAA,WAAA;;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,kDAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,gBAAA,AAAAS,gBAAAjB,5BAAMoB;AAAN,AAAA,IACiBhC,YAAM,AAAA,oFACK,qDAAA,rDAACkC;kBAADD;AAAA,AAAmC,oDAAA,AAAA,mFAAA,AAAA,uFAAAA,vNAACE,0OAAE,AAAA,mFAAOH;;CAD7C/B;AAD5B,AAAA,oBAKgBD;AALhB,OAAA8B,eAAA,2CAAA,mEAAA,wEAAA,AAAAH,kDAAA,AAAAI,eAAAnB,nJAMWoB,gEAAkBhC;;AAN7B,eAAA,AAAA+B,eAAAnB;;;;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAgBH;;AADjC,AAQE,GAAM,AAACO,cAAIL;AAAX,AAAA,kDAAA,0DAAA,6GAAA,qDAAA,oEAAA,iEAIe,AAAC0B,cAAI,gDAAA,WAAAC,3DAACC;AAAD,AAAU,sDAAAD,iBAAA,mFAAA,yDAAA,5MAACE;GAAwB7B;;AAJvD;;;;AA5BN;;;AAkCF,AAAA8B,kGAAA,oEAAA,WACGC,OAAOC,cAAcC;AADxB,AAEE,wCAAA,mFAAA,qDAAA,zKAACC,sBAAYD;;AAEf,AAAAE,6FAAA,oEAAA,8BAAAC,nBACGjD,MAAMC;AADT,AAAA,IAAAiD,aAAAD;IAAAC,iBAAA,AAAArD,4BAAAqD;gBAAAA,ZAC+CC;iBAD/C,AAAArD,4CAAAoD,eAAA,xEAC8BrC;AAD9B,AAEE,OAACuC,+CACA,qBAAAC,VAAKrD;AAAL,AAAA,IAAAsD,aAAAD;IAAAC,iBAAA,AAAAzD,4BAAAyD;iBAAAA,bAAsCC;aAAtC,AAAAzD,4CAAAwD,eAAA,pEAAmBpD;YAAnB,AAAAJ,4CAAAwD,eAAA,nEAA0BnD;AAA1B,AACE,OAACqD,yDAAkBxD,UAAMC,aAAa,AAACwD,yBAAavD,OAAOC;GAC7DH,MACAa","names":["p__79266","map__79267","cljs.core/--destructure-map","cljs.core.get","metabase.lib.drill-thru.pk/pk-drill","query","stage-number","column","value","row","_context","metabase.lib.drill-thru.common/mbql-stage?","metabase.lib.drill-thru.common/many-pks?","metabase.lib.types.isa/foreign-key?","metabase.lib.types.isa/primary-key?","cljs.core.not_EQ_","pk-columns","metabase.lib.metadata.calculation/primary-keys","dimensions","iter__5480__auto__","s__79271","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__79273","cljs.core/chunk-buffer","i__79272","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__79270","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","pk-column","p1__79264#","medley.core.find_first","cljs.core._EQ_","cljs.core/vec","p1__79265#","cljs.core.sort_by","cljs.core.get_in","metabase.lib.drill-thru.common/drill-thru-info-method","_query","_stage-number","drill-thru","cljs.core/select-keys","metabase.lib.drill-thru.common/drill-thru-method","p__79282","map__79283","_pk-drill","cljs.core.reduce","p__79284","map__79285","_dimension","metabase.lib.filter.filter","metabase.lib.filter/=","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.lib.drill-thru.pk\n  \"Object details drill for cases when there is multiple PK columns.\n\n  Entry points:\n\n  - Cell\n\n  Requirements:\n\n  - Selected column is not a FK column\n\n  - There are multiple PK columns in returned columns\n\n  - Select column is a PK column OR the query has no aggregations (in this case the first available PK column and its\n  value are used instead of the selected one)\n\n  - The PK value is not `null`. Make sure to take the previous point into account, e.g. the selected column's value\n  can be `null` but the PK column value in the same row can be not `null`).\n\n  Query transformation:\n\n  - Add `=` filter for the PK column and it's value\n\n  Question transformation:\n\n  - None\n\n  A `:pk` drill is a 'View details' (AKA object details) drill that adds filter(s) for the value(s) of a PK(s). It is\n  only presented for Tables that have multiple PKs; for Tables with a single PK you'd instead\n  see [[metabase.lib.drill-thru.zoom]].\n\n  We will only possibly return one of the 'object details'\n  drills ([[metabase.lib.drill-thru.pk]], [[metabase.lib.drill-thru.fk-details]],\n  or [[metabase.lib.drill-thru.zoom]]); see [[metabase.lib.drill-thru.object-details]] for the high-level logic that\n  calls out to the individual implementations.\"\n  (:require\n   [medley.core :as m]\n   [metabase.lib.drill-thru.common :as lib.drill-thru.common]\n   [metabase.lib.filter :as lib.filter]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.drill-thru :as lib.schema.drill-thru]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.util.malli :as mu]))\n\n(mu/defn pk-drill :- [:maybe ::lib.schema.drill-thru/drill-thru.pk]\n  \"'View details' drill when you click on a value in a table that has MULTIPLE PKs. There are two subtypes of PK\n  drills:\n\n  1) if you click on a PK column value, then we return a drill that will add a filter for that PK column/value\n\n  2) if you click a non-PK column value, then we return a drill that will add filters for the PK columns/values in the\n     row. This is never returned for FK columns; we return [[metabase.lib.drill-thru.fk-details]] drills instead.\"\n  [query                                   :- ::lib.schema/query\n   stage-number                            :- :int\n   {:keys [column value row] :as _context} :- ::lib.schema.drill-thru/context]\n  (when (and\n         ;; ignore column header clicks (value = nil). NULL values (value = :null) are ok if this is a click on a\n         ;; non-PK column.\n         (some? value)\n         (lib.drill-thru.common/mbql-stage? query stage-number)\n         ;; `:pk` drills are only for Tables with multiple PKs. For Tables with one PK, we do\n         ;; a [[metabase.lib.drill-thru.zoom]] drill instead.\n         (lib.drill-thru.common/many-pks? query)\n         ;; if this is an FK column we should return an [[metabase.lib.drill-thru.fk-details]] drill instead.\n         (not (lib.types.isa/foreign-key? column)))\n    (if (lib.types.isa/primary-key? column)\n      ;; 1) we clicked on a PK column: return a drill thru for that PK column + value. Ignore `nil` values.\n      (when (and (some? value)\n                 (not= value :null))\n        {:lib/type   :metabase.lib.drill-thru/drill-thru\n         :type       :drill-thru/pk\n         :dimensions [{:column column\n                       :value  value}]})\n      ;; 2) we clicked on a non-PK column: return a drill for ALL of the PK columns + values. Ignore any\n      ;;   `nil` (`:null`) values.\n      (let [pk-columns (lib.metadata.calculation/primary-keys query)\n            dimensions (for [pk-column pk-columns\n                             :let      [value (->> row\n                                                   (m/find-first #(-> % :column :name (= (:name pk-column))))\n                                                   :value)]\n                             ;; ignore any PKs that don't have a value in this row.\n                             :when     value]\n                         {:column pk-column, :value value})]\n        (when (seq dimensions)\n          {:lib/type   :metabase.lib.drill-thru/drill-thru\n           :type       :drill-thru/pk\n           ;; return the dimensions sorted by column ID so the return value is determinate.\n           :dimensions (vec (sort-by #(get-in % [:column :id]) dimensions))})))))\n\n(defmethod lib.drill-thru.common/drill-thru-info-method :drill-thru/pk\n  [_query _stage-number drill-thru]\n  (select-keys drill-thru [:type :dimensions]))\n\n(defmethod lib.drill-thru.common/drill-thru-method :drill-thru/pk\n  [query stage-number {:keys [dimensions], :as _pk-drill}]\n  (reduce\n   (fn [query {:keys [column value], :as _dimension}]\n     (lib.filter/filter query stage-number (lib.filter/= column value)))\n   query\n   dimensions))\n"]}