{"version":3,"sources":["metabase/lib/drill_thru/fk_details.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;;;;;;;sDAAA,kFAAAA,xIAASI,oHAENC,MACAC;AAHH,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;eAAAA,XAI6BQ;aAJ7B,AAAAN,4CAAAF,eAAA,pEAIWM;YAJX,AAAAJ,4CAAAF,eAAA,nEAIkBO;AAJlB,AAKE,GAAM,yDAAA,vDAAK,AAACE,0CAA2BH,eAC5B,GAAA,UAAA,TAAOC,sBACP,sDAAA,tDAACG,gDAAKH;AAFjB,AAAA,kDAAA,0DAAA,6GAAA,qDAAA,oFAAA,gEAAA,qEAAA,5EAKcD,sEACAC,qEACA,AAACI,+CAAgCP;;AAP/C;;;AASF,AAAAQ,kGAAA,oFAAA,WACGC,OAAOR,cAAcS;AADxB,AAEE,wCAAA,mFAAA,+DAAA,+DAAA,lPAACC,sBAAYD;;AAEf,AAAAE,6FAAA,oFAAA;sDAAAC,nBACGb,MAAMe,sBAA0CE;AADnD,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAjB,4BAAAiB;aAAA,AAAAhB,4CAAAgB,eAAA,pEAC8BZ;gBAD9B,AAAAJ,4CAAAgB,eAAA,vEACqCE;AADrC,AASE,IAAME,eAAiB,AAAA,+GAAqBhB;IACtCiB,YAAiB,iBAAAC,WAASF;AAAT,AAAA,GAAA,CAAAE,YAAA;AAAA;;AAAsB,yCAAAA,lCAACC,4BAAmBrB;;;IAC3DsB,kBAAiB,iBAAAC,WAAS,AAAA,2FAAWJ;AAApB,AAAA,GAAA,CAAAI,YAAA;AAAA;;AAA+B,yCAAAA,lCAACC,4BAAmBxB;;;IACpEyB,mBAAiB,iBAAAC,qBAAA,yDAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA44E0B,AAAA+B,sBAAApC;IA54E1BM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,oBAAA,AAAAK,eAAAN,gBAAAK,/CAAMU;AAAN,AAAA,IACYE,QAAM,AAACC,+DAAwBlD,MAAMe,aAAagC;AAD9D,AAAA,GAEY,sOAAA,tOAACI,6CAAE,AAAA,qFAAQ,AAAA,4FAAWF;AAFlC,IAGYG,kBAAgB,iBAAAC,WAASJ;IAATI,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,AAAA,uFAAAA;IAAAA,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAAA,AAAA,+GAAAA;AAAA,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAGS,yCAAAA,lCAAChC,4BAAmBrB;;;AANzD,AAAA,oBAOY,iBAAAuD,oBAAKH;AAAL,AAAA,oBAAAG;AAAA,SACK,AAACJ,6CAAE,AAAA,2FAAWC,iBAAiB,AAAA,gFAAK9B,uBACpC,AAAChB,gDAAK,AAAA,gFAAK8C,iBAAiBlC;;AAFjCqC;;;AAPZ,AAAA,AAAAhB,uBAAAJ,SAUE,AAACqB,yBAAaJ,gBAAgB,AAACR,gBAAM,AAAA,mFAAOK;;AAV9C,eAAA,CAAAZ,WAAA;;;;AAAA,eAAA,CAAAA,WAAA;;;;;AAAA,eAAA,CAAAA,WAAA;;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,+CAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,oBAAA,AAAAS,gBAAAjB,hCAAMoB;AAAN,AAAA,IACYE,QAAM,AAACC,+DAAwBlD,MAAMe,aAAagC;AAD9D,AAAA,GAEY,sOAAA,tOAACI,6CAAE,AAAA,qFAAQ,AAAA,4FAAWF;AAFlC,IAGYG,kBAAgB,iBAAAE,WAASL;IAATK,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,AAAA,uFAAAA;IAAAA,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAAA,AAAA,+GAAAA;AAAA,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAGS,yCAAAA,lCAACjC,4BAAmBrB;;;AANzD,AAAA,oBAOY,iBAAAuD,oBAAKH;AAAL,AAAA,oBAAAG;AAAA,SACK,AAACJ,6CAAE,AAAA,2FAAWC,iBAAiB,AAAA,gFAAK9B,uBACpC,AAAChB,gDAAK,AAAA,gFAAK8C,iBAAiBlC;;AAFjCqC;;;AAPZ,OAAAV,oKAAA,AAAAH,+CAAA,AAAAI,eAAAnB,nNAUE,AAAC6B,yBAAaJ,gBAAgB,AAACR,gBAAM,AAAA,mFAAOK;;AAV9C,eAAA,AAAAH,eAAAnB;;;;;AAAA,eAAA,AAAAmB,eAAAnB;;;;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAoB,AAACsB,0DAAmBhD,MAAMe;;AAHrE,AAcE,sDAAA,WAAA0C,iBAAAC,3EAACC;AAAD,AAAS,gEAAAF,8BAAAC,vFAACE,0EAAqB7C;GACvB,AAAC8C,yBAAgB7D,MAAMsB,iBACvB,gEAAA,hEAACwC,+CAAOrC,oGACC,AAAC+B,yBAAarC,UAAUH;;4CA1B7CH,nBACGb,MAAMe;IAA0CE;;;;EAAAA;;uDADnDJ,nBACGb,MAAMe,sBAA0CE;;;IAAhDjB;;IAAMe;;IADTF;IACmDI;6CADnDJ,nBACGb,MAAMe,sBAA0CE","names":["p__79206","map__79208","cljs.core/--destructure-map","cljs.core.get","metabase.lib.drill-thru.fk-details/fk-details-drill","query","_stage-number","column","value","_context","metabase.lib.types.isa/foreign-key?","cljs.core.not_EQ_","metabase.lib.drill-thru.common/many-pks?","metabase.lib.drill-thru.common/drill-thru-info-method","_query","drill-thru","cljs.core/select-keys","metabase.lib.drill-thru.common/drill-thru-method","p__79215","map__79216","stage-number","object-id","_","fk-column-id","fk-column","G__79219","metabase.lib.metadata/field","fk-column-table","G__79220","metabase.lib.metadata/table","other-fk-filters","iter__5480__auto__","s__79222","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__79224","cljs.core/chunk-buffer","i__79223","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__79221","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","filter-clause","metabase.lib.filter.filters","parts","metabase.lib.filter.filter_parts","cljs.core._EQ_","other-fk-target","G__79225","G__79226","and__5000__auto__","metabase.lib.filter/=","p1__79212#","p2__79214#","cljs.core.reduce","metabase.lib.filter.filter","metabase.lib.query/query","cljs.core.concat","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.lib.drill-thru.fk-details\n  \"Object details drill for FK fields. Creates a new query based on the FK table with a `=` filter based on selected value.\n\n  Entry points:\n\n  - Cell\n\n  Requirements:\n\n  - Column is `type/FK`\n  - `value` is not `null`\n\n  Query transformation:\n\n  - Find the target table for the selected FK\n\n  - Create a new query that targets the FK table and add a `=` filter using the corresponding PK column and the\n    selected value\n\n  - Preserve filters from the original query that use `=` operator and are based on **other** FK columns targeting the\n    same FK table as the selected FK. This can only happen when the target table's PK consists of multiple columns.\n\n  Question transformation:\n\n  - Set default display\n\n  An FK details drill is one where you click a foreign key value in a table view e.g. ORDERS.USER_ID and choose the\n  'View details' option, then it shows you the PEOPLE record in question (e.g. Person 5 if USER_ID was 5).\n\n  We will only possibly return one of the 'object details'\n  drills ([[metabase.lib.drill-thru.pk]], [[metabase.lib.drill-thru.fk-details]],\n  or [[metabase.lib.drill-thru.zoom]]); see [[metabase.lib.drill-thru.object-details]] for the high-level logic that\n  calls out to the individual implementations.\"\n  (:require\n   [metabase.lib.drill-thru.common :as lib.drill-thru.common]\n   [metabase.lib.filter :as lib.filter]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.query :as lib.query]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.drill-thru :as lib.schema.drill-thru]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.util.malli :as mu]))\n\n(mu/defn fk-details-drill :- [:maybe ::lib.schema.drill-thru/drill-thru.fk-details]\n  \"Return an `:fk-details` 'View details' drill when clicking on the value of a FK column.\"\n  [query                               :- ::lib.schema/query\n   _stage-number                       :- :int\n   {:keys [column value] :as _context} :- ::lib.schema.drill-thru/context]\n  (when (and (lib.types.isa/foreign-key? column)\n             (some? value)\n             (not= value :null))\n    {:lib/type  :metabase.lib.drill-thru/drill-thru\n     :type      :drill-thru/fk-details\n     :column    column\n     :object-id value\n     :many-pks? (lib.drill-thru.common/many-pks? query)}))\n\n(defmethod lib.drill-thru.common/drill-thru-info-method :drill-thru/fk-details\n  [_query _stage-number drill-thru]\n  (select-keys drill-thru [:many-pks? :object-id :type]))\n\n(defmethod lib.drill-thru.common/drill-thru-method :drill-thru/fk-details\n  [query stage-number {:keys [column object-id]} & _]\n  ;; generate a NEW query against the FK target table and column, e.g. if the original query was\n  ;; ORDERS/ORDERS.USER_ID, the new query should by PEOPLE/PEOPLE.ID.\n  ;; If there are filters on the original query which are:\n  ;; - := filters, and\n  ;; - Not for this same column, but\n  ;; - Relevant to OTHER FKs which point to PKs on the target table;\n  ;; then preserve those filters.\n  (let [fk-column-id     (:fk-target-field-id column)\n        fk-column        (some->> fk-column-id (lib.metadata/field query))\n        fk-column-table  (some->> (:table-id fk-column) (lib.metadata/table query))\n        other-fk-filters (for [filter-clause (lib.filter/filters query stage-number)\n                               :let [parts (lib.filter/filter-parts query stage-number filter-clause)]\n                               :when (= (:short (:operator parts)) :=)\n                               :let [other-fk-target (some->> parts\n                                                              :column\n                                                              :fk-target-field-id\n                                                              (lib.metadata/field query))]\n                               :when (and other-fk-target\n                                          (= (:table-id other-fk-target) (:id fk-column-table)) ; FK to this table\n                                          (not= (:id other-fk-target) fk-column-id))]           ; But not this column\n                           (lib.filter/= other-fk-target (first (:args parts))))]\n    (reduce #(lib.filter/filter %1 stage-number %2)\n            (lib.query/query query fk-column-table)\n            (concat other-fk-filters\n                    [(lib.filter/= fk-column object-id)]))))\n"]}