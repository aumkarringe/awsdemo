{"version":3,"sources":["metabase/lib/convert.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,+DAAA,/DAAyBA;AAGzB,+DAAA,/DAAyBC;AAGzB,sCAAA,tCAAOC,oFAAgBC,aAAaC,WAAWC;AAA/C,AACE,+BAAA,iFAAA,2FAAA,vMAAMG;IACAC,eAAS,kBAAI,CAACD,yDAAAA,qEAAAA,dAAmBJ,iDAAAA,cACtB,kDAAA,lDAACM,sDAAYL,gBACb,kDAAA,lDAACK,sDAAYL;IAH9BC,aAIqB,kBAAI,CAACE,yDAAAA,qEAAAA,dAAmBJ,iDAAAA,cACtB,oBAAA,pBAACQ,wBAAYP,gBACb,oBAAA,pBAACO,wBAAYP;mBANpC,AAAAE,4CAAAD,WAAA,IAAA,1EAIOK;AAJP,AAOE,GAAI,AAACE,cAAIJ;AACP,OAACK,kDAAUX,aACAM,aACA,WAAKM;AAAL,AACE,IAAMC,SAAO,qEAAA,rEAACC,8CAAMF,UAAUJ;AAA9B,AACE,GACE,AAACO,wBAAQH;AAAW,oDAAA,7CAACI,8EAAQ,AAACC,+CAAOC,sBAAML;;AAD7C,GAEE,AAACM,qBAAKP;AAAW,OAACQ,0BAAcP;;AAFlC,AAGQA;;;;;;AACvB,OAACQ,+CAAOrB,aAAaQ;;;AAE3B,kCAAA,iFAAA,+DAAA,+DAAA,4DAAA,uEAAA,kEAAA,kEAAA,xfAAec;AAGf,iDAAA,jDAAOC,0GAA2BvB;AAAlC,AACE,IAAAwB,oEAAUE;IAAVD,oEAAA;AAAA,AAAA,oFAAAA,nFAAUC;;AAAV,IAAA,AACE,IAAO1B,mBAAaA;eAApB,XACO2B;;AADP,AAEE,IAAAC,qBAAqC,ueAAK,qCAAA,rCAACE,2IAAmC9B,jaAEpC,+LAAA,AAAA,/LAAC+B,+CAAO,6FAAA,7FAACC,6CAAKV,gCAAWW,7TACzB,AAACC,4CAAI,6CAAA,qDAAA,lGAACC,5DACNF;AAJ1C,AAAA,oBAAAL;AAAA,IAAAC,aAAAD;iBAAA,AAAAxB,4CAAAyB,WAAA,IAAA,xEAAU5B;qBAAV,AAAAG,4CAAAyB,WAAA,IAAA,5EAAqB3B;AAArB,AAKE,IAAMkC,YAAW,AAACrC,oCAAeC,iBAAaC,WAAWC;IACnDmC,aAAW,AAACC,wGAAO,iBAAAC,mBAAItC;AAAJ,AAAA,oBAAAsC;AAAAA;;AAGI,OAACC,mDAAY,qCAAA,rCAACV,2IAAmC9B;;;AAJ9E,AAKW,aAAA,bAACyC,wDAA2DvC,eAAemC,WAC1D,AAACK,0DAAgB,AAACT,gBAAM,AAACU,kBAAU3C,iBAAaoC;;AAK1E,GAAI,AAACQ,6CAAER,UAAUpC;AACfA;;AACA,eAAOoC;eAAU,sDAAA,tDAACS,6CAAKlB,4FAAU1B,WAAWC;;;;;;AAChDF;;;;UAtBN,AAAA,oFAAAwB,nFAAUE;;AAwBZ,8CAAA,9CAAOoB,oGAAwB9C;AAA/B,AACE,OAAC+C,+CAAO,4BAAAC,jBAAKhD;AAAL,AAAA,IAAAiD,aAAAD;UAAA,AAAA5C,4CAAA6C,WAAA,IAAA,jEAAmBC;QAAnB,AAAA9C,4CAAA6C,WAAA,IAAA,/DAAuBE;AAAvB,AACI,4DAAA,rDAACpD,oCAAeC,0HAAsCkD;GAC1DlD,aACA,AAACoD,yCAAgCpD;;AAE3C,mCAAA,nCAAOqD,8EAAarD;AAApB,AACE,mDAAA,+CAAIA,/CACAuB,5CACAuB;;AAEN,6BAAA,7BAAOQ,kEAAOC;AAAd,AACE,IAAOA,mBAAaA;kBAApB,dACOC;;AADP,AAEE,IAAMC,gBAAc,AAACrD,4CAAI,AAAA,uFAASmD,kBAAcC;IAC1CpB,YAAU,AAACiB,iCAAYI;AAD7B,AAEE,GAAI,AAACb,6CAAEa,cAAcrB;AACnB,GAAI,AAACQ,6CAAEY,YAAY,6HAAA,5HAAK,AAACE,gBAAM,AAAA,uFAASH;AACtCA;;AACA,eAAOA;eAAa,eAAA,dAAKC;;;;;;AAC3B,eAAO,gEAAA,hEAACG,+CAAOJ,0EAAqBK,gBAAMJ,YAAYpB;eAAWoB;;;;;;;;AAEzE,GAAA,QAAAK,qCAAAC,yCAAAC,iDAAAC;AAAA;AAAA,AAAA;;;kCAAA,iBAAAC,6BAAA,AAAAC,6CAAA,7HAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,2CAAA,yGAAA,gEAAA,iBAAAC,eAAA,zIAIaK;AAJb,AAAA,QAAAL,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,uBAAA,gDAAA,4DAAAJ,wBAAAL,2BAAAE,2BAAAC,2BAAAC,1MAGEO;;;AAGF,qDAAA,rDAAOE,kHAA4BC;AAAnC,AACE,IAAMK,YAAU,AAACC,eAAKN;IAChBO,0BAAkB,AAACnE,qBAAKiE;IAD9BJ,aAE2B,iBAAAS,WAAQV;AAAR,AAAA,GACEO;AADF,qBAAAG,dACoBC;;AADpBD;;;IAF3BR,aAAA,AAAAvE,cAAAsE;IAAAE,eAAA,AAAAjD,gBAAAgD;IAAAA,iBAAA,AAAAE,eAAAF;kBAAAC,dAEOK;WAFPN,PAEqBO;IAEfG,UAAQ,qCAAA,nCAAIL,yBACFF;AALhB,AAOE,OAACQ,iCAAwB,6CAAA,7CAAC5E,gIAAMuE,YAAYI,gBAAS,AAACzD,4CAAIyC,iCAASa;;AAEvE,AAAAb,4EAAA,4DAAA,WACGkB;AADH,AAEE,GAAI,EAAK,AAAC9E,wBAAQ8E,QACT,+BAAAC,9BAAU,AAAC7D,gBAAM4D;AACxB,OAACf,mDAA2Be;;AAC5BA;;;AAEJ,AAAAlB,4EAAA,+DAAA,WACGoB;AADH,AAEEA;;AAEF;;;;;;;;iDAAA,jDAAKC;AASL;;;;;;;;gDAAA,hDAAOC,wGAOJC;AAPH,AAQE,IAAMC,iBAAe,sEAAA,tEAACC;AAAtB,AACE,OAACC,6CAAK,WAAKC;AAAL,AACE,IAAAC,WAAQD;AAAR,AAAA,GACE,AAAC1D,6CAAE,AAAA,sFAAQ0D,MAAMN;AAA2B,sDAAAO,SAAA,xDAAC5C,gHAAcwC;;AAD7DI;;GAEFL;;AAEV;;;sDAAA,tDAAOM,oHAEJC;AAFH,AAGE,GAAI,OAAS,AAAA,mGAAeA;oGACtBA,9CACA,oDAAA,pDAAC3F,wHAAmB,AAAC4F,qDAAyC,AAAA,mGAAeD,tUAC7E,+UAAA,xUAACpF;;AACLoF;;;AAEJ;;;gDAAA,hDAAME,wGAEHC,aAAaC;AAFhB,AAGE,IAAMC,mBAAc,6CAAA,7CAAC9F,gFACK,AAAC+F,oDAAY,eAAAC,JAAKI;AAAL,AAAA,IAAAH,aAAAD;WAAA,AAAA5G,4CAAA6G,WAAA,IAAA,lEAAUI;IAAVH,aAAA,AAAA9G,4CAAA6G,WAAA,IAAA;IAAAC,iBAAA,AAAAC,4BAAAD;cAAA,AAAA3C,4CAAA2C,eAAA,rEAAgBI;AAAhB,AAAA,0FACGF,IAAIE;IACpBV;IACpBW,mBAAc,6CAAA,7CAACvG,gFACK,AAAC+F,oDAAY,eAAAS,JAAKJ;AAAL,AAAA,IAAAK,aAAAD;WAAA,AAAApH,4CAAAqH,WAAA,IAAA,lEAAUJ;IAAVK,aAAA,AAAAtH,4CAAAqH,WAAA,IAAA;IAAAC,iBAAA,AAAAP,4BAAAO;cAAA,AAAAnD,4CAAAmD,eAAA,rEAAgBJ;AAAhB,AAAA,0FACGA,QAAQF;IACxBR;AAP1B,AAQE,IAAAe,0DAAU7H;IAAV8H,0DACU/H;IADVgI,0DAAqCf;IAArCgB,0DACqCP;AADrC,AAAA,gEAAAM,/DAAU/H;;AAAV,gEAAAgI,/DACUjI;;AADV,IAAA,AAEE,QAACgH,sCAAAA,wCAAAA;UAFH,AAAA,gEAAAe,/DACU/H;;AADV,gEAAA8H,/DAAU7H;;AAWd,AAAA6E,4EAAA,wEAAA,WACG8B;AADH,AAEE,IAAMG,eAAa,AAACjC,8DAAQ,AAAA,iGAAc8B;IACpCsB,cAAa,oBAEK,AAAC1B,6CAAK,WAAA2B,5EAINK;AAJM,AAAA,IAAAJ,aAAAD;QAAA,AAAA5H,4CAAA6H,WAAA,IAAA,/DAAMC;QAAN,AAAA9H,4CAAA6H,WAAA,IAAA,/DAAQE;AAAR,mHACMA,9DACAxD,rDACA,qDAAA,9CAACyD,+GAAqCF;mGALlDzB,hGAEA,AAAA;AAHxB,AAQE,OAAAE,2DAAA,bAA4CC;AAA5C,AACE,IAAMH,4HAAUA,pDACAD,5DACA,4DAAA,2DAAA,kIAAA,zPAAC8B,0LAA0B1B,iIAA0BmB;IAC/DtB,YAAM,AAAC1D,+CACA,WAAK0D,UAAMyB;AAAX,AACE,GAAA,AAAAK,cAAQ,AAAChE,4CAAIkC,UAAMyB;AACjBzB;;AACA,OAAC9C,+CAAO8C,UAAMyB,EAAEvD;;GACpB8B,UACA,oFAAA,qHAAA,zMAAC+B,oDAAKlH;AATnB,AAUE,IAAAmH,WAAQhC;AAAR,AAAA,oBACE,AAAA,qFAAQA;AAAO,sDAAAgC,SAAA,xDAAC9E,+GAAcsC;;AADhCwC;;;;AAGR,AAAA9D,4EAAA,2EAAA,WACG8B;AADH,AAEE,uEAAA,hEAACiC,0DAAkBjC,6EAAqBkC,sBAAY,WAAKC;AAAL,AAAU,qEAAA,9DAACF,0DAAkBE,kEAAejE;;;AAElG,AAAAA,4EAAA,4DAAA,WACG2B;AADH,AAEE,IAAMA,yGAASA,/CACA,oDAAA,pDAAC3C,sHAAmBgB,rKACpB,sMAAA,tMAAChB,+PAAegB;AAF/B,AAGE,IAAAkE,WAAQvC;IAARuC,eAAA,kBACE,AAAA,wFAASvC,WAAM,+CAAAuC,SAAA,xDAAClF,kHAAe,WAAKmF;AAAL,AACE,GAAI,AAACC,4BAAYD;AACf,OAACzC,6CAAK1B,gCAAQmE;;AACd,OAACE,gDAAQF;;IAJ9CD;AAAA,AAAA,GAKE,AAACN,cAAI,AAAA,sFAAQjC;AAAO,qDAAAuC,aAAA,3DAAC/H,mHAAakF;;AALpC6C;;;AAOJ,AAAAlE,4EAAA,0FAAA,WACGsE;AADH,AAEE,OAAC5C,6CAAK1B,gCAAQsE;;AAEhB,AAAAtE,4EAAA,4EAAA,WACGuE;AADH,AAEE,oBAAI,AAAA,mFAAOA;AACT,8LAAI,AAACC,2BAAkBD,1EACnB,6EAAA,7EAACvF,sIAAe,WAAKyF,hNAErBC,9CACA,8CAAA,9CAACvI,3BACDwC;AAJgB,AACE,OAAC+C,6CAAK1B,gCAAQyE;KAEhC,sFAAA;;AAEJ,OAACT,sBAAYO,EAAEvE;;;AAEnB,AAAAA,4EAAA,wDAAA,WAAA2E;AAAA,AAAA,IAAAC,aAAAD;WAAA,AAAAlJ,4CAAAmJ,WAAA,IAAA,lEACIlC;QADJ,AAAAjH,4CAAAmJ,WAAA,IAAA,/DACS1D;QADT,AAAAzF,4CAAAmJ,WAAA,IAAA,/DACWC;AADX,AAEE,IAAAC,aAA2B,2BAAA,+FAAA,xHAAI,AAACtI,qBAAK0E,uFACP2D,EAAE3D,6FACFA,EAAE2D;iBAFhC,AAAApJ,4CAAAqJ,WAAA,IAAA,xEAAOC;cAAP,AAAAtJ,4CAAAqJ,WAAA,IAAA,rEAAkB9D;AAAlB,AAGE,wCAAA,mFAAA,pHAACC,4KAAgCD,QAAQ+D;;AAE7C,AAAA/E,4EAAA,sDAAA,WAAAgF;AAAA,AAAA,IAAAC,aAAAD;WAAA,AAAAvJ,4CAAAwJ,WAAA,IAAA,lEACIvC;YADJ,AAAAjH,4CAAAwJ,WAAA,IAAA,nEACSC;WADT,AAAAzJ,4CAAAwJ,WAAA,IAAA,lEACeE;AADf,AAKE,IAAMA,WAAK,6BAAA,2CAAA,+DAAA,+DAAA,sEAAA,uEAAA,sEAAA,zZAACC,wBAAgBD;IAKtBA,WAAK,uDAAA,vDAAChJ,8CAAMgJ,kFAAqB,iBAAAvH,mBAAI,AAAA,uGAAiBuH;AAArB,AAAA,oBAAAvH;AAAAA;;AAAA,IAAAA,uBACI,AAAA,6FAAYuH;AADhB,AAAA,oBAAAvH;AAAAA;;AAEI,OAACyH,uCAA8BH;;;;AAP1E,AAQE,wCAAA,mFAAA,pHAACjE,0KAAgCkE,SAAKD;;AAE1C,AAAAlF,4EAAA,qDAAA,WAAAsF;AAAA,AAAA,IAAAC,aAAAD;WAAA,AAAA7J,4CAAA8J,WAAA,IAAA,lEACI7C;sBADJ,AAAAjH,4CAAA8J,WAAA,IAAA,7EACSC;cADT,AAAA/J,4CAAA8J,WAAA,IAAA,rEACyBvE;AADzB,AAEE,IAAMyE,WAAQ,AAAA,0FAAUzE;AAAxB,AACE,IAAA0E,WAAA,mFAAA,qDAAe,uDAAA,vDAAChJ,+CAAOsE,qEAAkB,AAACU,6CAAK1B,gCAAQwF;IAAvDE,eAAA,AAAA,iCAAAA,jCACUzE;;AADV,AAAA,GAEE,GAAA,aAAA,ZAAOwE;AAAS,oDAAAC,7CAACxH,0DAAK,AAAC8B,8DAAQyF;;AAFjCC;;;AAIJ,AAAA1F,4EAAA,gEAAA,WAAA2F;AAAA,AAAA,IAAAC,aAAAD;UAAA,AAAAlK,4CAAAmK,WAAA,IAAA,jEACI3B;YADJ,AAAAxI,4CAAAmK,WAAA,IAAA,nEACQV;WADR,AAAAzJ,4CAAAmK,WAAA,IAAA,lEACcT;AADd,AAEE,wCAAA,jCAAClE,oHAAyBgD,IAAIkB,KAAKD;;AAErC,0CAAA,1CAAOW,4FACJtB,EAAEhB;AADL,AAEE,IAAMrH,SAAO,gDAAA,hDAAC0D,4CAAI2E,EAAEhB;AAApB,AACE,GAAA,GAAQ,oDAAA,pDAACtF,6CAAE/B;AACTA;;AACA,MAAO,4MAAA,2CAAA,iDAAA,xSAAC4J,gDAAQ,CAAA,sIAAA,hHAA2B,AAACnI,wGAAO4F,uHAC/BgB,kDACAhB;;;AAE1B,AAAAvD,4EAAA,mEAAA,WAAA+F;AAAA,AAAA,IAAAC,aAAAD;UAAA,AAAAtK,4CAAAuK,WAAA,IAAA,jEACI/B;wBADJ,AAAAxI,4CAAAuK,WAAA,IAAA,/EACQC;WADR,AAAAxK,4CAAAuK,WAAA,IAAA,lEAC0Bb;aAD1Ba,TACoCE;AADpC,AAEE,wCAAA,jCAACjF,oHACCgD,IAAIkB,KAAK,iBAAAvH,mBAAI,AAACgC,4CAAIzE,6DAA2B8K;AAApC,AAAA,oBAAArI;AAAAA;;AACI,MAAO,8LAAA,2CAAA,zOAACkI,gDAAQ,CAAA,gHACKG,iIACIC;;;;AAE1C,AAAAlG,4EAAA,oFAAA,WAAAmG;AAAA,AAAA,IAAAC,aAAAD;WAAA,AAAA1K,4CAAA2K,WAAA,IAAA,lEACI1D;kBADJ,AAAAjH,4CAAA2K,WAAA,IAAA,zEACSC;cADT,AAAA5K,4CAAA2K,WAAA,IAAA,rEACqBpF;AADrB,AAEE,IAAAsF,aAAwB,AAACtG,8DAAQqG;IAAjCE,aAAA,AAAAxK,cAAAuK;IAAAE,eAAA,AAAAlJ,gBAAAiJ;IAAAA,iBAAA,AAAA/F,eAAA+F;UAAAC,NAAOvC;IAAPuC,mBAAA,AAAAlJ,gBAAAiJ;IAAAA,iBAAA,AAAA/F,eAAA+F;WAAAC,PAAWrB;WAAXoB,PAAkB1F;AAAlB,AACE,oDAAA,7CAACxE,gIAAM4H,IAAI,AAACwC,uGAAMtB,KAAKnE,sBAAUH;;AAErC,AAAAb,4EAAA,sEAAA,WAAA0G;AAAA,AAAA,IAAAC,aAAAD;WAAA,AAAAjL,4CAAAkL,WAAA,IAAA,lEACIjE;YADJ,AAAAjH,4CAAAkL,WAAA,IAAA,nEACSC;QADT,AAAAnL,4CAAAkL,WAAA,IAAA,/DACeE;WADf,AAAApL,4CAAAkL,WAAA,IAAA,lEACiBG;cADjB,AAAArL,4CAAAkL,WAAA,IAAA,rEACsB3F;AADtB,AAEE,wCAAA,mFAAA,pHAACC,0LAAwC,iBAAArD,mBAAIoD;AAAJ,AAAA,oBAAApD;AAAAA;;AAAA;;KAAgB,AAACoC,8DAAQ4G,OAAOC,EAAEC;;AAG7E,AAAA9G,4EAAA,wDAAA,WAAA+G;AAAA,AAAA,IAAAC,aAAAD;UAAA,AAAAtL,4CAAAuL,WAAA,IAAA,jEACI/C;WADJ,AAAAxI,4CAAAuL,WAAA,IAAA,lEACQ7B;WADR,AAAA1J,4CAAAuL,WAAA,IAAA,lEACaE;QADb,AAAAzL,4CAAAuL,WAAA,IAAA,/DACkBH;aADlBG,TACyBd;AADzB,AAAA,GAES,qEAAA,rEAACjI,6CAAE,AAACc,gBAAMmH;AAFnB;AAAA,AAAA,MAAA,KAAAe,MAAA;;;AAAA,0FAGGhD,IAAIkB,KAAK,AAACnF,8DAAQkH,MAAML;;AAG3B,IAAAM,mBAAA,AAAApL,cAAA,mFAAA,4DAAA,kEAAA,+DAAA;IAAAqL,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,gBAAA,AAAAD,wDAAAE,pEAAQrD;AAAR,AAAA,AACE,wCAAA,xCAAC2D,8BAAqB3D;;AADxB;AAAA,eAAAkD;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAC,2BAAA,AAAAxL,cAAAoL;AAAA,AAAA,GAAAI;AAAA,AAAA,IAAAJ,uBAAAI;AAAA,AAAA,GAAA,AAAAC,6BAAAL;AAAA,IAAAM,wBAAA,AAAAC,sBAAAP;AAAA,AAAA,eAAA,AAAAQ,qBAAAR;eAAAM;eAAA,AAAA1I,gBAAA0I;eAAA;;;;;;;AAAA,gBAAA,AAAAnK,gBAAA6J,5BAAQlD;AAAR,AAAA,AACE,wCAAA,xCAAC2D,8BAAqB3D;;AADxB;AAAA,eAAA,AAAAzD,eAAA2G;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;AAGA,AAAAnH,4EAAA,uHAAA,WAAA6H;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAAhM,cAAA+L;IAAAE,eAAA,AAAA1K,gBAAAyK;IAAAA,iBAAA,AAAAvH,eAAAuH;UAAAC,NACI/D;IADJ+D,mBAAA,AAAA1K,gBAAAyK;IAAAA,iBAAA,AAAAvH,eAAAuH;WAAAC,PACQ7C;WADR4C,PACelH;aADfiH,TACwB5B;AADxB,AAEE,GAAI,yBAAA,xBAAG,AAACnH,gBAAM8B;AAEZ,OAACI,iCAAwB,6CAAA,7CAAC5E,gIAAM4H,IAAIkB,aAAM,AAAC5H,4CAAIyC,gCAAQa;;AAEvD,IAAAoH,aAAqB/B;cAArB,AAAAzK,4CAAAwM,WAAA,IAAA,rEAAOhE;QAAP,AAAAxI,4CAAAwM,WAAA,IAAA,/DAAW/G;QAAX,AAAAzF,4CAAAwM,WAAA,IAAA,/DAAapD;eAAb,AAAApJ,4CAAAwM,WAAA,IAAA,tEAAe9C;AAAf,AACE,wCAAA,jCAAClE,oHAAyBgD,QAAI,iBAAArG,mBAAIuH;AAAJ,AAAA,oBAAAvH;AAAAA;;AAAA;;KAAa,AAACoC,8DAAQkB,GAAG,AAAClB,8DAAQ6E;;;AAEtE;;;;qDAAA,rDAAMqD,kHAGHC,YAAYC;AAHf,AAIE,8GAAA,2CAAA,yEAAA,qDAAA,hRAAC3B,+MAAiB0B,iIACX,uHAAA,2CAAA,0QAAA,2CAAA,rcAAI,AAAA,uFAASC,kHACF,oCAAA,2CAAA,yDAAA,xIAAChD,wBAAgBgD,4RAClBA;;AAEnB,GAAA,QAAAlJ,qCAAAC,yCAAAC,iDAAAiJ;AAAA;AAAA,AAAA;;;;wCAAA,iBAAA/I,6BAAA,AAAAC,6CAAA,nIAAUgJ;IAAV/I,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,2CAAA,yGAAA,gEAAA,iBAAA0I,eAAA,zIAKapI;AALb,AAAA,QAAAoI,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAxI,kBAAA,AAAAC,+CAAA,uBAAA,sDAAA,4DAAAJ,wBAAAL,2BAAAE,2BAAAC,2BAAAC,1MAIEO;;;AAGF;;;mDAAA,nDAAOuI,8GAEJjF;AAFH,AAGE,IAAAkF,oBAAK,AAACC,mCAAmBnF;AAAzB,AAAA,GAAAkF;AACK,IAAAlB,qBAA0B,AAACqB,oBAAUrF;AAArC,AAAA,oBAAAgE;AAAA,AAAA,qBAAAA,jBAAWoB;AAAX,AACE,SAAI,4DAAA,5DAAC1K,6CAAE0K,2BACH,iDAAA,jDAACE,kCAAiBF;;AAFxB;;;AADLF;;;AAKF,AAAA;;;;;kCAAA,0CAAAK,5EAAOE;AAAP,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,8DAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA/B,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,gEAAA,hEAAO+B;AAAP,AAKG,OAAC1M,+CAAO,WAAA2M;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAxN,4CAAAyN,WAAA,IAAA,/DAAM3F;SAAN,AAAA9H,4CAAAyN,WAAA,IAAA,hEAAQC;AAAR,AACE,OAACX,iDAAsBjF;;;;AANpC,CAAA,gEAAA,hEAAOyF,2EAOHzE;AAPJ,AAQG,oDAAA,7CAAClI,gFAAQ,AAAC+M,gEAAY7E;;;AARzB,CAAA,0DAAA,1DAAOyE;;AAAP,AAUA;;;;+CAAA,/CAAOK,sGAGJ9E;AAHH,AAIE,OAACb,oBACA,6CAAA,7CAACrH,gFACK,AAACgB,6CAAK,AAAC+L,gEACD,AAAC9M,+CAAO,WAAAgN;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA7N,4CAAA8N,WAAA,IAAA,/DAAMhG;SAAN,AAAA9H,4CAAA8N,WAAA,IAAA,hEAAQJ;AAAR,AACE,sDAAA,/CAAClL,6CAAEsF;KAGnB,EAAI,4BAAA,5BAACiG,0BAAUjF,+IACb,wDAAA,6LAAA,rPAAC7H,sDAAO6H,oQAGRA;;AAEX,GAAA,QAAArF,qCAAAC,yCAAAC,iDAAAqK;AAAA;AAAA,AAAA,mDAAA,iBAAAnK,6BAAA,AAAAC,6CAAA,9IAAoBoK;IAApBnK,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,2CAAA,yGAAA,gEAAA,iBAAA8J,eAAA,zIAGaxJ;AAHb,AAAA,QAAAwJ,6CAAAA,+CAAAA;;AAAA,AAAA,YAAA5J,kBAAA,AAAAC,+CAAA,uBAAA,iEAAA,4DAAAJ,wBAAAL,2BAAAE,2BAAAC,2BAAAC,1MAEEO;;;AAGF,AAAA0J,6FAAA,4DAAA,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAA/N,cAAA8N;IAAAE,eAAA,AAAAzM,gBAAAwM;IAAAA,iBAAA,AAAAtJ,eAAAsJ;UAAAC,NACI9F;IADJ8F,mBAAA,AAAAzM,gBAAAwM;IAAAA,iBAAA,AAAAtJ,eAAAsJ;cAAAC,VACQ/I;WADR8I,PACkBjJ;AADlB,AAEE,IAAMmJ,QAAM,6CAAA,7CAAC3N,gIAAM4H,YAAK,AAAC1G,4CAAIgL,uCAAe1H;IAGtCmJ,YAAM,EAAI,EAAK,iDAAA,jDAAC/L,6CAAEgG,+DAAW,AAACzD,eAAKK,SAC3B,kEAAA,2CAAA,7GAAC3C,6CAAK,AAAC6C,cAAIiJ,8GAAiB,AAACtJ,eAAKsJ,gBAClCA;AALd,AAME,IAAA/M,qBAA0B,AAACyG,oBAAU,AAAC2F,6CAAqBrI;AAA3D,AAAA,oBAAA/D;AAAA,uBAAAA,nBAASgN;AAAT,AAAA,0FAAA,oFACwBD,UAAMC;;AAC5BD;;;AAEN,AAAAL,6FAAA,wDAAA,WACGzD;AADH,AAEE,OAACqC,oEAAcrC;;AAEjB,2DAAA,mEAAAgE,9HAAOI;AAAP,AAAA,IAAAH,aAAAD;IAAAE,aAAA,AAAArO,cAAAoO;IAAAE,eAAA,AAAA/M,gBAAA8M;IAAAA,iBAAA,AAAA5J,eAAA4J;QAAAC,JAA0C9G;IAA1C8G,mBAAA,AAAA/M,gBAAA8M;IAAAA,iBAAA,AAAA5J,eAAA4J;cAAAC,VAA4CrJ;WAA5CoJ,PAAsDvJ;AAAtD,AACE,GAAI,AAACrE,qBAAKwE;AACR,oDAAA,7CAAC3E,gIAAMkH,UAAG,AAACgH,+CAAO,AAAChN,4CAAIgL,sCAAc1H,MACnB,iBAAA0G,qBAAmB,AAAC8B,6CAAqBrI;AAAzC,AAAA,oBAAAuG;AAAA,AAAA,kBAAAA,dAAWvG;AAAX,AAAA,0FACGA;;AADH;;;;AAElB,oDAAA,7CAAC3E,gIAAMkH,UAAG,AAAChG,4CAAIgL,sCAAc,AAACiC,eAAKxJ,QAAQH;;;AAE/C,AAAA0H,kFAAA,4DAAA,WACGrH;AADH,AAEE,GACE,EAAK,AAAC9E,wBAAQ8E,QACT,+BAAAC,9BAAU,AAAC7D,gBAAM4D;AAAK,OAACoJ,yDAAiCpJ;;AAF/D,GAGE,AAAC1E,qBAAK0E;2FAAyBA,9DACAkI,7BACA,6BAAA,tBAACpF,uFAAYuE;;AAL9C,AAMQrH;;;;;AAEV,IAAAuJ,mBAAA,AAAA1O,cAAA,mFAAA,yGAAA;IAAA2O,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,gBAAA,AAAAD,wDAAAE,pEAAQ3G;AAAR,AAAA,AACE,wCAAA,xCAAC2D,8BAAqB3D;;AADxB;AAAA,eAAAwG;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAArD,2BAAA,AAAAxL,cAAA0O;AAAA,AAAA,GAAAlD;AAAA,AAAA,IAAAkD,uBAAAlD;AAAA,AAAA,GAAA,AAAAC,6BAAAiD;AAAA,IAAAhD,wBAAA,AAAAC,sBAAA+C;AAAA,AAAA,eAAA,AAAA9C,qBAAA8C;eAAAhD;eAAA,AAAA1I,gBAAA0I;eAAA;;;;;;;AAAA,gBAAA,AAAAnK,gBAAAmN,5BAAQxG;AAAR,AAAA,AACE,wCAAA,xCAAC2D,8BAAqB3D;;AADxB;AAAA,eAAA,AAAAzD,eAAAiK;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;AAGA,IAAAI,mBAAA,AAAA9O,cAAA,oFAAA,uDAAA,kDAAA,kEAAA,8DAAA,iDAAA,wDAAA,kDAAA,iEAAA,uDAAA,yDAAA,kDAAA;IAAA+O,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,gBAAA,AAAAD,wDAAAE,pEAAQ/G;AAAR,AAAA,AAGE,wCAAA,xCAAC2D,8BAAqB3D;;AAHxB;AAAA,eAAA4G;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAzD,2BAAA,AAAAxL,cAAA8O;AAAA,AAAA,GAAAtD;AAAA,AAAA,IAAAsD,uBAAAtD;AAAA,AAAA,GAAA,AAAAC,6BAAAqD;AAAA,IAAApD,wBAAA,AAAAC,sBAAAmD;AAAA,AAAA,eAAA,AAAAlD,qBAAAkD;eAAApD;eAAA,AAAA1I,gBAAA0I;eAAA;;;;;;;AAAA,gBAAA,AAAAnK,gBAAAuN,5BAAQ5G;AAAR,AAAA,AAGE,wCAAA,xCAAC2D,8BAAqB3D;;AAHxB;AAAA,eAAA,AAAAzD,eAAAqK;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;AAKA,IAAAI,mBAAA,AAAAlP,cAAA,sCAAA,+CAAA,gDAAA,gDAAA,+CAAA,qDAAA,4DAAA,mDAAA,oDAAA,mDAAA,sDAAA,sDAAA,uDAAA,uDAAA,uDAAA,6DAAA,+EAAA,qDAAA,+EAAA,oDAAA,6EAAA,6DAAA,6DAAA,+DAAA,0DAAA,4DAAA,iEAAA,kEAAA,mEAAA,oEAAA,8EAAA,0DAAA,+DAAA,2DAAA,oEAAA,+EAAA,wDAAA,oDAAA,uDAAA,uDAAA,sDAAA;IAAAmP,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,gBAAA,AAAAD,wDAAAE,pEAAQnH;AAAR,AAAA,AASE,wCAAA,xCAAC2D,8BAAqB3D;;AATxB;AAAA,eAAAgH;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAA7D,2BAAA,AAAAxL,cAAAkP;AAAA,AAAA,GAAA1D;AAAA,AAAA,IAAA0D,uBAAA1D;AAAA,AAAA,GAAA,AAAAC,6BAAAyD;AAAA,IAAAxD,wBAAA,AAAAC,sBAAAuD;AAAA,AAAA,eAAA,AAAAtD,qBAAAsD;eAAAxD;eAAA,AAAA1I,gBAAA0I;eAAA;;;;;;;AAAA,gBAAA,AAAAnK,gBAAA2N,5BAAQhH;AAAR,AAAA,AASE,wCAAA,xCAAC2D,8BAAqB3D;;AATxB;AAAA,eAAA,AAAAzD,eAAAyK;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;AAWA,AAAA1C,kFAAA,sIAAA,WACG8C;AADH,AAEE,OAAC1B,+EAAyB0B;;AAE5B,0DAAA,1DAAOC,4HAAiCC;AAAxC,AACE,oDAAA,7CAAClP,8EACK,AAACgB,6CAAK,4CAAA,WAAAmO,vDAACjO;AAAD,AAAM,6BAAAiO,tBAACC,uCAAcC;IACrB,AAACnO,4CAAIgL,wCACX,AAAA,yFAAUgD;;AAElB;;;;oCAAA,4CAAAI,hFAAmBE;AAAnB,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAApJ,4BAAAoJ;aAAA,AAAAhM,4CAAAgM,eAAA,pEAAyCnH;AAAzC,AAOE,IAAM2D,cAAY,AAAC9K,gBAAM,AAACc,+CAAO,WAAA0N,SAA4BhK;AAA5B,AAAA,IAAAiK,aAAAD;YAAA,AAAArQ,4CAAAsQ,WAAA,IAAA,nEAAM/B;qBAAN,AAAAvO,4CAAAsQ,WAAA,IAAA,5EAAYR;AAAZ,AAAA,0FACG,iBAAAS,WAAQ,AAACzD,oEAAczG;IAAvBkK,eAAA,2JAAAA,zIACEhC,OAAe,8CAAAgC,SAAA,vDAAC7P,2HAAoB6N;AADtC,AAAA,oBAEEuB;AAAe,qDAAAS,aAAA,3DAAC7P,sIAAuB,AAACmP,wDAAgCC;;AAF1ES;;KAIA,AAAA,4GAAqBlK;GALhC,KAOQ2C;AAPjC,AAQE,IAAAwH,WAAQ7D;AAAR,AAAA,oBAEE,AAAA,uFAASA;AAAa,+BAAA6D,SAAA,2CAAA,yDAAA,rIAAC7G;;AAFzB6G;;;AAIJ,AAAA1D,kFAAA,4EAAA,WAA6ChE;AAA7C,AACE,oDAAA,7CAAClI,gFACK,AAACgB,6CAAK,AAAC+L,gEACD,AAAC7L,4CAAI,WAAA2O;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAzQ,4CAAA0Q,WAAA,IAAA,/DAAM5I;QAAN,AAAA9H,4CAAA0Q,WAAA,IAAA,/DAAQ3I;AAAR,AAAA,0FACGD,EAAE,AAACgF,oEAAc/E;KAC/Be;;AAER,AAAAgE,kFAAA,mEAAA,WAAA6D;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA3Q,4CAAA4Q,WAAA,IAAA,/DAAwC7N;WAAxC,AAAA/C,4CAAA4Q,WAAA,IAAA,lEAA0ClH;eAA1C,AAAA1J,4CAAA4Q,WAAA,IAAA,tEAA+CC;SAA/CD,LAA4DE;AAA5D,AACE,GAAI,AAAC/P,qBAAK2I;AACR,IAAA,AACE,IAAMA,WAAS,AAACkE,6CAAqBlE;eAArC,mFAAA,9FACMsH,iKAAuB,AAAC5G,wCAAc3K,6DAA2BoR;AADvE,AAEE,GAAI,AAACvQ,cAAIoJ;AACP,OAACjH,6CAAKuO,SAAStH;;AACfsH;;gBALN,QAAAD,JAM2CE;AAN3C,AAOI,MAAO,AAAC5G,gDAAQ,iBAAA6G,WAAA;IAAAC,WAAuE,AAACE,qBAAWJ;AAAnF,AAAA,wHAAAC,SAAAC,+CAAAD,SAAAC,jLAACC,yDAAAA,4EAAAA;KAAV,2CAAA,mDACeN,WACNG;;AAGpBH;;;AAEJ,AAAAhE,kFAAA,0FAAA,WAAoDjE;AAApD,AACE,OAAC5C,6CAAK6G,sCAAcjE;;AAEtB,AAAAiE,kFAAA,wDAAA,WAAAwE;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAtR,4CAAAuR,WAAA,IAAA,/DAAkCxO;WAAlC,AAAA/C,4CAAAuR,WAAA,IAAA,lEAAoC7H;SAApC,AAAA1J,4CAAAuR,WAAA,IAAA,hEAAyCC;AAAzC,AAGE,IAAAC,aAAgB,sDAAA,mGAAA,vJAAI,EAAI,SAAA,RAAM/H,mBAAM,AAAC3I,qBAAK2I,4FACvBA,KAAK8H,8FACLA,GAAG9H;eAFtB,AAAA1J,4CAAAyR,WAAA,IAAA,tEAAO/H;aAAP,AAAA1J,4CAAAyR,WAAA,IAAA,pEAAYD;AAAZ,AAAA,0FAAA,wDAIG,AAAC1E,oEAAc0E,QACf,AAAC5D,6CAAqBlE;;AAE3B,AAAAoD,kFAAA,sDAAA,WAAA4E;AAAA,AAAA,IAAAC,aAAAD;WAAA,AAAA1R,4CAAA2R,WAAA,IAAA,lEACI1K;WADJ,AAAAjH,4CAAA2R,WAAA,IAAA,lEACSjI;YADT,AAAA1J,4CAAA2R,WAAA,IAAA,nEACclI;AADd,AAEE,IAAMC,WAAK,qEAAIA,xBAEA,6BAAA,2CAAA,+DAAA,+DAAA,uEAAA,sEAAA,uEAAA,1ZAACC,7CAGDiE;AALf,AAAA,0FAAA,sDAQUnE,MAAMC;;AAGlB,AAAAoD,kFAAA,wDAAA,WAAA8E;AAAA,AAAA,IAAAC,aAAAD;UAAA,AAAA5R,4CAAA6R,WAAA,IAAA,jEACIrJ;WADJ,AAAAxI,4CAAA6R,WAAA,IAAA,lEACQnI;WADR,AAAA1J,4CAAA6R,WAAA,IAAA,lEACapG;QADb,AAAAzL,4CAAA6R,WAAA,IAAA,/DACkBzG;aADlByG,TACyBpH;AADzB,AAAA,GAES,qEAAA,rEAACjI,6CAAE,AAACc,gBAAMmH;AAFnB;AAAA,AAAA,MAAA,KAAAe,MAAA;;;AAAA,0FAGGhD,IAAIkB,KAAK,AAACoD,oEAAcrB,MAAML;;AAEjC,AAAA0B,kFAAA,uHAAA,WAAAgF;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAA1R,cAAAyR;IAAAE,eAAA,AAAApQ,gBAAAmQ;IAAAA,iBAAA,AAAAjN,eAAAiN;UAAAC,NACIzJ;IADJyJ,mBAAA,AAAApQ,gBAAAmQ;IAAAA,iBAAA,AAAAjN,eAAAiN;WAAAC,PACQvI;WADRsI,PACe5M;AADf,AAEE,GAAI,yBAAA,xBAAG,AAAC9B,gBAAM8B;AACZ,oDAAA,7CAACxE,gIAAM4H,IAAI,AAACmF,8DAAWjE,cAAO,AAAC5H,4CAAIgL,sCAAc1H;;AAEjD,IAAMsE,WAAK,AAACiE,8DAAWjE;AAAvB,AACE,IAAAwI,WAAQ,6CAAA,7CAACtR,gIAAM4H,YAAK,AAAC1G,4CAAIgL,sCAAc1H;AAAvC,AAAA,GACE,AAAC9E,cAAIoJ;AAAM,oDAAAwI,7CAACzP,sDAAKiH;;AADnBwI;;;;AAGN,iEAAA,jEAAOC,0IACJrJ,EAAEsJ,UAAUC;AADf,AAEE,IAAAC,WAAQxJ;IAARwJ,eAAA,iTAAAA,/SACE,uHAAA,vHAAC9P,6CAAE,AAACc,gBAAM,AAACa,4CAAI2E,EAAEsJ,kBAAe,0DAAAE,1DAAChK,mEAAkB8J,UAAU,AAACxQ,6CAAKkL,sCAAcjL;IADnFyQ,eAAA,EAEE,6EAAA,5EAAG,AAAChP,gBAAM,AAACa,4CAAI2E,EAAEsJ,oBAAe,0DAAAE,uBAAA,WAAAC,5FAACjK,uEAAkB8J;AAAnB,AAA8B,oDAAA,mFAAA,8IAAAG,9QAAC3R,2LAAY,AAACkB,4CAAIgL;IAFlFwF;AAAA,AAAA,AAGU,+BAAAA,aAAA,rCAAC3I,qFAAiByI,UAAUC;;;AAExC,AAAAvF,kFAAA,4DAAA,WAAqC5G;AAArC,AACE,IAAMsM,OAAK,iBAAAC,WAAQ,AAAC9E,8DAAWzH;AAApB,AAAA,GACE,AAACkH,kCAAiB,AAAA,sFAAQlH,MAAMN;AAA2B,sDAAA6M,SAAA,xDAACxR;;AAD9DwR;;;AAAX,AAEE,OAACzH,mLAAUwH,tDACA,2DAAA,2GAAA,tKAACvR,tBACD,AAACsH,oQAAYuE,4HACb0F,tBACA,2BAAA,mFAAA,9GAACE,/DACD,wPAAA,kEAAA,1TAACP,0XACL,AAAC/B,kCAAaoC;;AAEzB;;;2DAAA,3DAAOG,8HAEJtM;AAFH,AAGE,IAAA7E,qBAAwB,AAAA,kGAAc6E;AAAtC,AAAA,oBAAA7E;AAAA,qBAAAA,jBAASoR;AAAT,oGACMvM,/CACA,qDAAA,rDAACpF,rDACD,+KAAA,xKAACP,6OAAoB,CAAA,qDAAckS;;AACvCvM;;;AAEJ,AAAAyG,kFAAA,wEAAA,WACGzG;AADH,AAEE,OAAAE,sJAAA,xGAA4C,AAAA,iGAAcF;AAA1D,AACE,sDAAA,WAAAwM,iBAAAC,3EAACnQ;AAAD,AAAS,iEAAAkQ,iBAAAC,3EAACxK,4FAAwBwE;6SACtBzG,9DACAsH,zDACAgF,1DACA,0DAAA,yDAAA,sEAAA,mEAAA,WAAAI,vQAACzK,1DACD,AAACA,/DAYD,AAAC6J;AAbD,AAAiC,qGAAAY,9FAAC9M,6CAAKiI;IACvC,kEAAgC,WAAKvG;AAAL,AACE,oDAAA,7CAAC/G,gFACK,iBAAAoS,qBAAA,2CAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAnH,qBAAA,AAAAxL,cAAA2S;AAAA,AAAA,GAAAnH;AAAA,AAAA,IAAAmH,eAAAnH;AAAA,AAAA,GAAA,AAAAC,6BAAAkH;AAAA,IAAAE,kBAi7DL,AAAAlH,sBAAAgH;IAj7DKG,qBAAA,AAAA9P,gBAAA6P;IAAAE,WAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAH;AAAA,iBAAA,AAAAI,eAAAL,gBAAAI,5CAAMO;AAAN,AAAA,IACYC,gBAAc,AAACjH,oEAAcgH;AADzC,AAAA,AAAA,AAAAL,uBAAAJ,SAAA,mFAEG,AAACW,kCAAyBF,YAK1B,kBAAI,iBAAAG,WAAgC,AAACpS,gBAAMkS;IAAvCG,eAAA,iFAAA,2DAAA;AAAA,AAAA,QAAAA,6CAAAA,2CAAAD,YAAAC,uBAAAD;MACF,AAACI,iBAAON,eACRA;;AATL,eAAA,CAAAR,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,iCAAA,AAAA1H,qBAAA+G;;AAAA,OAAAS,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,iBAAA,AAAAxR,gBAAAoR,7BAAMa;AAAN,AAAA,IACYC,gBAAc,AAACjH,oEAAcgH;AADzC,AAAA,OAAA/E,eAAA,mFAEG,AAACiF,kCAAyBF,YAK1B,kBAAI,iBAAAK,WAAgC,AAACtS,gBAAMkS;IAAvCK,eAAA,iFAAA,2DAAA;AAAA,AAAA,QAAAA,6CAAAA,2CAAAD,YAAAC,uBAAAD;6DAPP,AAAAP,iCAAA,AAAAC,eAAAZ,vGAQK,AAACoB,iBAAON,eACRA;;;AATL;;;;GAAA,KAAA;;AAAA,AAAA,OAAAf,mBAAiBrL;;IAUzD,0DAAA,0DACJ,oFAAA,qHAAA,0DAAA,nQAACS,oDAAKlH;;;AAElB,AAAA4L,kFAAA,2EAAA,WAA6CzG;AAA7C,2FACMA,9DACAsH,7BACA,6BAAA,tBAACpF,2FAAYuE;;AAEnB,AAAAA,kFAAA,+DAAA,WAAsCnH;AAAtC,AACE,IAAA,AACE,IAAM6M,OAAY,AAAC7E,8DAAWhI;IACxB4O,aAAY,AAAA,gGAAa/B;IACzB7F,cAAY,AAACyD,kCAAaoC;IAC1BgC,aAAY,mUAAA,yDAAA,/IAAQ7O,tGAAc8O,rIAAe,6CAAA,AAAA,wFAAA,eAAA,AAAA,gGAAA,pPAACjS;AAHxD,AAME,OAACwI,uGAAM,2DAAA,2GAAA,kEAAA,xOAAC/J,sDAAOuR,8QACR,iBAAAkC,WAAA,gDAAA,qDAAeF,WAAWA,WAAW7H;AAArC,AAAA,GACE,AAACrM,cAAIiU;AAAY,qDAAAG,SAAA,vDAAChU,yHAAkB6T;;AADtCG;;;gBARX,QAAAJ,JAU2CrD;AAV3C,AAWI,MAAO,AAAC5G,gDAAQ,iBAAAsK,WAAA;IAAAC,WAAmE,AAACvD,qBAAWJ;AAA/E,AAAA,wHAAA0D,SAAAC,+CAAAD,SAAAC,jLAACxD,yDAAAA,4EAAAA;KAAV,2CAAA,wDACiBzL,cACRsL;;AAItB;;;;;;;;;4CAAA,5CAAS4D;;8DAGLlP,MAAMmP;AAHV,AAIG,gKAAA,6EAAA,rOAACD,0EAAAA,iGAAAA,zBAAkBlP,6EAAAA,lEAASmP,6EAAAA;;8DAE3BnP,MACAoP,aACAD;AARJ,AASG,IAAMA,wEAA0D,uHAAA,2EAAA,lMAACG,0DAAQH,jHAClC,kDAAA,lDAACI;IADxCF,aAEkC,AAACG,8BAAqBxP,MAAMoP;IAF9DC,iBAAA,AAAAjO,4BAAAiO;mBAAA,AAAA7Q,4CAAA6Q,eAAA,1EAEOxO;AAFP,AAGE,OAAAD,2DAAA,bAAuBC;AAAvB,AACE,IAAA,AACE,OAACjC,8DAAQuQ;gBADX,QAAAM,JAE2CnE;AAF3C,AAGI,MAAO,AAAC5G,gDAAQ,iBAAAgL,WAAA;IAAAC,WAA4D,AAACjE,qBAAWJ;AAAxE,AAAA,wHAAAoE,SAAAC,+CAAAD,SAAAC,jLAAClE,yDAAAA,4EAAAA;KAAV,2CAAA,8DAAA,mFAAA,gFAAA,zKACoCzL,4EACAoP,8EACAD,4GACApV,qEAC3BuR;;;qDAfvBtL,MACAoP,aACAD;;;8DAFAnP,MACAoP;;8DADApP,MACAoP,aACAD;;;;;;;;;AAeJ,iCAAA,jCAAOS,0EAAWC;AAAlB,AACW,GAAI,AAACC,wBAAQD;AACX,kIAAA,2EAAA,tMAACP,0DAAQO;;AACTA;;;AAGb;;;;;;iDAAA,jDAAME,0GAKHC;AALH,AAME,IAAMC,UAAQ,AAACL,+BAAUI;AAAzB,AACE,GAAI,8IAAA,9IAACnT,6CAAE,AAAA,wFAAWoT;AAChB,OAAC3M,+DAAwB2M;;AACzB,qEAAA,mGAAIA,1DAAQ,kEAAA,qDAAA,vHAACC,zCAA8BC,9DAAyBvR;;;AAE1E;;;;;;uDAAA,vDAAMwR,sHAKHpJ;AALH,AAME,sDAAA,2CAAA,qDAAA,wDAAA,vMAAC+I,+PAC+B,AAACH,+BAAU5I","names":["metabase.lib.convert/*pMBQL-uuid->legacy-index*","metabase.lib.convert/*legacy-index->pMBQL-uuid*","metabase.lib.convert/clean-location","almost-stage","error-type","error-location","vec__77166","cljs.core.nth","operate-on-parent?","location","cljs.core.drop_last","location-key","cljs.core/take-last","cljs.core/seq","cljs.core.update_in","error-loc","result","cljs.core.assoc","cljs.core/vector?","cljs.core.into","cljs.core.remove","cljs.core/nil?","cljs.core/map?","metabase.util/remove-nils","cljs.core.dissoc","metabase.lib.convert/stage-keys","metabase.lib.convert/clean-stage-schema-errors","*suppress-expression-type-check?*-orig-val__77181","*suppress-expression-type-check?*-temp-val__77182","metabase.lib.schema.expression/*suppress-expression-type-check?*","removals","temp__5802__auto__","vec__77186","metabase.util.malli.registry/explain","cljs.core.filter","cljs.core.comp","cljs.core/first","cljs.core.map","cljs.core.juxt","new-stage","error-desc","cljs.core.pr_str","or__5002__auto__","malli.error.humanize","js/console.warn","metabase.util.pprint_to_str","clojure.data/diff","cljs.core._EQ_","cljs.core.conj","metabase.lib.convert/clean-stage-ref-errors","cljs.core.reduce","p__77189","vec__77190","loc","_","metabase.lib.schema/ref-errors-for-stage","metabase.lib.convert/clean-stage","metabase.lib.convert/clean","almost-query","stage-index","current-stage","cljs.core/count","cljs.core.update","cljs.core/assoc","js/metabase","js/metabase.lib","js/metabase.lib.convert","js/metabase.lib.convert.->pMBQL","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","cljs.core.get","fexpr__77199","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.convert/->pMBQL","metabase.lib.dispatch/dispatch-value","metabase.lib.hierarchy/hierarchy","metabase.lib.convert/default-MBQL-clause->pMBQL","mbql-clause","vec__77200","seq__77201","first__77202","cljs.core/next","last-elem","cljs.core/peek","last-elem-option?","clause-type","args","G__77203","cljs.core/pop","options","metabase.lib.options/ensure-uuid","x","cljs.core/Keyword","query","metabase.lib.convert/legacy-default-join-alias","metabase.lib.convert/deduplicate-join-aliases","joins","unique-name-fn","metabase.lib.util.unique_name_generator","cljs.core.mapv","join","G__77204","metabase.lib.convert/stage-source-card-id->pMBQL","stage","metabase.lib.util/legacy-string-table-id->card-id","metabase.lib.convert/do-with-aggregation-list","aggregations","thunk","legacy->pMBQL","cljs.core.map_indexed","p__77208","vec__77209","map__77212","cljs.core/--destructure-map","idx","_tag","ag-uuid","pMBQL->legacy","p__77213","vec__77214","map__77217","*legacy-index->pMBQL-uuid*-orig-val__77218","*pMBQL-uuid->legacy-index*-orig-val__77219","*legacy-index->pMBQL-uuid*-temp-val__77220","*pMBQL-uuid->legacy-index*-temp-val__77221","expressions","p__77222","vec__77223","k","v","metabase.lib.util/top-level-expression-clause","cljs.core/not-empty","medley.core.assoc_some","cljs.core/not","cljs.core.disj","G__77226","medley.core.update_existing","cljs.core/update-vals","tag","G__77227","fields","cljs.core/sequential?","cljs.core.keyword","xs","m","metabase.lib.util/pipeline","stages","metabase.lib.normalize.normalize","p__77228","vec__77229","y","vec__77232","id-or-name","p__77235","vec__77236","value","opts","clojure.set/rename-keys","metabase.lib.schema.expression/type-of","p__77239","vec__77240","pred-expr-pairs","default","G__77243","p__77244","vec__77245","metabase.lib.convert/get-or-throw!","cljs.core.ex_info","p__77248","vec__77249","aggregation-index","clause","p__77252","vec__77253","aggregation","vec__77256","seq__77257","first__77258","cljs.core.merge","p__77259","vec__77260","field","n","unit","p__77263","vec__77265","js/Error","expr","seq__77268","chunk__77269","count__77270","i__77271","temp__5804__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","metabase.lib.hierarchy/derive","p__77272","vec__77273","seq__77274","first__77275","vec__77276","metabase.lib.convert/legacy-query-from-inner-query","database-id","inner-query","js/metabase.lib.convert.->legacy-MBQL","fexpr__77279","metabase.lib.convert/->legacy-MBQL","metabase.lib.convert/metabase-lib-keyword?","and__5000__auto__","cljs.core/qualified-keyword?","symb-namespace","cljs.core/namespace","clojure.string/starts-with?","var_args","G__77281","metabase.lib.convert/disqualify","p__77283","vec__77284","_v","metabase.lib.convert.disqualify","metabase.lib.convert/options->legacy-MBQL","p__77293","vec__77294","cljs.core/contains?","js/metabase.lib.convert.aggregation->legacy-MBQL","fexpr__77299","metabase.lib.convert/aggregation->legacy-MBQL","p__77301","vec__77302","seq__77303","first__77304","inner","aggregation-opts","p__77309","vec__77310","seq__77311","first__77312","metabase.lib.convert/clause-with-options->legacy-MBQL","cljs.core.concat","cljs.core/cons","seq__77313","chunk__77314","count__77315","i__77316","seq__77322","chunk__77323","count__77324","i__77325","seq__77334","chunk__77335","count__77336","i__77337","input","metabase.lib.convert/stage-metadata->legacy-metadata","stage-metadata","p1__77346#","cljs.core/update-keys","metabase.util/->snake_case_en","p__77352","map__77353","metabase.lib.convert/chain-stages","p__77355","vec__77356","G__77359","G__77361","p__77368","vec__77369","p__77373","vec__77375","agg-uuid","ag","e77378","base-agg","e","G__77379","G__77380","metabase.lib.util/format","cljs.core/ex-message","p__77382","vec__77383","id","vec__77386","p__77405","vec__77407","p__77414","vec__77415","p__77422","vec__77424","seq__77425","first__77426","G__77438","metabase.lib.convert/update-list->legacy-boolean-expression","pMBQL-key","legacy-key","G__77450","p1__77448#","base","G__77463","cljs.core/select-keys","metabase.lib.convert/source-card->legacy-source-table","source-card-id","p1__77489#","p2__77490#","p1__77491#","iter__5480__auto__","s__77505","cljs.core/LazySeq","c__5478__auto__","size__5479__auto__","b__77507","cljs.core/chunk-buffer","i__77506","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__77504","cljs.core/rest","expression","legacy-clause","metabase.lib.util/expression-name","G__77524","fexpr__77523","G__77538","fexpr__77537","cljs.core/second","e77554","parameters","query-type","cljs.core/last","G__77567","G__77560","G__77561","metabase.lib.convert/legacy-ref->pMBQL","legacy-ref","stage-number","map__77575","cljs.core.js__GT_clj","metabase.legacy-mbql.normalize/normalize-fragment","metabase.lib.util/query-stage","e77580","G__77581","G__77582","metabase.lib.convert/from-json","query-fragment","cljs.core/object?","metabase.lib.convert/js-legacy-query->pMBQL","query-map","clj-map","metabase.util.assoc_default","metabase.legacy-mbql.normalize/normalize","metabase.lib.convert/js-legacy-inner-query->pMBQL"],"sourcesContent":["(ns metabase.lib.convert\n  (:require\n   [clojure.data :as data]\n   [clojure.set :as set]\n   [clojure.string :as str]\n   [malli.error :as me]\n   [medley.core :as m]\n   [metabase.legacy-mbql.normalize :as mbql.normalize]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.normalize :as lib.normalize]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.expression :as lib.schema.expression]\n   [metabase.lib.schema.ref :as lib.schema.ref]\n   [metabase.lib.util :as lib.util]\n   [metabase.util :as u]\n   [metabase.util.malli :as mu]\n   [metabase.util.malli.registry :as mr]\n   #?@(:clj ([metabase.util.log :as log])))\n  #?@(:cljs [(:require-macros [metabase.lib.convert :refer [with-aggregation-list]])]))\n\n(def ^:private ^:dynamic *pMBQL-uuid->legacy-index*\n  {})\n\n(def ^:private ^:dynamic *legacy-index->pMBQL-uuid*\n  {})\n\n(defn- clean-location [almost-stage error-type error-location]\n  (let [operate-on-parent? #{:malli.core/missing-key :malli.core/end-of-input}\n        location (if (operate-on-parent? error-type)\n                   (drop-last 2 error-location)\n                   (drop-last 1 error-location))\n        [location-key] (if (operate-on-parent? error-type)\n                         (take-last 2 error-location)\n                         (take-last 1 error-location))]\n    (if (seq location)\n      (update-in almost-stage\n                 location\n                 (fn [error-loc]\n                   (let [result (assoc error-loc location-key nil)]\n                     (cond\n                       (vector? error-loc) (into [] (remove nil?) result)\n                       (map? error-loc) (u/remove-nils result)\n                       :else result))))\n      (dissoc almost-stage location-key))))\n\n(def ^:private stage-keys\n  #{:aggregation :breakout :expressions :fields :filters :order-by :joins})\n\n(defn- clean-stage-schema-errors [almost-stage]\n  (binding [lib.schema.expression/*suppress-expression-type-check?* true]\n    (loop [almost-stage almost-stage\n           removals []]\n      (if-let [[error-type error-location] (->> (mr/explain ::lib.schema/stage.mbql almost-stage)\n                                                :errors\n                                                (filter (comp stage-keys first :in))\n                                                (map (juxt :type :in))\n                                                first)]\n        (let [new-stage  (clean-location almost-stage error-type error-location)\n              error-desc (pr-str (or error-type\n                                     ;; if `error-type` is missing, which seems to happen sometimes,\n                                     ;; fall back to humanizing the entire error.\n                                     (me/humanize (mr/explain ::lib.schema/stage.mbql almost-stage))))]\n          #?(:cljs (js/console.warn \"Clean: Removing bad clause due to error!\" error-location error-desc\n                                    (u/pprint-to-str (first (data/diff almost-stage new-stage))))\n             :clj  (log/warnf \"Clean: Removing bad clause in %s due to error %s:\\n%s\"\n                              (u/colorize :yellow (pr-str error-location))\n                              (u/colorize :yellow error-desc)\n                              (u/colorize :red (u/pprint-to-str (first (data/diff almost-stage new-stage))))))\n          (if (= new-stage almost-stage)\n            almost-stage\n            (recur new-stage (conj removals [error-type error-location]))))\n        almost-stage))))\n\n(defn- clean-stage-ref-errors [almost-stage]\n  (reduce (fn [almost-stage [loc _]]\n              (clean-location almost-stage ::lib.schema/invalid-ref loc))\n          almost-stage\n          (lib.schema/ref-errors-for-stage almost-stage)))\n\n(defn- clean-stage [almost-stage]\n  (-> almost-stage\n      clean-stage-schema-errors\n      clean-stage-ref-errors))\n\n(defn- clean [almost-query]\n  (loop [almost-query almost-query\n         stage-index 0]\n    (let [current-stage (nth (:stages almost-query) stage-index)\n          new-stage (clean-stage current-stage)]\n      (if (= current-stage new-stage)\n        (if (= stage-index (dec (count (:stages almost-query))))\n          almost-query\n          (recur almost-query (inc stage-index)))\n        (recur (update almost-query :stages assoc stage-index new-stage) stage-index)))))\n\n(defmulti ->pMBQL\n  \"Coerce something to pMBQL (the version of MBQL manipulated by Metabase Lib v2) if it's not already pMBQL.\"\n  {:arglists '([x])}\n  lib.dispatch/dispatch-value\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defn- default-MBQL-clause->pMBQL [mbql-clause]\n  (let [last-elem (peek mbql-clause)\n        last-elem-option? (map? last-elem)\n        [clause-type & args] (cond-> mbql-clause\n                               last-elem-option? pop)\n        options (if last-elem-option?\n                  last-elem\n                  {})]\n    (lib.options/ensure-uuid (into [clause-type options] (map ->pMBQL) args))))\n\n(defmethod ->pMBQL :default\n  [x]\n  (if (and (vector? x)\n           (keyword? (first x)))\n    (default-MBQL-clause->pMBQL x)\n    x))\n\n(defmethod ->pMBQL :mbql/query\n  [query]\n  query)\n\n(def legacy-default-join-alias\n  \"In legacy MBQL, join `:alias` was optional, and if unspecified, this was the default alias used. In reality all joins\n  normally had an explicit `:alias` since the QB would generate one and you generally need one to do useful things\n  with the join anyway.\n\n  Since the new pMBQL schema makes `:alias` required, we'll explicitly add the implicit default when we encounter a\n  join without an alias, and remove it so we can round-trip without changes.\"\n  \"__join\")\n\n(defn- deduplicate-join-aliases\n  \"Join `:alias`es had to be unique in legacy MBQL, but they were optional. Since we add [[legacy-default-join-alias]]\n  to each join that doesn't have an explicit `:alias` for pMBQL compatibility now, we need to deduplicate the aliases\n  if it is used more than once.\n\n  Only deduplicate the default `__join` aliases; we don't want the [[lib.util/unique-name-generator]] to touch other\n  aliases and truncate them or anything like that.\"\n  [joins]\n  (let [unique-name-fn (lib.util/unique-name-generator nil)]\n    (mapv (fn [join]\n            (cond-> join\n              (= (:alias join) legacy-default-join-alias) (update :alias unique-name-fn)))\n          joins)))\n\n(defn- stage-source-card-id->pMBQL\n  \"If a query `stage` has a legacy `card__<id>` `:source-table`, convert it to a pMBQL-style `:source-card`.\"\n  [stage]\n  (if (string? (:source-table stage))\n    (-> stage\n        (assoc :source-card (lib.util/legacy-string-table-id->card-id (:source-table stage)))\n        (dissoc :source-table))\n    stage))\n\n(defn do-with-aggregation-list\n  \"Impl for [[with-aggregation-list]].\"\n  [aggregations thunk]\n  (let [legacy->pMBQL (into {}\n                            (map-indexed (fn [idx [_tag {ag-uuid :lib/uuid}]]\n                                           [idx ag-uuid]))\n                            aggregations)\n        pMBQL->legacy (into {}\n                            (map-indexed (fn [idx [_tag {ag-uuid :lib/uuid}]]\n                                           [ag-uuid idx]))\n                            aggregations)]\n    (binding [*legacy-index->pMBQL-uuid* legacy->pMBQL\n              *pMBQL-uuid->legacy-index* pMBQL->legacy]\n      (thunk))))\n\n#?(:clj\n   (defmacro with-aggregation-list\n     \"Macro for capturing the context of a query stage's `:aggregation` list, so any legacy `[:aggregation 0]` indexed\n     refs can be converted correctly to UUID-based pMBQL refs.\"\n     [aggregations & body]\n     `(do-with-aggregation-list ~aggregations (fn [] ~@body))))\n\n(defmethod ->pMBQL :mbql.stage/mbql\n  [stage]\n  (let [aggregations (->pMBQL (:aggregation stage))\n        expressions  (->> stage\n                          :expressions\n                          (mapv (fn [[k v]]\n                                  (-> v\n                                      ->pMBQL\n                                      (lib.util/top-level-expression-clause k))))\n                          not-empty)]\n    (metabase.lib.convert/with-aggregation-list aggregations\n      (let [stage (-> stage\n                      stage-source-card-id->pMBQL\n                      (m/assoc-some :aggregation aggregations :expressions expressions))\n            stage (reduce\n                   (fn [stage k]\n                     (if-not (get stage k)\n                       stage\n                       (update stage k ->pMBQL)))\n                   stage\n                   (disj stage-keys :aggregation :expressions))]\n        (cond-> stage\n          (:joins stage) (update :joins deduplicate-join-aliases))))))\n\n(defmethod ->pMBQL :mbql.stage/native\n  [stage]\n  (m/update-existing stage :template-tags update-vals (fn [tag] (m/update-existing tag :dimension ->pMBQL))))\n\n(defmethod ->pMBQL :mbql/join\n  [join]\n  (let [join (-> join\n                 (update :conditions ->pMBQL)\n                 (update :stages ->pMBQL))]\n    (cond-> join\n      (:fields join) (update :fields (fn [fields]\n                                       (if (sequential? fields)\n                                         (mapv ->pMBQL fields)\n                                         (keyword fields))))\n      (not (:alias join)) (assoc :alias legacy-default-join-alias))))\n\n(defmethod ->pMBQL :dispatch-type/sequential\n  [xs]\n  (mapv ->pMBQL xs))\n\n(defmethod ->pMBQL :dispatch-type/map\n  [m]\n  (if (:type m)\n    (-> (lib.util/pipeline m)\n        (update :stages (fn [stages]\n                          (mapv ->pMBQL stages)))\n        lib.normalize/normalize\n        (assoc :lib.convert/converted? true)\n        clean)\n    (update-vals m ->pMBQL)))\n\n(defmethod ->pMBQL :field\n  [[_tag x y]]\n  (let [[id-or-name options] (if (map? x)\n                               [y x]\n                               [x y])]\n    (lib.options/ensure-uuid [:field options id-or-name])))\n\n(defmethod ->pMBQL :value\n  [[_tag value opts]]\n  ;; `:value` uses `:snake_case` keys in legacy MBQL for some insane reason (actually this was to match the shape of\n  ;; the keys in Field metadata), at least for the three type keys enumerated below.\n  ;; See [[metabase.legacy-mbql.schema/ValueTypeInfo]].\n  (let [opts (set/rename-keys opts {:base_type     :base-type\n                                    :semantic_type :semantic-type\n                                    :database_type :database-type})\n        ;; in pMBQL, `:effective-type` is a required key for `:value`. `:value` SHOULD have always had `:base-type`,\n        ;; but on the off chance it did not, get the type from value so the schema doesn't fail entirely.\n        opts (assoc opts :effective-type (or (:effective-type opts)\n                                             (:base-type opts)\n                                             (lib.schema.expression/type-of value)))]\n    (lib.options/ensure-uuid [:value opts value])))\n\n(defmethod ->pMBQL :case\n  [[_tag pred-expr-pairs options]]\n  (let [default (:default options)]\n    (cond-> [:case (dissoc options :default) (mapv ->pMBQL pred-expr-pairs)]\n      :always lib.options/ensure-uuid\n      (some? default) (conj (->pMBQL default)))))\n\n(defmethod ->pMBQL :expression\n  [[tag value opts]]\n  (lib.options/ensure-uuid [tag opts value]))\n\n(defn- get-or-throw!\n  [m k]\n  (let [result (get m k ::not-found)]\n    (if-not (= result ::not-found)\n      result\n      (throw (ex-info (str \"Unable to find key \" (pr-str k) \" in map.\")\n                      {:m m\n                       :k k})))))\n\n(defmethod ->pMBQL :aggregation\n  [[tag aggregation-index opts, :as clause]]\n  (lib.options/ensure-uuid\n   [tag opts (or (get *legacy-index->pMBQL-uuid* aggregation-index)\n                 (throw (ex-info (str \"Error converting :aggregation reference: no aggregation at index \"\n                                      aggregation-index)\n                                 {:clause clause})))]))\n\n(defmethod ->pMBQL :aggregation-options\n  [[_tag aggregation options]]\n  (let [[tag opts & args] (->pMBQL aggregation)]\n    (into [tag (merge opts options)] args)))\n\n(defmethod ->pMBQL :time-interval\n  [[_tag field n unit options]]\n  (lib.options/ensure-uuid [:time-interval (or options {}) (->pMBQL field) n unit]))\n\n;; `:offset` is the same in legacy and pMBQL, but we need to update the expr it wraps.\n(defmethod ->pMBQL :offset\n  [[tag opts expr n, :as clause]]\n  {:pre [(= (count clause) 4)]}\n  [tag opts (->pMBQL expr) n])\n\n;; These four expressions have a different form depending on the number of arguments.\n(doseq [tag [:contains :starts-with :ends-with :does-not-contain]]\n  (lib.hierarchy/derive tag ::string-comparison))\n\n(defmethod ->pMBQL ::string-comparison\n  [[tag opts & args :as clause]]\n  (if (> (count args) 2)\n    ;; Multi-arg, pMBQL style: [tag {opts...} x y z ...]\n    (lib.options/ensure-uuid (into [tag opts] (map ->pMBQL args)))\n    ;; Two-arg, legacy style: [tag x y] or [tag x y opts].\n    (let [[tag x y opts] clause]\n      (lib.options/ensure-uuid [tag (or opts {}) (->pMBQL x) (->pMBQL y)]))))\n\n(defn legacy-query-from-inner-query\n  \"Convert a legacy 'inner query' to a full legacy 'outer query' so you can pass it to stuff\n  like [[metabase.legacy-mbql.normalize/normalize]], and then probably to [[->pMBQL]].\"\n  [database-id inner-query]\n  (merge {:database database-id, :type :query}\n         (if (:native inner-query)\n           {:native (set/rename-keys inner-query {:native :query})}\n           {:query inner-query})))\n\n(defmulti ->legacy-MBQL\n  \"Coerce something to legacy MBQL (the version of MBQL understood by the query processor and Metabase Lib v1) if it's\n  not already legacy MBQL.\"\n  {:arglists '([x])}\n  lib.dispatch/dispatch-value\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defn- metabase-lib-keyword?\n  \"Does keyword `k` have a`:lib/` or a `:metabase.lib.*/` namespace?\"\n  [k]\n  (and (qualified-keyword? k)\n       (when-let [symb-namespace (namespace k)]\n         (or (= symb-namespace \"lib\")\n             (str/starts-with? symb-namespace \"metabase.lib.\")))))\n\n(defn- disqualify\n  \"Remove any keys starting with the `:lib/` `:metabase.lib.*/` namespaces from map `m`.\n\n  No args = return transducer to remove keys from a map. One arg = update a map `m`.\"\n  ([]\n   (remove (fn [[k _v]]\n             (metabase-lib-keyword? k))))\n  ([m]\n   (into {} (disqualify) m)))\n\n(defn- options->legacy-MBQL\n  \"Convert an options map in an MBQL clause to the equivalent shape for legacy MBQL. Remove `:lib/*` keys and\n  `:effective-type`, which is not used in options maps in legacy MBQL.\"\n  [m]\n  (not-empty\n   (into {}\n         (comp (disqualify)\n               (remove (fn [[k _v]]\n                         (= k :effective-type))))\n         ;; Following construct ensures that transformation mbql -> pmbql -> mbql, does not add base-type where those\n         ;; were not present originally. Base types are adeed in [[metabase.lib.query/add-types-to-fields]].\n         (if (contains? m :metabase.lib.query/transformation-added-base-type)\n           (dissoc m\n                   :metabase.lib.query/transformation-added-base-type\n                   :base-type)\n           m))))\n\n(defmulti ^:private aggregation->legacy-MBQL\n  {:arglists '([aggregation-clause])}\n  lib.dispatch/dispatch-value\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod aggregation->legacy-MBQL :default\n  [[tag options & args]]\n  (let [inner (into [tag] (map ->legacy-MBQL) args)\n        ;; the default value of the :case expression is in the options\n        ;; in legacy MBQL\n        inner (if (and (= tag :case) (next args))\n                (conj (pop inner) {:default (peek inner)})\n                inner)]\n    (if-let [aggregation-opts (not-empty (options->legacy-MBQL options))]\n      [:aggregation-options inner aggregation-opts]\n      inner)))\n\n(defmethod aggregation->legacy-MBQL :offset\n  [clause]\n  (->legacy-MBQL clause))\n\n(defn- clause-with-options->legacy-MBQL [[k options & args]]\n  (if (map? options)\n    (into [k] (concat (map ->legacy-MBQL args)\n                      (when-let [options (options->legacy-MBQL options)]\n                        [options])))\n    (into [k] (map ->legacy-MBQL (cons options args)))))\n\n(defmethod ->legacy-MBQL :default\n  [x]\n  (cond\n    (and (vector? x)\n         (keyword? (first x))) (clause-with-options->legacy-MBQL x)\n    (map? x)                   (-> x\n                                   disqualify\n                                   (update-vals ->legacy-MBQL))\n    :else x))\n\n(doseq [tag [::aggregation ::expression]]\n  (lib.hierarchy/derive tag ::aggregation-or-expression))\n\n(doseq [tag [:count :avg :count-where :distinct\n             :max :median :min :percentile\n             :share :stddev :sum :sum-where]]\n  (lib.hierarchy/derive tag ::aggregation))\n\n(doseq [tag [:+ :- :* :/\n             :case :coalesce\n             :abs :log :exp :sqrt :ceil :floor :round :power :interval\n             :relative-datetime :time :absolute-datetime :now :convert-timezone\n             :get-week :get-year :get-month :get-day :get-hour\n             :get-minute :get-second :get-quarter\n             :datetime-add :datetime-subtract\n             :concat :substring :replace :regexextract :regex-match-first\n             :length :trim :ltrim :rtrim :upper :lower]]\n  (lib.hierarchy/derive tag ::expression))\n\n(defmethod ->legacy-MBQL ::aggregation-or-expression\n  [input]\n  (aggregation->legacy-MBQL input))\n\n(defn- stage-metadata->legacy-metadata [stage-metadata]\n  (into []\n        (comp (map #(update-keys % u/->snake_case_en))\n              (map ->legacy-MBQL))\n        (:columns stage-metadata)))\n\n(mu/defn ^:private chain-stages [{:keys [stages]} :- [:map [:stages [:sequential :map]]]]\n  ;; :source-metadata aka :lib/stage-metadata is handled differently in the two formats.\n  ;; In legacy, an inner query might have both :source-query, and :source-metadata giving the metadata for that nested\n  ;; :source-query.\n  ;; In pMBQL, the :lib/stage-metadata is attached to the same stage it applies to.\n  ;; So when chaining pMBQL stages back into legacy form, if stage n has :lib/stage-metadata, stage n+1 needs\n  ;; :source-metadata attached.\n  (let [inner-query (first (reduce (fn [[inner stage-metadata] stage]\n                                     [(cond-> (->legacy-MBQL stage)\n                                        inner          (assoc :source-query inner)\n                                        stage-metadata (assoc :source-metadata (stage-metadata->legacy-metadata stage-metadata)))\n                                      ;; Get the :lib/stage-metadata off the original pMBQL stage, not the converted one.\n                                      (:lib/stage-metadata stage)])\n                                   nil\n                                   stages))]\n    (cond-> inner-query\n      ;; If this is a native query, inner query will be used like: `{:type :native :native #_inner-query {:query ...}}`\n      (:native inner-query) (set/rename-keys {:native :query}))))\n\n(defmethod ->legacy-MBQL :dispatch-type/map [m]\n  (into {}\n        (comp (disqualify)\n              (map (fn [[k v]]\n                     [k (->legacy-MBQL v)])))\n        m))\n\n(defmethod ->legacy-MBQL :aggregation [[_ opts agg-uuid :as ag]]\n  (if (map? opts)\n    (try\n      (let [opts     (options->legacy-MBQL opts)\n            base-agg [:aggregation (get-or-throw! *pMBQL-uuid->legacy-index* agg-uuid)]]\n        (if (seq opts)\n          (conj base-agg opts)\n          base-agg))\n      (catch #?(:clj Throwable :cljs :default) e\n        (throw (ex-info (lib.util/format \"Error converting aggregation reference to pMBQL: %s\" (ex-message e))\n                        {:ref ag}\n                        e))))\n    ;; Our conversion is a bit too aggressive and we're hitting legacy refs like [:aggregation 0] inside\n    ;; source_metadata that are only used for legacy and thus can be ignored\n    ag))\n\n(defmethod ->legacy-MBQL :dispatch-type/sequential [xs]\n  (mapv ->legacy-MBQL xs))\n\n(defmethod ->legacy-MBQL :field [[_ opts id]]\n  ;; Fields are not like the normal clauses - they need that options field even if it's null.\n  ;; TODO: Sometimes the given field is in the legacy order - that seems wrong.\n  (let [[opts id] (if (or (nil? opts) (map? opts))\n                    [opts id]\n                    [id opts])]\n    [:field\n     (->legacy-MBQL id)\n     (options->legacy-MBQL opts)]))\n\n(defmethod ->legacy-MBQL :value\n  [[_tag opts value]]\n  (let [opts (-> opts\n                 ;; as mentioned above, `:value` in legacy MBQL expects `snake_case` keys for type info keys.\n                 (set/rename-keys  {:base-type     :base_type\n                                    :semantic-type :semantic_type\n                                    :database-type :database_type})\n                 options->legacy-MBQL)]\n    ;; in legacy MBQL, `:value` has to be three args; `opts` has to be present, but it should can be `nil` if it is\n    ;; empty.\n    [:value value opts]))\n\n;; `:offset` is the same in legacy and pMBQL, but we need to update the expr it wraps.\n(defmethod ->legacy-MBQL :offset\n  [[tag opts expr n, :as clause]]\n  {:pre [(= (count clause) 4)]}\n  [tag opts (->legacy-MBQL expr) n])\n\n(defmethod ->legacy-MBQL ::string-comparison\n  [[tag opts & args]]\n  (if (> (count args) 2)\n    (into [tag (disqualify opts)] (map ->legacy-MBQL args)) ; Multi-arg, pMBQL style: [tag {opts...} x y z ...]\n    ;; Two-arg, legacy style: [tag x y] or [tag x y opts].\n    (let [opts (disqualify opts)]\n      (cond-> (into [tag] (map ->legacy-MBQL args))\n        (seq opts) (conj opts)))))\n\n(defn- update-list->legacy-boolean-expression\n  [m pMBQL-key legacy-key]\n  (cond-> m\n    (= (count (get m pMBQL-key)) 1) (m/update-existing pMBQL-key (comp ->legacy-MBQL first))\n    (> (count (get m pMBQL-key)) 1) (m/update-existing pMBQL-key #(into [:and] (map ->legacy-MBQL) %))\n    :always (set/rename-keys {pMBQL-key legacy-key})))\n\n(defmethod ->legacy-MBQL :mbql/join [join]\n  (let [base (cond-> (disqualify join)\n               (str/starts-with? (:alias join) legacy-default-join-alias) (dissoc :alias))]\n    (merge (-> base\n               (dissoc :stages :conditions)\n               (update-vals ->legacy-MBQL))\n           (-> base\n               (select-keys [:conditions])\n               (update-list->legacy-boolean-expression :conditions :condition))\n           (chain-stages base))))\n\n(defn- source-card->legacy-source-table\n  \"If a pMBQL query stage has `:source-card` convert it to legacy-style `:source-table \\\"card__<id>\\\"`.\"\n  [stage]\n  (if-let [source-card-id (:source-card stage)]\n    (-> stage\n        (dissoc :source-card)\n        (assoc :source-table (str \"card__\" source-card-id)))\n    stage))\n\n(defmethod ->legacy-MBQL :mbql.stage/mbql\n  [stage]\n  (metabase.lib.convert/with-aggregation-list (:aggregation stage)\n    (reduce #(m/update-existing %1 %2 ->legacy-MBQL)\n            (-> stage\n                disqualify\n                source-card->legacy-source-table\n                (m/update-existing :aggregation #(mapv aggregation->legacy-MBQL %))\n                (m/update-existing :expressions (fn [expressions]\n                                                  (into {}\n                                                        (for [expression expressions\n                                                              :let [legacy-clause (->legacy-MBQL expression)]]\n                                                          [(lib.util/expression-name expression)\n                                                           ;; We wrap literals in :value ->pMBQL so unwrap this\n                                                           ;; direction. Also, `:aggregation-options` is not allowed\n                                                           ;; inside `:expressions` in legacy, we'll just have to toss\n                                                           ;; the extra info.\n                                                           (if (#{:value :aggregation-options} (first legacy-clause))\n                                                             (second legacy-clause)\n                                                             legacy-clause)]))))\n                (update-list->legacy-boolean-expression :filters :filter))\n            (disj stage-keys :aggregation :filters :expressions))))\n\n(defmethod ->legacy-MBQL :mbql.stage/native [stage]\n  (-> stage\n      disqualify\n      (update-vals ->legacy-MBQL)))\n\n(defmethod ->legacy-MBQL :mbql/query [query]\n  (try\n    (let [base        (disqualify query)\n          parameters  (:parameters base)\n          inner-query (chain-stages base)\n          query-type  (if (-> query :stages last :lib/type (= :mbql.stage/native))\n                        :native\n                        :query)]\n      (merge (dissoc base :stages :parameters :lib.convert/converted?)\n             (cond-> {:type query-type query-type inner-query}\n               (seq parameters) (assoc :parameters parameters))))\n    (catch #?(:clj Throwable :cljs :default) e\n      (throw (ex-info (lib.util/format \"Error converting MLv2 query to legacy query: %s\" (ex-message e))\n                      {:query query}\n                      e)))))\n\n;; TODO: Look into whether this function can be refactored away - it's called from several places but I (Braden) think\n;; legacy refs shouldn't make it out of `lib.js`.\n(mu/defn legacy-ref->pMBQL :- ::lib.schema.ref/ref\n  \"Convert a legacy MBQL `:field`/`:aggregation`/`:expression` reference to pMBQL. Normalizes the reference if needed,\n  and handles JS -> Clj conversion as needed.\"\n  ([query legacy-ref]\n   (legacy-ref->pMBQL query -1 legacy-ref))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    legacy-ref   :- some?]\n   (let [legacy-ref                  (->> #?(:clj legacy-ref :cljs (js->clj legacy-ref :keywordize-keys true))\n                                          (mbql.normalize/normalize-fragment nil))\n         {aggregations :aggregation} (lib.util/query-stage query stage-number)]\n     (with-aggregation-list aggregations\n       (try\n         (->pMBQL legacy-ref)\n         (catch #?(:clj Throwable :cljs :default) e\n           (throw (ex-info (lib.util/format \"Error converting legacy ref to pMBQL: %s\" (ex-message e))\n                           {:query                    query\n                            :stage-number             stage-number\n                            :legacy-ref               legacy-ref\n                            :legacy-index->pMBQL-uuid *legacy-index->pMBQL-uuid*}\n                           e))))))))\n\n(defn- from-json [query-fragment]\n  #?(:cljs (if (object? query-fragment)\n             (js->clj query-fragment :keywordize-keys true)\n             query-fragment)\n     :clj  query-fragment))\n\n(defn js-legacy-query->pMBQL\n  \"Given a JSON-formatted legacy MBQL query, transform it to pMBQL.\n\n  If you have only the inner query map (`{:source-table 2 ...}` or similar), call [[js-legacy-inner-query->pMBQL]]\n  instead.\"\n  [query-map]\n  (let [clj-map (from-json query-map)]\n    (if (= (:lib/type clj-map) \"mbql/query\")\n      (lib.normalize/normalize clj-map)\n      (-> clj-map (u/assoc-default :type :query) mbql.normalize/normalize ->pMBQL))))\n\n(defn js-legacy-inner-query->pMBQL\n  \"Given a JSON-formatted *inner* query, transform it to pMBQL.\n\n  If you have a complete legacy query (`{:type :query, :query {...}}` or similar), call [[js-legacy-query->pMBQL]]\n  instead.\"\n  [inner-query]\n  (js-legacy-query->pMBQL {:type  :query\n                           :query (from-json inner-query)}))\n"]}