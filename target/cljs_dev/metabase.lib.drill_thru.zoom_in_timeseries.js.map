{"version":3,"sources":["metabase/lib/drill_thru/zoom_in_timeseries.cljc"],"mappings":"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","names":["metabase.lib.drill-thru.zoom-in-timeseries/valid-current-units","metabase.lib.drill-thru.zoom-in-timeseries/unit->next-unit","cljs.core/zipmap","cljs.core.drop_last","cljs.core.drop","metabase.lib.drill-thru.zoom-in-timeseries/matching-breakout-dimension","query","stage-number","dimensions","cljs.core/first","iter__5480__auto__","s__79476","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","iterys__5476__auto__","s__79478","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__79480","cljs.core/chunk-buffer","i__79479","map__79488","cljs.core/-nth","cljs.core/--destructure-map","cljs.core.get","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__79477","cljs.core/chunk-rest","map__79494","cljs.core/cons","cljs.core/rest","fs__5477__auto__","cljs.core.concat","iter__79475","breakout","metabase.lib.breakout.breakouts","and__5000__auto__","metabase.lib.util/clause-of-type?","metabase.lib.temporal-bucket/temporal-bucket","column","dimension","metabase.lib.equality.find_matching_column","cljs.core._EQ_","cljs.core.assoc","metabase.lib.drill-thru.zoom-in-timeseries/next-breakout-unit","current-unit","metabase.lib.temporal-bucket/raw-temporal-bucket","cljs.core/contains?","cljs.core/set","metabase.lib.drill-thru.zoom-in-timeseries/describe-next-unit","unit","G__79508","cljs.core/Keyword","js/Error","metabase.shared.util.i18n/js-i18n","p__79512","map__79513","metabase.lib.drill-thru.zoom-in-timeseries/zoom-in-timeseries-drill","_context","metabase.lib.drill-thru.common/mbql-stage?","cljs.core/not-empty","map__79514","value","next-unit","metabase.lib.drill-thru.common/drill-thru-method","p__79516","map__79517","map__79518","old-breakout","new-breakout","metabase.lib.temporal-bucket/with-temporal-bucket","metabase.lib.filter.filter","metabase.lib.filter/=","metabase.lib.remove_replace.replace_clause","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.lib.drill-thru.zoom-in-timeseries\n  \"\\\"See this month by weeks\\\" type of transform.\n\n  Entry points:\n\n  - Cell\n\n  - Pivot cell\n\n  - Legend item\n\n  Requirements:\n\n  - `dimensions` have a date column with `year`, `quarter`, `month`, `week`, `day`, `hour` temporal unit. For other\n    units, or when there is no temporal bucketing this drill cannot be applied. Changing `hour` to `minute` ends the\n    sequence. Only the first matching column would be used in query transformation.\n\n  - `displayInfo` returns `displayName` with `See this {0} by {1}` string using the current and the next available\n    temporal unit.\n\n  Query transformation:\n\n  - Remove breakouts for `dimensions`. Please note that with regular cells and pivot cells it would mean removing all\n    breakouts; but with legend item clicks it would remove the breakout for the legend item column only.\n\n  - Add a filter based on columns and values from `dimensions`. Take temporal units and binning strategies into\n    account\n    https://github.com/metabase/metabase/blob/0624d8d0933f577cc70c03948f4b57f73fe13ada/frontend/src/metabase-lib/queries/utils/actions.js#L99\n\n  - Add a breakout based on the date column (from requirements), using the next (more granular) temporal unit.\n\n  Question transformation:\n\n  - Set default display\"\n  (:require\n   [metabase.lib.breakout :as lib.breakout]\n   [metabase.lib.drill-thru.common :as lib.drill-thru.common]\n   [metabase.lib.equality :as lib.equality]\n   [metabase.lib.filter :as lib.filter]\n   [metabase.lib.remove-replace :as lib.remove-replace]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.drill-thru :as lib.schema.drill-thru]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.lib.schema.temporal-bucketing :as lib.schema.temporal-bucketing]\n   [metabase.lib.temporal-bucket :as lib.temporal-bucket]\n   [metabase.lib.util :as lib.util]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util.malli :as mu]))\n\n;;; TODO -- we shouldn't include hour and minute for `:type/Date` columns.\n(def ^:private valid-current-units\n  [:year :quarter :month :week :day :hour :minute])\n\n(def ^:private unit->next-unit\n  (zipmap (drop-last valid-current-units)\n          (drop 1 valid-current-units)))\n\n(mu/defn ^:private matching-breakout-dimension :- [:maybe ::lib.schema.drill-thru/context.row.value]\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   dimensions   :- [:sequential ::lib.schema.drill-thru/context.row.value]]\n  (first (for [breakout (lib.breakout/breakouts query stage-number)\n               :when (and (lib.util/clause-of-type? breakout :field)\n                          (lib.temporal-bucket/temporal-bucket breakout))\n               {:keys [column] :as dimension} dimensions\n               :when (and (lib.equality/find-matching-column breakout [column])\n                          (= (lib.temporal-bucket/temporal-bucket breakout)\n                             (lib.temporal-bucket/temporal-bucket column)))]\n           (assoc dimension :column-ref breakout))))\n\n(mu/defn ^:private next-breakout-unit :- [:maybe ::lib.schema.temporal-bucketing/unit.date-time.truncate]\n  [column :- ::lib.schema.metadata/column]\n  (when-let [current-unit (lib.temporal-bucket/raw-temporal-bucket column)]\n    (when (contains? (set valid-current-units) current-unit)\n      (unit->next-unit current-unit))))\n\n(mu/defn ^:private describe-next-unit :- ::lib.schema.common/non-blank-string\n  [unit :- ::lib.schema.drill-thru/drill-thru.zoom-in.timeseries.next-unit]\n  (case unit\n    :quarter (i18n/tru \"See this year by quarter\")\n    :month   (i18n/tru \"See this quarter by month\")\n    :week    (i18n/tru \"See this month by week\")\n    :day     (i18n/tru \"See this week by day\")\n    :hour    (i18n/tru \"See this day by hour\")\n    :minute  (i18n/tru \"See this hour by minute\")))\n\n(mu/defn zoom-in-timeseries-drill :- [:maybe ::lib.schema.drill-thru/drill-thru.zoom-in.timeseries]\n  \"Zooms in on some window, showing it in finer detail.\n\n  For example: The month of a year, days or weeks of a quarter, smaller lat/long regions, etc.\n\n  This is different from the `:drill-thru/zoom` type, which is for showing the details of a single object.\"\n  [query                              :- ::lib.schema/query\n   stage-number                       :- :int\n   {:keys [dimensions], :as _context} :- ::lib.schema.drill-thru/context]\n  (when (and (lib.drill-thru.common/mbql-stage? query stage-number)\n             (not-empty dimensions))\n    (when-let [{:keys [value], :as dimension} (matching-breakout-dimension query stage-number dimensions)]\n      (when value\n        (when-let [next-unit (next-breakout-unit (:column dimension))]\n          {:lib/type     :metabase.lib.drill-thru/drill-thru\n           :display-name (describe-next-unit next-unit)\n           :type         :drill-thru/zoom-in.timeseries\n           :dimension    dimension\n           :next-unit    next-unit})))))\n\n(mu/defmethod lib.drill-thru.common/drill-thru-method :drill-thru/zoom-in.timeseries\n  [query                         :- ::lib.schema/query\n   stage-number                  :- :int\n   {:keys [dimension next-unit]} :- ::lib.schema.drill-thru/drill-thru.zoom-in.timeseries]\n  (let [{:keys [column value]} dimension\n        old-breakout           (:column-ref dimension)\n        new-breakout           (lib.temporal-bucket/with-temporal-bucket old-breakout next-unit)]\n    (-> query\n        (lib.filter/filter stage-number (lib.filter/= column value))\n        (lib.remove-replace/replace-clause stage-number old-breakout new-breakout))))\n"]}