{"version":3,"sources":["metabase/lib/stage.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,8BAAA,wEAAA,tGAACA;AACD,8BAAA,2EAAA,zGAACA;AAED,AAAAC,8FAAA,0FAAA,WACGC,OAAOC,cAAcC;AADxB,AAGE,MAAO,gDAAA,gHAAA,hKAACC;;AAGV;;;;;;;;;0DAAA,1DAASC,4HAINC,MACAC;AALH,AAME,OAACC,+CACA,WAAKF,UAAMC;AAAX,AACE,8KAAA,vKAACE,0EAA4BH,UACAC,iBACAG,iLACA,AAACC,iFAA0CL,UACAC,iBACA,AAACK,8BAAqBN,UAAMC;GACtGD,MACA,8CAAA,9CAACO,kDAAQ,AAACC,wCAA+BR,MAAMC;;AAElD;;;;;;;;;6CAAA,7CAAmBQ,kGAIhBT,MACAC;AALH,AAME,IAAAS,aAA4D,AAACJ,8BAAqBN,MAAMC;IAAxFS,iBAAA,AAAAC,4BAAAD;YAAAA,RAAqDK;iBAArD,AAAAH,4CAAAF,eAAA,xEAAOG;kBAAP,AAAAD,4CAAAF,eAAA,zEAAoCI;AAApC,AACE,IAAAE,mBAAI,AAAA,6IAAmBD;AAAvB,AAAA,oBAAAC;AAAAA;;AACI,IAAAC,qBAAoB,AAAA,4GAAqBF;AAAzC,AAAA,oBAAAE;AAAA,AAAA,eAAAA,XAAWC;AAAX,AACE,oBAAM,iBAAAF,uBAAI,wDAAA,xDAACG,6CAAEN;AAAP,AAAA,GAAAG;AAAAA;;AACIF;;;AADV,AAEE,IAAMM,cAAY,iBAAAC,WAAMR;IAANQ,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,mEAAAF;;;;AAAlB,AAGE,OAACG,oBACA,iBAAAC,qBAAA,mEAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAT,yBAAA,AAAAW,cAAAF;AAAA,AAAA,GAAAT;AAAA,AAAA,IAAAS,eAAAT;AAAA,AAAA,GAAA,AAAAY,6BAAAH;AAAA,IAAAI,kBAm5EoC,AAAAsM,sBAAA1M;IAn5EpCK,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,UAAA,AAAAK,eAAAN,gBAAAK,rCAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SACE,uGAAA,2CAAA,gLAAA,+LAAA,2CAAA,5iBAACa,0OAC2B,AAAA,mFAAOD,gGACP,AAAA,mFAAOA,aAClCA,6GACazB;;AALhB,eAAA,CAAAe,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,yDAAA,AAAAC,qBAAAf;;AAAA,OAAAY,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,UAAA,AAAAS,gBAAAhB,tBAAMmB;AAAN,AAAA,OAAAF,mpBAAA,AAAAH,yDAAA,AAAAI,eAAAlB,5sBACE,uGAAA,2CAAA,gLAAA,+LAAA,2CAAA,5iBAACoB,0OAC2B,AAAA,mFAAOD,gGACP,AAAA,mFAAOA,aAClCA,6GACazB;;;AALhB;;;;GAAA,KAAA;;AAAA,AAAA,OAAAK,mBAAU,AAAA,yFAAUP;;;AANzB;;;AADF;;;;AAcR;;;;uCAAA,vCAAmB6B,sFAChB/C,MACAC,aACA+C;AAHH,AAIE,OAACxB,oBACA,iBAAAC,qBAAA,6DAAAwB;AAAA,AAAA,YAAAtB,kBAAA,KAAA;AAAA,AAAA,IAAAsB,eAAAA;;AAAA,AAAA,IAAAhC,qBAAA,AAAAW,cAAAqB;AAAA,AAAA,GAAAhC;AAAA,AAAA,IAAAgC,eAAAhC;AAAA,AAAA,GAAA,AAAAY,6BAAAoB;AAAA,IAAAnB,kBAu4EgD,AAAAsM,sBAAAnL;IAv4EhDlB,qBAAA,AAAAC,gBAAAF;IAAAoB,WAAA,AAAAhB,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAoB,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAApB;AAAA,eAAA,AAAAK,eAAAN,gBAAAqB,1CAAME;AAAN,AAAA,AAAA,AAAAhB,uBAAAa,SACE,8DAAA,8DAAA,6HAAA,gSAAA,zhBAACK,qDAAMF,4RAE0B,AAAC,gDAAA,wFAAA,xIAACG,8LAAwCH,qGAC1C,iBAAAI,WAAgB,AAACE,qCAA4B3D,MAAMqD;AAAnD,AAAA,oGAAAI,qCAAAA,jIAACT,+CAAAA,yDAAAA;;;AAJpC,eAAA,CAAAG,WAAA;;;;AAAA;;;;;AAAA,OAAAb,qBAAA,AAAAC,gBAAAW,UAAA,AAAAE,mDAAA,AAAAX,qBAAAQ;;AAAA,OAAAX,qBAAA,AAAAC,gBAAAW,UAAA;;;AAAA,eAAA,AAAAR,gBAAAO,3BAAMI;AAAN,AAAA,OAAAV,eACE,8DAAA,8DAAA,6HAAA,gSAAA,zhBAACY,qDAAMF,4RAE0B,AAAC,gDAAA,wFAAA,xIAACG,8LAAwCH,qGAC1C,iBAAAK,WAAgB,AAACC,qCAA4B3D,MAAMqD;AAAnD,AAAA,oGAAAK,qCAAAA,jIAACV,+CAAAA,yDAAAA;WAJpC,AAAAI,mDAAA,AAAAR,eAAAK;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAxB,mBAAe,AAAC6B,uEAAgCtD,MAAMC;;;AAMzD;;;;0CAAA,1CAAmB2D,4FAChB5D,MACAC,aACA+C;AAHH,AAIE,OAACxB,oBACA,iBAAAC,qBAAA,gEAAAoC;AAAA,AAAA,YAAAlC,kBAAA,KAAA;AAAA,AAAA,IAAAkC,eAAAA;;AAAA,AAAA,IAAA5C,qBAAA,AAAAW,cAAAiC;AAAA,AAAA,GAAA5C;AAAA,AAAA,IAAA4C,eAAA5C;AAAA,AAAA,GAAA,AAAAY,6BAAAgC;AAAA,IAAA/B,kBA43EgD,AAAAsM,sBAAAvK;IA53EhD9B,qBAAA,AAAAC,gBAAAF;IAAAgC,WAAA,AAAA5B,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAgC,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAhC;AAAA,SAAA,AAAAK,eAAAN,gBAAAiC,pCAAME;AAAN,AAAA,AAAA,AAAA5B,uBAAAyB,SACE,wDAAA,8DAAA,mIAAA,+KAAA,xaAACP,qDAAMU,4RAE0B,AAAA,mFAAOA,+FACP,iBAAAE,WAAgB,AAAA,mFAAOF;AAAvB,AAAA,oGAAAE,qCAAAA,jIAACnB,+CAAAA,yDAAAA;;;AAJpC,eAAA,CAAAe,WAAA;;;;AAAA;;;;;AAAA,OAAAzB,qBAAA,AAAAC,gBAAAuB,UAAA,AAAAE,sDAAA,AAAAvB,qBAAAoB;;AAAA,OAAAvB,qBAAA,AAAAC,gBAAAuB,UAAA;;;AAAA,SAAA,AAAApB,gBAAAmB,rBAAMI;AAAN,AAAA,OAAAtB,eACE,wDAAA,8DAAA,mIAAA,+KAAA,xaAACY,qDAAMU,4RAE0B,AAAA,mFAAOA,+FACP,iBAAAG,WAAgB,AAAA,mFAAOH;AAAvB,AAAA,oGAAAG,qCAAAA,jIAACpB,+CAAAA,yDAAAA;WAJpC,AAAAgB,sDAAA,AAAApB,eAAAiB;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAApC,mBAAS,AAACyC,6EAAsClE,MAAMC;;;AAQzD;;;;oCAAA,pCAAmBoE,gFAChBrE,MACAC,aACA+C;AAHH,AAIE,IAAA/B,qBAA4B,AAACX,8BAAqBN,MAAMC;AAAxD,AAAA,oBAAAgB;AAAA,AAAA,IAAAqD,aAAArD;IAAAqD,iBAAA,AAAA3D,4BAAA2D;aAAA,AAAA1D,4CAAA0D,eAAA,pEAAYC;AAAZ,AACE,OAAC/C,oBACA,iBAAAC,qBAAA,0DAAA+C;AAAA,AAAA,YAAA7C,kBAAA,KAAA;AAAA,AAAA,IAAA6C,eAAAA;;AAAA,AAAA,IAAAvD,yBAAA,AAAAW,cAAA4C;AAAA,AAAA,GAAAvD;AAAA,AAAA,IAAAuD,eAAAvD;AAAA,AAAA,GAAA,AAAAY,6BAAA2C;AAAA,IAAA1C,kBA82E8C,AAAAsM,sBAAA5J;IA92E9CzC,qBAAA,AAAAC,gBAAAF;IAAA2C,WAAA,AAAAvC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAA2C,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA3C;AAAA,IAAA4C,aAAA,AAAAvC,eAAAN,gBAAA4C;UAAA,AAAAE,4CAAAD,WAAA,IAAA,jEAAOI;iBAAPJ,bAAeK;AAAf,AAAA,IAC4BC,SAAO,iBAAAC,WAAMH;IAANG,eAAA,EAAA,CAAAA,oBAAA5D,oBAAA,AAAA4D,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA,MAAA,KAAA3D,MAAA,CAAA,mEAAA2D;;;;IAMPhE,WAAS,AAACkE,yEAAkCpF,MAAMC,aAAa+E;AAP3F,AAAA,AAAA,AAAA3C,uBAAAoC,SAQE,8DAAA,uHAAA,iMAAA,tXAAClB,qDAAMrC,uEAC0B+D,iJACA,AAACI,4EAAqCrF,MAAMC,aAAaiB,qGACzD,iBAAAoE,WAAgB,AAAC3B,qCAA4B3D,MAAMkB;AAAnD,AAAA,oGAAAoE,qCAAAA,jIAACtC,+CAAAA,yDAAAA;;;AAXpC,eAAA,CAAA0B,WAAA;;;;AAAA;;;;;AAAA,OAAApC,qBAAA,AAAAC,gBAAAkC,UAAA,AAAAI,gDAAA,AAAApC,qBAAA+B;;AAAA,OAAAlC,qBAAA,AAAAC,gBAAAkC,UAAA;;;AAAA,IAAAK,aAAA,AAAApC,gBAAA8B;UAAA,AAAAI,4CAAAE,WAAA,IAAA,jEAAOC;iBAAPD,bAAeE;AAAf,AAAA,IAC4BC,SAAO,iBAAAE,WAAMJ;IAANI,eAAA,EAAA,CAAAA,oBAAA7D,oBAAA,AAAA6D,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA,MAAA,KAAA5D,MAAA,CAAA,mEAAA4D;;;;IAMPjE,WAAS,AAACkE,yEAAkCpF,MAAMC,aAAa+E;AAP3F,AAAA,OAAArC,eAQE,8DAAA,uHAAA,iMAAA,tXAACY,qDAAMrC,uEAC0B+D,iJACA,AAACI,4EAAqCrF,MAAMC,aAAaiB,qGACzD,iBAAAqE,WAAgB,AAAC5B,qCAA4B3D,MAAMkB;AAAnD,AAAA,oGAAAqE,qCAAAA,jIAACvC,+CAAAA,yDAAAA;WAXpC,AAAA6B,gDAAA,AAAAjC,eAAA4B;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAA/C,mBAA2B8C;;;AAF9B;;;AAeF;;;;qCAAA,rCAAmBiB,kFAChBxF,MACAC,aACA+C;AAHH,AAIE,OAACxB,oBACA,6CAAA,7CAACiE,8EACK,AAACC,+CAAO,WAAKC;AAAL,AACE,QAACA,kCAAAA,qEAAAA,rCAAE3F,iDAAAA,3CAAMC,iDAAAA,pCAAa+C,iDAAAA;IAFtC,mFAGOD,qCACAa;;AAEV;;;;;;;6CAAA,7CAAmBgC,kGAEhB5F,MACAC,aACA+C;AAJH,AAKE,IAAA/B,qBAAiC,AAAC6E,wCAA+B9F,MAAMC;AAAvE,AAAA,oBAAAgB;AAAA,AAAA,4BAAAA,xBAAW4E;AAAX,AACE,OAACrE,oBACA,iBAAAC,qBAAA,mEAAAsE;AAAA,AAAA,YAAApE,kBAAA,KAAA;AAAA,AAAA,IAAAoE,eAAAA;;AAAA,AAAA,IAAA9E,yBAAA,AAAAW,cAAAmE;AAAA,AAAA,GAAA9E;AAAA,AAAA,IAAA8E,eAAA9E;AAAA,AAAA,GAAA,AAAAY,6BAAAkE;AAAA,IAAAjE,kBA+0E8C,AAAAsM,sBAAArI;IA/0E9ChE,qBAAA,AAAAC,gBAAAF;IAAAkE,WAAA,AAAA9D,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAkE,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAlE;AAAA,UAAA,AAAAK,eAAAN,gBAAAmE,rCAAMpD;AAAN,AAAA,IAGYsD,eAAa,iBAAAnF,mBAAI,AAAC,gDAAA,2FAAA,3IAACwC,oOAA4DX;AAAlE,AAAA,oBAAA7B;AAAAA;;AACI,OAACqE,4EAAqCrF,MAAMC,aAAa4C;;;AAJtF,AAAA,AAAA,AAAAR,uBAAA2D,+DAKM,2GAAA,2CAAA,8DAAA,oFAAA,qGAAA,7YAAClD,uGACAD,yRAE2BsD,wGACA,CAACnD,+CAAAA,6DAAAA,hBAAemD,yCAAAA,uBAC3C,4KAAA,4OAAA,tYAAM,AAAA,oJAAyCtD,MAC7C,0BAAA,mFAAA,7GAACuD,sBAAYvD,73BAShB,+lCAAA,2JAAA,1vCAACwD;;AApBP,eAAA,CAAAJ,WAAA;;;;AAAA;;;;;AAAA,OAAA3D,qBAAA,AAAAC,gBAAAyD,UAAA,AAAAE,yDAAA,AAAAzD,qBAAAsD;;AAAA,OAAAzD,qBAAA,AAAAC,gBAAAyD,UAAA;;;AAAA,UAAA,AAAAtD,gBAAAqD,tBAAMlD;AAAN,AAAA,IAGYsD,eAAa,iBAAAnF,mBAAI,AAAC,gDAAA,2FAAA,3IAACwC,oOAA4DX;AAAlE,AAAA,oBAAA7B;AAAAA;;AACI,OAACqE,4EAAqCrF,MAAMC,aAAa4C;;;AAJtF,AAAA,OAAAF,g2CAAA,AAAAuD,yDAAA,AAAAtD,eAAAmD,n2CAKM,2GAAA,2CAAA,8DAAA,oFAAA,qGAAA,7YAACjD,uGACAD,yRAE2BsD,wGACA,CAACnD,+CAAAA,6DAAAA,hBAAemD,yCAAAA,uBAC3C,4KAAA,4OAAA,tYAAM,AAAA,oJAAyCtD,MAC7C,0BAAA,mFAAA,7GAACuD,sBAAYvD,73BAShB,+lCAAA,2JAAA,1vCAACwD;;;AApBP;;;;GAAA,KAAA;;AAAA,AAAA,OAAA5E,mBAAW,AAACpB,iFAA0CL,MACA6F,sBACA,AAACvF,8BAAqBN,MAAM6F;;;AAJrF;;;AAwBF;;;;;;;6CAAA,7CAAmBS,kGAEhBtG,MACAC,aACAsG,QACAC;AALH,AAME,oBAAMD;AAAN,AACE,IAAAtF,qBAAgB,AAACyF,2BAAkB1G,MAAMuG;AAAzC,AAAA,oBAAAtF;AAAA,AAAA,WAAAA,PAAWwF;AAAX,AACE,OAACjF,oBAAU,AAACmF,gFAAyC3G,MAAMC,aAAawG,KAAKD;;AAD/E;;;AADF;;;AAIF;;;;qCAAA,rCAAmBI,kFAChB5G,MACAJ,cACA6G,KACAD;AAJH,AAKE,IAAMK,qSAAiBJ,9IAAoBK,9DAAyBC,1EAC7C,0EAAA,8DAAA,yCAAA,AAAA,6GAAA,wEAAA,mEAAA,zaAAC5G,mSAA+B6G;AADvD,AAEE,OAACxF,oBAAU,qTAAA,rTAACmF,gFACA,2DAAA,3DAACpD,8CAAMsD,+EAA2B,AAAA,gGAAe7G,aAEjD,2CAAA,3CAACM,8BAAqBuG,mBACtBL;;AAEhB;;;;0CAAA,oFAAAS,9HAAmBE,4FAChBnH,MACAC,aACA+C;AAHH,AAAA,IAAAkE,aAAAD;IAAAC,iBAAA,AAAAvG,4BAAAuG;gCAAA,AAAAtG,4CAAAsG,eAAA,vFAIWE;AAJX,AAKE,OAAC5F,oBACC,iBAAAC,qBAAA,gEAAA4F;AAAA,AAAA,YAAA1F,kBAAA,KAAA;AAAA,AAAA,IAAA0F,eAAAA;;AAAA,AAAA,IAAApG,qBAAA,AAAAW,cAAAyF;AAAA,AAAA,GAAApG;AAAA,AAAA,IAAAoG,eAAApG;AAAA,AAAA,GAAA,AAAAY,6BAAAwF;AAAA,IAAAvF,kBA4xE+C,AAAAsM,sBAAA/G;IA5xE/CtF,qBAAA,AAAAC,gBAAAF;IAAAwF,WAAA,AAAApF,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAwF,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAxF;AAAA,IAAAyF,aAAA,AAAApF,eAAAN,gBAAAyF;aAAA,AAAA3C,4CAAA4C,WAAA,IAAA,pEAAOG;eAAP,AAAA/C,4CAAA4C,WAAA,IAAA,tEAActG;AAAd,AAAA,oBAKY,iBAAAF,mBAAIoG;AAAJ,AAAA,oBAAApG;AAAAA;;AACI,OAAC+G,cAAI,AAAArF,gBAAA,AAAAd,cAAA,AAAAoG,+CAAAC,sBAAA,AAAA;qFAAAC,mBAAAC;AAAA,AAAA,IAAA,AAAA,GAAA,EAAA,AAAAC,wBAAAD,uBAAA,CAAA,AAAAnG,gBAAAmG,qBAAA;AAAA,IAAA,AAAA,IAAAE,+BAAA,AAAAC,+CAAAH,iBAAA,IAAA;AAAA,AAAA,GAAA,EAAA,AAAAC,wBAAAC,mCAAA,CAAA,AAAArG,gBAAAqG,kCAAA;AAAA,IAAA,AAAA,IAAAE,wCAAA,AAAA3D,4CAAAyD,6BAAA;AAAA,AAAA,GAAA,AAAAG,mCAAAD,sCAAA;AAAA,0FAAAJ;;AAAA,AAAA,MAAAM;;;gBAAA,GAAA,CAAAC,kBAAAnH;AAAA,IAAAoH,mBAAAD;AAAA,AAAA,GAAA,CAAAC,qBAAAF;AAAA,AAAA,MAAAA;;AAAA,MAAAE;;;AAAA,AAAA,MAAAD;;;;AAAA,AAAA,MAAAD;;;gBAAA,GAAA,CAAAG,kBAAArH;AAAA,IAAAoH,mBAAAC;AAAA,AAAA,GAAA,CAAAD,qBAAAF;AAAA,AAAA,MAAAA;;AAAA,MAAAE;;;AAAA,AAAA,MAAAC;;;;AAAA,AAAA,MAAAH;;;gBAAA,GAAA,CAAAI,kBAAAtH;AAAA,IAAAoH,mBAAAE;AAAA,AAAA,GAAA,CAAAF,qBAAAF;AAAA,AAAA,OAAAK,iDAAAC,oEAAAb,mBAAAC;;AAAA,MAAAQ;;;AAAA,AAAA,MAAAE;;;;CAAA,iCAA0BlB;;;AAN/C,AAAA,AAAAtF,uBAAAiF,SAOC,iBAAMgC,YAAU,AAAA,6FAAYpI;AAA5B,iEACM,8DAAA,8DAAA,gIAAA,qLAAA,jbAACqC,qDAAMrC,+RAE0B,AAAA,mFAAOA,qGACP,iBAAAqI,WAAgB,AAAA,mFAAOrI,5rBACxD,OAACuI;AADgC,AAAA,oGAAAF,qCAAAA,jIAACvG,+CAAAA,yDAAAA;WAClC,yEAAiC,iBAAAhC,mBAAIsI;AAAJ,AAAA,oBAAAtI;AAAAA;;AAAA;;;;;AAZxC,eAAA,CAAAuG,WAAA;;;;AAAA,eAAA,CAAAA,WAAA;;;;;AAAA;;;;;AAAA,OAAAjF,qBAAA,AAAAC,gBAAA+E,UAAA,AAAAG,sDAAA,AAAAhF,qBAAA4E;;AAAA,OAAA/E,qBAAA,AAAAC,gBAAA+E,UAAA;;;AAAA,IAAAI,aAAA,AAAAhF,gBAAA2E;aAAA,AAAAzC,4CAAA8C,WAAA,IAAA,pEAAOC;eAAP,AAAA/C,4CAAA8C,WAAA,IAAA,tEAAcxG;AAAd,AAAA,oBAKY,iBAAAF,mBAAIoG;AAAJ,AAAA,oBAAApG;AAAAA;;AACI,OAAC+G,cAAI,AAAArF,gBAAA,AAAAd,cAAA,AAAAoG,+CAAAC,sBAAA,AAAA;qFAAAC,mBAAAC;AAAA,AAAA,IAAA,AAAA,GAAA,EAAA,AAAAC,wBAAAD,uBAAA,CAAA,AAAAnG,gBAAAmG,qBAAA;AAAA,IAAA,AAAA,IAAAa,+BAAA,AAAAV,+CAAAH,iBAAA,IAAA;AAAA,AAAA,GAAA,EAAA,AAAAC,wBAAAY,mCAAA,CAAA,AAAAhH,gBAAAgH,kCAAA;AAAA,IAAA,AAAA,IAAAC,wCAAA,AAAArE,4CAAAoE,6BAAA;AAAA,AAAA,GAAA,AAAAR,mCAAAS,sCAAA;AAAA,0FAAAd;;AAAA,AAAA,MAAAM;;;gBAAA,GAAA,CAAAS,kBAAA3H;AAAA,IAAAoH,mBAAAO;AAAA,AAAA,GAAA,CAAAP,qBAAAF;AAAA,AAAA,MAAAA;;AAAA,MAAAE;;;AAAA,AAAA,MAAAO;;;;AAAA,AAAA,MAAAT;;;gBAAA,GAAA,CAAAU,kBAAA5H;AAAA,IAAAoH,mBAAAQ;AAAA,AAAA,GAAA,CAAAR,qBAAAF;AAAA,AAAA,MAAAA;;AAAA,MAAAE;;;AAAA,AAAA,MAAAQ;;;;AAAA,AAAA,MAAAV;;;gBAAA,GAAA,CAAAW,kBAAA7H;AAAA,IAAAoH,mBAAAS;AAAA,AAAA,GAAA,CAAAT,qBAAAF;AAAA,AAAA,OAAAK,iDAAAO,oEAAAnB,mBAAAC;;AAAA,MAAAQ;;;AAAA,AAAA,MAAAS;;;;CAAA,iCAA0BzB;;;AAN/C,OAAAhF,eAOC,iBAAM2G,YAAU,AAAA,6FAAYpI;AAA5B,iEACM,8DAAA,8DAAA,gIAAA,qLAAA,jbAACqC,qDAAMrC,+RAE0B,AAAA,mFAAOA,qGACP,iBAAAsI,WAAgB,AAAA,mFAAOtI,5rBACxD,OAACuI;AADgC,AAAA,oGAAAD,qCAAAA,jIAACxG,+CAAAA,yDAAAA;WAClC,yEAAiC,iBAAAhC,mBAAIsI;AAAJ,AAAA,oBAAAtI;AAAAA;;AAAA;;;KAZxC,AAAAyG,sDAAA,AAAA7E,eAAAyE;;AAAA,eAAA,AAAAzE,eAAAyE;;;;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAA5F,mBAAwB,AAACmG,4CAAIC,iBACA,AAAA,gGAAc,AAACvH,8BAAqBN,MAAMC,eAC1C,AAAC6H,2EAAoC9H,MAAMC;;;AAkC5E;;;;;;;8DAAA,yFAAAyJ,vJAAmBE,oIAEhB5J,MACAC;AAHH,AAAA,IAAA0J,aAAAD;IAAAC,iBAAA,AAAAhJ,4BAAAgJ;cAAAA,VAIgCnD;qBAJhC,AAAA5F,4CAAA+I,eAAA,5EAIW3G;AAJX,AAAA,GAKS,AAAC6G,oBAAI7G;AALd;AAAA,AAAA,MAAA,KAAAzB,MAAA;;;AAME,IAAAuI,aAAyD,AAACxJ,8BAAqBN,MAAMC;IAArF6J,iBAAA,AAAAnJ,4BAAAmJ;iBAAAA,bAA6CE;mBAA7C,AAAApJ,4CAAAkJ,eAAA,1EAAcC;kBAAd,AAAAnJ,4CAAAkJ,eAAA,zEAA2BhJ;IACrB2F,OAAK,iBAAAwD,WAASnJ;AAAT,AAAA,GAAA,CAAAmJ,YAAA;AAAA;;AAAqB,wCAAAA,jCAACvD,2BAAkB1G;;;IAC7CkK,sBAAc,sIAAA,tIAAC/I,6CAAE,AAAA,mFAAOsF;AAF9B,AAGE,oDAAA,7CAAChB,8EACK,EAAIyE,qBACFC,mBACA,4CAAA,WAAAC,vDAACxC;AAAD,AAAM,6DAAAwC,iBAAA,oJAAA,yGAAA,8FAAA,laAAC/D;KACT,iBAAArF,mBAEC,AAAC4E,2CAAwB5F,MAAMC,aAAa+C;AAF7C,AAAA,oBAAAhC;AAAAA;;AAIC,IAAAA,uBAEC,gCAAA,dAAM+I;AACJ,GAAQ,AAACM,yBAASN;AAAlB;AAAA,AAAA,MAAA,KAAAxI,MAAA;;;AACA,IAAM+I,iBAAe,AAACC,4BAAmBvK,MAAM+J;AAA/C,AACE,OAACpD,gFAAyC3G,MAAMC,aAAaqK,eAAe9D;;CAHhF;AAFD,AAAA,oBAAAxF;AAAAA;;AAAA,IAAAA,uBAOC,uBAAA,oEAAA,zFAAMkJ,qBACJ,AAACtD,mCAAgB5G,MAAMC,aAAawG,KAAKD;AAR5C,AAAA,oBAAAxF;AAAAA;;AAAA,IAAAA,uBAUC,+BAAA,6OAAA,1PAAMF,aACJ,AAACwF,2CAAwBtG,MAAMC,aAAaa,YAAY,sDAAA,qGAAA,3JAACyC,8CAAMiD;AAXlE,AAAA,oBAAAxF;AAAAA;;AAaC,IAAAS,qBAAA,oFAAA+I;AAAA,AAAA,YAAA7I,kBAAA,KAAA;AAAA,AAAA,IAAA6I,eAAAA;;AAAA,AAAA,IAAAvJ,qBAAA,AAAAW,cAAA4I;AAAA,AAAA,GAAAvJ;AAAA,AAAA,IAAAuJ,eAAAvJ;AAAA,AAAA,GAAA,AAAAY,6BAAA2I;AAAA,IAAA1I,kBA0tEuC,AAAAsM,sBAAA5D;IA1tEvCzI,qBAAA,AAAAC,gBAAAF;IAAA2I,WAAA,AAAAvI,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAA2I,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA3I;AAAA,UAAA,AAAAK,eAAAN,gBAAA4I,rCAAM7H;AAAN,AAAA,AAAA,AAAAR,uBAAAoI,SACE,yDAAA,8DAAA,uHAAA,gLAAA,9ZAAClH,qDAAMV,iRAE0B,AAAA,mFAAOA,gGAGP,iBAAA+H,WAAgB,AAAA,mFAAO/H;AAAvB,AAAA,oGAAA+H,qCAAAA,jIAAC5H,+CAAAA,yDAAAA;;;AANpC,eAAA,CAAA0H,WAAA;;;;AAAA;;;;;AAAA,OAAApI,qBAAA,AAAAC,gBAAAkI,UAAA,AAAAE,0EAAA,AAAAlI,qBAAA+H;;AAAA,OAAAlI,qBAAA,AAAAC,gBAAAkI,UAAA;;;AAAA,UAAA,AAAA/H,gBAAA8H,tBAAM3H;AAAN,AAAA,OAAAF,eACE,yDAAA,8DAAA,uHAAA,gLAAA,9ZAACY,qDAAMV,iRAE0B,AAAA,mFAAOA,gGAGP,iBAAAgI,WAAgB,AAAA,mFAAOhI;AAAvB,AAAA,oGAAAgI,qCAAAA,jIAAC7H,+CAAAA,yDAAAA;WANpC,AAAA2H,0EAAA,AAAA/H,eAAA4H;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAA/I,mBAAU,AAAA,yFAAU,AAAA,4GAAqBuI;;;;;;;AAQrD;;;;8CAAA,yEAAAc,vHAAmBE,oGAChBhL,MACAC;AAFH,AAAA,IAAA8K,aAAAD;IAAAC,iBAAA,AAAApK,4BAAAoK;cAAAA,VAGqEvE;qBAHrE,AAAA5F,4CAAAmK,eAAA,5EAGW/H;4BAHX,AAAApC,4CAAAmK,eAAA,nFAG0BE;iCAH1B,AAAArK,4CAAAmK,eAAA,xFAG0CG;AAH1C,AAIE,OAACC,sDAEA,AAACvB,4DAAyC5J,MAAMC,aAAauG,SAE7D,8CAAA,8GAAA,1IAAM0E,4BACJ,0EAAA,1EAAC/D,wCAAqBnH,MAAMC,aAAa+C,2GAE3C,yCAAA,+EAAA,tGAAMiI,uBACJ,AAACG,4CAAmCpL,MAAMC,aAAa+C;;AAE5D,AAAAqI,qGAAA,0FAAA,qCAAAC,1BACGtL,MAAMC,aAAaJ;AADtB,AAAA,IAAA0L,aAAAD;IAAAC,iBAAA,AAAA5K,4BAAA4K;cAAAA,VACuF/E;qBADvF,AAAA5F,4CAAA2K,eAAA,5EACqCvI;yCADrC,AAAApC,4CAAA2K,eAAA,hGACoDC;AADpD,AAEE,IAAMxL,YAAiB,AAACD,wDAAqCC,MAAMC;IAC7DwL,mBAAiB,AAACT,4CAAyBhL,UAAMC,aAAauG;AADpE,AAEE,qBAAK,AAAC2E,+CACCM,iBAEA,sDAAA,sHAAA,1JAAMD,oCACJ,AAACE,8DAAqD1L,UAAMC,aAAawL,iBAAiBzI,1OAC9F2I;;AAKT,AAAAC,sGAAA,0FAAA,qCAAAC,1BACG7L,MAAMC,aAAaJ;AADtB,AAAA,IAAAiM,aAAAD;IAAAC,iBAAA,AAAAnL,4BAAAmL;cAAAA,VAC0DtF;qBAD1D,AAAA5F,4CAAAkL,eAAA,5EACqC9I;AADrC,AAEE,IAAAhC,mBACC,AAACP,2CAAwBT,MAAMC;AADhC,AAAA,oBAAAe;AAAAA;;AAEC,IAAMhB,YAAa,AAACD,wDAAqCC,MAAMC;IACzD8L,eAAa,AAACvG,mCAAgBxF,UAAMC,aAAa+C;IACjDgJ,aAAa,AAAC3H,kCAAerE,UAAMC,aAAa+C;AAFtD,AAIE,oBACE+I;AACA,OAACtG,6CAAKsG,aAAaC;;AAFrB,oBAIEA;AACA,AAAI,AAACC,8CAAMD;;AACP,oDAAA,7CAACvG,8EACK,sDAAA,WAAAyG,jEAACC;AAAD,AAAgB,6DAAAD,iBAAA,uHAAA,8DAAA,wEAAA,pUAAC7F;IACjB,AAAC8E,+CAAOa,WACA,AAACI,6CAAoCpM,UAAMC,aAAauG;;AAT5E,AAeE,OAAC2E,sDAEA,mFAAA,2CAAA,qGAAA,MAAA,zOAACvB,4DAAyC5J,UAAMC,4OAC4C+C,wBAC5F,8EAAA,2CAAA,iFAAA,1MAACmE,wCAAqBnH,UAAMC,aAAa+C,2MACzC,AAACoJ,6CAAoCpM,UAAMC,aAAauG;;;;;;AAEhE,AAAA6F,kGAAA,2EAAA,WACG1M,OAAOC,cAAcC,OAAOyM;AAD/B,AAEE,OAAAC,kCAAA;;AAEF,+CAAA,mFAAA,qEAAA,oEAAA,3QAAeC;AAKf,8CAAA,mFAAA,mEAAA,6DAAA,0DAAA,6DAAA,xXAAeC;AAOf,AAAAJ,kGAAA,wEAAA,WACGrM,MAAMC,aAAaJ,OAAO6M;AAD7B,AAEE,IAAM1M,YAAM,AAACD,wDAAqCC,MAAMC;AAAxD,AACE,IAAAe,mBACC,AAACQ,oBACA,iBAAMmL,uBAAmB,6CAAA,7CAAClH,gFACK,AAACmH,6CAAKC,cACA,AAACjF,4CAAI,WAAKkF;AAAL,AAAA,0FACGA,EAAE,AAACC,uFAAgD/M,UAAMC,aAAa6M;KAH1F,mFAION,6CAA0BC;IACpDO,qBAAmB,kDAAA,lDAACC,wDAAe,AAACC,+CAAOC,4BAAW,AAACvF,4CAAI+E,qBAAkBH;IAC7EY,qBAAmB,AAACxF,4CAAI+E,qBAAkBF;AANhD,AAOE,yDAAA,lDAACQ,uDAAc,AAACC,+CAAOC,4BAAW,AAACxK,eAAKqK,mBAAmBI;;AAT/D,AAAA,oBAAApM;AAAAA;;AAUC,IAAAC,qBAAiC,AAAC6E,wCAA+B9F,UAAMC;AAAvE,AAAA,oBAAAgB;AAAA,AAAA,4BAAAA,xBAAW4E;AAAX,AACE,OAACwH,6EAAsCrN,UACA6F,sBACA,AAACvF,8BAAqBN,UAAM6F,uBAC5B6G;;AAJzC;;;;AAML;;;;;;;wCAAA,xCAASY,wFAENtN,MACAC;AAHH,AAIE,OAACsN,mBAAQ,AAAC3L,cAAI,wGAAA,4GAAA,qEAAA,zRAACyE,sDAAO,AAAC/F,8BAAqBN,MAAMC;;AAEpD;;;;;;;kCAAA,lCAASuN,4EAENxN;AAFH,AAGE,4DAAA,wEAAA,2CAAA,0DAAA,lOAACyN,+CAAOzN,+DAAc0N;;AAExB;;;;;;;gCAAA,hCAASC,wEAEN3N;AAFH,AAGE,GAAI,6CAAA,7CAACmB,iDAAI,AAACa,gBAAM,AAAA,uFAAShC;AACvBA;;AACA,4DAAA,rDAACyN,+CAAOzN,+DAAc4N;;;AAE1B;;;;;;;uCAAA,vCAASC,sFAEN7N;AAFH,AAGE,4DAAA,rDAACyN,+CAAOzN,+DAAc,WAAK8N;AAAL,AACE,oDAAA,7CAACrI,8EACK,AAACsI,qDAAa,WAAK9N,aAAac;AAAlB,AACE,GAAM,EAAI,kBAAA,jBAAOd,2BACP,AAACqN,sCAAatN,MAAMC;AAD9B,AAEEc;;AAFF;;IAGhB+M;;;AAEhC;;;;;;;;;;wCAAA,xCAASE,wFAKNhO,MACAC;AANH,AAOE,IAAMA,mBAAa,AAACO,wCAA+BR,MAAMC;AAAzD,AACE,IAAAgO,qBAAqB,AAACE,oCAA2BnO,MAAMC;AAAvD,AAAA,oBAAAgO;AAAA,kBAAAA,dAASC;AAAT,AAAA,0FAEGlO,MAAMkO;;AAEP,IAAMlO,YAAM,AAACwN,gCAAaxN;AAA1B,AAAA,0FACGA,UAAM,AAACmO,oCAA2BnO,UAAMC","names":["metabase.lib.hierarchy/derive","metabase.lib.metadata.calculation/metadata-method","_query","_stage-number","_stage","cljs.core.ex_info","metabase.lib.stage/ensure-previous-stages-have-metadata","query","stage-number","cljs.core.reduce","metabase.lib.util.update_query_stage","cljs.core/assoc","metabase.lib.metadata.calculation.returned_columns","metabase.lib.util/query-stage","cljs.core.range","metabase.lib.util/canonical-stage-index","metabase.lib.stage/existing-stage-metadata","map__79066","cljs.core/--destructure-map","cljs.core.get","stage-type","source-card","stage","or__5002__auto__","temp__5804__auto__","metadata","cljs.core._EQ_","source-type","G__79067","cljs.core/Keyword","js/Error","cljs.core/not-empty","iter__5480__auto__","s__79069","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__79071","cljs.core/chunk-buffer","i__79070","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__79068","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","col","cljs.core.merge","metabase.lib.stage/breakouts-columns","unique-name-fn","s__79131","b__79133","i__79132","iter__79130","breakout","metabase.lib.breakout.breakouts_metadata","cljs.core.assoc","cljs.core.some_fn","G__79134","G__79135","metabase.lib.join.util/desired-alias","metabase.lib.stage/aggregations-columns","s__79137","b__79139","i__79138","iter__79136","ag","metabase.lib.aggregation.aggregations_metadata","G__79140","G__79141","metabase.lib.stage/fields-columns","map__79142","fields","s__79144","b__79146","i__79145","vec__79147","cljs.core.nth","iter__79143","vec__79152","tag","ref-clause","source","G__79150","G__79155","metabase.lib.metadata.calculation.metadata","metabase.lib.metadata.calculation.column_name","G__79151","G__79156","metabase.lib.stage/summary-columns","cljs.core.into","cljs.core.mapcat","f","metabase.lib.stage/previous-stage-metadata","previous-stage-number","metabase.lib.util/previous-stage-number","s__79158","b__79160","i__79159","iter__79157","source-alias","cljs.core/select-keys","cljs.core.dissoc","metabase.lib.stage/saved-question-metadata","card-id","options","card","metabase.lib.metadata/card","metabase.lib.metadata.calculation.visible_columns","metabase.lib.stage/metric-metadata","metric-query","metabase.legacy-mbql.normalize/normalize","metabase.lib.convert/->pMBQL","cljs.core/dissoc","p__79161","map__79162","metabase.lib.stage/expressions-metadata","include-late-exprs?","s__79166","b__79168","i__79167","vec__79169","iter__79165","vec__79182","clause","cljs.core.map","cljs.core/vector","metabase.lib.expression.expressions_metadata","cljs.core/not","cljs.core.filter","cljs.core/some?","&parents","&match","cljs.core/vector?","&match_left__79175","cljs.core.subvec","&match_left__79175_0__79177","cljs.core/keyword-identical?","cljs.core.match/backtrack","e79180","e__46214__auto__","e79179","e79178","metabase.lib.util.match.impl/match-in-collection","match-79172","&match_left__79188","&match_left__79188_0__79190","e79193","e79192","e79191","match-79185","base-type","G__79181","G__79194","metabase.util.assoc_default","p__79196","map__79197","metabase.lib.stage/previous-stage-or-source-visible-columns","cljs.core/fn?","map__79198","source-table","this-stage","G__79199","metric-based?","cljs.core/identity","p1__79195#","cljs.core/integer?","table-metadata","metabase.lib.metadata/table","s__79201","b__79203","i__79202","iter__79200","G__79204","G__79205","p__79207","map__79209","metabase.lib.stage/existing-visible-columns","include-joined?","include-expressions?","cljs.core.concat","metabase.lib.join/all-joins-visible-columns","metabase.lib.metadata.calculation/visible-columns-method","p__79210","map__79211","include-implicitly-joinable?","existing-columns","metabase.lib.metadata.calculation/implicitly-joinable-columns","cljs.core/vec","metabase.lib.metadata.calculation/returned-columns-method","p__79217","map__79218","summary-cols","field-cols","cljs.core.doall","p1__79213#","medley.core.distinct_by","metabase.lib.join/all-joins-expected-columns","metabase.lib.metadata.calculation/display-name-method","_style","metabase.shared.util.i18n/js-i18n","metabase.lib.stage/display-name-source-parts","metabase.lib.stage/display-name-other-parts","style","part->description","cljs.core.comp","cljs.core/cat","k","metabase.lib.metadata.calculation.describe_top_level_key","source-description","clojure.string.join","cljs.core.remove","clojure.string/blank?","other-descriptions","metabase.lib.metadata.calculation.display_name","metabase.lib.stage/has-clauses?","cljs.core/boolean","metabase.lib.stage/append-stage","cljs.core.update","cljs.core/conj","metabase.lib.stage/drop-stage","cljs.core/pop","metabase.lib.stage/drop-empty-stages","stages","cljs.core.keep_indexed","metabase.lib.stage/ensure-extra-stage","temp__5802__auto__","next-number","metabase.lib.util/next-stage-number","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.lib.stage\n  \"Method implementations for a stage of a query.\"\n  (:require\n   [clojure.string :as str]\n   [medley.core :as m]\n   [metabase.legacy-mbql.normalize :as mbql.normalize]\n   [metabase.lib.aggregation :as lib.aggregation]\n   [metabase.lib.breakout :as lib.breakout]\n   [metabase.lib.convert :as lib.convert]\n   [metabase.lib.expression :as lib.expression]\n   [metabase.lib.field :as lib.field]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.join :as lib.join]\n   [metabase.lib.join.util :as lib.join.util]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.id :as lib.schema.id]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.lib.util :as lib.util]\n   [metabase.lib.util.match :as lib.util.match]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util :as u]\n   [metabase.util.malli :as mu]))\n\n(lib.hierarchy/derive :mbql.stage/mbql   ::stage)\n(lib.hierarchy/derive :mbql.stage/native ::stage)\n\n(defmethod lib.metadata.calculation/metadata-method ::stage\n  [_query _stage-number _stage]\n  ;; not i18n'ed because this shouldn't be developer-facing.\n  (throw (ex-info \"You can't calculate a metadata map for a stage! Use lib.metadata.calculation/returned-columns-method instead.\"\n                  {})))\n\n(mu/defn ensure-previous-stages-have-metadata :- ::lib.schema/query\n  \"Recursively calculate the metadata for the previous stages and add it to them, we'll need it for metadata\n  calculations for [[lib.metadata.calculation/returned-columns]] and [[lib.metadata.calculation/visible-columns]], and\n  we don't want to have to calculate it more than once...\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int]\n  (reduce\n   (fn [query stage-number]\n     (lib.util/update-query-stage query\n                                  stage-number\n                                  assoc ::cached-metadata\n                                  (lib.metadata.calculation/returned-columns query\n                                                                             stage-number\n                                                                             (lib.util/query-stage query stage-number))))\n   query\n   (range 0 (lib.util/canonical-stage-index query stage-number))))\n\n(mu/defn ^:private existing-stage-metadata :- [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n  \"Return existing stage metadata attached to a stage if is already present: return it as-is, but only if this is a\n  native stage or a source-Card or a metric stage. If it's any other sort of stage then ignore the metadata, it's\n  probably wrong; we can recalculate the correct metadata anyway.\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int]\n  (let [{stage-type :lib/type, :keys [source-card] :as stage} (lib.util/query-stage query stage-number)]\n    (or (::cached-metadata stage)\n        (when-let [metadata (:lib/stage-metadata stage)]\n          (when (or (= stage-type :mbql.stage/native)\n                    source-card)\n            (let [source-type (case stage-type\n                                :mbql.stage/native :source/native\n                                :mbql.stage/mbql   :source/card)]\n              (not-empty\n               (for [col (:columns metadata)]\n                 (merge\n                  {:lib/source-column-alias  (:name col)\n                   :lib/desired-column-alias (:name col)}\n                  col\n                  {:lib/source source-type})))))))))\n\n(mu/defn ^:private breakouts-columns :- [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n  [query          :- ::lib.schema/query\n   stage-number   :- :int\n   unique-name-fn :- ::lib.metadata.calculation/unique-name-fn]\n  (not-empty\n   (for [breakout (lib.breakout/breakouts-metadata query stage-number)]\n     (assoc breakout\n            :lib/source               :source/breakouts\n            :lib/source-column-alias  ((some-fn :lib/source-column-alias :name) breakout)\n            :lib/desired-column-alias (unique-name-fn (lib.join.util/desired-alias query breakout))))))\n\n(mu/defn ^:private aggregations-columns :- [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n  [query          :- ::lib.schema/query\n   stage-number   :- :int\n   unique-name-fn :- ::lib.metadata.calculation/unique-name-fn]\n  (not-empty\n   (for [ag (lib.aggregation/aggregations-metadata query stage-number)]\n     (assoc ag\n            :lib/source               :source/aggregations\n            :lib/source-column-alias  (:name ag)\n            :lib/desired-column-alias (unique-name-fn (:name ag))))))\n\n;;; TODO -- maybe the bulk of this logic should be moved into [[metabase.lib.field]], like we did for breakouts and\n;;; aggregations above.\n(mu/defn ^:private fields-columns :- [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n  [query          :- ::lib.schema/query\n   stage-number   :- :int\n   unique-name-fn :- ::lib.metadata.calculation/unique-name-fn]\n  (when-let [{fields :fields} (lib.util/query-stage query stage-number)]\n    (not-empty\n     (for [[tag :as ref-clause] fields\n           :let                 [source (case tag\n                                          ;; you can't have an `:aggregation` reference in `:fields`; anything in\n                                          ;; `:aggregations` is returned automatically anyway\n                                          ;; by [[aggregations-columns]] above.\n                                          :field      :source/fields\n                                          :expression :source/expressions)\n                                 metadata (lib.metadata.calculation/metadata query stage-number ref-clause)]]\n       (assoc metadata\n              :lib/source               source\n              :lib/source-column-alias  (lib.metadata.calculation/column-name query stage-number metadata)\n              :lib/desired-column-alias (unique-name-fn (lib.join.util/desired-alias query metadata)))))))\n\n(mu/defn ^:private summary-columns :- [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n  [query          :- ::lib.schema/query\n   stage-number   :- :int\n   unique-name-fn :- ::lib.metadata.calculation/unique-name-fn]\n  (not-empty\n   (into []\n         (mapcat (fn [f]\n                   (f query stage-number unique-name-fn)))\n         [breakouts-columns\n          aggregations-columns])))\n\n(mu/defn ^:private previous-stage-metadata :- [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n  \"Metadata for the previous stage, if there is one.\"\n  [query          :- ::lib.schema/query\n   stage-number   :- :int\n   unique-name-fn :- ::lib.metadata.calculation/unique-name-fn]\n  (when-let [previous-stage-number (lib.util/previous-stage-number query stage-number)]\n    (not-empty\n     (for [col  (lib.metadata.calculation/returned-columns query\n                                                           previous-stage-number\n                                                           (lib.util/query-stage query previous-stage-number))\n           :let [source-alias (or ((some-fn :lib/desired-column-alias :lib/source-column-alias) col)\n                                  (lib.metadata.calculation/column-name query stage-number col))]]\n       (-> (merge\n            col\n            {:lib/source               :source/previous-stage\n             :lib/source-column-alias  source-alias\n             :lib/desired-column-alias (unique-name-fn source-alias)}\n            (when (:metabase.lib.card/force-broken-id-refs col)\n              (select-keys col [:metabase.lib.card/force-broken-id-refs])))\n           ;; do not retain `:temporal-unit`; it's not like we're doing a extract(month from <x>) twice, in both\n           ;; stages of a query. It's a little hacky that we're manipulating `::lib.field` keys directly here since\n           ;; they're presumably supposed to be private-ish, but I don't have a more elegant way of solving this sort\n           ;; of problem at this point in time.\n           ;;\n           ;; also don't retain `:lib/expression-name`, the fact that this column came from an expression in the\n           ;; previous stage should be totally irrelevant and we don't want it confusing our code that decides whether\n           ;; to generate `:expression` or `:field` refs.\n           (dissoc ::lib.field/temporal-unit :lib/expression-name))))))\n\n(mu/defn ^:private saved-question-metadata :- [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n  \"Metadata associated with a Saved Question, e.g. if we have a `:source-card`\"\n  [query          :- ::lib.schema/query\n   stage-number   :- :int\n   card-id        :- [:maybe ::lib.schema.id/card]\n   options        :- lib.metadata.calculation/VisibleColumnsOptions]\n  (when card-id\n    (when-let [card (lib.metadata/card query card-id)]\n      (not-empty (lib.metadata.calculation/visible-columns query stage-number card options)))))\n\n(mu/defn ^:private metric-metadata :- [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n  [query         :- ::lib.schema/query\n   _stage-number :- :int\n   card          :- ::lib.schema.metadata/card\n   options       :- lib.metadata.calculation/VisibleColumnsOptions]\n  (let [metric-query (-> card :dataset-query mbql.normalize/normalize lib.convert/->pMBQL\n                         (lib.util/update-query-stage -1 dissoc :aggregation :breakout))]\n    (not-empty (lib.metadata.calculation/visible-columns\n                (assoc metric-query :lib/metadata (:lib/metadata query))\n                -1\n                (lib.util/query-stage metric-query -1)\n                options))))\n\n(mu/defn ^:private expressions-metadata :- [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n  [query                         :- ::lib.schema/query\n   stage-number                  :- :int\n   unique-name-fn                :- ::lib.metadata.calculation/unique-name-fn\n   {:keys [include-late-exprs?]} :- [:map [:include-late-exprs? {:optional true} :boolean]]]\n  (not-empty\n    (for [[clause metadata] (map vector\n                                 (:expressions (lib.util/query-stage query stage-number))\n                                 (lib.expression/expressions-metadata query stage-number))\n          ;; Only include \"late\" expressions when required.\n          ;; \"Late\" expressions those like :offset which can't be used within the same query stage, like aggregations.\n          :when (or include-late-exprs?\n                    (not (lib.util.match/match-one clause :offset)))]\n     (let [base-type (:base-type metadata)]\n       (-> (assoc metadata\n                  :lib/source               :source/expressions\n                  :lib/source-column-alias  (:name metadata)\n                  :lib/desired-column-alias (unique-name-fn (:name metadata)))\n           (u/assoc-default :effective-type (or base-type :type/*)))))))\n\n;;; Calculate the columns to return if `:aggregations`/`:breakout`/`:fields` are unspecified.\n;;;\n;;; Formula for the so-called 'default' columns is\n;;;\n;;; 1a. Columns returned by the previous stage of the query (if there is one), OR\n;;;\n;;; 1b. Default 'visible' Fields for our `:source-table`, OR\n;;;\n;;; 1c. Metadata associated with a Saved Question, if we have `:source-card` (`:source-table` is a `card__<id>` string\n;;;     in legacy MBQL), OR\n;;;\n;;; 1e. Metadata associated with a Metric, if we have `:sources`, OR\n;;;\n;;; 1d. `:lib/stage-metadata` if this is a `:mbql.stage/native` stage\n;;;\n;;; PLUS\n;;;\n;;; 2. Expressions (aka calculated columns) added in this stage\n;;;\n;;; PLUS\n;;;\n;;; 3. Columns added by joins at this stage\n(mu/defn ^:private previous-stage-or-source-visible-columns :- lib.metadata.calculation/ColumnsWithUniqueAliases\n  \"Return columns from the previous query stage or source Table/Card.\"\n  [query                                 :- ::lib.schema/query\n   stage-number                          :- :int\n   {:keys [unique-name-fn], :as options} :- lib.metadata.calculation/VisibleColumnsOptions]\n  {:pre [(fn? unique-name-fn)]}\n  (let [{:keys [source-table source-card], :as this-stage} (lib.util/query-stage query stage-number)\n        card (some->> source-card (lib.metadata/card query))\n        metric-based? (= (:type card) :metric)]\n    (into []\n          (if metric-based?\n            identity\n            (map #(dissoc % ::lib.join/join-alias ::lib.field/temporal-unit ::lib.field/binning :fk-field-id)))\n          (or\n           ;; 1a. columns returned by previous stage\n           (previous-stage-metadata query stage-number unique-name-fn)\n           ;; 1b or 1c\n           (or\n            ;; 1b: default visible Fields for the source Table\n            (when source-table\n              (assert (integer? source-table))\n              (let [table-metadata (lib.metadata/table query source-table)]\n                (lib.metadata.calculation/visible-columns query stage-number table-metadata options)))\n            ;; 1e. Metadata associated with a Metric\n            (when metric-based?\n              (metric-metadata query stage-number card options))\n            ;; 1c. Metadata associated with a saved Question\n            (when source-card\n              (saved-question-metadata query stage-number source-card (assoc options :include-implicitly-joinable? false)))\n            ;; 1d: `:lib/stage-metadata` for the (presumably native) query\n            (for [col (:columns (:lib/stage-metadata this-stage))]\n              (assoc col\n                     :lib/source :source/native\n                     :lib/source-column-alias  (:name col)\n                     ;; these should already be unique, but run them thru `unique-name-fn` anyway to make sure anything\n                     ;; that gets added later gets deduplicated from these.\n                     :lib/desired-column-alias (unique-name-fn (:name col)))))))))\n\n(mu/defn ^:private existing-visible-columns :- lib.metadata.calculation/ColumnsWithUniqueAliases\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   {:keys [unique-name-fn include-joined? include-expressions?], :as options} :- lib.metadata.calculation/VisibleColumnsOptions]\n  (concat\n   ;; 1: columns from the previous stage, source table or query\n   (previous-stage-or-source-visible-columns query stage-number options)\n   ;; 2: expressions (aka calculated columns) added in this stage\n   (when include-expressions?\n     (expressions-metadata query stage-number unique-name-fn {}))\n   ;; 3: columns added by joins at this stage\n   (when include-joined?\n     (lib.join/all-joins-visible-columns query stage-number unique-name-fn))))\n\n(defmethod lib.metadata.calculation/visible-columns-method ::stage\n  [query stage-number _stage {:keys [unique-name-fn include-implicitly-joinable?], :as options}]\n  (let [query            (ensure-previous-stages-have-metadata query stage-number)\n        existing-columns (existing-visible-columns query stage-number options)]\n    (->> (concat\n           existing-columns\n           ;; add implicitly joinable columns if desired\n           (when include-implicitly-joinable?\n             (lib.metadata.calculation/implicitly-joinable-columns query stage-number existing-columns unique-name-fn)))\n         vec)))\n\n;;; Return results metadata about the expected columns in an MBQL query stage. If the query has\n;;; aggregations/breakouts, then return those and the fields columns. Otherwise if there are fields columns return\n;;; those and the joined columns. Otherwise return the defaults based on the source Table or previous stage + joins.\n(defmethod lib.metadata.calculation/returned-columns-method ::stage\n  [query stage-number _stage {:keys [unique-name-fn], :as options}]\n  (or\n   (existing-stage-metadata query stage-number)\n   (let [query        (ensure-previous-stages-have-metadata query stage-number)\n         summary-cols (summary-columns query stage-number unique-name-fn)\n         field-cols   (fields-columns query stage-number unique-name-fn)]\n     ;; ... then calculate metadata for this stage\n     (cond\n       summary-cols\n       (into summary-cols field-cols)\n\n       field-cols\n       (do (doall field-cols)           ; force generation of unique names before join columns\n           (into []\n                 (m/distinct-by #(dissoc % :source-alias :lib/source :lib/source-uuid :lib/desired-column-alias))\n                 (concat field-cols\n                         (lib.join/all-joins-expected-columns query stage-number options))))\n\n       :else\n       ;; there is no `:fields` or summary columns (aggregtions or breakouts) which means we return all the visible\n       ;; columns from the source or previous stage plus all the expressions. We return only the `:fields` from any\n       ;; joins\n       (concat\n        ;; we don't want to include all visible joined columns, so calculate that separately\n        (previous-stage-or-source-visible-columns query stage-number {:include-implicitly-joinable? false\n                                                                      :unique-name-fn               unique-name-fn})\n        (expressions-metadata query stage-number unique-name-fn {:include-late-exprs? true})\n        (lib.join/all-joins-expected-columns query stage-number options))))))\n\n(defmethod lib.metadata.calculation/display-name-method :mbql.stage/native\n  [_query _stage-number _stage _style]\n  (i18n/tru \"Native query\"))\n\n(def ^:private display-name-source-parts\n  [:source-table\n   :source-card\n   :joins])\n\n(def ^:private display-name-other-parts\n  [:aggregation\n   :breakout\n   :filters\n   :order-by\n   :limit])\n\n(defmethod lib.metadata.calculation/display-name-method :mbql.stage/mbql\n  [query stage-number _stage style]\n  (let [query (ensure-previous-stages-have-metadata query stage-number)]\n    (or\n     (not-empty\n      (let [part->description  (into {}\n                                     (comp cat\n                                           (map (fn [k]\n                                                  [k (lib.metadata.calculation/describe-top-level-key query stage-number k)])))\n                                     [display-name-source-parts display-name-other-parts])\n            source-description (str/join \" + \" (remove str/blank? (map part->description display-name-source-parts)))\n            other-descriptions (map part->description display-name-other-parts)]\n        (str/join \", \" (remove str/blank? (cons source-description other-descriptions)))))\n     (when-let [previous-stage-number (lib.util/previous-stage-number query stage-number)]\n       (lib.metadata.calculation/display-name query\n                                              previous-stage-number\n                                              (lib.util/query-stage query previous-stage-number)\n                                              style)))))\n\n(mu/defn has-clauses? :- :boolean\n  \"Does given query stage have any clauses?\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int]\n  (boolean (seq (dissoc (lib.util/query-stage query stage-number) :lib/type :source-table :source-card))))\n\n(mu/defn append-stage :- ::lib.schema/query\n  \"Adds a new blank stage to the end of the pipeline.\"\n  [query]\n  (update query :stages conj {:lib/type :mbql.stage/mbql}))\n\n(mu/defn drop-stage :- ::lib.schema/query\n  \"Drops the final stage in the pipeline, will no-op if it is the only stage\"\n  [query]\n  (if (= 1 (count (:stages query)))\n    query\n    (update query :stages pop)))\n\n(mu/defn drop-empty-stages :- ::lib.schema/query\n  \"Drops all empty stages in the pipeline.\"\n  [query :- ::lib.schema/query]\n  (update query :stages (fn [stages]\n                          (into []\n                                (keep-indexed (fn [stage-number stage]\n                                                (when (or (zero? stage-number)\n                                                          (has-clauses? query stage-number))\n                                                  stage)))\n                                stages))))\n\n(mu/defn ensure-extra-stage :- [:tuple ::lib.schema/query :int]\n  \"Given a query and current stage, returns a tuple of `[query next-stage-number]`.\n\n  If that stage already exists, the query is unchanged. If it does not, a new (MBQL) stage is appended and its index\n  is returned.\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int]\n  (let [stage-number (lib.util/canonical-stage-index query stage-number)]\n    (if-let [next-number (lib.util/next-stage-number query stage-number)]\n      ;; There is already a next stage, so just return it.\n      [query next-number]\n      ;; Otherwise append a stage and return the new query and updated stage number.\n      (let [query (append-stage query)]\n        [query (lib.util/next-stage-number query stage-number)]))))\n"]}