{"version":3,"sources":["metabase/legacy_mbql/schema.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,0CAAA,mFAAA,0DAAA,2CAAA,gEAAA,lSAAeA,wUAGZC;AAKH;;;mDAAA,kFAAA,gEAAA,wDAAA,2DAAA,iEAAA,wEAAA,6DAAA,2EAAA,2EAAA,yDAAA,uEAAA,0EAAA,91BAAeC;AAKf;;;mDAAA,iFAAA,0DAAA,8DAAA,iEAAA,wEAAA,wEAAA,8EAAA,3hBAAeC;AAIf;;;AAAKC,uDAEH,AAACC,gDAAUH,iDAAqBC;AAElC,AAAAG,4CAAA,kHAAA,AAAAC,maAAA,5XAEE,6CAAA,mFAAA,qDAAA,2CAAA,oEAAA,pSAACC,0UAAoDN;AAKvD,AAAAI,4CAAA,mHAAA,AAAAC,maAAA,5XAEE,6CAAA,mFAAA,qDAAA,2CAAA,oEAAA,pSAACC,0UAAoDL;AAEvD,AAAAG,4CAAA,yHAAA,AAAAC,2aAAA,pYAEE,6CAAA,mFAAA,qDAAA,2CAAA,oEAAA,pSAACC,8UAAwDJ;AAE3D;;;yCAAA,mFAAA,mDAAA,/KAAeK;AAIf,AAAAH,4CAAA,wIAAA,AAAAC,uCAAA,oFAAA,qDAAA,2CAAA,oEAAA,gCAAA,kEAAA,2EAAA,sEAAA,8EAAA,0EAAA,uFAAA,sEAAA,mEAAA,mEAAA,yEAAA,oFAAA;AAgBA,AAAAD,4CAAA,kIAAA,AAAAC,uCAAA,oFAAA,qDAAA,2CAAA,oEAAA,6BAAA,yDAAA,yDAAA,qDAAA,mDAAA,sDAAA,wDAAA,2DAAA,4DAAA;AAIA,AAAAD,4CAAA,+HAAA,AAAAC,uCAAA,mFAAA,qDAAA,2CAAA,oEAAA,gDAAA,oDAAA,gDAAA,sEAAA;AAIA,AAAAD,4CAAA,yIAAA,oFAAA,qDAAA,2CAAA,oEAAA,iCAAA,4DAAA,yDAAA,qDAAA,mDAAA,sDAAA,wDAAA,2DAAA;AAIA,AAAA,AAAAA,4CAAA,qIAAA,AAAAI,gFAAA,iIAAA,IAAA,mFAAA,gDAAA,mFAAA,+CAAA,oEAAA,4DAAA,OAAA,mFAAA,6DAAA,mFAAA,mDAAA;;AAAA;;;gDAAA,mFAAA,mDAAA,tLAAWC;AAIX,AAAA,AAAAL,4CAAA,kHAAA,AAAAI,gFAAA,+GAAA,IAAA,oDAAA,OAAA,mFAAA,mDAAA;;AAAA;;;uCAAA,mFAAA,mDAAA,7KAAWE;AAcX,AAAAN,4CAAA,mIAAA,mFAAA,uDAAA,2CAAA,oEAAA,kCAAA,2DAAA,mFAAA,qDAAA,mFAAA,qDAAA,6BAAA,kBAAA,6DAG0B,WAAKO;AAAL,AACE,GACE,AAACC,cAAS,qDAAA,rDAACC,oIAA8BF;AAD3C;;AAAA,oBAEE,sCAAA,tCAACG,gJAAsC,AAACC,iBAAOJ;AAFjD;;AAAA,AAAA;;;;WAJ5B,mFAAA,0DAAA,mFAAA,kDAAA,2CAAA,oEAAA,uFAAA,mFAAA,+fAAA,mFAAA,jtBAUc,qBAAA,rBAACK,qLACL,gFAAA,iIAAA,OAAA,0GAAA,OAAA,zUAACR,wlBAIG,gFAAA,iIAAA,WAAA,iHAAA,OAAA,pVAACA;AAKf;;;gDAAA,mFAAA,mDAAA,tLAAmDS;AAOnD,AAAA,AAAAb,4CAAA,0GAAA,AAAAI,gFAAA,uGAAA,OAAA,0GAAA,OAAA;;AAAA;;;mCAAA,mFAAA,mDAAA,zKAAsBU;AAItB,AAAAd,4CAAA,6IAAA,AAAAC,uCAAA,mFAAA,gDAAA,2CAAA,oEAAA,+HAAA,iHAAA,kHAAA,/TAIGI,8CACAQ;AAOH,AAAAb,4CAAA,uHAAA,AAAAC,uCAAA,mFAAA,gDAAA,2CAAA,oEAAA,wDAAA,kHAAA,nJAIGa;AAGH,AAAAd,4CAAA,gIAAA,AAAAC,uCAAA,mFAAA,gDAAA,2CAAA,oEAAA,2BAAA,mFAAA,mDAAA,qJAAA,mFAAA,mDAAA,uIAAA;AAOA,AAAAD,4CAAA,4HAAA,AAAAC,uCAGE,AAAAc,wIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAC,gEAAA,AAAA,KAAAC,cAAA;AAAA,AAAAT;GAAA,AAAA,iTAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,6DAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,mFAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,+EAAA,AAAA,EAAA,AAAA,KAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,6CAAA,kBAAAA,+CAAA,AAAA,AAAAA,6DAAA,UAAA;AAAA,AAAA,oBAAAG;AAAAA;;AAAA,AAAA;;2DAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAG,gEAAA,AAAA,KAAAD,cAAA,xgBAAQT;AAAR,AAAAR;GAAA,AAAA,+SAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,oFAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,+EAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,+oCAAA,AAAA,qBAAA,AAAA,+CAAA,kBAAAA,+CAAA,AAAA,AAAAA,6DAAA,UAAA;AAAA,AAAA,oBAAAW;AAAAA;;AAAA,AAAA;;2DAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAI,mDAAA,AAAA,KAAAF,cAAA,3fAA0BjB;AAA1B,AAAAS;GAAA,AAAA,sRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,6DAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,0DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,qDAAA,AAAA,EAAA,AAAA,KAAA,AAAA,IAAA,AAAA,IAAA,AAAA,4mBAAA,AAAA,qBAAA,AAAA,kCAAA,kBAAAA,kCAAA,AAAA,AAAAA,gDAAA,UAAA;AAAA,AAAA,oBAAAE;AAAAA;;AAAA,AAAA;;oDAHF,/CAG8CF;AAK9C,AAAAd,4CAAA,2HAAA,mFAAA,mDAAA,2CAAA,4PAAA,mFAAA,sEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,iJAAA,mFAAA,+DAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,iIAAA,mFAAA,sEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,kKAAA,mFAAA,oDAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,yIAAA,mFAAA,qDAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,vsFAEiB,CAAA,6FAAA;AAcjB,AAAA,AAAAA,4CAAA,4GAAA,AAAAI,gFAAA,wGAAA,QAAA,mDAAA,YAAA,mFAAA,uDAAA;;AAAA;;;oCAAA,mFAAA,mDAAA,1KAAsBqB;AAYtB,AAAA,AAAAzB,4CAAA,sHAAA,AAAAI,gFAAA,kHAAA,kBAAA,iIAAA,UAAA,mFAAA,6DAAA;;AAAA;;;yCAAA,mFAAA,mDAAA,/KAAiDsB;AAIjD,AAAA;;;;uEAAA,+EAAAC,tJAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,mGAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mGAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,qGAAA,WAAAC,hHAAMF;AAAN,AAAA,IAAAG,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;qBAAAA,jBAGyCK;gBAHzC,AAAAH,4CAAAF,eAAA,vEAGYG;oBAHZ,AAAAD,4CAAAF,eAAA,3EAGsBI;AAHtB,AAIG,OAACE,mGAAmCH,UAAUC;;;AAJjD,CAAA,qGAAA,rGAAMP,gHAMFM,UAAUC;AANd,AAOG,IAAAG,qBAAe,kBAAM,iBAAAE,oBAAUL;AAAV,AAAA,oBAAAK;AAAwBN;;AAAxBM;;MAAN,AACE,iBAAAC,cAAA,WAAAC,iBAAAC;AAAA,AAAQ,0DAAAA,iBAAAD,pEAACG;;IAATD,cAAqBV;AAArB,AAAA,GAAA,AAAAO,YAAA,4DAAAG;AACiBjD;;AADjB,GAAA,AAAA8C,YAAA,4DAAAG;AAEiBhD;;AAFjB,GAAA,AAAA6C,YAAA,mEAAAG;AAGiB/C;;AAHjB;;;;KADF;AAAf,AAAA,oBAAAyC;AAAA,YAAAA,RAASC;AAAT,AAME,OAACO,0BAAUP,MAAMJ;;AANnB;;;;AAPH,CAAA,+FAAA,/FAAMP;;AAAN,AAgBA,AAAA7B,4CAAA,8IAAA,mFAAA,kDAAA,2CAAA,oEAAA,+DAKG6B;AAEH,AAAA7B,4CAAA,+JAAA,mFAAA,kDAAA,2CAAA,oEAAA,2FAGG,qBAAA,rBAACgD;AAEJ,AAAAhD,4CAAA,0HAAA,mFAAA,mDAAA,mFAAA,mDAAA,2CAAA,oEAAA,wBAAA,mFAAA,+DAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,iIAAA,mFAAA,oEAAA,2CAAA,6DAAA,KAAA,gEAAA,sVAAA,0GAAA,mFAAA,wEAAA,2CAAA,6DAAA,KAAA,gEAAA,o0BAAA,mFAAA,uDAAA,yIAAA,mFAAA,iEAAA,2CAAA,6DAAA,KAAA,gEAAA,8KAAA,mFAAA,uDAAA,iJAAA,mFAAA,2DAAA,2CAAA,6DAAA,KAAA,gEAAA,iHAAA,mFAAA,uDAAA,mFAAA,mDAAA,gJAAA,mFAAA,mDAAA,2CAAA,gEAAA,wIAAA,sJAAA,mFAAA,mDAAA,2CAAA,gEAAA,4EAAA;AA0DA,AAAAA,4CAAA,kKAAA,mFAAA,kDAAA,2CAAA,oEAAA,4EAGG,WAAAiD;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAMG;iBAAN,AAAAF,4CAAAD,WAAA,IAAA,xEAAQI;IAARF,aAAA,AAAAD,4CAAAD,WAAA,IAAA;IAAAE,iBAAA,AAAAnB,4BAAAmB;gBAAA,AAAAlB,4CAAAkB,eAAA,vEAA2BjB;AAA3B,AACE,GAAI,OAASmB;AACXnB;;AADF;;;AAIL,AAAAnC,4CAAA,4GAAA,mFAAA,mDAAA,2CAAA,2DAAA,mFAAA,qDAAA,mFAAA,qDAAA,iBAAA,y/BAAA,mFAAA,mDAAA,2CAAA,gEAAA,2FAAA,3yCAGG,gFAAA,0GAAA,aAAA,mFAAA,gDAAA,kGAAA,yIAAA,UAAA,mFAAA,uDAAA,mFAAA,mDAAA,/0BAACI;AAQJ;;;oCAAA,mFAAA,mDAAA,1KAA6CmD;AAI7C;;;6CAAA,mFAAA,qFAAA,mFAAA,kDAAA,2CAAA,oEAAA,zcAA6CC,mLAG1CD,2UAGC,WAAAE;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAN,4CAAAO,WAAA,IAAA,/DAAML;iBAAN,AAAAF,4CAAAO,WAAA,IAAA,xEAAQJ;AAAR,AACE,OAACK,yBAASL;;AAEhB,AAAAtD,4CAAA,2GAAA,mFAAA,0DAAA,2CAAA,2DAAA,wCAGG,AAAAe,wIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAwC,yDAAA,AAAA,KAAAtC,cAAA;AAAA,AAAAI;GAAA,AAAA,kSAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,qEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,gEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,2rBAAA,AAAA,qBAAA,AAAA,wCAAA,kBAAAA,wCAAA,AAAA,AAAAA,sDAAA,UAAA;AAAA,AAAA,oBAAAV;AAAAA;;AAAA,AAAA;;oDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAyC,oDAAA,AAAA,KAAAvC,cAAA,rfAAQI;AAAR,AAAA6B;GAAA,AAAA,yRAAA,wCAAA,uDAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,SAAA,AAAA,wUAAA,AAAA,0DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,wDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,mCAAA,AAAA,AAAAA,iDAAA,UAAA;AAAA,AAAA,oBAAAvC;AAAAA;;AAAA,AAAA;;KAAmBuC;AAEtB;;;oCAAA,mFAAA,mDAAA,1KAAKO;AAoBL,AAAA,AAAA9D,4CAAA,sHAAA,AAAAI,gFAAA,qHAAA,2BAAA,oDAAA,UAAA,mFAAA,6DAAA;;AAAA;;;0CAAA,mFAAA,mDAAA,hLAAW2D;AAIX,AAAA/D,4CAAA,qHACE,AAAAe,wIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA4C,0DAAA,AAAA,KAAA1C,cAAA;AAAA,AAAAyC;GAAA,AAAA,oSAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,wEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,mEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,moBAAA,AAAA,qBAAA,AAAA,yCAAA,kBAAAA,yCAAA,AAAA,AAAAA,uDAAA,UAAA;AAAA,AAAA,oBAAA/C;AAAAA;;AAAA,AAAA;;qDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAwC,yDAAA,AAAA,KAAAtC,cAAA,3fAAQyC;AAAR,AAAArC;GAAA,AAAA,kSAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,qEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,gEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,2rBAAA,AAAA,qBAAA,AAAA,wCAAA,kBAAAA,wCAAA,AAAA,AAAAA,sDAAA,UAAA;AAAA,AAAA,oBAAAV;AAAAA;;AAAA,AAAA;;oDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAyC,oDAAA,AAAA,KAAAvC,cAAA,rfAAoBI;AAApB,AAAA6B;GAAA,AAAA,yRAAA,wCAAA,uDAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,SAAA,AAAA,wUAAA,AAAA,0DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,wDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,mCAAA,AAAA,AAAAA,iDAAA,UAAA;AAAA,AAAA,oBAAAvC;AAAAA;;AAAA,AAAA;;KAA+BuC;AAEjC;;;wCAAA,mFAAA,mDAAA,9KAAKU;AAIL,AAAA,AAAAjE,4CAAA,8GAAA,AAAAI,gFAAA,0GAAA,OAAA,mFAAA,mDAAA,uHAAA,OAAA,mFAAA,gDAAA,mFAAA,mDAAA,iJAAA,mFAAA,mDAAA,sJAAA,IAAA;;AAAA;;;qCAAA,mFAAA,mDAAA,3KAA8B8D;AAS9B;;;+CAAA,kFAAA,sEAAA,0EAAA,2DAAA,4DAAA,oEAAA,gEAAA,+DAAA,iEAAA,oEAAA,kEAAA,2DAAA,0DAAA,4DAAA,yDAAA,8DAAA,oFAAA,9oCAAKC;AAKL;;;+CAAA,mFAAA,mDAAA,rLAAeC;AAIf,AAAApE,4CAAA,uIAAA,mFAAA,uDAAA,2CAAA,6DAEc,WAAKO;AAAL,AACE,GACE,OAASA;AADX;;AAAA,oBAEE,AAACE,qDAAW0D,6CAAiB5D;AAF/B;;AAAA,oBAGE,qDAAA,rDAACE,2GAAkBF;AAHrB;;AAAA,AAAA;;;;;WAHhB,mFAAA,0DAAA,kEAAA,mFAAA,qIAAA,mFAAA,gGAAA,mFAAA,3TASuB6D,8LACA3C,mLACAqC;AAEvB,kDAAA,mFAAA,mDAAA,xLAAeO;AAGf;;;gDAAA,kFAAA,2DAAA,wEAAA,qDAAA,kFAAA,sEAAA,2DAAA,qDAAA,wDAAA,iEAAA,kEAAA,iEAAA,oDAAA,gFAAA,4DAAA,4DAAA,uEAAA,oDAAA,wDAAA,0DAAA,oEAAA,6DAAA,kEAAA,+DAAA,4EAAA,yDAAA,9qDAAKC;AAQL;;;gDAAA,iFAAA,sDAAA,oDAAA,qDAAA,wDAAA,sDAAA,uDAAA,wDAAA,oDAAA,jjBAAeC;AAIf,2CAAA,kFAAA,uDAAA,8DAAA,6DAAA,uEAAA,qEAAA,oEAAA,gEAAA,mEAAA,sEAAA,yFAAA,wDAAA,6DAAA,4DAAA,sDAAA,4DAAA,uDAAA,6DAAA,xrCAAeC;AAIf;;;iDAAA,iFAAA,yDAAA,kFAAA,mFAAA,oDAAA,pZAAeC;AAIf;;;gDAAA,mFAAA,mDAAA,tLAAeC;AAIf;;;gDAAA,mFAAA,mDAAA,tLAAeC;AAIf;;;iDAAA,mFAAA,mDAAA,vLAAKC;AAIL;;;0CAAA,mFAAA,mDAAA,hLAAKC;AAIL,AAAA7E,4CAAA,2IAAA,mFAAA,uDAAA,2CAAA,oEAAA,8BAAA,6DAGmB,WAAKO;AAAL,AACE,GACE,OAASA;AADX;;AAAA,oBAEE,AAACE,qDAAW6D,8CAAkB/D;AAFhC;;AAAA,oBAGE,AAACE,qDAAW+D,yCAAajE;AAH3B;;AAAA,oBAIE,qDAAA,rDAACE,2GAAkBF;AAJrB;;AAAA,AAAA;;;;;;WAJrB,mFAAA,yFAAA,mFAAA,wIAAA,mFAAA,mHAAA,mFAAA,gGAAA,mFAAA,vsBAUwBuE,qMACAJ,4MACAG,yLACApD,qLACAqC;AAExB,mDAAA,mFAAA,mDAAA,zLAAeiB;AAGf,AAAA/E,4CAAA,4IAAA,mFAAA,uDAAA,2CAAA,oEAAA,+BAAA,6DAGmB,WAAKO;AAAL,AACE,oBACE,AAACE,qDAAW+D,yCAAajE;AAD3B;;AAAA,oBAEE,qDAAA,rDAACE,2GAAkBF;AAFrB;;AAAA,oBAGE,AAACE,qDAAWgE,+CAAmBlE;AAHjC;;AAAA,AAAA;;;;;WAJrB,mFAAA,mHAAA,mFAAA,gGAAA,mFAAA,yIAAA,mFAAA,sDAAA,mFAAA,gDAAA,mFAAA,mDAAA,j1BASyBsE,yLACApD,+MACAmD,8lBACoCd;AAE7D,oDAAA,mFAAA,mDAAA,1LAAekB;AAGf,AAAAhF,4CAAA,4HAAA,oFAAA,uDAAA,2CAAA,oEAAA,sBAAA,6DAGmB,WAAKO;AAAL,AACE,GACE,OAASA;AADX;;AAAA,GAEE,AAAC0E,yBAAS1E;AAFZ;;AAAA,oBAGE,AAACE,qDAAW8D,8CAAkBhE;AAHhC;;AAAA,oBAIE,AAACE,qDAAW6D,8CAAkB/D;AAJhC;;AAAA,oBAKE,AAACE,qDAAWgE,+CAAmBlE;AALjC;;AAAA,GAME,OAASA;AANX;;AAAA,oBAOE,AAACE,qDAAW0D,6CAAiB5D;AAP/B;;AAAA,oBAQE,qDAAA,rDAACE,2GAAkBF;AARrB;;AAAA,AAAA;;;;;;;;;;WAJrB,mFAAA,yFAAA,mFAAA,4DAAA,oEAAA,mFAAA,uIAAA,mFAAA,wIAAA,mFAAA,yIAAA,mFAAA,0DAAA,kEAAA,mFAAA,qIAAA,mFAAA,gGAAA,mFAAA,jjDAcyBuE,uZAEAH,2NACAD,2NACAE,yaAEAR,8LACA3C,mLACAqC;AAEzB,4CAAA,mFAAA,mDAAA,lLAAeoB;AAGf,AAAAlF,4CAAA,gHAAA,mFAAA,gDAAA,2CAAA,oEAAA,6CAGGgF,kDACA1E,qCACAyE;AAEH,sCAAA,mFAAA,mDAAA,5KAAeI;AAGf,AAAAnF,4CAAA,2KAAA,mFAAA,uDAAA,2CAAA,oEAAA,8CAAA,6DAGmB,WAAKO;AAAL,AACE,GAAI,OAASA;AAAb;;AAAA;;WAJrB,mFAAA,yGAAA,mFAAA,nIAOYb,yLACAgF;AAEZ,oEAAA,mFAAA,mDAAA,1MAAeU;AAGf,AAAA,AAAApF,4CAAA,mHAAA,AAAAI,gFAAA,8GAAA,8CAAA,8CAAA,OAAA,mFAAA,lLACI8E,8CAAiBA,0LAA0BA;;AAD/C;;;uCAAA,mFAAA,mDAAA,7KAAiDG;AAGjD,AAAA,AAAArF,4CAAA,oHAAA,AAAAI,gFAAA,iHAAA,oDAAA,0EAAA,SAAA,mFAAA,tNACIiE,wDAA2Be,2NAAwDL;;AADvF;;;wCAAA,mFAAA,mDAAA,9KAAiDO;AAGjD,AAAA,AAAAtF,4CAAA,+GAAA,AAAAI,gFAAA,0GAAA,IACIiE;;AADJ;;;qCAAA,mFAAA,mDAAA,3KAAiDkB;AAGjD,AAAA,AAAAvF,4CAAA,0GAAA,AAAAI,gFAAA,sGAAA,IACIiE;;AADJ;;;mCAAA,mFAAA,mDAAA,zKAAiDmB;AAGjD,AAAA,AAAAxF,4CAAA,2GAAA,AAAAI,gFAAA,yGAAA,IACIiE;;AADJ;;;oCAAA,mFAAA,mDAAA,1KAAiDoB;AAGjD,AAAA,AAAAzF,4CAAA,2GAAA,AAAAI,gFAAA,yGAAA,IACIiE;;AADJ;;;oCAAA,mFAAA,mDAAA,1KAAiDqB;AAGjD,AAAA,AAAA1F,4CAAA,6GAAA,AAAAI,gFAAA,wGAAA,IACIiE;;AADJ;;;oCAAA,mFAAA,mDAAA,1KAAiDsB;AAGjD,AAAA,AAAA3F,4CAAA,6GAAA,AAAAI,gFAAA,yGAAA,IACIiE;;AADJ;;;oCAAA,mFAAA,mDAAA,1KAAiDuB;AAGjD,AAAA,AAAA5F,4CAAA,+GAAA,AAAAI,gFAAA,6GAAA,oDAAA,QAAA,0DAAA,cAAA,hIACIiE;;AADJ;;;sCAAA,mFAAA,mDAAA,5KAAiDwB;AAGjD,AAAA,AAAA7F,4CAAA,+GAAA,AAAAI,gFAAA,4GAAA,oDAAA,oDAAA,OAAA,mFAAA,9LACIiE,oDAAuBA,gMAAgCA;;AAD3D;;;qCAAA,mFAAA,mDAAA,3KAAiDyB;AAGjD,AAAA,AAAA9F,4CAAA,mIAAA,AAAAI,gFAAA,iIAAA,oDAAA,UAAA,1DACIiE;;AADJ;;;gDAAA,mFAAA,mDAAA,tLAAwD0B;AAGxD,AAAA,AAAA/F,4CAAA,yGAAA,AAAAI,gFAAA,wGAAA,IACIiE;;AADJ;;;mCAAA,mFAAA,mDAAA,zKAAwD2B;AAGxD,AAAA,AAAAhG,4CAAA,6GAAA,AAAAI,gFAAA,2GAAA,IACIiE;;AADJ;;;qCAAA,mFAAA,mDAAA,3KAAwD4B;AAGxD,AAAA,AAAAjG,4CAAA,qHAAA,AAAAI,gFAAA,iHAAA,IACIiE;;AADJ;;;wCAAA,mFAAA,mDAAA,9KAAwD6B;AAGxD,AAAA,AAAAlG,4CAAA,sHAAA,AAAAI,gFAAA,mHAAA,IACI2E;;AADJ;;;yCAAA,mFAAA,mDAAA,/KAAiDoB;AAGjD,AAAA,AAAAnG,4CAAA,yHAAA,AAAAI,gFAAA,uHAAA,IACI2E;;AADJ;;;2CAAA,mFAAA,mDAAA,jLAAiDqB;AAGjD,AAAA,AAAApG,4CAAA,mHAAA,AAAAI,gFAAA,+GAAA,IACI2E;;AADJ;;;uCAAA,mFAAA,mDAAA,7KAAiDsB;AAGjD,AAAA,AAAArG,4CAAA,mGAAA,AAAAI,gFAAA,iGAAA,wCAAA,wCAAA,OAAA,mFAAA,tKACI+E,wCAAWA,oLAAoBA;;AADnC;;;qCAAA,mFAAA,mDAAA,3KAAiDmB;AAGjD,AAAA,AAAAtG,4CAAA,mGAAA,AAAAI,gFAAA,kGAAA,qDAAA,wCAAA,OAAA,mFAAA,nLACI2E,qDAAwBI,oLAAoBA;;AADhD;;;gCAAA,mFAAA,mDAAA,tKAAiDoB;AAGjD,AAAA,AAAAvG,4CAAA,oGAAA,AAAAI,gFAAA,iGAAA,qDAAA,qDAAA,OAAA,mFAAA,hMAAsD2E,qDAAwBA,iMAAiCA;;AAA/G;;;AAAAyB,sCAAA,mFAAA,mDAAA;AAEA,AAAA,AAAAxG,4CAAA,oGAAA,AAAAI,gFAAA,kGAAA,qDAAA,qDAAA,OAAA,mFAAA,hMAAsD2E,qDAAwBA,iMAAiCA;;AAA/G;;;qCAAA,mFAAA,mDAAA,3KAAiD0B;AAEjD,AAAA,AAAAzG,4CAAA,2GAAA,AAAAI,gFAAA,yGAAA,IACI2E;;AADJ;;;oCAAA,mFAAA,mDAAA,1KAAiD2B;AAGjD,AAAA,AAAA1G,4CAAA,yGAAA,AAAAI,gFAAA,wGAAA,IACI2E;;AADJ;;;mCAAA,mFAAA,mDAAA,zKAAiD4B;AAGjD,AAAA,AAAA3G,4CAAA,4GAAA,AAAAI,gFAAA,yGAAA,IACI2E;;AADJ;;;oCAAA,mFAAA,mDAAA,1KAAiD6B;AAGjD,AAAA,AAAA5G,4CAAA,yGAAA,AAAAI,gFAAA,qGAAA,IACI2E;;AADJ;;;kCAAA,mFAAA,mDAAA,xKAAiD8B;AAGjD,AAAA,AAAA7G,4CAAA,4GAAA,AAAAI,gFAAA,yGAAA,qDAAA,jDACI2E,qDAAyBA;;AAD7B;;;oCAAA,mFAAA,mDAAA,1KAA+D+B;AAG/D,AAAA,AAAA9G,4CAAA,2GAAA,AAAAI,gFAAA,wGAAA,IACI2E;;AADJ;;;mCAAA,mFAAA,mDAAA,zKAA+DgC;AAG/D,AAAA,AAAA/G,4CAAA,wGAAA,AAAAI,gFAAA,qGAAA,IACI2E;;AADJ;;;kCAAA,mFAAA,mDAAA,xKAA+DiC;AAG/D,AAAA,AAAAhH,4CAAA,yGAAA,AAAAI,gFAAA,sGAAA,IACI2E;;AADJ;;;kCAAA,mFAAA,mDAAA,xKAA+DkC;AAa/D,AAAA,AAAAjH,4CAAA,4HAAA,AAAAI,gFAAA,yHAAA,+DAAA,+DAAA,OAAA,mFAAA,mDAAA,9PACa4E,+DACAA;;AAFb;;;4CAAA,mFAAA,mDAAA,lLAAmDkC;AAKnD,AAAA,AAAAlH,4CAAA,iIAAA,AAAAI,gFAAA,+HAAA,6DAAA,OAAA,mFAAA,mDAAA,gJAAA,OAAA,mFAAA,6DAAA,mFAAA,mDAAA,5mBACW4E;;AADX;;;+CAAA,mFAAA,mDAAA,rLAAsDmC;AAMtD,AAAA,AAAAnH,4CAAA,iHAAA,AAAAI,gFAAA,+GAAA,OACO4E;;AADP;;;uCAAA,mFAAA,mDAAA,7KAA8DoC;AAG9D,AAAA,AAAApH,4CAAA,wHAAA,AAAAI,gFAAA,qHAAA,OACO4E;;AADP;;;0CAAA,mFAAA,mDAAA,hLAA8DqC;AAG9D,AAAA,AAAArH,4CAAA,qHAAA,AAAAI,gFAAA,iHAAA,OACO4E;;AADP;;;wCAAA,mFAAA,mDAAA,9KAA8DsC;AAG9D,AAAA,AAAAtH,4CAAA,iHAAA,AAAAI,gFAAA,+GAAA,yDAAA,OAAA,mFAAA,6DAAA,mFAAA,mDAAA,/UACO4E;;AADP;;;uCAAA,mFAAA,mDAAA,7KAA8DuC;AAI9D,AAAA,AAAAvH,4CAAA,gHAAA,AAAAI,gFAAA,4GAAA,OACO4E;;AADP;;;sCAAA,mFAAA,mDAAA,5KAA8DwC;AAG9D,AAAA,AAAAxH,4CAAA,+HAAA,AAAAI,gFAAA,6HAAA,OACO4E;;AADP;;;8CAAA,mFAAA,mDAAA,pLAA8DyC;AAG9D,AAAA,AAAAzH,4CAAA,kHAAA,AAAAI,gFAAA,8GAAA,WACW4E;;AADX;;;uCAAA,mFAAA,mDAAA,7KAA8D0C;AAG9D,AAAA,AAAA1H,4CAAA,uHAAA,AAAAI,gFAAA,mHAAA,WACW4E;;AADX;;;yCAAA,mFAAA,mDAAA,/KAA8D2C;AAG9D,AAAA,AAAA3H,4CAAA,sHAAA,AAAAI,gFAAA,oHAAA,WACW4E;;AADX;;;yCAAA,mFAAA,mDAAA,/KAA8D4C;AAG9D,AAAA,AAAA5H,4CAAA,kIAAA,AAAAI,gFAAA,+HAAA,6DAAA,4CAAA,OAAA,mFAAA,xLACW4E,uDACA7E,8LACUA;;AAHrB;;;+CAAA,mFAAA,mDAAA,rLAAsD0H;AAKtD,qDAAA,oFAAA,qDAAA,2CAAA,oEAAA,mCAAA,mEAAA,yDAAA,yDAAA,qDAAA,mDAAA,sDAAA,wDAAA,2DAAA,txBAAeC;AAGf,AAAA,AAAA9H,4CAAA,0HAAA,AAAAI,gFAAA,sHAAA,6DAAA,0DAAA,5GACW4E,2DACAD,wDACA+C;;AAHX;;;2CAAA,mFAAA,mDAAA,jLAAsDC;AAKtD,AAAA,AAAA/H,4CAAA,wGAAA,AAAAgI,2CAAA;;AAAA;;;kCAAA,mFAAA,mDAAA,xKAAyCC;AAEzC,AAAA,AAAAjI,4CAAA,oIAAA,AAAAI,gFAAA,gIAAA,6DAAA,0DAAA,5GACW4E,2DACAD,wDACA+C;;AAHX;;;gDAAA,mFAAA,mDAAA,tLAAsDI;AAKtD,AAAAlI,4CAAA,sIACE,AAAAe,wIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA+G,qDAAA,AAAA,KAAA7G,cAAA;AAAA,AAAAgF;GAAA,AAAA,gRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,mDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,+CAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qwBAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,oCAAA,AAAA,AAAAA,kDAAA,UAAA;AAAA,AAAA,oBAAAtF;AAAAA;;AAAA,AAAA;;gDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAgH,2DAAA,AAAA,KAAA9G,cAAA,xfAAQgF;AAAR,AAAAyB;GAAA,AAAA,uSAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,qLAAA,AAAA,wUAAA,AAAA,yEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,oEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,2zBAAA,AAAA,qBAAA,AAAA,0CAAA,kBAAAA,0CAAA,AAAA,AAAAA,wDAAA,UAAA;AAAA,AAAA,oBAAA/G;AAAAA;;AAAA,AAAA;;sDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAiH,gEAAA,AAAA,KAAA/G,cAAA,ngBAAUyG;AAAV,AAAAG;GAAA,AAAA,gTAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,qLAAA,AAAA,wUAAA,AAAA,mFAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,8EAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,q0BAAA,AAAA,qBAAA,AAAA,+CAAA,kBAAAA,+CAAA,AAAA,AAAAA,6DAAA,UAAA;AAAA,AAAA,oBAAAlH;AAAAA;;AAAA,AAAA;;2DAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAkH,+DAAA,AAAA,KAAAhH,cAAA,vgBAAuB4G;AAAvB,AAAAL;GAAA,AAAA,8SAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,wUAAA,AAAA,iFAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,6EAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,m2BAAA,AAAA,qBAAA,AAAA,8CAAA,kBAAAA,8CAAA,AAAA,AAAAA,4DAAA,UAAA;AAAA,AAAA,oBAAA7G;AAAAA;;AAAA,AAAA;;0DAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAmH,kDAAA,AAAA,KAAAjH,cAAA,zfAAyCuG;AAAzC,AAAAI;GAAA,AAAA,oRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,2JAAA,AAAA,wUAAA,AAAA,qDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,oDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,+IAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAAjH;AAAAA;;AAAA,AAAA;;KAA0DiH;AAI5D;;;qCAAA,mFAAA,mDAAA,3KAAKO;AAIL,AAAA,AAAAxI,4CAAA,uGAAA,AAAAI,gFAAA,qGAAA,kDAAA,mDAAA,gBAAA,mFAAA,zLACgBoI,mDACAA,4LACMA;;AAHtB;;;kCAAA,mFAAA,mDAAA,xKAAWC;AAKX,AAAA,AAAAzI,4CAAA,sGAAA,AAAAI,gFAAA,kGAAA,kDAAA,mDAAA,gBAAA,mFAAA,zLACgBoI,mDACAA,4LACMA;;AAHtB;;;iCAAA,mFAAA,mDAAA,vKAAWE;AAKX,AAAA,AAAA1I,4CAAA,uGAAA,AAAAI,gFAAA,qGAAA,SAAuBoI;;AAAvB;;;kCAAA,mFAAA,mDAAA,xKAAWG;AAEX,qEAAA,mFAAA,uDAAA,2CAAA,oEAAA,wDAAA,yIAAA,/fAAeC,ibAGI,qBAAA,rBAAChI,2IACD,WAAKL;AAAL,AACE,oBAAI,qDAAA,rDAACE,oIAA8BF;AAAnC;;AAAA;;WALrB,mFAAA,qIAAA,mFAAA,zIAQuBF,+LACAyD;AAEvB,AAAA9D,4CAAA,uIAAA,mFAAA,uDAAA,2CAAA,oEAAA,8BAAA,mFAAA,gDAAA,oFAAA,0DAAA,mFAAA,mDAAA,xNAKI8E,gWAGA8D,mEACA1D,0CACAzD;AAEJ;;;iDAAA,mFAAA,mDAAA,vLAAeoH;AAIf,AAAA7I,4CAAA,iIAAA,mFAAA,uDAAA,2CAAA,oEAAA,mBAAA,6DAGmB,WAAKO;AAAL,AACE,oBAAI,qDAAA,rDAACE,2GAAkBF;AAAvB;;AAAA;;WAJrB,mFAAA,gGAAA,mFAAA,sDAAA,mFAAA,wEAAA,0DAAA,mFAAA,mDAAA,9gBAOWkB,sTAEAqD,gWAGAI,0CACA0D;AAEX;;;8CAAA,mFAAA,mDAAA,pLAAeE;AAiBf,AAAA,AAAA9I,4CAAA,qGAAA,AAAAI,gFAAA,iGAAA,uDAAA,gEAAA,wBAAA,mFAAA,1NAAqByI,gEAAmCA,gNAAgDA;;AAAxG;;;mCAAA,mFAAA,mDAAA,zKAAWE;AACX,AAAA,AAAA/I,4CAAA,qGAAA,AAAAI,gFAAA,oGAAA,uDAAA,gEAAA,wBAAA,mFAAA,1NAAqByI,gEAAmCA,gNAAgDA;;AAAxG;;;yCAAA,mFAAA,mDAAA,/KAAWG;AAEX,AAAA,AAAAhJ,4CAAA,oGAAA,AAAAI,gFAAA,iGAAA,oDAAA,5CAAqB0I,6DAAgCA;;AAArD;;;mCAAA,mFAAA,mDAAA,zKAAWG;AACX,AAAA,AAAAjJ,4CAAA,qGAAA,AAAAI,gFAAA,iGAAA,oDAAA,5CAAqB0I,6DAAgCA;;AAArD;;;mCAAA,mFAAA,mDAAA,zKAAWI;AACX,AAAA,AAAAlJ,4CAAA,uGAAA,AAAAI,gFAAA,mGAAA,oDAAA,5CAAqB0I,6DAAgCA;;AAArD;;;uCAAA,mFAAA,mDAAA,7KAAWK;AACX,AAAA,AAAAnJ,4CAAA,qGAAA,AAAAI,gFAAA,mGAAA,oDAAA,5CAAqB0I,6DAAgCA;;AAArD;;;uCAAA,mFAAA,mDAAA,7KAAWM;AAGX,AAAA,AAAApJ,4CAAA,iHAAA,AAAAI,gFAAA,6GAAA,oDAAA,kDAAA,9FAAyB0I,kDAAqBA,kDAAqBA;;AAAnE;;;sCAAA,mFAAA,mDAAA,5KAAWO;AAGX,AAAA,AAAArJ,4CAAA,8GAAA,AAAAI,gFAAA,2GAAA,wDAAA,wDAAA,sDAAA,sDAAA,sDAAA,tQACY0I,wDACAA,sDACAA,sDACAA,sDACAA,sDACAA;;AANZ;;;qCAAA,mFAAA,mDAAA,3KAAmBQ;AASnB,AAAA,AAAAtJ,4CAAA,gHAAA,AAAAI,gFAAA,8GAAA,QAAmC0D;;AAAnC;;;sCAAA,mFAAA,mDAAA,5KAAmByF;AACnB,AAAA,AAAAvJ,4CAAA,kHAAA,AAAAI,gFAAA,gHAAA,QAAmC0D;;AAAnC;;;uCAAA,mFAAA,mDAAA,7KAAmB0F;AAInB,AAAA,AAAAxJ,4CAAA,kHAAA,AAAAI,gFAAA,gHAAA,QAAoC0D;;AAApC;;;uCAAA,mFAAA,mDAAA,7KAAmB2F;AACnB,AAAA,AAAAzJ,4CAAA,oHAAA,AAAAI,gFAAA,gHAAA,QAAoC0D;;AAApC;;;wCAAA,mFAAA,mDAAA,9KAAmB4F;AAEnB,kDAAA,mFAAA,mDAAA,mFAAA,0EAAA,2CAAA,6DAAA,aAAA,1cAAeC;AAKf,IAAAC,mBAAA,AAAAC,cAAA,mFAAA,yHAAA,qHAAA,iHAAA;IAAAC,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,2BAAA,AAAAD,wDAAAE,/EAAQS;AAAR,AAAA,AACE,AAAAzK,iEAAA,mFAAA,xGAAQyK,wJAGL,wNAAA,wDAAA,kEAAA,UAAA,mFAAA,/aAACrK,gFAAe,AAACsK,gDAAQ,AAACC,eAAKF,iFACPpG,kEACUA,0MACGsF,8DAErC,wNAAA,0DAAA,wDAAA,kEAAA,yEAAA,yBAAA,mFAAA,jkBAACvJ,gFAAe,AAACsK,gDAAQ,AAACC,eAAKF,mFACLd,wDACFtF,kEACUA,yEACOA,kNACOA;;AAdrD;AAAA,eAAAuF;eAAAE;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAC,2BAAA,AAAAJ,cAAAD;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,uBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,wBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,2BAAA,AAAAI,gBAAAX,vCAAQa;AAAR,AAAA,AACE,AAAAzK,iEAAA,mFAAA,xGAAQyK,wJAGL,wNAAA,wDAAA,kEAAA,UAAA,mFAAA,/aAACrK,gFAAe,AAACsK,gDAAQ,AAACC,eAAKF,iFACPpG,kEACUA,0MACGsF,8DAErC,wNAAA,0DAAA,wDAAA,kEAAA,yEAAA,yBAAA,mFAAA,jkBAACvJ,gFAAe,AAACsK,gDAAQ,AAACC,eAAKF,mFACLd,wDACFtF,kEACUA,yEACOA,kNACOA;;AAdrD;AAAA,eAAA,AAAAmG,eAAAZ;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;AAgBA;;;0CAAA,mFAAA,mDAAA,hLAAkCgB;AAGlC;;;wCAAA,mFAAA,mDAAA,9KAAgCC;AAGhC;;;uCAAA,mFAAA,mDAAA,7KAA+BC;AAK/B;;;+CAAA,mFAAA,mDAAA,rLAEEC;AAIF,kDAAA,mFAAA,mDAAA,mFAAA,4EAAA,2CAAA,6DAAA,aAAA,5cAAeC;AAmBf,AAAA,AAAAhL,4CAAA,2HAAA,AAAAI,gFAAA,wHAAA,0CAAA,IAAA,mFAAA,gDAAA,oDAAA,mFAAA,qDAAA,4DAAA,qDAAA,qEAAA,OAAA,mFAAA,mDAAA,iJAAA,UAAA,mFAAA,t5BACU0D,m9BAKUkH;;AANpB;;;4CAAA,mFAAA,mDAAA,lLAAmBC;AAanB,wCAAA,mFAAA,mDAAA,9KAAeC;AAGf,AAAA,AAAAlL,4CAAA,+GAAA,AAAAI,gFAAA,6GAAA,aAAA,mFAAA,sFAAA,tCACkB8K;;AADlB;;;sCAAA,mFAAA,mDAAA,5KAAmBC;AAGnB,AAAAnL,4CAAA,mIACE,AAAAe,wIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAgK,kDAAA,AAAA,KAAA9J,cAAA;AAAA,AAAAmH;GAAA,AAAA,oRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,sDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,mDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,g0BAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAAzH;AAAAA;;AAAA,AAAA;;6CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAiK,iDAAA,AAAA,KAAA/J,cAAA,3eAAQmH;AAAR,AAAAC;GAAA,AAAA,kRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,qDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,gDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,6zBAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,gCAAA,AAAA,AAAAA,8CAAA,UAAA;AAAA,AAAA,oBAAA1H;AAAAA;;AAAA,AAAA;;4CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAkK,kDAAA,AAAA,KAAAhK,cAAA,3eAAYoH;AAAZ,AAAAC;GAAA,AAAA,qRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,uDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,mDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,+UAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAA3H;AAAAA;;AAAA,AAAA;;6CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAmK,mDAAA,AAAA,KAAAjK,cAAA,7eAAeqH;AAAf,AAAAM;GAAA,AAAA,iRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,kDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,+CAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,8jBAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,kCAAA,AAAA,AAAAA,gDAAA,UAAA;AAAA,AAAA,oBAAAjI;AAAAA;;AAAA,AAAA;;8CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAoK,uDAAA,AAAA,KAAAlK,cAAA,lfAAmB2H;AAAnB,AAAAE;GAAA,AAAA,kRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,qDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,iDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,gkBAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,sCAAA,AAAA,AAAAA,oDAAA,UAAA;AAAA,AAAA,oBAAAnI;AAAAA;;AAAA,AAAA;;kDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAqK,mDAAA,AAAA,KAAAnK,cAAA,lfAAqB6H;AAArB,AAAAD;GAAA,AAAA,+QAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,mDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,+CAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,8jBAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,kCAAA,AAAA,AAAAA,gDAAA,UAAA;AAAA,AAAA,oBAAAlI;AAAAA;;AAAA,AAAA;;8CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAsK,uDAAA,AAAA,KAAApK,cAAA,lfAAwB4H;AAAxB,AAAAE;GAAA,AAAA,mRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,qDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,iDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,gkBAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,sCAAA,AAAA,AAAAA,oDAAA,UAAA;AAAA,AAAA,oBAAApI;AAAAA;;AAAA,AAAA;;kDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAuK,mDAAA,AAAA,KAAArK,cAAA,lfAA0B8H;AAA1B,AAAAL;GAAA,AAAA,+QAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,oDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,+CAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,84BAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,kCAAA,AAAA,AAAAA,gDAAA,UAAA;AAAA,AAAA,oBAAA/H;AAAAA;;AAAA,AAAA;;8CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAwK,yDAAA,AAAA,KAAAtK,cAAA,pfAA6ByH;AAA7B,AAAAC;GAAA,AAAA,mRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,qDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,kDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,i5BAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,wCAAA,AAAA,AAAAA,sDAAA,UAAA;AAAA,AAAA,oBAAAhI;AAAAA;;AAAA,AAAA;;KAA+BgI;AAEjC,AAAAhJ,4CAAA,6GAAA,mFAAA,uDAAA,2CAAA,oEAAA,0BAAA,6DAGmB,WAAKO;AAAL,AACE,oBACE,AAACE,qDAAWgE,+CAAmBlE;AADjC;;AAAA,oBAEE,AAACE,qDAAW6D,8CAAkB/D;AAFhC;;AAAA,oBAGE,AAACE,qDAAW0D,6CAAiB5D;AAH/B;;AAAA,oBAIE,AAACE,qDAAW8D,8CAAkBhE;AAJhC;;AAAA,AAAA;;;;;;WAJrB,mFAAA,mHAAA,mFAAA,kHAAA,mFAAA,+GAAA,mFAAA,kHAAA,mFAAA,ttBAUcqE,sMACAF,mMACAN,oMACAO,+LACD,AAAA5D,wIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAgK,kDAAA,AAAA,KAAA9J,cAAA;AAAA,AAAAmH;GAAA,AAAA,oRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,sDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,mDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,g0BAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAAzH;AAAAA;;AAAA,AAAA;;6CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAiK,iDAAA,AAAA,KAAA/J,cAAA,3eAECmH;AAFD,AAAAC;GAAA,AAAA,kRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,qDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,gDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,6zBAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,gCAAA,AAAA,AAAAA,8CAAA,UAAA;AAAA,AAAA,oBAAA1H;AAAAA;;AAAA,AAAA;;4CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAkK,kDAAA,AAAA,KAAAhK,cAAA,3eAEKoH;AAFL,AAAAC;GAAA,AAAA,qRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,uDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,mDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,+UAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAA3H;AAAAA;;AAAA,AAAA;;6CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAuK,mDAAA,AAAA,KAAArK,cAAA,7eAEQqH;AAFR,AAAAI;GAAA,AAAA,+QAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,oDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,+CAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,84BAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,kCAAA,AAAA,AAAAA,gDAAA,UAAA;AAAA,AAAA,oBAAA/H;AAAAA;;AAAA,AAAA;;8CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAwK,yDAAA,AAAA,KAAAtK,cAAA,pfAEYyH;AAFZ,AAAAC;GAAA,AAAA,mRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,qDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,kDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,i5BAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,wCAAA,AAAA,AAAAA,sDAAA,UAAA;AAAA,AAAA,oBAAAhI;AAAAA;;AAAA,AAAA;;oDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAmK,mDAAA,AAAA,KAAAjK,cAAA,pfAEc0H;AAFd,AAAAC;GAAA,AAAA,iRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,kDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,+CAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,8jBAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,kCAAA,AAAA,AAAAA,gDAAA,UAAA;AAAA,AAAA,oBAAAjI;AAAAA;;AAAA,AAAA;;8CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAqK,mDAAA,AAAA,KAAAnK,cAAA,9eAEiB2H;AAFjB,AAAAC;GAAA,AAAA,+QAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,mDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,+CAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,8jBAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,kCAAA,AAAA,AAAAA,gDAAA,UAAA;AAAA,AAAA,oBAAAlI;AAAAA;;AAAA,AAAA;;8CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAoK,uDAAA,AAAA,KAAAlK,cAAA,lfAEmB4H;AAFnB,AAAAC;GAAA,AAAA,kRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,qDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,iDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,gkBAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,sCAAA,AAAA,AAAAA,oDAAA,UAAA;AAAA,AAAA,oBAAAnI;AAAAA;;AAAA,AAAA;;kDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAsK,uDAAA,AAAA,KAAApK,cAAA,tfAEqB6H;AAFrB,AAAAC;GAAA,AAAA,mRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,qDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,iDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,gkBAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,sCAAA,AAAA,AAAAA,oDAAA,UAAA;AAAA,AAAA,oBAAApI;AAAAA;;AAAA,AAAA;;kDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAyK,sDAAA,AAAA,KAAAvK,cAAA,rfAEwB8H;AAFxB,AAAAC;GAAA,AAAA,2RAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,gEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,2DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,4vBAAA,AAAA,qBAAA,AAAA,qCAAA,kBAAAA,qCAAA,AAAA,AAAAA,mDAAA,UAAA;AAAA,AAAA,oBAAArI;AAAAA;;AAAA,AAAA;;iDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA0K,0DAAA,AAAA,KAAAxK,cAAA,xfAE2B+H;AAF3B,AAAAuB;GAAA,AAAA,mSAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,uEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,kEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,0CAAA,kBAAAA,yCAAA,AAAA,AAAAA,uDAAA,UAAA;AAAA,AAAA,oBAAA5J;AAAAA;;AAAA,AAAA;;qDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA2K,wDAAA,AAAA,KAAAzK,cAAA,1fAEmCsJ;AAFnC,AAAAC;GAAA,AAAA,gSAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,mEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,+DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,wCAAA,kBAAAA,uCAAA,AAAA,AAAAA,qDAAA,UAAA;AAAA,AAAA,oBAAA7J;AAAAA;;AAAA,AAAA;;mDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA4K,uDAAA,AAAA,KAAA1K,cAAA,vfAE+CuJ;AAF/C,AAAAC;GAAA,AAAA,8RAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,kEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,4DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,uCAAA,kBAAAA,sCAAA,AAAA,AAAAA,oDAAA,UAAA;AAAA,AAAA,oBAAA9J;AAAAA;;AAAA,AAAA;;kDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA6K,+DAAA,AAAA,KAAA3K,cAAA,9fAEyDwJ;AAFzD,AAAAC;GAAA,AAAA,8SAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,iFAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,6EAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,qBAAA,AAAA,+CAAA,kBAAAA,8CAAA,AAAA,AAAAA,4DAAA,UAAA;AAAA,AAAA,oBAAA/J;AAAAA;;AAAA,AAAA;;0DAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA8K,qDAAA,AAAA,KAAA5K,cAAA,5fAICyJ;AAJD,AAAAzB;GAAA,AAAA,2RAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,6DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,yDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,m5CAAA,AAAA,qBAAA,AAAA,oCAAA,kBAAAA,oCAAA,AAAA,AAAAA,kDAAA,UAAA;AAAA,AAAA,oBAAAtI;AAAAA;;AAAA,AAAA;;gDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA+K,uDAAA,AAAA,KAAA7K,cAAA,pfAIkBgI;AAJlB,AAAAG;GAAA,AAAA,8RAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,gEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,8DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,sVAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,sCAAA,AAAA,AAAAA,oDAAA,UAAA;AAAA,AAAA,oBAAAzI;AAAAA;;AAAA,AAAA;;kDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAgL,wDAAA,AAAA,KAAA9K,cAAA,vfAIyBmI;AAJzB,AAAAC;GAAA,AAAA,iSAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,mEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,8DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,sVAAA,AAAA,qBAAA,AAAA,uCAAA,kBAAAA,uCAAA,AAAA,AAAAA,qDAAA,UAAA;AAAA,AAAA,oBAAA1I;AAAAA;;AAAA,AAAA;;mDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAiL,sDAAA,AAAA,KAAA/K,cAAA,tfAIkCoI;AAJlC,AAAAH;GAAA,AAAA,4RAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,+DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,4DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,oVAAA,AAAA,qBAAA,AAAA,qCAAA,kBAAAA,qCAAA,AAAA,AAAAA,mDAAA,UAAA;AAAA,AAAA,oBAAAvI;AAAAA;;AAAA,AAAA;;iDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAkL,uDAAA,AAAA,KAAAhL,cAAA,rfAI4CiI;AAJ5C,AAAAC;GAAA,AAAA,+RAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,gEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,8DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,sVAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,sCAAA,AAAA,AAAAA,oDAAA,UAAA;AAAA,AAAA,oBAAAxI;AAAAA;;AAAA,AAAA;;kDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAmL,4DAAA,AAAA,KAAAjL,cAAA,3fAIoDkI;AAJpD,AAAAyB;GAAA,AAAA,wSAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,4EAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,sEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,8oDAAA,AAAA,qBAAA,AAAA,2CAAA,kBAAAA,2CAAA,AAAA,AAAAA,yDAAA,UAAA;AAAA,AAAA,oBAAAjK;AAAAA;;AAAA,AAAA;;uDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAoL,sDAAA,AAAA,KAAAlL,cAAA,1fAI6D2J;AAJ7D,AAAAE;GAAA,AAAA,6RAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,8DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,2DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,knBAAA,AAAA,qBAAA,AAAA,qCAAA,kBAAAA,qCAAA,AAAA,AAAAA,mDAAA,UAAA;AAAA,AAAA,oBAAAnK;AAAAA;;AAAA,AAAA;;KAI2EmK;AAExF,yCAAA,mFAAA,uDAAA,2CAAA,oEAAA,lSAAesB,4TAC8BjE,mCAAOtD;AAEpD,0CAAA,mFAAA,uDAAA,mFAAA,vQAAewH,yUACQD;AAEvB,0CAAA,mFAAA,mDAAA,2CAAA,oEAAA,wBAAA,mFAAA,4DAAA,2CAAA,6DAAA,9iBAAeE,2jBAGezH;AAE9B,AAAA,AAAAlF,4CAAA,2GAAA,AAAAI,gFAAA,uGAAA,kDAAA,UAAA,mFAAA,rIACUsM,kMAA+BC;;AADzC;;;oCAAA,mFAAA,mDAAA,1KAAwDC;AAGxD,AAAA5M,4CAAA,oIACE,AAAAe,wIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA+G,qDAAA,AAAA,KAAA7G,cAAA;AAAA,AAAAgF;GAAA,AAAA,gRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,mDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,+CAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qwBAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,oCAAA,AAAA,AAAAA,kDAAA,UAAA;AAAA,AAAA,oBAAAtF;AAAAA;;AAAA,AAAA;;gDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAyL,gDAAA,AAAA,KAAAvL,cAAA,7eAAQgF;AAAR,AAAAC;GAAA,AAAA,iRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,mDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,gDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,iyBAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,+BAAA,AAAA,AAAAA,6CAAA,UAAA;AAAA,AAAA,oBAAAvF;AAAAA;;AAAA,AAAA;;2CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,8CAAA,AAAA,KAAAE,cAAA,9aAAUiF;AAAV,AAAAC;GAAA,AAAA,gRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,mEAAA,yDAAA,oDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,oDAAA,AAAA,mCAAA,AAAA,+CAAA,AAAA,EAAA,AAAA,IAAA,AAAA,s1BAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,qCAAA,AAAA,AAAAA,mDAAA,UAAA;AAAA,AAAA,oBAAAxF;AAAAA;;AAAA,AAAA;;KAAAwF,4CAAA,mFAAA,iBAAAxF,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA0L,qDAAA,AAAA,KAAAxL,cAAA;AAAA,AAAAmF;GAAA,AAAA,iRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,kDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,gDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,u1BAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,oCAAA,AAAA,AAAAA,kDAAA,UAAA;AAAA,AAAA,oBAAAzF;AAAAA;;AAAA,AAAA;;gDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA2L,uDAAA,AAAA,KAAAzL,cAAA,pfAAcmF;AAAd,AAAApB;GAAA,AAAA,6RAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,kEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,4DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,szBAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,sCAAA,AAAA,AAAAA,oDAAA,UAAA;AAAA,AAAA,oBAAArE;AAAAA;;AAAA,AAAA;;kDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA4L,qDAAA,AAAA,KAAA1L,cAAA,pfAAgB+D;AAAhB,AAAAE;GAAA,AAAA,yRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,8DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,wDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qWAAA,AAAA,qBAAA,AAAA,oCAAA,kBAAAA,oCAAA,AAAA,AAAAA,kDAAA,UAAA;AAAA,AAAA,oBAAAvE;AAAAA;;AAAA,AAAA;;gDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA6L,oDAAA,AAAA,KAAA3L,cAAA,jfAAyBiE;AAAzB,AAAAmB;GAAA,AAAA,wRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,2DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,uDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,sWAAA,AAAA,qBAAA,AAAA,mCAAA,kBAAAA,mCAAA,AAAA,AAAAA,iDAAA,UAAA;AAAA,AAAA,oBAAA1F;AAAAA;;AAAA,AAAA;;+CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA8L,mDAAA,AAAA,KAAA5L,cAAA,/eAAgCoF;AAAhC,AAAAC;GAAA,AAAA,uRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,yDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,sDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qWAAA,AAAA,qBAAA,AAAA,kCAAA,kBAAAA,kCAAA,AAAA,AAAAA,gDAAA,UAAA;AAAA,AAAA,oBAAA3F;AAAAA;;AAAA,AAAA;;8CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA+L,oDAAA,AAAA,KAAA7L,cAAA,/eAAsCqF;AAAtC,AAAAC;GAAA,AAAA,uRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,2DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,uDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,sWAAA,AAAA,qBAAA,AAAA,mCAAA,kBAAAA,mCAAA,AAAA,AAAAA,iDAAA,UAAA;AAAA,AAAA,oBAAA5F;AAAAA;;AAAA,AAAA;;+CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAgM,kDAAA,AAAA,KAAA9L,cAAA,9eAA2CsF;AAA3C,AAAAC;GAAA,AAAA,mRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,uDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,mDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,kWAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAA7F;AAAAA;;AAAA,AAAA;;6CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAiM,oDAAA,AAAA,KAAA/L,cAAA,9eAAiDuF;AAAjD,AAAAC;GAAA,AAAA,yRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,sMAAA,AAAA,wUAAA,AAAA,0DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,uDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,2jBAAA,AAAA,qBAAA,AAAA,mCAAA,kBAAAA,mCAAA,AAAA,AAAAA,iDAAA,UAAA;AAAA,AAAA,oBAAA9F;AAAAA;;AAAA,AAAA;;+CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAkM,mDAAA,AAAA,KAAAhM,cAAA,/eAAqDwF;AAArD,AAAAC;GAAA,AAAA,sRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,sMAAA,AAAA,wUAAA,AAAA,wDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,sDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qWAAA,AAAA,qBAAA,AAAA,kCAAA,kBAAAA,kCAAA,AAAA,AAAAA,gDAAA,UAAA;AAAA,AAAA,oBAAA/F;AAAAA;;AAAA,AAAA;;8CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAmM,kDAAA,AAAA,KAAAjM,cAAA,7eAA2DyF;AAA3D,AAAAC;GAAA,AAAA,mRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,sMAAA,AAAA,wUAAA,AAAA,uDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,mDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,kWAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAAhG;AAAAA;;AAAA,AAAA;;6CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAoM,kDAAA,AAAA,KAAAlM,cAAA,5eAAgE0F;AAAhE,AAAAC;GAAA,AAAA,oRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,sMAAA,AAAA,wUAAA,AAAA,qDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,oDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,mWAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAAjG;AAAAA;;AAAA,AAAA;;6CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAqM,oDAAA,AAAA,KAAAnM,cAAA,9eAAoE2F;AAApE,AAAA2F;GAAA,AAAA,qRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,wUAAA,AAAA,0DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,qDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,0nBAAA,AAAA,qBAAA,AAAA,kCAAA,kBAAAA,mCAAA,AAAA,AAAAA,iDAAA,UAAA;AAAA,AAAA,oBAAA5L;AAAAA;;AAAA,AAAA;;+CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAsM,4DAAA,AAAA,KAAApM,cAAA,xfAAwEsL;AAAxE,AAAA1F;GAAA,AAAA,wSAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,8KAAA,AAAA,wUAAA,AAAA,4EAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,uEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,kgCAAA,AAAA,qBAAA,AAAA,2CAAA,kBAAAA,2CAAA,AAAA,AAAAA,yDAAA,UAAA;AAAA,AAAA,oBAAAlG;AAAAA;;AAAA,AAAA;;uDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAuM,+DAAA,AAAA,KAAArM,cAAA,ngBAA6E4F;AAA7E,AAAAC;GAAA,AAAA,8SAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,wUAAA,AAAA,iFAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,6EAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,6vCAAA,AAAA,qBAAA,AAAA,8CAAA,kBAAAA,8CAAA,AAAA,AAAAA,4DAAA,UAAA;AAAA,AAAA,oBAAAnG;AAAAA;;AAAA,AAAA;;0DAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAwM,uDAAA,AAAA,KAAAtM,cAAA,9fACQ6F;AADR,AAAAC;GAAA,AAAA,+RAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,wUAAA,AAAA,gEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,6DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,qXAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,sCAAA,AAAA,AAAAA,oDAAA,UAAA;AAAA,AAAA,oBAAApG;AAAAA;;AAAA,AAAA;;kDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAyM,0DAAA,AAAA,KAAAvM,cAAA,zfACyB8F;AADzB,AAAAC;GAAA,AAAA,oSAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,wUAAA,AAAA,wEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,mEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,2XAAA,AAAA,qBAAA,AAAA,yCAAA,kBAAAA,yCAAA,AAAA,AAAAA,uDAAA,UAAA;AAAA,AAAA,oBAAArG;AAAAA;;AAAA,AAAA;;qDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA0M,wDAAA,AAAA,KAAAxM,cAAA,1fACkC+F;AADlC,AAAAC;GAAA,AAAA,gSAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,wUAAA,AAAA,mEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,+DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,uXAAA,AAAA,qBAAA,AAAA,uCAAA,kBAAAA,uCAAA,AAAA,AAAAA,qDAAA,UAAA;AAAA,AAAA,oBAAAtG;AAAAA;;AAAA,AAAA;;mDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA2M,uDAAA,AAAA,KAAAzM,cAAA,vfAC8CgG;AAD9C,AAAAC;GAAA,AAAA,+RAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,wUAAA,AAAA,gEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,6DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,k1BAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,sCAAA,AAAA,AAAAA,oDAAA,UAAA;AAAA,AAAA,oBAAAvG;AAAAA;;AAAA,AAAA;;kDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA4M,sDAAA,AAAA,KAAA1M,cAAA,rfACwDiG;AADxD,AAAAC;GAAA,AAAA,4RAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,wUAAA,AAAA,+DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,0DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,kXAAA,AAAA,qBAAA,AAAA,qCAAA,kBAAAA,qCAAA,AAAA,AAAAA,mDAAA,UAAA;AAAA,AAAA,oBAAAxG;AAAAA;;AAAA,AAAA;;iDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA6M,8DAAA,AAAA,KAAA3M,cAAA,5fACiEkG;AADjE,AAAAC;GAAA,AAAA,4SAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,wUAAA,AAAA,+EAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,2EAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,mYAAA,AAAA,qBAAA,AAAA,6CAAA,kBAAAA,6CAAA,AAAA,AAAAA,2DAAA,UAAA;AAAA,AAAA,oBAAAzG;AAAAA;;AAAA,AAAA;;yDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA8M,uDAAA,AAAA,KAAA5M,cAAA,7fACyEmG;AADzE,AAAAC;GAAA,AAAA,6RAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,wUAAA,AAAA,kEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,4DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,0XAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,sCAAA,AAAA,AAAAA,oDAAA,UAAA;AAAA,AAAA,oBAAA1G;AAAAA;;AAAA,AAAA;;kDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA+M,yDAAA,AAAA,KAAA7M,cAAA,xfAEQoG;AAFR,AAAAC;GAAA,AAAA,kSAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,wUAAA,AAAA,sEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,iEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,+XAAA,AAAA,qBAAA,AAAA,wCAAA,kBAAAA,wCAAA,AAAA,AAAAA,sDAAA,UAAA;AAAA,AAAA,oBAAA3G;AAAAA;;AAAA,AAAA;;oDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAgN,yDAAA,AAAA,KAAA9M,cAAA,1fAEiBqG;AAFjB,AAAAC;GAAA,AAAA,kSAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,wUAAA,AAAA,qEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,kEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,gYAAA,AAAA,qBAAA,AAAA,wCAAA,kBAAAA,wCAAA,AAAA,AAAAA,sDAAA,UAAA;AAAA,AAAA,oBAAA5G;AAAAA;;AAAA,AAAA;;KAE4B4G;AAE9B,AAAA5H,4CAAA,kIACE,AAAAe,wIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAiN,wDAAA,AAAA,KAAA/M,cAAA;AAAA,AAAAgE;GAAA,AAAA,gSAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,oEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,+DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,u5BAAA,AAAA,qBAAA,AAAA,uCAAA,kBAAAA,uCAAA,AAAA,AAAAA,qDAAA,UAAA;AAAA,AAAA,oBAAAtE;AAAAA;;AAAA,AAAA;;mDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAkN,mDAAA,AAAA,KAAAhN,cAAA,nfAAQgE;AAAR,AAAAE;GAAA,AAAA,qRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,0DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,oDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,iWAAA,AAAA,qBAAA,AAAA,kCAAA,kBAAAA,kCAAA,AAAA,AAAAA,gDAAA,UAAA;AAAA,AAAA,oBAAAxE;AAAAA;;AAAA,AAAA;;8CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAmN,oDAAA,AAAA,KAAAjN,cAAA,/eAAkBkE;AAAlB,AAAAE;GAAA,AAAA,wRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,4DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,uDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,oWAAA,AAAA,qBAAA,AAAA,mCAAA,kBAAAA,mCAAA,AAAA,AAAAA,iDAAA,UAAA;AAAA,AAAA,oBAAA1E;AAAAA;;AAAA,AAAA;;+CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAoN,oDAAA,AAAA,KAAAlN,cAAA,hfAAuBoE;AAAvB,AAAAD;GAAA,AAAA,yRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,0DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,uDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,oWAAA,AAAA,qBAAA,AAAA,mCAAA,kBAAAA,mCAAA,AAAA,AAAAA,iDAAA,UAAA;AAAA,AAAA,oBAAAzE;AAAAA;;AAAA,AAAA;;+CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAqN,sDAAA,AAAA,KAAAnN,cAAA,lfAA6BmE;AAA7B,AAAAI;GAAA,AAAA,4RAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,8DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,2DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,6uBAAA,AAAA,qBAAA,AAAA,qCAAA,kBAAAA,qCAAA,AAAA,AAAAA,mDAAA,UAAA;AAAA,AAAA,oBAAA7E;AAAAA;;AAAA,AAAA;;iDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAsN,oDAAA,AAAA,KAAApN,cAAA,lfAAmCuE;AAAnC,AAAAD;GAAA,AAAA,uRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,4DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,uDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,oWAAA,AAAA,qBAAA,AAAA,mCAAA,kBAAAA,mCAAA,AAAA,AAAAA,iDAAA,UAAA;AAAA,AAAA,oBAAA5E;AAAAA;;AAAA,AAAA;;+CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAuN,oDAAA,AAAA,KAAArN,cAAA,hfAA2CsE;AAA3C,AAAAD;GAAA,AAAA,uRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,2DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,sDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,mWAAA,AAAA,qBAAA,AAAA,mCAAA,kBAAAA,mCAAA,AAAA,AAAAA,iDAAA,UAAA;AAAA,AAAA,oBAAA3E;AAAAA;;AAAA,AAAA;;+CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAwN,qDAAA,AAAA,KAAAtN,cAAA,jfAAiDqE;AAAjD,AAAAG;GAAA,AAAA,uRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,6DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,0DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,21BAAA,AAAA,qBAAA,AAAA,oCAAA,kBAAAA,oCAAA,AAAA,AAAAA,kDAAA,UAAA;AAAA,AAAA,oBAAA9E;AAAAA;;AAAA,AAAA;;gDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAyN,gEAAA,AAAA,KAAAvN,cAAA,7fAAuDwE;AAAvD,AAAAC;GAAA,AAAA,gTAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,sOAAA,AAAA,wUAAA,AAAA,kFAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,+EAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,2jBAAA,AAAA,qBAAA,AAAA,+CAAA,kBAAAA,+CAAA,AAAA,AAAAA,6DAAA,UAAA;AAAA,AAAA,oBAAA/E;AAAAA;;AAAA,AAAA;;2DAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA2L,uDAAA,AAAA,KAAAzL,cAAA,/fAA8DyE;AAA9D,AAAAV;GAAA,AAAA,6RAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,kEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,4DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,szBAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,sCAAA,AAAA,AAAAA,oDAAA,UAAA;AAAA,AAAA,oBAAArE;AAAAA;;AAAA,AAAA;;kDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAqM,oDAAA,AAAA,KAAAnM,cAAA,nfAAgF+D;AAAhF,AAAAuH;GAAA,AAAA,qRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,wUAAA,AAAA,0DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,qDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,0nBAAA,AAAA,qBAAA,AAAA,kCAAA,kBAAAA,mCAAA,AAAA,AAAAA,iDAAA,UAAA;AAAA,AAAA,oBAAA5L;AAAAA;;AAAA,AAAA;;+CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA0N,mDAAA,AAAA,KAAAxN,cAAA,/eAAyFsL;AAAzF,AAAA5G;GAAA,AAAA,sRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,sOAAA,AAAA,wUAAA,AAAA,uDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,sDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,mWAAA,AAAA,qBAAA,AAAA,kCAAA,kBAAAA,kCAAA,AAAA,AAAAA,gDAAA,UAAA;AAAA,AAAA,oBAAAhF;AAAAA;;AAAA,AAAA;;8CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA2N,qDAAA,AAAA,KAAAzN,cAAA,hfAA8F0E;AAA9F,AAAAC;GAAA,AAAA,0RAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,sOAAA,AAAA,wUAAA,AAAA,6DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,yDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,sWAAA,AAAA,qBAAA,AAAA,oCAAA,kBAAAA,oCAAA,AAAA,AAAAA,kDAAA,UAAA;AAAA,AAAA,oBAAAjF;AAAAA;;AAAA,AAAA;;gDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA4N,wDAAA,AAAA,KAAA1N,cAAA,rfAAmG2E;AAAnG,AAAAC;GAAA,AAAA,+RAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,sOAAA,AAAA,wUAAA,AAAA,mEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,+DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,4WAAA,AAAA,qBAAA,AAAA,uCAAA,kBAAAA,uCAAA,AAAA,AAAAA,qDAAA,UAAA;AAAA,AAAA,oBAAAlF;AAAAA;;AAAA,AAAA;;mDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA6N,yDAAA,AAAA,KAAA3N,cAAA,zfAA0G4E;AAA1G,AAAAC;GAAA,AAAA,kSAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,qEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,iEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,+WAAA,AAAA,qBAAA,AAAA,wCAAA,kBAAAA,wCAAA,AAAA,AAAAA,sDAAA,UAAA;AAAA,AAAA,oBAAAnF;AAAAA;;AAAA,AAAA;;oDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA8N,2DAAA,AAAA,KAAA5N,cAAA,5fACQ6E;AADR,AAAAC;GAAA,AAAA,sSAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,yEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,qEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,mXAAA,AAAA,qBAAA,AAAA,0CAAA,kBAAAA,0CAAA,AAAA,AAAAA,wDAAA,UAAA;AAAA,AAAA,oBAAApF;AAAAA;;AAAA,AAAA;;sDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA+N,uDAAA,AAAA,KAAA7N,cAAA,1fACmB8E;AADnB,AAAAC;GAAA,AAAA,6RAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,wUAAA,AAAA,iEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,6DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,2WAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,sCAAA,AAAA,AAAAA,oDAAA,UAAA;AAAA,AAAA,oBAAArF;AAAAA;;AAAA,AAAA;;KACgCqF;AAElC,AAAArG,4CAAA,yIAAA,AAAAC,uCAAA,mFAAA,uDAAA,2CAAA,oEAAA,gDAAA,2DAAA,wBAAA,6DAMmB,WAAKM;AAAL,AACE,oBACE,AAACE,qDAAW6D,8CAAkB/D;AADhC;;AAAA,oBAEE,AAACE,qDAAW0D,6CAAiB5D;AAF/B;;AAAA,oBAGE,AAACE,qDAAW8D,8CAAkBhE;AAHhC;;AAAA,oBAIE,AAACE,qDAAWgE,+CAAmBlE;AAJjC;;AAAA,oBAKE,qDAAA,rDAACE,0GAAiBF;AALpB;;AAAA,oBAME,qDAAA,rDAACE,6GAAmBF;AANtB;;AAAA,AAAA;;;;;;;;WAPrB,mFAAA,kHAAA,mFAAA,+GAAA,mFAAA,kHAAA,mFAAA,mHAAA,mFAAA,+FAAA,mFAAA,mGAAA,mFAAA,wGAAA,tqCAecmE,mMACAN,oMACAO,qMACAC,+LACAgI,qLACA1I,oLACAJ;AAQd,AAAA,AAAA9D,4CAAA,4GAAA,AAAAI,gFAAA,yGAAA,QAAA,mFAAA,6DAA2F0D;;AAA3F;;;oCAAA,mFAAA,mDAAA,1KAAgEsL;AAChE,AAAA,AAAApP,4CAAA,qHAAA,AAAAI,gFAAA,kHAAA,QAAA,mFAAA,6DAA2F0D;;AAA3F;;;wCAAA,mFAAA,mDAAA,9KAAgEuL;AAUhE,AAAA,AAAArP,4CAAA,wGAAA,AAAAI,gFAAA,oGAAA,sBAAA,mFAAA,mDAAA;;AAAA;;;kCAAA,mFAAA,mDAAA,xKAAwDkP;AACxD,AAAA,AAAAtP,4CAAA,+GAAA,AAAAI,gFAAA,6GAAA,sBAAA,mFAAA,mDAAA;;AAAA;;;sCAAA,mFAAA,mDAAA,5KAAwDmP;AACxD,AAAA,AAAAvP,4CAAA,iHAAA,AAAAI,gFAAA,gHAAA,sBAAA,mFAAA,mDAAA;;AAAA;;;uCAAA,mFAAA,mDAAA,7KAAwDoP;AACxD,AAAA,AAAAxP,4CAAA,wGAAA,AAAAI,gFAAA,oGAAA,sBAAA,mFAAA,mDAAA;;AAAA;;;kCAAA,mFAAA,mDAAA,xKAAwDqP;AACxD,AAAA,AAAAzP,4CAAA,wGAAA,AAAAI,gFAAA,oGAAA,sBAAA,mFAAA,mDAAA;;AAAA;;;kCAAA,mFAAA,mDAAA,xKAAwDsP;AACxD,AAAA,AAAA1P,4CAAA,wGAAA,AAAAI,gFAAA,mGAAA,sBAAA,mFAAA,mDAAA;;AAAA;;;kCAAA,mFAAA,mDAAA,xKAAwDuP;AAExD,AAAA,AAAA3P,4CAAA,qHAAA,AAAAI,gFAAA,iHAAA,sBAAA,mFAAA,mDAAA,iJAAA,OAC0DoI;;AAD1D;;;wCAAA,mFAAA,mDAAA,9KAAwDoH;AAGxD,AAAA,AAAA5P,4CAAA,wHAAA,AAAAI,gFAAA,oHAAA,OACOoI;;AADP;;;0CAAA,mFAAA,mDAAA,hLAAwDqH;AAGxD,AAAA,AAAA7P,4CAAA,4GAAA,AAAAI,gFAAA,yGAAA,OACOoI;;AADP;;;oCAAA,mFAAA,mDAAA,1KAAwDsH;AAGxD,AAAA,AAAA9P,4CAAA,6GAAA,AAAAI,gFAAA,2GAAA,sBAAA,mFAAA,mDAAA;;AAAA;;;qCAAA,mFAAA,mDAAA,3KAAqE2P;AAGrE,AAAA,AAAA/P,4CAAA,6GAAA,AAAAI,gFAAA,qGAAA,sBAAA,mFAAA,mDAAA;;AAAA;;;2CAAA,mFAAA,mDAAA,jLAAsE4P;AAGtE,AAAA,AAAAhQ,4CAAA,8GAAA,AAAAI,gFAAA,0GAAA,sBAAA,mFAAA,mDAAA;;AAAA;;;qCAAA,mFAAA,mDAAA,3KAA6D6P;AAG7D,AAAA,AAAAjQ,4CAAA,sHAAA,AAAAI,gFAAA,mHAAA,sBAAA,mFAAA,mDAAA,iJAAA,aACgE2E;;AADhE;;;yCAAA,mFAAA,mDAAA,/KAA6DmL;AAM7D,AAAA,AAAAlQ,4CAAA,+GAAA,AAAAI,gFAAA,0GAAA,YAAA;;AAAA;;;qCAAA,mFAAA,mDAAA,3KAAW+P;AAOX,AAAAnQ,4CAAA,sIAAA,mFAAA,uDAAA,2CAAA,oEAAA,mDAAA,6DAGmB,WAAKO;AAAL,AACE,oBAAI,AAACE,qDAAW6D,8CAAkB/D;AAAlC;;AAAA;;WAJrB,mFAAA,wIAAA,mFAAA,zIAOwBmE,+LACd,AAAA3D,wIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAgP,kDAAA,AAAA,KAAA9O,cAAA;AAAA,AAAAgO;GAAA,AAAA,qRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,wUAAA,AAAA,uDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,kDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,mkBAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAAtO;AAAAA;;AAAA,AAAA;;6CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAiP,sDAAA,AAAA,KAAA/O,cAAA,hfAAQgO;AAAR,AAAAC;GAAA,AAAA,4RAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,wUAAA,AAAA,+DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,2DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,4kBAAA,AAAA,qBAAA,AAAA,qCAAA,kBAAAA,qCAAA,AAAA,AAAAA,mDAAA,UAAA;AAAA,AAAA,oBAAAvO;AAAAA;;AAAA,AAAA;;iDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAkP,uDAAA,AAAA,KAAAhP,cAAA,rfAAYiO;AAAZ,AAAAC;GAAA,AAAA,+RAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,wUAAA,AAAA,iEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,8DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,+kBAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,sCAAA,AAAA,AAAAA,oDAAA,UAAA;AAAA,AAAA,oBAAAxO;AAAAA;;AAAA,AAAA;;kDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAmP,qDAAA,AAAA,KAAAjP,cAAA,pfAAoBkO;AAApB,AAAAO;GAAA,AAAA,2RAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,mNAAA,AAAA,wUAAA,AAAA,4DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,yDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,0kBAAA,AAAA,qBAAA,AAAA,oCAAA,kBAAAA,oCAAA,AAAA,AAAAA,kDAAA,UAAA;AAAA,AAAA,oBAAA/O;AAAAA;;AAAA,AAAA;;gDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAoP,kDAAA,AAAA,KAAAlP,cAAA,/eAA6ByO;AAA7B,AAAAN;GAAA,AAAA,qRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,wUAAA,AAAA,uDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,kDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,mkBAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAAzO;AAAAA;;AAAA,AAAA;;6CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAqP,kDAAA,AAAA,KAAAnP,cAAA,5eAAoCmO;AAApC,AAAAC;GAAA,AAAA,qRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,wUAAA,AAAA,uDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,kDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,mkBAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAA1O;AAAAA;;AAAA,AAAA;;6CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAsP,kDAAA,AAAA,KAAApP,cAAA,5eAAwCoO;AAAxC,AAAAC;GAAA,AAAA,qRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,wUAAA,AAAA,uDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,iDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,kkBAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAA3O;AAAAA;;AAAA,AAAA;;6CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAuP,qDAAA,AAAA,KAAArP,cAAA,/eAA4CqO;AAA5C,AAAAQ;GAAA,AAAA,yRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,6DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,wDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,gYAAA,AAAA,qBAAA,AAAA,oCAAA,kBAAAA,oCAAA,AAAA,AAAAA,kDAAA,UAAA;AAAA,AAAA,oBAAAnP;AAAAA;;AAAA,AAAA;;gDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAwP,oDAAA,AAAA,KAAAtP,cAAA,jfAAgD6O;AAAhD,AAAAL;GAAA,AAAA,wRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,wUAAA,AAAA,2DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,uDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,+UAAA,AAAA,qBAAA,AAAA,mCAAA,kBAAAA,mCAAA,AAAA,AAAAA,iDAAA,UAAA;AAAA,AAAA,oBAAA9O;AAAAA;;AAAA,AAAA;;+CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAyP,0DAAA,AAAA,KAAAvP,cAAA,tfAAuDwO;AAAvD,AAAAD;GAAA,AAAA,oSAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,wUAAA,AAAA,uEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,kEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,0VAAA,AAAA,qBAAA,AAAA,yCAAA,kBAAAA,yCAAA,AAAA,AAAAA,uDAAA,UAAA;AAAA,AAAA,oBAAA7O;AAAAA;;AAAA,AAAA;;qDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA0P,wDAAA,AAAA,KAAAxP,cAAA,1fAA6DuO;AAA7D,AAAAD;GAAA,AAAA,+RAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,wUAAA,AAAA,mEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,+DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,6wBAAA,AAAA,qBAAA,AAAA,uCAAA,kBAAAA,uCAAA,AAAA,AAAAA,qDAAA,UAAA;AAAA,AAAA,oBAAA5O;AAAAA;;AAAA,AAAA;;mDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAqM,oDAAA,AAAA,KAAAnM,cAAA,pfACQsO;AADR,AAAAhD;GAAA,AAAA,qRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,wUAAA,AAAA,0DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,qDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,0nBAAA,AAAA,qBAAA,AAAA,kCAAA,kBAAAA,mCAAA,AAAA,AAAAA,iDAAA,UAAA;AAAA,AAAA,oBAAA5L;AAAAA;;AAAA,AAAA;;+CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA2P,qDAAA,AAAA,KAAAzP,cAAA,jfACkBsL;AADlB,AAAAqD;GAAA,AAAA,yRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,kMAAA,AAAA,wUAAA,AAAA,8DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,wDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,ykBAAA,AAAA,qBAAA,AAAA,oCAAA,kBAAAA,oCAAA,AAAA,AAAAA,kDAAA,UAAA;AAAA,AAAA,oBAAAjP;AAAAA;;AAAA,AAAA;;gDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA4P,yDAAA,AAAA,KAAA1P,cAAA,tfACuB2O;AADvB,AAAAC;GAAA,AAAA,kSAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,kMAAA,AAAA,wUAAA,AAAA,qEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,iEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,wzBAAA,AAAA,qBAAA,AAAA,wCAAA,kBAAAA,wCAAA,AAAA,AAAAA,sDAAA,UAAA;AAAA,AAAA,oBAAAlP;AAAAA;;AAAA,AAAA;;oDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA6P,2DAAA,AAAA,KAAA3P,cAAA,5fAC8B4O;AAD9B,AAAAF;GAAA,AAAA,0RAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,8DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,mDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,okBAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,0CAAA,AAAA,AAAAA,wDAAA,UAAA;AAAA,AAAA,oBAAAhP;AAAAA;;AAAA,AAAA;;sDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA8P,wDAAA,AAAA,KAAA5P,cAAA,3fACyC0O;AADzC,AAAAX;GAAA,AAAA,8RAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,wUAAA,AAAA,mEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,gEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,yaAAA,AAAA,qBAAA,AAAA,uCAAA,kBAAAA,uCAAA,AAAA,AAAAA,qDAAA,UAAA;AAAA,AAAA,oBAAArO;AAAAA;;AAAA,AAAA;;mDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAA+P,oDAAA,AAAA,KAAA7P,cAAA,pfACgD+N;AADhD,AAAAD;GAAA,AAAA,wRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,wUAAA,AAAA,2DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,uDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,gaAAA,AAAA,qBAAA,AAAA,mCAAA,kBAAAA,mCAAA,AAAA,AAAAA,iDAAA,UAAA;AAAA,AAAA,oBAAApO;AAAAA;;AAAA,AAAA;;+CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAgQ,qDAAA,AAAA,KAAA9P,cAAA,jfAC0D8N;AAD1D,AAAAlL;GAAA,AAAA,0RAAA,wCAAA,uDAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,SAAA,AAAA,wUAAA,AAAA,6DAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,wDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,mkDAAA,AAAA,qBAAA,AAAA,oCAAA,kBAAAA,oCAAA,AAAA,AAAAA,kDAAA,UAAA;AAAA,AAAA,oBAAAlD;AAAAA;;AAAA,AAAA;;KACgEkD;AAE1E,iDAAA,jDAAemN;AAGf;;;iDAAA,mFAAA,mDAAA,2CAAA,oEAAA,uCAAA,mFAAA,qDAAA,2CAAA,6DAAA,aAAA,yIAAA,mFAAA,oEAAA,2CAAA,6DAAA,aAAA,/9BAAeC;AASf,AAAA,AAAAtR,4CAAA,yIAAA,AAAAI,gFAAA,sIAAA,6DAAA,/CACciR,yDACAC;;AAFd;;;kDAAA,mFAAA,mDAAA,xLAAWC;AAIX,AAAAvR,4CAAA,sHAAA,mFAAA,uDAAA,2CAAA,oEAAA,2CAAA,6DAGmB,WAAKO;AAAL,AACE,oBAAI,qDAAA,rDAACE,yIAAgCF;AAArC;;AAAA;;WAJrB,mFAAA,4IAAA,mFAAA,3IAOyBgR,6NACAF;AAWzB,AAAA,AAAArR,4CAAA,wGAAA,AAAAI,gFAAA,oGAAA,QAAuB6D;;AAAvB;;;kCAAA,mFAAA,mDAAA,xKAAWuN;AACX,AAAA,AAAAxR,4CAAA,0GAAA,AAAAI,gFAAA,uGAAA,QAAuB6D;;AAAvB;;;mCAAA,mFAAA,mDAAA,zKAAWwN;AAEX,AAAAzR,4CAAA,+GAAA,AAAAC,uCAEE,AAAAc,wIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAsQ,kDAAA,AAAA,KAAApQ,cAAA;AAAA,AAAAkQ;GAAA,AAAA,mRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,uDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,kDAAA,AAAA,EAAA,AAAA,KAAA,AAAA,KAAA,AAAA,mVAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAAxQ;AAAAA;;AAAA,AAAA;;6CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAuQ,mDAAA,AAAA,KAAArQ,cAAA,7eAAQkQ;AAAR,AAAAC;GAAA,AAAA,uRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,yDAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,qDAAA,AAAA,EAAA,AAAA,KAAA,AAAA,KAAA,AAAA,sVAAA,AAAA,qBAAA,AAAA,kCAAA,kBAAAA,kCAAA,AAAA,AAAAA,gDAAA,UAAA;AAAA,AAAA,oBAAAzQ;AAAAA;;AAAA,AAAA;;oDAFF,/CAEcyQ;AASd;;;8CAAA,mFAAA,qDAAA,0DAAA,sDAAA,8DAAA,yDAAA,sDAAA,ndAAeG;AAIf;;;uDAAA,mFAAA,mDAAA,mFAAA,yGAAA,mFAAA,qDAAA,yIAAA,mFAAA,oEAAA,yIAAA,mFAAA,kDAAA,2CAAA,6DAAA,aAAA,pqCAAeC,qUAGGD;AAelB,AAAA5R,4CAAA,uIAAA,AAAAC,uCAAA,mFAAA,6GAAA,mFAAA,mDAAA,mFAAA,qDAAA,mFAAA,+CAAA,0EAAA,mFAAA,oEAAA,yIAAA,mFAAA,iHAAA,mFAAA,6DAAA,2CAAA,6DAAA,6EAAA,xzCAGG4R,m8BAIgBnS,qTAEaA;AAShC,AAAAM,4CAAA,gJAAA,AAAAC,uCAAA,mFAAA,6GAAA,mFAAA,mDAAA,mFAAA,qDAAA,mFAAA,+CAAA,sEAAA,mFAAA,4HAAA,1tBAGG4R,0pBAGWnS;AAEd;;;mEAAA,mFAAA,6GAAA,mFAAA,mDAAA,mFAAA,4DAAA,2CAAA,6DAAA,aAAA,2DAAA,mFAAA,6DAAA,2CAAA,6DAAA,aAAA,78BAAeoS,8MAGZD;AAeH,AAAA7R,4CAAA,gJAAA,AAAAC,uCAAA,mFAAA,yHAAA,mFAAA,mDAAA,mFAAA,qDAAA,mFAAA,+CAAA,8EAAA,mFAAA,wGAAA,mFAAA,mEAAA,mFAAA,mDAAA,2CAAA,gEAAA,8JAAA,uIAAA,mFAAA,yDAAA,2CAAA,6DAAA,KAAA,gEAAA,uDAAA,mFAAA,uDAAA,mFAAA,yDAAA,0DAAA,2FAAA,jqEAGG6R,grBAGevO;AAsBlB,AAAAvD,4CAAA,2IAAA,AAAAC,uCAAA,mFAAA,yHAAA,mFAAA,mDAAA,mFAAA,qDAAA,mFAAA,mDAAA,2CAAA,gEAAA,gNAAA,gKAAA,h7BAGG6R;AASH,AAAA9R,4CAAA,wHAAA,AAAAC,uCAAA,mFAAA,uDAAA,2CAAA,6DAAA,6DAAA,mFAAA,8DAAA,mFAAA,mDAAA,gKAAA,mFAAA,0DAAA,mFAAA,mDAAA,uJAAA,mFAAA,sDAAA,mFAAA,mDAAA,gKAAA,mFAAA,+EAAA,mFAAA,mDAAA,mKAAA;AAuCA;;;0CAAA,mFAAA,mDAAA,hLAAK8R;AAIL,AAAA/R,4CAAA,8HAAA,AAAAC,uCAAA,mFAAA,mDAAA,mFAAA,yDAAA,iLAAA,mFAAA,kDAAA,2CAAA,oEAAA,pSAKiD8R,4WAI7C,WAAKC;AAAL,AACE,OAACC,uBAAO,WAAAC;AAAA,AAAA,IAAAC,aAAAD;eAAA,AAAA/O,4CAAAgP,WAAA,IAAA,tEAAMC;qBAAN,AAAAjP,4CAAAgP,WAAA,IAAA,5EAAeE;AAAf,AACE,OAACC,6CAAOF,SAAS,AAAA,mFAAOC;GAC1BL;mBAZd;AAcA,uDAAA,mFAAA,mDAAA,mFAAA,uEAAA,2CAAA,6DAAA,aAAA,mFAAA,mDAAA,8IAAA,mFAAA,iEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,nnCAAeO;AAMf;;;0CAAA,mFAAA,6GAAA,mFAAA,mDAAA,mFAAA,wDAAA,3fAAKC,qLAGFD;AAIH,AAAAvS,4CAAA,qIAAA,mFAAA,6GAAA,mFAAA,mDAAA,mFAAA,yDAAA,vUAEGuS;AAOH;;;wCAAA,mFAAA,mDAAA,9KAAKE;AAIL;;;0CAAA,mFAAA,uDAAA,2CAAA,/NAAKC,4RAGS,WAAKnS;AAAL,AACE,oBAAI,AAAC,wEAAA,xEAACoS,mDAAWC,+EAAcrS;AAA/B;;AAAA;;WAJhB,mFAAA,yDAAA,mFAAA,mDAAA,qJAAA,mFAAA,mDAWYkS;AAEZ,AAAAzS,4CAAA,wIAAA,AAAAC,uCAAA,mFAAA,mDAAA,mFAAA,qDAAA,yIAAA,mFAAA,+DAAA,yHAAA,mFAAA,sEAAA,yIAAA,mFAAA,sEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,kKAAA,mFAAA,kEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,2EAAA;AAiBA;;;kDAAA,mFAAA,mDAAA,xLAAK4S;AAKL;;;yDAAA,zDAAKC;AAIL;;;0CAAA,mFAAA,gDAAA,kGAAA,mFAAA,gDAAA,2CAAA,oEAAA,+BAAA,gEAAA,hmBAAeC,uoBAOXD;AAEJ;;;8CAAA,iFAAA,oEAAA,qEAAA,oEAAA,5UAAKE;AAIL;;;;;AAAKC,2CAIH,6CAAA,mFAAA,hIAAC/S,6LAAa8S;AAEhB;;;qCAAA,mFAAA,mDAAA,3KAAKE;AAIL,yCAAA,mFAAA,gDAAA,2CAAA,oEAAA,4GAAA,mFAAA,qDAAA,kDAAA,jkBAAeC,8nBAIZD;AAEH,AAAAlT,4CAAA,0GAAA,AAAAC,uCAAA,mFAAA,mDAAA,mFAAA,mDAAA,mFAAA,qEAAA,2CAAA,6DAAA,KAAA,gEAAA,wPAAA,mFAAA,oEAAA,2CAAA,6DAAA,6DAAA,mFAAA,+DAAA,2CAAA,gEAAA,+SAAA,mFAAA,8DAAA,2CAAA,6DAAA,KAAA,gEAAA,oNAAA,mFAAA,0DAAA,2CAAA,6DAAA,KAAA,gEAAA,+6BAAA,mFAAA,wDAAA,2CAAA,6DAAA,KAAA,gEAAA,uVAAA,yIAAA,mFAAA,mEAAA,2CAAA,6DAAA,KAAA,gEAAA,ugBAAA,mFAAA,uDAAA,kHAAA,mFAAA,2EAAA,2CAAA,6DAAA,KAAA,gEAAA,sMAAA,mFAAA,uDAAA,mFAAA,kJAAA,mFAAA,kDAAA,2CAAA,oEAAA,oiBAAA,zoMAmBK8S,4TAE+BL,ijBAQ/BlK,4gBAOAyK,2uCAmBAE,6rFA0BqBN,uZAItB,AAACF,mDACA,gDAAA,qEAAA,rHAACS,0LACD,AAACpQ,qBAAW,mDAAA,qEAAA,xHAAC2P;AAElB;;;mCAAA,mFAAA,mDAAA,zKAAKU;AAIL,AAAArT,4CAAA,2GAAA,AAAAC,uCAAA,mFAAA,gSAAA,mFAAA,kDAAA,2CAAA,oEAAA,2CAAA,WAAAqT,vhBAGG,8CAAA,mFAAA,jIAACC,mMAA+BF;AAHnC,AAMK,OAACG,6DAA2B,AAACC,+CAAOC,sBAAM,4CAAA,wDAAAJ,pGAACK;mBANhD;AAQA,AAAA3T,4CAAA,+GAAA,mFAAA,0DAAA,2CAAA,oEAAA,wDAGG,6CAAA,mFAAA,kEAAA,2CAAA,kDAAA,/RAAC4T,2SAAuC9P;AAE3C,AAAA9D,4CAAA,0GAAA,AAAAC,uCAAA,mFAAA,mDAAA,mFAAA,oGAAA,mFAAA,+GAAA,lPAOWP,0LACAA;AAEX,AAAAM,4CAAA,oHAAA,mFAAA,mDAAA,oFAAA,mDAAA,mFAAA,oEAAA,2CAAA,6DAAA,6DAAA,mFAAA,qEAAA,2CAAA,6DAAA,6DAAA,mFAAA,mEAAA,2CAAA,6DAAA,aAAA,mFAAA,kEAAA,2CAAA,kDAAA,oEAAA,mFAAA,6DAAA,2CAAA,6DAAA,aAAA,mFAAA,kEAAA,2CAAA,kDAAA,8DAAA,mFAAA,kEAAA,2CAAA,6DAAA,aAAA,mFAAA,yDAAA,iIAAA,mFAAA,mDAAA,iKAAA,mFAAA,0DAAA,2CAAA,6DAAA,wDAAA,mFAAA,yDAAA,2CAAA,6DAAA,wDAAA,mFAAA,wDAAA,2CAAA,6DAAA,aAAA,2KAAA,mFAAA,6DAAA,2CAAA,6DAAA,skBAAA,mFAAA,oDAAA,2CAAA,6DAAA,aAAA,mFAAA,mDAAA,0HAAA,mFAAA,uDAAA,2CAAA,6DAAA,aAAA,mFAAA,mDAAA,2HAAA,mFAAA,2EAAA,2CAAA,6DAAA,KAAA,gEAAA,wNAAA,mFAAA,uDAAA,mFAAA,kJAAA,mFAAA,kDAAA,2CAAA,oEAAA,ruMAGuC0S,6TACAK,yjBACsBlO,2jBACAf,knCAEtBoP,4SACA1K,2tBAEA,6CAAA,mFAAA,kEAAA,2CAAA,kDAAA,YAAA,mFAAA,mDAAA,jbAACoL,u3EAQdf,0ZAMtB,WAAKgB;AAAL,AACE,oDAAA,7CAACvB,iDAAS,AAAChI,gBAAW,4BAAA,mFAAA,oEAAA,nLAACwJ,sBAAYD;WA1BzC,mFAAA,kDAAA,2CAAA,oEAAA,iGA6BI,WAAAE;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAA/R,4BAAA+R;eAAA,AAAA9R,4CAAA8R,eAAA,tEAAaC;aAAb,AAAA/R,4CAAA8R,eAAA,pEAAsBE;AAAtB,AACE,OAACC,uBAAO,AAACC,uDAAiB,AAACC,cAAIJ,UAAU,AAACI,cAAIH;;AAKpD,AAAAlU,4CAAA,uHAAA,AAAAC,uCAAA,mFAAA,mDAAA,qIAAA;AAMA,AAAA,AAAAD,4CAAA,yHAAA,AAAAI,gFAAA,sHAAA,WAAA,mFAAA,gDAAA,iIAAA,mFAAA,mDAAA,mFAAA,kDAAA;;AAAA;;;2CAAA,mFAAA,mDAAA,jLAAWkU;AAMX,AAAA,AAAAtU,4CAAA,oHAAA,AAAAI,gFAAA,gHAAA,SAAA,mFAAA,gDACc0D,kCAAMwQ;;AADpB;;;wCAAA,mFAAA,mDAAA,9KAAWC;AAGX,AAAA,AAAAvU,4CAAA,mHAAA,AAAAI,gFAAA,+GAAA,SACSkU;;AADT;;;uCAAA,mFAAA,mDAAA,7KAAWE;AAGX;;;8CAAA,mFAAA,jIAAeC,iLAKZ3Q,kCACA,AAAA/C,wIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAsT,wDAAA,AAAA,KAAApT,cAAA;AAAA,AAAAiT;GAAA,AAAA,+RAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,oEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,8DAAA,AAAA,EAAA,AAAA,KAAA,AAAA,KAAA,AAAA,0iBAAA,AAAA,qBAAA,AAAA,uCAAA,kBAAAA,uCAAA,AAAA,AAAAA,qDAAA,UAAA;AAAA,AAAA,oBAAAvT;AAAAA;;AAAA,AAAA;;mDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,iDAAAC,wDAAAuT,uDAAA,AAAA,KAAArT,cAAA,vfAAQiT;AAAR,AAAAC;GAAA,AAAA,8RAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,wUAAA,AAAA,iEAAA,AAAA,mCAAA,AAAA,GAAA,AAAA,6DAAA,AAAA,EAAA,AAAA,KAAA,AAAA,KAAA,AAAA,oWAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,sCAAA,AAAA,AAAAA,oDAAA,UAAA;AAAA,AAAA,oBAAAxT;AAAAA;;AAAA,AAAA;;KAAkBwT;AAErB,AAAAxU,4CAAA,qHAAA,AAAAC,uCAAA,mFAAA,wDAAA,mFAAA,mDAAA,iIAAA,mFAAA,mDAAA,mFAAA,wDAAA,2CAAA,6DAAA,iFAAA,pEAM8BwU;AAE9B;;;wCAAA,mFAAA,mDAAA,9KAAKG;AAIL,AAAA5U,4CAAA,4HAAA,mFAAA,uDAAA,mFAAA,kEACuB4U;AAEvB;;;4CAAA,mFAAA,mDAAA,lLAAKC;AAML,AAAA7U,4CAAA,mHAAA,AAAAC,uCAAA,mFAAA,mDAAA,mFAAA,4EAAA,2CAAA,6DAAA,KAAA,gEAAA,mKAAA,vDAMIE;AAEJ,AAAAH,4CAAA,wHAAA,AAAAC,uCAAA,mFAAA,mDAAA,mFAAA,mDAAA,mFAAA,kEAAA,2CAAA,6DAAA,KAAA,gEAAA,gJAAA,2KAAA,mFAAA,uFAAA,2CAAA,6DAAA,KAAA,gEAAA,oIAAA,mLAAA,mFAAA,kDAAA,2CAAA,oEAAA,0EAsBI,WAAA6U;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAA9S,4BAAA8S;kBAAA,AAAA7S,4CAAA6S,eAAA,zEAAaC;4BAAb,AAAA9S,4CAAA6S,eAAA,nFAAyBE;AAAzB,AACE,GAAA,AAAAzU,cAAQ,iBAAAiC,oBAAUuS;AAAV,AAAA,oBAAAvS;AAAsBwS;;AAAtBxS;;;AAAR;;AAEE,QAASuS,eAAYC;;mBAzB7B;AA2BA,AAAAjV,4CAAA,oIAAA,AAAAC,uCAAA,mFAAA,mDAAA,mFAAA,wFAAA,2CAAA,6DAAA,KAAA,gEAAA,gUAAA,oEAAA,mFAAA,oEAAA,2CAAA,6DAAA,KAAA,gEAAA,+MAAA,oEAAA,mFAAA,uFAAA,2CAAA,6DAAA,KAAA,gEAAA,mUAAA,oEAAA,mFAAA,oFAAA,2CAAA,6DAAA,KAAA,gEAAA,wNAAA,oEAAA,mFAAA,2EAAA,2CAAA,6DAAA,KAAA,gEAAA,6TAAA,mFAAA,uDAAA,4EAAA,mFAAA,+GAAA,2CAAA,6DAAA,KAAA,gEAAA,8QAAA,mFAAA,uDAAA,4EAAA,mFAAA,uFAAA,2CAAA,6DAAA,KAAA,gEAAA,oPAAA,mFAAA,uDAAA,oFAAA;AAiEA,AAAAD,4CAAA,qHAAA,AAAAC,uCAAA,mFAAA,gDAAA,2CAAA,oEAAA,4BAAA,mFAAA,mDAAA,+JAAA,mFAAA,mDAAA,wHAAA;AAWA,AAAAD,4CAAA,mJAAA,mFAAA,mDAAA,mFAAA,kDAAA,2CAAA,oEAAA,keAAA,mFAAA,kDAAA,2CAAA,oEAAA,7oBAII,AAAC2S,mDACA,gDAAA,yDAAA,zGAACS,kKACD,AAACpQ,qBAAW,mDAAA,yDAAA,5GAAC2P,wfAGd,WAAAuC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAlT,4BAAAkT;cAAA,AAAAjT,4CAAAiT,eAAA,rEAAMC;WAAN,AAAAlT,4CAAAiT,eAAA,lEAAsBE;iBAAtB,AAAAnT,4CAAAiT,eAAA,xEAAmCG;AAAnC,AACE,IAAAC,WAAWD;IAAXC,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACUH;;;KADV;AAEUC;;;;AAFV,MAAA,KAAAvT,MAAA,CAAA,mEAAAyT;;;;AAIN,AAAAvV,4CAAA,kLAAA,AAAAC,uCAAA,mFAAA,kDAAA,2CAAA,oEAAA,2NAAA,zGAYG,qBAAA,rBAAC+C;AAEJ;;;oCAAA,mFAAA,mDAAA,1KAAKyS;AAIL,AAAAzV,4CAAA,4GAAA,mFAAA,mDAAA,oFAAA,mDAAA,mFAAA,6DAAA,6HAAA,mFAAA,qDAAA,mFAAA,qDAAA,2CAAA,gEAAA,8DAAA,wDAAA,yEAAA,mFAAA,yDAAA,2CAAA,6DAAA,6DAAA,mFAAA,wDAAA,2CAAA,6DAAA,2DAAA,mFAAA,kEAAA,2CAAA,6DAAA,+DAAA,mFAAA,6DAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,mFAAA,mDAAA,2IAAA,mFAAA,kEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,mFAAA,mDAAA,gJAAA,mFAAA,iEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,mFAAA,mDAAA,4JAAA,mFAAA,qDAAA,2CAAA,6DAAA,KAAA,gEAAA,0IAAA,mFAAA,uDAAA,mFAAA,mDAAA,4HAAA,mFAAA,iEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,mFAAA,mDAAA,+HAAA,mFAAA,kEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,mFAAA,mDAAA,uIAAA,mFAAA,mDAAA,2JAAA,mFAAA,mDAAA,psKAUkCwS,gTACAC,wTACAoC;AA4BlC;;;AAA6Ba,iDAE3B,AAACC,uCAAaF;AAEhB;;;;AAA6BG,6CAG3B,iBAAMC,YAAU,AAACC,uCAAaL;AAA9B,AACE,kBAAK5B;AAAL,AACE,oBAAI,CAAC6B,+EAAAA,sFAAAA,TAAa7B,kEAAAA;AAChBA;;AACA,IAAMkC,QAAU,CAACF,0CAAAA,iDAAAA,TAAUhC,6BAAAA;IACrBmC,YAAU,AAACC,mDAAYF;AAD7B,AAEE,MAAO,4TAAA,2CAAA,iEAAA,xaAACG,gDAAQ,AAAAC,uEAAA,uEAA+B,AAACC,wGAAOJ,wHAC5BA,uEACAD","names":["metabase.legacy-mbql.schema/PositiveInt","cljs.core/pos-int?","metabase.legacy-mbql.schema/date-bucketing-units","metabase.legacy-mbql.schema/time-bucketing-units","metabase.legacy-mbql.schema/datetime-bucketing-units","clojure.set.union","metabase.util.malli.registry/register!","metabase.util.malli.registry/-with-doc","cljs.core.into","metabase.legacy-mbql.schema/TimezoneId","metabase.legacy_mbql.schema.helpers.clause","metabase.legacy-mbql.schema/relative-datetime","metabase.legacy-mbql.schema/interval","x","cljs.core/not","metabase.legacy-mbql.schema.helpers/is-clause?","metabase.util.malli.registry/validate","cljs.core/second","cljs.core/constantly","metabase.legacy-mbql.schema/absolute-datetime","metabase.legacy-mbql.schema/time","metabase.legacy_mbql.schema.helpers.one_of_STAR_","or__5002__auto__","cljs.core/meta","js/metabase","js/metabase.legacy-mbql","js/metabase.legacy-mbql.schema","js/metabase.legacy-mbql.schema.absolute-datetime","cljs.core/Var","js/metabase.legacy-mbql.schema.relative-datetime","js/metabase.legacy-mbql.schema.time","metabase.legacy-mbql.schema/value","metabase.legacy-mbql.schema/expression","var_args","G__75273","metabase.legacy-mbql.schema/valid-temporal-unit-for-base-type?","js/Error","p__75274","map__75275","cljs.core/--destructure-map","cljs.core.get","base-type","temporal-unit","_field-options","metabase.legacy_mbql.schema.valid_temporal_unit_for_base_type_QMARK_","temp__5802__auto__","units","and__5000__auto__","pred__75276","p1__75271#","p2__75270#","expr__75277","cljs.core.isa_QMARK_","cljs.core/contains?","cljs.core/complement","p__75279","vec__75280","cljs.core.nth","map__75283","_","id-or-name","metabase.legacy-mbql.schema/field","metabase.legacy-mbql.schema/field:id","p__75284","vec__75285","cljs.core/integer?","js/metabase.legacy-mbql.schema.expression","js/metabase.legacy-mbql.schema.field","metabase.legacy-mbql.schema/Field","metabase.legacy-mbql.schema/aggregation","js/metabase.legacy-mbql.schema.aggregation","metabase.legacy-mbql.schema/Reference","metabase.legacy-mbql.schema/offset","metabase.legacy-mbql.schema/string-functions","metabase.legacy-mbql.schema/StringExpression","metabase.legacy-mbql.schema/StringExpressionArg","metabase.legacy-mbql.schema/numeric-functions","metabase.legacy-mbql.schema/boolean-functions","metabase.legacy-mbql.schema/aggregations","metabase.legacy-mbql.schema/datetime-functions","metabase.legacy-mbql.schema/NumericExpression","metabase.legacy-mbql.schema/BooleanExpression","metabase.legacy-mbql.schema/DatetimeExpression","metabase.legacy-mbql.schema/Aggregation","cljs.core/number?","metabase.legacy-mbql.schema/NumericExpressionArg","metabase.legacy-mbql.schema/DateTimeExpressionArg","cljs.core/boolean?","metabase.legacy-mbql.schema/ExpressionArg","metabase.legacy-mbql.schema/Addable","metabase.legacy-mbql.schema/IntGreaterThanZeroOrNumericExpression","metabase.legacy-mbql.schema/coalesce","metabase.legacy-mbql.schema/substring","metabase.legacy-mbql.schema/length","metabase.legacy-mbql.schema/trim","metabase.legacy-mbql.schema/rtrim","metabase.legacy-mbql.schema/ltrim","metabase.legacy-mbql.schema/upper","metabase.legacy-mbql.schema/lower","metabase.legacy-mbql.schema/replace","metabase.legacy-mbql.schema/concat","metabase.legacy-mbql.schema/regex-match-first","metabase.legacy-mbql.schema/host","metabase.legacy-mbql.schema/domain","metabase.legacy-mbql.schema/subdomain","metabase.legacy-mbql.schema/month-name","metabase.legacy-mbql.schema/quarter-name","metabase.legacy-mbql.schema/day-name","metabase.legacy-mbql.schema/+","metabase.legacy-mbql.schema/-","metabase.legacy-mbql.schema//","metabase.legacy-mbql.schema/*","metabase.legacy-mbql.schema/floor","metabase.legacy-mbql.schema/ceil","metabase.legacy-mbql.schema/round","metabase.legacy-mbql.schema/abs","metabase.legacy-mbql.schema/power","metabase.legacy-mbql.schema/sqrt","metabase.legacy-mbql.schema/exp","metabase.legacy-mbql.schema/log","metabase.legacy-mbql.schema/datetime-diff","metabase.legacy-mbql.schema/temporal-extract","metabase.legacy-mbql.schema/get-year","metabase.legacy-mbql.schema/get-quarter","metabase.legacy-mbql.schema/get-month","metabase.legacy-mbql.schema/get-week","metabase.legacy-mbql.schema/get-day","metabase.legacy-mbql.schema/get-day-of-week","metabase.legacy-mbql.schema/get-hour","metabase.legacy-mbql.schema/get-minute","metabase.legacy-mbql.schema/get-second","metabase.legacy-mbql.schema/convert-timezone","metabase.legacy-mbql.schema/ArithmeticDateTimeUnit","metabase.legacy-mbql.schema/datetime-add","metabase.legacy-mbql.schema.helpers/clause","metabase.legacy-mbql.schema/now","metabase.legacy-mbql.schema/datetime-subtract","js/metabase.legacy-mbql.schema.+","js/metabase.legacy-mbql.schema.datetime-add","js/metabase.legacy-mbql.schema.datetime-subtract","js/metabase.legacy-mbql.schema.convert-timezone","js/metabase.legacy-mbql.schema.now","metabase.legacy-mbql.schema/Filter","metabase.legacy-mbql.schema/and","metabase.legacy-mbql.schema/or","metabase.legacy-mbql.schema/not","metabase.legacy-mbql.schema/FieldOrExpressionRefOrRelativeDatetime","metabase.legacy-mbql.schema/EqualityComparable","metabase.legacy-mbql.schema/OrderComparable","metabase.legacy-mbql.schema/=","metabase.legacy-mbql.schema/!=","metabase.legacy-mbql.schema/<","metabase.legacy-mbql.schema/>","metabase.legacy-mbql.schema/<=","metabase.legacy-mbql.schema/>=","metabase.legacy-mbql.schema/between","metabase.legacy-mbql.schema/inside","metabase.legacy-mbql.schema/is-null","metabase.legacy-mbql.schema/not-null","metabase.legacy-mbql.schema/is-empty","metabase.legacy-mbql.schema/not-empty","metabase.legacy-mbql.schema/StringFilterOptions","seq__75305","cljs.core/seq","chunk__75306","count__75307","i__75308","temp__5804__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","clause-keyword","cljs.core.keyword","cljs.core/name","metabase.legacy-mbql.schema/starts-with","metabase.legacy-mbql.schema/ends-with","metabase.legacy-mbql.schema/contains","metabase.legacy-mbql.schema/does-not-contain","metabase.legacy-mbql.schema/TimeIntervalOptions","metabase.legacy-mbql.schema/time-interval","metabase.legacy-mbql.schema/SegmentID","metabase.legacy-mbql.schema/segment","js/metabase.legacy-mbql.schema.and","js/metabase.legacy-mbql.schema.or","js/metabase.legacy-mbql.schema.not","js/metabase.legacy-mbql.schema.<","js/metabase.legacy-mbql.schema.<=","js/metabase.legacy-mbql.schema.>","js/metabase.legacy-mbql.schema.>=","js/metabase.legacy-mbql.schema.=","js/metabase.legacy-mbql.schema.!=","js/metabase.legacy-mbql.schema.between","js/metabase.legacy-mbql.schema.starts-with","js/metabase.legacy-mbql.schema.ends-with","js/metabase.legacy-mbql.schema.contains","js/metabase.legacy-mbql.schema.does-not-contain","js/metabase.legacy-mbql.schema.inside","js/metabase.legacy-mbql.schema.is-empty","js/metabase.legacy-mbql.schema.not-empty","js/metabase.legacy-mbql.schema.is-null","js/metabase.legacy-mbql.schema.not-null","js/metabase.legacy-mbql.schema.time-interval","js/metabase.legacy-mbql.schema.segment","metabase.legacy-mbql.schema/CaseClause","metabase.legacy-mbql.schema/CaseClauses","metabase.legacy-mbql.schema/CaseOptions","metabase.legacy-mbql.schema/case","js/metabase.legacy-mbql.schema.-","js/metabase.legacy-mbql.schema.*","js/metabase.legacy-mbql.schema.coalesce","js/metabase.legacy-mbql.schema.length","js/metabase.legacy-mbql.schema.floor","js/metabase.legacy-mbql.schema.ceil","js/metabase.legacy-mbql.schema.round","js/metabase.legacy-mbql.schema.abs","js/metabase.legacy-mbql.schema.power","js/metabase.legacy-mbql.schema.sqrt","js/metabase.legacy-mbql.schema.exp","js/metabase.legacy-mbql.schema.log","js/metabase.legacy-mbql.schema.case","js/metabase.legacy-mbql.schema.datetime-diff","js/metabase.legacy-mbql.schema.temporal-extract","js/metabase.legacy-mbql.schema.get-year","js/metabase.legacy-mbql.schema.get-quarter","js/metabase.legacy-mbql.schema.get-month","js/metabase.legacy-mbql.schema.get-week","js/metabase.legacy-mbql.schema.get-day","js/metabase.legacy-mbql.schema.get-day-of-week","js/metabase.legacy-mbql.schema.get-hour","js/metabase.legacy-mbql.schema.get-minute","js/metabase.legacy-mbql.schema.get-second","js/metabase.legacy-mbql.schema.substring","js/metabase.legacy-mbql.schema.trim","js/metabase.legacy-mbql.schema.ltrim","js/metabase.legacy-mbql.schema.rtrim","js/metabase.legacy-mbql.schema.replace","js/metabase.legacy-mbql.schema.lower","js/metabase.legacy-mbql.schema.upper","js/metabase.legacy-mbql.schema.concat","js/metabase.legacy-mbql.schema.regex-match-first","js/metabase.legacy-mbql.schema.host","js/metabase.legacy-mbql.schema.domain","js/metabase.legacy-mbql.schema.subdomain","js/metabase.legacy-mbql.schema.month-name","js/metabase.legacy-mbql.schema.quarter-name","js/metabase.legacy-mbql.schema.day-name","metabase.legacy-mbql.schema/count","metabase.legacy-mbql.schema/cum-count","metabase.legacy-mbql.schema/avg","metabase.legacy-mbql.schema/cum-sum","metabase.legacy-mbql.schema/distinct","metabase.legacy-mbql.schema/sum","metabase.legacy-mbql.schema/min","metabase.legacy-mbql.schema/max","metabase.legacy-mbql.schema/sum-where","metabase.legacy-mbql.schema/count-where","metabase.legacy-mbql.schema/share","metabase.legacy-mbql.schema/stddev","metabase.legacy-mbql.schema/ag:var","metabase.legacy-mbql.schema/median","metabase.legacy-mbql.schema/percentile","metabase.legacy-mbql.schema/metric","js/metabase.legacy-mbql.schema.avg","js/metabase.legacy-mbql.schema.cum-sum","js/metabase.legacy-mbql.schema.distinct","js/metabase.legacy-mbql.schema.stddev","js/metabase.legacy-mbql.schema.sum","js/metabase.legacy-mbql.schema.min","js/metabase.legacy-mbql.schema.max","js/metabase.legacy-mbql.schema.metric","js/metabase.legacy-mbql.schema.share","js/metabase.legacy-mbql.schema.count-where","js/metabase.legacy-mbql.schema.sum-where","js/metabase.legacy-mbql.schema.median","js/metabase.legacy-mbql.schema.percentile","js/metabase.legacy-mbql.schema.ag:var","js/metabase.legacy-mbql.schema.cum-count","js/metabase.legacy-mbql.schema.count","js/metabase.legacy-mbql.schema.offset","metabase.legacy-mbql.schema/UnnamedAggregation","metabase.legacy-mbql.schema/AggregationOptions","metabase.legacy-mbql.schema/aggregation-options","metabase.legacy-mbql.schema/asc","metabase.legacy-mbql.schema/desc","js/metabase.legacy-mbql.schema.asc","js/metabase.legacy-mbql.schema.desc","metabase.legacy-mbql.schema/TemplateTagType","metabase.legacy-mbql.schema/TemplateTag:Common","metabase.legacy-mbql.schema/TemplateTag:Value:Common","metabase.legacy-mbql.schema/TemplateTag","m","cljs.core/every?","p__75872","vec__75873","tag-name","tag-definition","cljs.core._EQ_","metabase.legacy-mbql.schema/NativeQuery:Common","metabase.legacy-mbql.schema/NativeQuery","metabase.legacy-mbql.schema/MBQLQuery","metabase.legacy-mbql.schema/SourceQuery","cljs.core.every_pred","cljs.core/map?","metabase.legacy-mbql.schema/SourceQueryMetadata","metabase.legacy-mbql.schema/source-table-card-id-regex","metabase.legacy-mbql.schema/SourceTable","metabase.legacy-mbql.schema/join-strategies","metabase.legacy-mbql.schema/JoinStrategy","metabase.legacy-mbql.schema/Fields","metabase.legacy-mbql.schema/JoinFields","cljs.core.some_fn","metabase.legacy-mbql.schema/Join","p1__75877#","metabase.legacy-mbql.schema.helpers/non-empty","metabase.legacy-mbql.schema.helpers/empty-or-distinct?","cljs.core.filter","cljs.core/some?","cljs.core.map","metabase.legacy-mbql.schema.helpers/distinct","query","cljs.core/select-keys","p__75878","map__75879","breakout","fields","cljs.core/empty?","clojure.set.intersection","cljs.core/set","metabase.legacy-mbql.schema/template-tag","metabase.legacy-mbql.schema/dimension","metabase.legacy-mbql.schema/variable","metabase.legacy-mbql.schema/ParameterTarget","js/metabase.legacy-mbql.schema.dimension","js/metabase.legacy-mbql.schema.variable","metabase.legacy-mbql.schema/Parameter","metabase.legacy-mbql.schema/ParameterList","p__75880","map__75881","max-results","max-results-bare-rows","p__75890","map__75891","native","mbql","query-type","G__75892","cljs.core/Keyword","metabase.legacy-mbql.schema/Query","metabase.legacy-mbql.schema/valid-query?","metabase.util.malli.registry/validator","metabase.legacy-mbql.schema/validate-query","explainer","metabase.util.malli.registry/explainer","error","humanized","malli.error.humanize","cljs.core.ex_info","metabase.shared.util.i18n.js_i18n","cljs.core.pr_str"],"sourcesContent":["(ns metabase.legacy-mbql.schema\n  \"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"\n  (:refer-clojure :exclude [count distinct min max + - / * and or not not-empty = < > <= >= time case concat replace abs])\n  (:require\n   [clojure.core :as core]\n   [clojure.set :as set]\n   [malli.core :as mc]\n   [malli.error :as me]\n   [metabase.legacy-mbql.schema.helpers :as helpers :refer [is-clause?]]\n   [metabase.legacy-mbql.schema.macros :refer [defclause one-of]]\n   [metabase.lib.schema.actions :as lib.schema.actions]\n   [metabase.lib.schema.binning :as lib.schema.binning]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.expression.temporal :as lib.schema.expression.temporal]\n   [metabase.lib.schema.expression.window :as lib.schema.expression.window]\n   [metabase.lib.schema.id :as lib.schema.id]\n   [metabase.lib.schema.info :as lib.schema.info]\n   [metabase.lib.schema.literal :as lib.schema.literal]\n   [metabase.lib.schema.template-tag :as lib.schema.template-tag]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util.malli.registry :as mr]))\n\n;; A NOTE ABOUT METADATA:\n;;\n;; Clauses below are marked with the following tags for documentation purposes:\n;;\n;; *  Clauses marked `^:sugar` are syntactic sugar primarily intended to make generating queries easier on the\n;;    frontend. These clauses are automatically rewritten as simpler clauses by the `desugar` or `expand-macros`\n;;    middleware. Thus driver implementations do not need to handle these clauses.\n;;\n;; *  Clauses marked `^:internal` are automatically generated by `wrap-value-literals` or other middleware from values\n;;    passed in. They are not intended to be used by the frontend when generating a query. These add certain\n;;    information that simplify driver implementations. When writing MBQL queries yourself you should pretend these\n;;    clauses don't exist.\n;;\n;; *  Clauses marked `^{:requires-features #{feature+}}` require a certain set of features to be used. At some date in\n;;    the future we will likely add middleware that uses this metadata to automatically validate that a driver has the\n;;    features needed to run the query in question.\n\n(def ^:private PositiveInt\n  [:schema\n   {:doc/message \"Must be a positive integer.\"}\n   pos-int?])\n\n;; `:day-of-week` depends on the [[metabase.public-settings/start-of-week]] Setting, by default Sunday.\n;; 1 = first day of the week (e.g. Sunday)\n;; 7 = last day of the week (e.g. Saturday)\n(def ^:private date-bucketing-units\n  \"Set of valid units for bucketing or comparing against a *date* Field.\"\n  #{:default :day :day-of-week :day-of-month :day-of-year :week :week-of-year\n    :month :month-of-year :quarter :quarter-of-year :year})\n\n(def ^:private time-bucketing-units\n  \"Set of valid units for bucketing or comparing against a *time* Field.\"\n  #{:default :millisecond :second :minute :minute-of-hour :hour :hour-of-day})\n\n(def datetime-bucketing-units\n  \"Set of valid units for bucketing or comparing against a *datetime* Field.\"\n  (set/union date-bucketing-units time-bucketing-units))\n\n(mr/def ::DateUnit\n  \"Valid unit for date bucketing.\"\n  (into [:enum {:error/message \"date bucketing unit\"}] date-bucketing-units))\n\n;; it could make sense to say hour-of-day(field) =  hour-of-day(\"2018-10-10T12:00\")\n;; but it does not make sense to say month-of-year(field) = month-of-year(\"08:00:00\"),\n;; does it? So we'll restrict the set of units a TimeValue can have to ones that have no notion of day/date.\n(mr/def ::TimeUnit\n  \"Valid unit for time bucketing.\"\n  (into [:enum {:error/message \"time bucketing unit\"}] time-bucketing-units))\n\n(mr/def ::DateTimeUnit\n  \"Valid unit for *datetime* bucketing.\"\n  (into [:enum {:error/message \"datetime bucketing unit\"}] datetime-bucketing-units))\n\n(def ^:private TimezoneId\n  \"Valid timezone id.\"\n  [:ref ::lib.schema.expression.temporal/timezone-id])\n\n(mr/def ::TemporalExtractUnit\n  \"Valid units to extract from a temporal.\"\n  [:enum\n   {:error/message \"temporal extract unit\"}\n   :year-of-era\n   :quarter-of-year\n   :month-of-year\n   :week-of-year-iso\n   :week-of-year-us\n   :week-of-year-instance\n   :day-of-month\n   :day-of-week\n   :hour-of-day\n   :minute-of-hour\n   :second-of-minute])\n\n(mr/def ::DatetimeDiffUnit\n  \"Valid units for a datetime-diff clause.\"\n  [:enum {:error/message \"datetime-diff unit\"} :second :minute :hour :day :week :month :quarter :year])\n\n(mr/def ::ExtractWeekMode\n  \"Valid modes to extract weeks.\"\n  [:enum {:error/message \"temporal-extract week extraction mode\"} :iso :us :instance])\n\n(mr/def ::RelativeDatetimeUnit\n  [:enum {:error/message \"relative-datetime unit\"} :default :minute :hour :day :week :month :quarter :year])\n\n;; TODO - `unit` is not allowed if `n` is `current`\n(defclause relative-datetime\n  n    [:or [:= :current] :int]\n  unit (optional [:ref ::RelativeDatetimeUnit]))\n\n(defclause interval\n  n    :int\n  unit [:ref ::RelativeDatetimeUnit])\n\n;; This clause is automatically generated by middleware when datetime literals (literal strings or one of the Java\n;; types) are encountered. Unit is inferred by looking at the Field the timestamp is compared against. Implemented\n;; mostly to convenience driver implementations. You don't need to use this form directly when writing MBQL; datetime\n;; literal strings are preferred instead.\n;;\n;; example:\n;; [:= [:field 10 {:temporal-unit :day}] \"2018-10-02\"]\n;;\n;; becomes:\n;; [:= [:field 10 {:temporal-unit :day}] [:absolute-datetime #inst \"2018-10-02\" :day]]\n(mr/def ::absolute-datetime\n  [:multi {:error/message \"valid :absolute-datetime clause\"\n           :doc/title     [:span [:code \":absolute-datetime\"] \" clause\"]\n           :dispatch      (fn [x]\n                            (cond\n                              (core/not (is-clause? :absolute-datetime x)) :invalid\n                              (mr/validate ::lib.schema.literal/date (second x))      :date\n                              :else                                        :datetime))}\n   [:invalid [:fn\n              {:error/message \"not an :absolute-datetime clause\"}\n              (constantly false)]]\n   [:date (helpers/clause\n           :absolute-datetime\n           \"date\" ::lib.schema.literal/date\n           \"unit\" ::DateUnit)]\n   [:datetime (helpers/clause\n               :absolute-datetime\n               \"datetime\" ::lib.schema.literal/datetime\n               \"unit\"     ::DateTimeUnit)]])\n\n(def ^:internal ^{:clause-name :absolute-datetime} absolute-datetime\n  \"Schema for an `:absolute-datetime` clause.\"\n  [:ref ::absolute-datetime])\n\n;; almost exactly the same as `absolute-datetime`, but generated in some sitations where the literal in question was\n;; clearly a time (e.g. \"08:00:00.000\") and/or the Field derived from `:type/Time` and/or the unit was a\n;; time-bucketing unit\n(defclause ^:internal time\n  time ::lib.schema.literal/time\n  unit ::TimeUnit)\n\n(mr/def ::DateOrDatetimeLiteral\n  \"Schema for a valid date or datetime literal.\"\n  [:or\n   {:error/message \"date or datetime literal\"}\n   relative-datetime\n   absolute-datetime\n   ;; literal datetime strings and Java types will get transformed to [[absolute-datetime]] clauses automatically by\n   ;; middleware so drivers don't need to deal with these directly. You only need to worry about handling\n   ;; `absolute-datetime` clauses.\n   ::lib.schema.literal/datetime\n   ::lib.schema.literal/date])\n\n(mr/def ::TimeLiteral\n  \"Schema for valid time literals.\"\n  [:or\n   {:error/message \"time literal\"}\n   time\n   ::lib.schema.literal/time])\n\n(mr/def ::TemporalLiteral\n  \"Schema for valid temporal literals.\"\n  [:or\n   {:error/message \"temporal literal\"}\n   [:ref ::DateOrDatetimeLiteral]\n   [:ref ::TimeLiteral]])\n\n(mr/def ::DateTimeValue\n  \"Schema for a datetime value drivers will personally have to handle, either an `absolute-datetime` form or a\n  `relative-datetime` form.\"\n  (one-of absolute-datetime relative-datetime time))\n\n\n;;; -------------------------------------------------- Other Values --------------------------------------------------\n\n(mr/def ::ValueTypeInfo\n  [:map\n   {:doc/message (str \"Type info about a value in a `:value` clause. Added automatically by `wrap-value-literals`\"\n                      \" middleware to values in filter clauses based on the Field in the clause.\")}\n   [:database_type {:optional true} [:maybe ::lib.schema.common/non-blank-string]]\n   [:base_type     {:optional true} [:maybe ::lib.schema.common/base-type]]\n   [:semantic_type {:optional true} [:maybe ::lib.schema.common/semantic-or-relation-type]]\n   [:unit          {:optional true} [:maybe ::DateTimeUnit]]\n   [:name          {:optional true} [:maybe ::lib.schema.common/non-blank-string]]])\n\n;; Arguments to filter clauses are automatically replaced with [:value <value> <type-info>] clauses by the\n;; `wrap-value-literals` middleware. This is done to make it easier to implement query processors, because most driver\n;; implementations dispatch off of Object type, which is often not enough to make informed decisions about how to\n;; treat certain objects. For example, a string compared against a Postgres UUID Field needs to be parsed into a UUID\n;; object, since text <-> UUID comparison doesn't work in Postgres. For this reason, raw literals in `:filter`\n;; clauses are wrapped in `:value` clauses and given information about the type of the Field they will be compared to.\n(defclause ^:internal value\n  value    :any\n  type-info [:maybe ::ValueTypeInfo])\n\n\n;;; ----------------------------------------------------- Fields -----------------------------------------------------\n\n;; Expression *references* refer to a something in the `:expressions` clause, e.g. something like\n;;\n;;    [:+ [:field 1 nil] [:field 2 nil]]\n;;\n;; As of 0.42.0 `:expression` references can have an optional options map\n(defclause ^{:requires-features #{:expressions}} expression\n  expression-name ::lib.schema.common/non-blank-string\n  options         (optional :map))\n\n(defn valid-temporal-unit-for-base-type?\n  \"Whether `temporal-unit` (e.g. `:day`) is valid for the given `base-type` (e.g. `:type/Date`). If either is `nil` this\n  will return truthy. Accepts either map of `field-options` or `base-type` and `temporal-unit` passed separately.\"\n  ([{:keys [base-type temporal-unit] :as _field-options}]\n   (valid-temporal-unit-for-base-type? base-type temporal-unit))\n\n  ([base-type temporal-unit]\n   (if-let [units (when (core/and temporal-unit base-type)\n                    (condp #(isa? %2 %1) base-type\n                      :type/Date     date-bucketing-units\n                      :type/Time     time-bucketing-units\n                      :type/DateTime datetime-bucketing-units\n                      nil))]\n     (contains? units temporal-unit)\n     true)))\n\n(mr/def ::validate-temporal-unit\n  ;; TODO - consider breaking this out into separate constraints for the three different types so we can generate more\n  ;; specific error messages\n  [:fn\n   {:error/message \"Invalid :temporal-unit for the specified :base-type.\"}\n   valid-temporal-unit-for-base-type?])\n\n(mr/def ::no-binning-options-at-top-level\n  [:fn\n   {:error/message \":binning keys like :strategy are not allowed at the top level of :field options.\"}\n   (complement :strategy)])\n\n(mr/def ::FieldOptions\n  [:and\n   [:map\n    {:error/message \"field options\"}\n    [:base-type {:optional true} [:maybe ::lib.schema.common/base-type]]\n\n    [:source-field\n     {:optional true\n      :doc/message\n      \"Replaces `fk->`.\n\n  `:source-field` is used to refer to a FieldOrExpression from a different Table you would like IMPLICITLY JOINED to\n     the source table.\n\n  If both `:source-field` and `:join-alias` are supplied, `:join-alias` should be used to perform the join;\n  `:source-field` should be for information purposes only.\"} ::lib.schema.id/field]\n\n    [:temporal-unit\n     {:optional true\n      :doc/message\n      \"`:temporal-unit` is used to specify DATE BUCKETING for a FieldOrExpression that represents a moment in time of\n  some sort.\n\n  There is no requirement that all `:type/Temporal` derived FieldOrExpressions specify a `:temporal-unit`, but for\n  legacy reasons `:field` clauses that refer to `:type/DateTime` FieldOrExpressions will be automatically \\\"bucketed\\\"\n  in the `:breakout` and `:filter` clauses, but nowhere else. Auto-bucketing only applies to `:filter` clauses when\n  values for comparison are `yyyy-MM-dd` date strings. See the `auto-bucket-datetimes` middleware for more details.\n  `:field` clauses elsewhere will not be automatically bucketed, so drivers still need to make sure they do any\n  special datetime handling for plain `:field` clauses when their FieldOrExpression derives from `:type/DateTime`.\"}\n     [:maybe ::DateTimeUnit]]\n\n    [:join-alias\n     {:optional true\n      :doc/message\n      \"Replaces `joined-field`.\n\n  `:join-alias` is used to refer to a FieldOrExpression from a different Table/nested query that you are EXPLICITLY\n  JOINING against.\"}\n     [:maybe ::lib.schema.common/non-blank-string]]\n\n    [:binning\n     {:optional true\n      :doc/message\n      \"Replaces `binning-strategy`.\n\n  Using binning requires the driver to support the `:binning` feature.\"}\n     [:maybe [:ref ::lib.schema.binning/binning]]]]\n\n   ;; additional validation\n   [:ref\n    {:doc/message \"If `:base-type` is specified, the `:temporal-unit` must make sense, e.g. no bucketing by `:year`for\n  a `:type/Time` column.\"}\n    ::validate-temporal-unit]\n\n   [:ref\n    {:doc/message \"You cannot use `:binning` keys like `:strategy` in the top level.\"}\n    ::no-binning-options-at-top-level]])\n\n(mr/def ::require-base-type-for-field-name\n  [:fn\n   {:error/message \":field clauses using a string field name must specify :base-type.\"}\n   (fn [[_ id-or-name {:keys [base-type]}]]\n     (if (string? id-or-name)\n       base-type\n       true))])\n\n(mr/def ::field\n  [:and\n   {:doc/title [:span [:code \":field\"] \" clause\"]}\n   (helpers/clause\n    :field\n    \"id-or-name\" [:or ::lib.schema.id/field ::lib.schema.common/non-blank-string]\n    \"options\"    [:maybe [:ref ::FieldOptions]])\n   [:ref\n    {:doc/message \"Fields using names rather than integer IDs are required to specify `:base-type`.\"}\n    ::require-base-type-for-field-name]])\n\n(def ^{:clause-name :field, :added \"0.39.0\"} field\n  \"Schema for a `:field` clause.\"\n  [:ref ::field])\n\n(def ^{:clause-name :field, :added \"0.39.0\"} field:id\n  \"Schema for a `:field` clause, with the added constraint that it must use an integer Field ID.\"\n  [:and\n   field\n   [:fn\n    {:error/message \"Must be a :field with an integer Field ID.\"}\n    (fn [[_ id-or-name]]\n      (integer? id-or-name))]])\n\n(mr/def ::Field\n  [:schema\n   {:doc/title \"`:field` or `:expression` ref\"}\n   (one-of expression field)])\n\n(def Field\n  \"Schema for either a `:field` clause (reference to a Field) or an `:expression` clause (reference to an expression).\"\n  [:ref ::Field])\n\n;; aggregate field reference refers to an aggregation, e.g.\n;;\n;;    {:aggregation [[:count]]\n;;     :order-by    [[:asc [:aggregation 0]]]} ;; refers to the 0th aggregation, `:count`\n;;\n;; Currently aggregate Field references can only be used inside order-by clauses. In the future once we support SQL\n;; `HAVING` we can allow them in filter clauses too\n;;\n;; TODO - shouldn't we allow composing aggregations in expressions? e.g.\n;;\n;;    {:order-by [[:asc [:+ [:aggregation 0] [:aggregation 1]]]]}\n;;\n;; TODO - it would be nice if we could check that there's actually an aggregation with the corresponding index,\n;; wouldn't it\n;;\n;; As of 0.42.0 `:aggregation` references can have an optional options map.\n(defclause aggregation\n  aggregation-clause-index :int\n  options                  (optional :map))\n\n(mr/def ::Reference\n  (one-of aggregation expression field))\n\n(def Reference\n  \"Schema for any type of valid Field clause, or for an indexed reference to an aggregation clause.\"\n  [:ref ::Reference])\n\n(defclause ^{:added \"0.50.0\"} offset\n  opts [:ref ::lib.schema.common/options]\n  expr [:or [:ref ::FieldOrExpressionDef] [:ref ::UnnamedAggregation]]\n  n    ::lib.schema.expression.window/offset.n)\n\n;;; -------------------------------------------------- Expressions ---------------------------------------------------\n\n;; Expressions are \"calculated column\" definitions, defined once and then used elsewhere in the MBQL query.\n\n(def string-functions\n  \"Functions that return string values. Should match [[StringExpression]].\"\n  #{:substring :trim :rtrim :ltrim :upper :lower :replace :concat :regex-match-first :coalesce :case\n    :host :domain :subdomain :month-name :quarter-name :day-name})\n\n(def ^:private StringExpression\n  \"Schema for the definition of an string expression.\"\n  [:ref ::StringExpression])\n\n(mr/def ::StringExpressionArg\n  [:multi\n   {:dispatch (fn [x]\n                (cond\n                  (string? x)                     :string\n                  (is-clause? string-functions x) :string-expression\n                  (is-clause? :value x)           :value\n                  :else                           :else))}\n   [:string            :string]\n   [:string-expression StringExpression]\n   [:value             value]\n   [:else              Field]])\n\n(def ^:private StringExpressionArg\n  [:ref ::StringExpressionArg])\n\n(def numeric-functions\n  \"Functions that return numeric values. Should match [[NumericExpression]].\"\n  #{:+ :- :/ :* :coalesce :length :round :ceil :floor :abs :power :sqrt :log :exp :case :datetime-diff\n    ;; extraction functions (get some component of a given temporal value/column)\n    :temporal-extract\n    ;; SUGAR drivers do not need to implement\n    :get-year :get-quarter :get-month :get-week :get-day :get-day-of-week :get-hour :get-minute :get-second})\n\n(def ^:private boolean-functions\n  \"Functions that return boolean values. Should match [[BooleanExpression]].\"\n  #{:and :or :not :< :<= :> :>= := :!=})\n\n(def ^:private aggregations\n  #{:sum :avg :stddev :var :median :percentile :min :max :cum-count :cum-sum :count-where :sum-where :share :distinct\n    :metric :aggregation-options :count :offset})\n\n(def ^:private datetime-functions\n  \"Functions that return Date or DateTime values. Should match [[DatetimeExpression]].\"\n  #{:+ :datetime-add :datetime-subtract :convert-timezone :now})\n\n(def ^:private NumericExpression\n  \"Schema for the definition of a numeric expression. All numeric expressions evaluate to numeric values.\"\n  [:ref ::NumericExpression])\n\n(def ^:private BooleanExpression\n  \"Schema for the definition of an arithmetic expression.\"\n  [:ref ::BooleanExpression])\n\n(def DatetimeExpression\n  \"Schema for the definition of a date function expression.\"\n  [:ref ::DatetimeExpression])\n\n(def Aggregation\n  \"Schema for anything that is a valid `:aggregation` clause.\"\n  [:ref ::Aggregation])\n\n(mr/def ::NumericExpressionArg\n  [:multi\n   {:error/message \"numeric expression argument\"\n    :dispatch      (fn [x]\n                     (cond\n                       (number? x)                      :number\n                       (is-clause? numeric-functions x) :numeric-expression\n                       (is-clause? aggregations x)      :aggregation\n                       (is-clause? :value x)            :value\n                       :else                            :field))}\n   [:number             number?]\n   [:numeric-expression NumericExpression]\n   [:aggregation        Aggregation]\n   [:value              value]\n   [:field              Field]])\n\n(def ^:private NumericExpressionArg\n  [:ref ::NumericExpressionArg])\n\n(mr/def ::DateTimeExpressionArg\n  [:multi\n   {:error/message \"datetime expression argument\"\n    :dispatch      (fn [x]\n                     (cond\n                       (is-clause? aggregations x)       :aggregation\n                       (is-clause? :value x)             :value\n                       (is-clause? datetime-functions x) :datetime-expression\n                       :else                             :else))}\n   [:aggregation         Aggregation]\n   [:value               value]\n   [:datetime-expression DatetimeExpression]\n   [:else                [:or [:ref ::DateOrDatetimeLiteral] Field]]])\n\n(def ^:private DateTimeExpressionArg\n  [:ref ::DateTimeExpressionArg])\n\n(mr/def ::ExpressionArg\n  [:multi\n   {:error/message \"expression argument\"\n    :dispatch      (fn [x]\n                     (cond\n                       (number? x)                       :number\n                       (boolean? x)                      :boolean\n                       (is-clause? boolean-functions x)  :boolean-expression\n                       (is-clause? numeric-functions x)  :numeric-expression\n                       (is-clause? datetime-functions x) :datetime-expression\n                       (string? x)                       :string\n                       (is-clause? string-functions x)   :string-expression\n                       (is-clause? :value x)             :value\n                       :else                             :else))}\n   [:number              number?]\n   [:boolean             :boolean]\n   [:boolean-expression  BooleanExpression]\n   [:numeric-expression  NumericExpression]\n   [:datetime-expression DatetimeExpression]\n   [:string              :string]\n   [:string-expression   StringExpression]\n   [:value               value]\n   [:else                Field]])\n\n(def ^:private ExpressionArg\n  [:ref ::ExpressionArg])\n\n(mr/def ::Addable\n  [:or\n   {:error/message \"numeric expression arg or interval\"}\n   DateTimeExpressionArg\n   interval\n   NumericExpressionArg])\n\n(def ^:private Addable\n  [:ref ::Addable])\n\n(mr/def ::IntGreaterThanZeroOrNumericExpression\n  [:multi\n   {:error/message \"int greater than zero or numeric expression\"\n    :dispatch      (fn [x]\n                     (if (number? x)\n                       :number\n                       :else))}\n   [:number PositiveInt]\n   [:else   NumericExpression]])\n\n(def ^:private IntGreaterThanZeroOrNumericExpression\n  [:ref ::IntGreaterThanZeroOrNumericExpression])\n\n(defclause ^{:requires-features #{:expressions}} coalesce\n  a ExpressionArg, b ExpressionArg, more (rest ExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} substring\n  s StringExpressionArg, start IntGreaterThanZeroOrNumericExpression, length (optional NumericExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} length\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} trim\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} rtrim\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} ltrim\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} upper\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} lower\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} replace\n  s StringExpressionArg, match :string, replacement :string)\n\n(defclause ^{:requires-features #{:expressions}} concat\n  a StringExpressionArg, b StringExpressionArg, more (rest StringExpressionArg))\n\n(defclause ^{:requires-features #{:expressions :regex}} regex-match-first\n  s StringExpressionArg, pattern :string)\n\n(defclause ^{:requires-features #{:expressions :regex}} host\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions :regex}} domain\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions :regex}} subdomain\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} month-name\n  n NumericExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} quarter-name\n  n NumericExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} day-name\n  n NumericExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} +\n  x Addable, y Addable, more (rest Addable))\n\n(defclause ^{:requires-features #{:expressions}} -\n  x NumericExpressionArg, y Addable, more (rest Addable))\n\n(defclause ^{:requires-features #{:expressions}} /, x NumericExpressionArg, y NumericExpressionArg, more (rest NumericExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} *, x NumericExpressionArg, y NumericExpressionArg, more (rest NumericExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} floor\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} ceil\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} round\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} abs\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:advanced-math-expressions}} power\n  x NumericExpressionArg,  y NumericExpressionArg)\n\n(defclause ^{:requires-features #{:advanced-math-expressions}} sqrt\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:advanced-math-expressions}} exp\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:advanced-math-expressions}} log\n  x NumericExpressionArg)\n\n;; The result is positive if x <= y, and negative otherwise.\n;;\n;; Days, weeks, months, and years are only counted if they are whole to the \"day\".\n;; For example, `datetimeDiff(\"2022-01-30\", \"2022-02-28\", \"month\")` returns 0 months.\n;;\n;; If the values are datetimes, the time doesn't matter for these units.\n;; For example, `datetimeDiff(\"2022-01-01T09:00:00\", \"2022-01-02T08:00:00\", \"day\")` returns 1 day even though it is less than 24 hours.\n;;\n;; Hours, minutes, and seconds are only counted if they are whole.\n;; For example, datetimeDiff(\"2022-01-01T01:00:30\", \"2022-01-01T02:00:29\", \"hour\") returns 0 hours.\n(defclause ^{:requires-features #{:datetime-diff}} datetime-diff\n  datetime-x DateTimeExpressionArg\n  datetime-y DateTimeExpressionArg\n  unit       [:ref ::DatetimeDiffUnit])\n\n(defclause ^{:requires-features #{:temporal-extract}} temporal-extract\n  datetime DateTimeExpressionArg\n  unit     [:ref ::TemporalExtractUnit]\n  mode     (optional [:ref ::ExtractWeekMode])) ;; only for get-week\n\n;; SUGAR CLAUSE: get-year, get-month... clauses are all sugars clause that will be rewritten as [:temporal-extract column :year]\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-year\n  date DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-quarter\n  date DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-month\n  date DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-week\n  date DateTimeExpressionArg\n  mode (optional [:ref ::ExtractWeekMode]))\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-day\n  date DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-day-of-week\n  date DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-hour\n  datetime DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-minute\n  datetime DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-second\n  datetime DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:convert-timezone}} convert-timezone\n  datetime DateTimeExpressionArg\n  to       TimezoneId\n  from     (optional TimezoneId))\n\n(def ^:private ArithmeticDateTimeUnit\n  [:enum {:error/message \"datetime arithmetic unit\"} :millisecond :second :minute :hour :day :week :month :quarter :year])\n\n(defclause ^{:requires-features #{:date-arithmetics}} datetime-add\n  datetime DateTimeExpressionArg\n  amount   NumericExpressionArg\n  unit     ArithmeticDateTimeUnit)\n\n(defclause ^{:requires-features #{:now}} now)\n\n(defclause ^{:requires-features #{:date-arithmetics}} datetime-subtract\n  datetime DateTimeExpressionArg\n  amount   NumericExpressionArg\n  unit     ArithmeticDateTimeUnit)\n\n(mr/def ::DatetimeExpression\n  (one-of + datetime-add datetime-subtract convert-timezone now))\n\n;;; ----------------------------------------------------- Filter -----------------------------------------------------\n\n(def Filter\n  \"Schema for a valid MBQL `:filter` clause.\"\n  [:ref ::Filter])\n\n(defclause and\n  first-clause  Filter\n  second-clause Filter\n  other-clauses (rest Filter))\n\n(defclause or\n  first-clause  Filter\n  second-clause Filter\n  other-clauses (rest Filter))\n\n(defclause not, clause Filter)\n\n(def ^:private FieldOrExpressionRefOrRelativeDatetime\n  [:multi\n   {:error/message \":field or :expression reference or :relative-datetime\"\n    :error/fn      (constantly \":field or :expression reference or :relative-datetime\")\n    :dispatch      (fn [x]\n                     (if (is-clause? :relative-datetime x)\n                       :relative-datetime\n                       :else))}\n   [:relative-datetime relative-datetime]\n   [:else              Field]])\n\n(mr/def ::EqualityComparable\n  [:maybe\n   {:error/message \"equality comparable\"}\n   [:or\n    :boolean\n    number?\n    :string\n    [:ref ::TemporalLiteral]\n    FieldOrExpressionRefOrRelativeDatetime\n    ExpressionArg\n    value]])\n\n(def ^:private EqualityComparable\n  \"Schema for things that make sense in a `=` or `!=` filter, i.e. things that can be compared for equality.\"\n  [:ref ::EqualityComparable])\n\n(mr/def ::OrderComparable\n  [:multi\n   {:error/message \"order comparable\"\n    :dispatch      (fn [x]\n                     (if (is-clause? :value x)\n                       :value\n                       :else))}\n   [:value value]\n   [:else [:or\n           number?\n           :string\n           [:ref ::TemporalLiteral]\n           ExpressionArg\n           FieldOrExpressionRefOrRelativeDatetime]]])\n\n(def ^:private OrderComparable\n  \"Schema for things that make sense in a filter like `>` or `<`, i.e. things that can be sorted.\"\n  [:ref ::OrderComparable])\n\n;; For all of the non-compound Filter clauses below the first arg is an implicit Field ID\n\n;; These are SORT OF SUGARY, because extra values will automatically be converted a compound clauses. Driver\n;; implementations only need to handle the 2-arg forms.\n;;\n;; `=` works like SQL `IN` with more than 2 args\n;;\n;;    [:= [:field 1 nil] 2 3] --[DESUGAR]--> [:or [:= [:field 1 nil] 2] [:= [:field 1 nil] 3]]\n;;\n;; `!=` works like SQL `NOT IN` with more than 2 args\n;;\n;;    [:!= [:field 1 nil] 2 3] --[DESUGAR]--> [:and [:!= [:field 1 nil] 2] [:!= [:field 1 nil] 3]]\n\n(defclause =,  field EqualityComparable, value-or-field EqualityComparable, more-values-or-fields (rest EqualityComparable))\n(defclause !=, field EqualityComparable, value-or-field EqualityComparable, more-values-or-fields (rest EqualityComparable))\n\n(defclause <,  field OrderComparable, value-or-field OrderComparable)\n(defclause >,  field OrderComparable, value-or-field OrderComparable)\n(defclause <=, field OrderComparable, value-or-field OrderComparable)\n(defclause >=, field OrderComparable, value-or-field OrderComparable)\n\n;; :between is INCLUSIVE just like SQL !!!\n(defclause between field OrderComparable, min OrderComparable, max OrderComparable)\n\n;; SUGAR CLAUSE: This is automatically written as a pair of `:between` clauses by the `:desugar` middleware.\n(defclause ^:sugar inside\n  lat-field OrderComparable\n  lon-field OrderComparable\n  lat-max   OrderComparable\n  lon-min   OrderComparable\n  lat-min   OrderComparable\n  lon-max   OrderComparable)\n\n;; SUGAR CLAUSES: These are rewritten as `[:= <field> nil]` and `[:not= <field> nil]` respectively\n(defclause ^:sugar is-null,  field Field)\n(defclause ^:sugar not-null, field Field)\n\n;; These are rewritten as `[:or [:= <field> nil] [:= <field> \"\"]]` and\n;; `[:and [:not= <field> nil] [:not= <field> \"\"]]`\n(defclause ^:sugar is-empty,  field Field)\n(defclause ^:sugar not-empty, field Field)\n\n(def ^:private StringFilterOptions\n  [:map\n   ;; default true\n   [:case-sensitive {:optional true} :boolean]])\n\n(doseq [clause-keyword [::starts-with ::ends-with ::contains ::does-not-contain]]\n  (mr/def clause-keyword\n    [:or\n     ;; Binary form\n     (helpers/clause (keyword (name clause-keyword))\n                     \"field\" StringExpressionArg\n                     \"string-or-field\" StringExpressionArg\n                     \"options\" [:optional StringFilterOptions])\n     ;; Multi-arg form\n     (helpers/clause (keyword (name clause-keyword))\n                     \"options\" StringFilterOptions\n                     \"field\" StringExpressionArg\n                     \"string-or-field\" StringExpressionArg\n                     \"second-string-or-field\" StringExpressionArg\n                     \"more-strings-or-fields\" [:rest StringExpressionArg])]))\n\n(def ^{:clause-name :starts-with} starts-with\n  \"Schema for a valid :starts-with clause.\"\n  [:ref ::starts-with])\n(def ^{:clause-name :ends-with} ends-with\n  \"Schema for a valid :ends-with clause.\"\n  [:ref ::ends-with])\n(def ^{:clause-name :contains} contains\n  \"Schema for a valid :contains clause.\"\n  [:ref ::contains])\n\n;; SUGAR: this is rewritten as [:not [:contains ...]]\n(def ^{:sugar       true\n       :clause-name :does-not-contain}\n  does-not-contain\n  \"Schema for a valid :does-not-contain clause.\"\n  [:ref ::does-not-contain])\n\n(def ^:private TimeIntervalOptions\n  ;; Should we include partial results for the current day/month/etc? Defaults to `false`; set this to `true` to\n  ;; include them.\n  [:map\n   ;; default false\n   [:include-current {:optional true} :boolean]])\n\n;; Filter subclause. Syntactic sugar for specifying a specific time interval.\n;;\n;; Return rows where datetime Field 100's value is in the current month\n;;\n;;    [:time-interval [:field 100 nil] :current :month]\n;;\n;; Return rows where datetime Field 100's value is in the current month, including partial results for the\n;; current day\n;;\n;;    [:time-interval [:field 100 nil] :current :month {:include-current true}]\n;;\n;; SUGAR: This is automatically rewritten as a filter clause with a relative-datetime value\n(defclause ^:sugar time-interval\n  field   Field\n  n       [:or\n           :int\n           [:enum :current :last :next]]\n  unit    [:ref ::RelativeDatetimeUnit]\n  options (optional TimeIntervalOptions))\n\n;; A segment is a special `macro` that saves some pre-definied filter clause, e.g. [:segment 1]\n;; this gets replaced by a normal Filter clause in MBQL macroexpansion\n;;\n;; It can also be used for GA, which looks something like `[:segment \"gaid::-11\"]`. GA segments aren't actually MBQL\n;; segments and pass-thru to GA.\n(def ^:private SegmentID\n  [:ref ::lib.schema.id/segment])\n\n(defclause ^:sugar segment\n  segment-id [:or SegmentID ::lib.schema.common/non-blank-string])\n\n(mr/def ::BooleanExpression\n  (one-of and or not < <= > >= = !=))\n\n(mr/def ::Filter\n  [:multi\n   {:error/message \"valid filter expression\"\n    :dispatch      (fn [x]\n                     (cond\n                       (is-clause? datetime-functions x) :datetime\n                       (is-clause? numeric-functions x)  :numeric\n                       (is-clause? string-functions x)   :string\n                       (is-clause? boolean-functions x)  :boolean\n                       :else                             :else))}\n   [:datetime DatetimeExpression]\n   [:numeric  NumericExpression]\n   [:string   StringExpression]\n   [:boolean  BooleanExpression]\n   [:else    (one-of\n              ;; filters drivers must implement\n              and or not = != < > <= >= between starts-with ends-with contains\n              ;; SUGAR filters drivers do not need to implement\n              does-not-contain inside is-empty not-empty is-null not-null time-interval segment)]])\n\n(def ^:private CaseClause\n  [:tuple {:error/message \":case subclause\"} Filter ExpressionArg])\n\n(def ^:private CaseClauses\n  [:maybe [:sequential CaseClause]])\n\n(def ^:private CaseOptions\n  [:map\n   {:error/message \":case options\"}\n   [:default {:optional true} ExpressionArg]])\n\n(defclause ^{:requires-features #{:basic-aggregations}} case\n  clauses CaseClauses, options (optional CaseOptions))\n\n(mr/def ::NumericExpression\n  (one-of + - / * coalesce length floor ceil round abs power sqrt exp log case datetime-diff\n          temporal-extract get-year get-quarter get-month get-week get-day get-day-of-week\n          get-hour get-minute get-second))\n\n(mr/def ::StringExpression\n  (one-of substring trim ltrim rtrim replace lower upper concat regex-match-first coalesce case host domain subdomain\n          month-name quarter-name day-name))\n\n(mr/def ::FieldOrExpressionDef\n  \"Schema for anything that is accepted as a top-level expression definition, either an arithmetic expression such as a\n  `:+` clause or a `:field` clause.\"\n  [:multi\n   {:error/message \":field or :expression reference or expression\"\n    :doc/title     \"expression definition\"\n    :dispatch      (fn [x]\n                     (cond\n                       (is-clause? numeric-functions x)  :numeric\n                       (is-clause? string-functions x)   :string\n                       (is-clause? boolean-functions x)  :boolean\n                       (is-clause? datetime-functions x) :datetime\n                       (is-clause? :case x)              :case\n                       (is-clause? :offset x)            :offset\n                       :else                             :else))}\n   [:numeric  NumericExpression]\n   [:string   StringExpression]\n   [:boolean  BooleanExpression]\n   [:datetime DatetimeExpression]\n   [:case     case]\n   [:offset   offset]\n   [:else     Field]])\n\n;;; -------------------------------------------------- Aggregations --------------------------------------------------\n\n;; For all of the 'normal' Aggregations below (excluding Metrics) fields are implicit Field IDs\n\n;; cum-sum and cum-count are SUGAR because they're implemented in middleware. The clauses are swapped out with\n;; `count` and `sum` aggregations respectively and summation is done in Clojure-land\n(defclause ^{:requires-features #{:basic-aggregations}} ^:sugar count,     field (optional Field))\n(defclause ^{:requires-features #{:basic-aggregations}} ^:sugar cum-count, field (optional Field))\n\n;; technically aggregations besides count can also accept expressions as args, e.g.\n;;\n;;    [[:sum [:+ [:field 1 nil] [:field 2 nil]]]]\n;;\n;; Which is equivalent to SQL:\n;;\n;;    SUM(field_1 + field_2)\n\n(defclause ^{:requires-features #{:basic-aggregations}} avg,      field-or-expression [:ref ::FieldOrExpressionDef])\n(defclause ^{:requires-features #{:basic-aggregations}} cum-sum,  field-or-expression [:ref ::FieldOrExpressionDef])\n(defclause ^{:requires-features #{:basic-aggregations}} distinct, field-or-expression [:ref ::FieldOrExpressionDef])\n(defclause ^{:requires-features #{:basic-aggregations}} sum,      field-or-expression [:ref ::FieldOrExpressionDef])\n(defclause ^{:requires-features #{:basic-aggregations}} min,      field-or-expression [:ref ::FieldOrExpressionDef])\n(defclause ^{:requires-features #{:basic-aggregations}} max,      field-or-expression [:ref ::FieldOrExpressionDef])\n\n(defclause ^{:requires-features #{:basic-aggregations}} sum-where\n  field-or-expression [:ref ::FieldOrExpressionDef], pred Filter)\n\n(defclause ^{:requires-features #{:basic-aggregations}} count-where\n  pred Filter)\n\n(defclause ^{:requires-features #{:basic-aggregations}} share\n  pred Filter)\n\n(defclause ^{:requires-features #{:standard-deviation-aggregations}} stddev\n  field-or-expression [:ref ::FieldOrExpressionDef])\n\n(defclause ^{:requires-features #{:standard-deviation-aggregations}} [ag:var var]\n  field-or-expression [:ref ::FieldOrExpressionDef])\n\n(defclause ^{:requires-features #{:percentile-aggregations}} median\n  field-or-expression [:ref ::FieldOrExpressionDef])\n\n(defclause ^{:requires-features #{:percentile-aggregations}} percentile\n  field-or-expression [:ref ::FieldOrExpressionDef], percentile NumericExpressionArg)\n\n\n;; Metrics are just 'macros' (placeholders for other aggregations with optional filter and breakout clauses) that get\n;; expanded to other aggregations/etc. in the expand-macros middleware\n(defclause metric\n  metric-id ::lib.schema.id/metric)\n\n;; the following are definitions for expression aggregations, e.g.\n;;\n;;    [:+ [:sum [:field 10 nil]] [:sum [:field 20 nil]]]\n\n(mr/def ::UnnamedAggregation\n  [:multi\n   {:error/message \"unnamed aggregation clause or numeric expression\"\n    :dispatch      (fn [x]\n                     (if (is-clause? numeric-functions x)\n                       :numeric-expression\n                       :else))}\n   [:numeric-expression NumericExpression]\n   [:else (one-of avg cum-sum distinct stddev sum min max metric share count-where\n                  sum-where case median percentile ag:var cum-count count offset)]])\n\n(def ^:private UnnamedAggregation\n  ::UnnamedAggregation)\n\n(def ^:private AggregationOptions\n  \"Additional options for any aggregation clause when wrapping it in `:aggregation-options`.\"\n  [:map\n   {:error/message \":aggregation-options options\"}\n   ;; name to use for this aggregation in the native query instead of the default name (e.g. `count`)\n   [:name         {:optional true} ::lib.schema.common/non-blank-string]\n   ;; user-facing display name for this aggregation instead of the default one\n   [:display-name {:optional true} ::lib.schema.common/non-blank-string]])\n\n(defclause aggregation-options\n  aggregation UnnamedAggregation\n  options     AggregationOptions)\n\n(mr/def ::Aggregation\n  [:multi\n   {:error/message \"aggregation clause or numeric expression\"\n    :dispatch      (fn [x]\n                     (if (is-clause? :aggregation-options x)\n                       :aggregation-options\n                       :unnamed-aggregation))}\n   [:aggregation-options aggregation-options]\n   [:unnamed-aggregation UnnamedAggregation]])\n\n\n;;; ---------------------------------------------------- Order-By ----------------------------------------------------\n\n;; order-by is just a series of `[<direction> <field>]` clauses like\n;;\n;;    {:order-by [[:asc [:field 1 nil]], [:desc [:field 2 nil]]]}\n;;\n;; Field ID is implicit in these clauses\n\n(defclause asc,  field Reference)\n(defclause desc, field Reference)\n\n(mr/def ::OrderBy\n  \"Schema for an `order-by` clause subclause.\"\n  (one-of asc desc))\n\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                                    Queries                                                     |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n;;; ---------------------------------------------- Native [Inner] Query ----------------------------------------------\n\n(def ^:private TemplateTagType\n  \"Schema for valid values of template tag `:type`.\"\n  [:enum :snippet :card :dimension :number :text :date])\n\n(def ^:private TemplateTag:Common\n  \"Things required by all template tag types.\"\n  [:map\n   [:type         TemplateTagType]\n   [:name         ::lib.schema.common/non-blank-string]\n   [:display-name ::lib.schema.common/non-blank-string]\n   ;; TODO -- `:id` is actually 100% required but we have a lot of tests that don't specify it because this constraint\n   ;; wasn't previously enforced; we need to go in and fix those tests and make this non-optional\n   [:id {:optional true} ::lib.schema.common/non-blank-string]])\n\n;; Example:\n;;\n;;    {:id           \"c2fc7310-44eb-4f21-c3a0-63806ffb7ddd\"\n;;     :name         \"snippet: select\"\n;;     :display-name \"Snippet: select\"\n;;     :type         :snippet\n;;     :snippet-name \"select\"\n;;     :snippet-id   1}\n(mr/def ::TemplateTag:Snippet\n  \"Schema for a native query snippet template tag.\"\n  [:merge\n   TemplateTag:Common\n   [:map\n    [:type         [:= :snippet]]\n    [:snippet-name ::lib.schema.common/non-blank-string]\n    [:snippet-id   PositiveInt]\n    ;; database to which this Snippet belongs. Doesn't always seen to be specified.\n    [:database {:optional true} PositiveInt]]])\n\n;; Example:\n;;\n;;    {:id           \"fc5e14d9-7d14-67af-66b2-b2a6e25afeaf\"\n;;     :name         \"#1635\"\n;;     :display-name \"#1635\"\n;;     :type         :card\n;;     :card-id      1635}\n(mr/def ::TemplateTag:SourceQuery\n  \"Schema for a source query template tag.\"\n  [:merge\n   TemplateTag:Common\n   [:map\n    [:type    [:= :card]]\n    [:card-id PositiveInt]]])\n\n(def ^:private TemplateTag:Value:Common\n  \"Stuff shared between the Field filter and raw value template tag schemas.\"\n  [:merge\n   TemplateTag:Common\n   [:map\n    ;; default value for this parameter\n    [:default  {:optional true} :any]\n    ;; whether or not a value for this parameter is required in order to run the query\n    [:required {:optional true} :boolean]]])\n\n;; Example:\n;;\n;;    {:id           \"c20851c7-8a80-0ffa-8a99-ae636f0e9539\"\n;;     :name         \"date\"\n;;     :display-name \"Date\"\n;;     :type         :dimension,\n;;     :dimension    [:field 4 nil]\n;;     :widget-type  :date/all-options}\n(mr/def ::TemplateTag:FieldFilter\n  \"Schema for a field filter template tag.\"\n  [:merge\n   TemplateTag:Value:Common\n   [:map\n    [:type        [:= :dimension]]\n    [:dimension   field]\n\n    [:widget-type\n     [:ref\n      {:doc/message\n       \"which type of widget the frontend should show for this Field Filter; this also affects which parameter types\n  are allowed to be specified for it.\"}\n      ::WidgetType]]\n\n    [:options\n     {:optional    true\n      :doc/message \"optional map to be appended to filter clause\"}\n     [:maybe [:map-of :keyword :any]]]]])\n\n;; Example:\n;;\n;;    {:id           \"35f1ecd4-d622-6d14-54be-750c498043cb\"\n;;     :name         \"id\"\n;;     :display-name \"Id\"\n;;     :type         :number\n;;     :required     true\n;;     :default      \"1\"}\n(mr/def ::TemplateTag:RawValue\n  \"Schema for a raw value template tag.\"\n  [:merge\n   TemplateTag:Value:Common\n   [:map\n    [:type\n     [:ref\n      {:doc/message\n       \"`:type` is used be the FE to determine which type of widget to display for the template tag, and to determine\n  which types of parameters are allowed to be passed in for this template tag.\"}]\n     ::lib.schema.template-tag/raw-value.type]]])\n\n(mr/def ::TemplateTag\n  \"Schema for a template tag as specified in a native query. There are four types of template tags, differentiated by\n  `:type`.\n\n  Template tags are used to specify {{placeholders}} in native queries that are replaced with some sort of value when\n  the query itself runs. There are four basic types of template tag for native queries:\n\n  1. Field filters, which are used like\n\n         SELECT * FROM table WHERE {{field_filter}}\n\n     These reference specific Fields and are replaced with entire conditions, e.g. `some_field > 1000`\n\n  2. Raw values, which are used like\n\n         SELECT * FROM table WHERE my_field = {{x}}\n\n     These are replaced with raw values.\n\n   3. Native query snippets, which might be used like\n\n          SELECT * FROM ({{snippet: orders}}) source\n\n      These are replaced with `NativeQuerySnippet`s from the application database.\n\n   4. Source query Card IDs, which are used like\n\n          SELECT * FROM ({{#123}}) source\n\n      These are replaced with the query from the Card with that ID.\n\n  Field filters and raw values usually have their value specified by `:parameters`.\"\n  [:multi\n   {:dispatch :type}\n   [:dimension   [:ref ::TemplateTag:FieldFilter]]\n   [:snippet     [:ref ::TemplateTag:Snippet]]\n   [:card        [:ref ::TemplateTag:SourceQuery]]\n   [::mc/default [:ref ::TemplateTag:RawValue]]])\n\n(def TemplateTag\n  \"Alias for ::TemplateTag; prefer that going forward.\"\n  [:ref ::TemplateTag])\n\n(mr/def ::TemplateTagMap\n  \"Schema for the `:template-tags` map passed in as part of a native query.\n\n  Map of template tag name -> template tag definition\"\n  [:and\n   [:map-of ::lib.schema.common/non-blank-string TemplateTag]\n   ;; make sure people don't try to pass in a `:name` that's different from the actual key in the map.\n   [:fn\n    {:error/message \"keys in template tag map must match the :name of their values\"}\n    (fn [m]\n      (every? (fn [[tag-name tag-definition]]\n                (core/= tag-name (:name tag-definition)))\n              m))]])\n\n(def ^:private NativeQuery:Common\n  [:map\n   [:template-tags {:optional true} [:ref ::TemplateTagMap]]\n   ;; collection (table) this query should run against. Needed for MongoDB\n   [:collection    {:optional true} [:maybe ::lib.schema.common/non-blank-string]]])\n\n(def NativeQuery\n  \"Schema for a valid, normalized native [inner] query.\"\n  [:merge\n   NativeQuery:Common\n   [:map\n    [:query :any]]])\n\n(mr/def ::NativeSourceQuery\n  [:merge\n   NativeQuery:Common\n   [:map\n    [:native :any]]])\n\n\n;;; ----------------------------------------------- MBQL [Inner] Query -----------------------------------------------\n\n(def MBQLQuery\n  \"Schema for a valid, normalized MBQL [inner] query.\"\n  [:ref ::MBQLQuery])\n\n(def SourceQuery\n  \"Schema for a valid value for a `:source-query` clause.\"\n  [:multi\n   {:dispatch (fn [x]\n                (if ((every-pred map? :native) x)\n                  :native\n                  :mbql))}\n   ;; when using native queries as source queries the schema is exactly the same except use `:native` in place of\n   ;; `:query` for reasons I do not fully remember (perhaps to make it easier to differentiate them from MBQL source\n   ;; queries).\n   [:native [:ref ::NativeSourceQuery]]\n   [:mbql   MBQLQuery]])\n\n(mr/def ::SourceQueryMetadata\n  \"Schema for the expected keys for a single column in `:source-metadata` (`:source-metadata` is a sequence of these\n  entries), if it is passed in to the query.\n\n  This metadata automatically gets added for all source queries that are referenced via the `card__id` `:source-table`\n  form; for explicit `:source-query`s you should usually include this information yourself when specifying explicit\n  `:source-query`s.\"\n  [:map\n   [:name         ::lib.schema.common/non-blank-string]\n   [:base_type    ::lib.schema.common/base-type]\n   ;; this is only used by the annotate post-processing stage, not really needed at all for pre-processing, might be\n   ;; able to remove this as a requirement\n   [:display_name ::lib.schema.common/non-blank-string]\n   [:semantic_type {:optional true} [:maybe ::lib.schema.common/semantic-or-relation-type]]\n   ;; you'll need to provide this in order to use BINNING\n   [:fingerprint   {:optional true} [:maybe :map]]])\n\n(def SourceQueryMetadata\n  \"Alias for ::SourceQueryMetadata -- prefer that instead.\"\n  ;; TODO - there is a very similar schema in `metabase.analyze.query-results`; see if we can merge them\n  [:ref ::SourceQueryMetadata])\n\n(def source-table-card-id-regex\n  \"Pattern that matches `card__id` strings that can be used as the `:source-table` of MBQL queries.\"\n  #\"^card__[1-9]\\d*$\")\n\n(def ^:private SourceTable\n  \"Schema for a valid value for the `:source-table` clause of an MBQL query.\"\n  [:or\n   ::lib.schema.id/table\n   [:re\n    {:error/message \"'card__<id>' string Table ID\"\n     :doc/message   \"`card__<id>` string Table ID\"}\n    source-table-card-id-regex]])\n\n(def join-strategies\n  \"Valid values of the `:strategy` key in a join map.\"\n  #{:left-join :right-join :inner-join :full-join})\n\n(def JoinStrategy\n  \"Strategy that should be used to perform the equivalent of a SQL `JOIN` against another table or a nested query.\n  These correspond 1:1 to features of the same name in driver features lists; e.g. you should check that the current\n  driver supports `:full-join` before generating a Join clause using that strategy.\"\n  (into [:enum] join-strategies))\n\n(def Fields\n  \"Schema for valid values of the MBQL `:fields` clause.\"\n  [:ref ::Fields])\n\n(def ^:private JoinFields\n  [:or\n   {:error/message \"Valid join `:fields`: `:all`, `:none`, or a sequence of `:field` clauses that have `:join-alias`.\"}\n   [:enum :all :none]\n   Fields])\n\n(mr/def ::Join\n  \"Perform the equivalent of a SQL `JOIN` with another Table or nested `:source-query`. JOINs are either explicitly\n  specified in the incoming query, or implicitly generated when one uses a `:field` clause with `:source-field`.\n\n  In the top-level query, you can reference Fields from the joined table or nested query by including `:source-field`\n  in the `:field` options (known as implicit joins); for explicit joins, you *must* specify `:join-alias` yourself; in\n  the `:field` options, e.g.\n\n    ;; for joins against other Tables/MBQL source queries\n    [:field 1 {:join-alias \\\"my_join_alias\\\"}]\n\n    ;; for joins against native queries\n    [:field \\\"my_field\\\" {:base-type :field/Integer, :join-alias \\\"my_join_alias\\\"}]\"\n  [:and\n   [:map\n    [:source-table\n     {:optional true\n      :doc/message \"*What* to JOIN. Self-joins can be done by using the same `:source-table` as in the query where\n  this is specified. YOU MUST SUPPLY EITHER `:source-table` OR `:source-query`, BUT NOT BOTH!\"}\n     SourceTable]\n\n    [:source-query {:optional true} SourceQuery]\n\n    [:condition\n     {:doc/message\n      \"The condition on which to JOIN. Can be anything that is a valid `:filter` clause. For automatically-generated\n  JOINs this is usually something like\n\n    [:= <source-table-fk-field> [:field <dest-table-pk-field> {:join-alias <join-table-alias>}]]\"}\n     Filter]\n\n    [:strategy\n     {:optional true\n      :doc/message \"Defaults to `:left-join`; used for all automatically-generated JOINs\n\n  Driver implementations: this is guaranteed to be present after pre-processing.\"}\n     JoinStrategy]\n\n    [:fields\n     {:optional true\n      :doc/message\n      \"The Fields from this join to include in parent-level results. This can be either `:none`, `:all`, or a sequence\n  of `:field` clauses.\n\n  * `:none`: no Fields from the joined table or nested query are included (unless indirectly included by breakouts or\n     other clauses). This is the default, and what is used for automatically-generated joins.\n\n  * `:all`: will include all of the Field from the joined table or query\n\n  * a sequence of Field clauses: include only the Fields specified. Valid clauses are the same as the top-level\n    `:fields` clause. This should be non-empty and all elements should be distinct. The normalizer will automatically\n    remove duplicate fields for you, and replace empty clauses with `:none`.\n\n  Driver implementations: you can ignore this clause. Relevant fields will be added to top-level `:fields` clause with\n  appropriate aliases.\"}\n     JoinFields]\n\n    [:alias\n     {:optional true\n      :doc/message\n      \"The name used to alias the joined table or query. This is usually generated automatically and generally looks\n  like `table__via__field`. You can specify this yourself if you need to reference a joined field with a `:join-alias`\n  in the options.\n\n  Driver implementations: This is guaranteed to be present after pre-processing.\"}\n     ::lib.schema.common/non-blank-string]\n\n    [:fk-field-id\n     {:optional true\n      :doc/message \"Mostly used only internally. When a join is implicitly generated via a `:field` clause with\n  `:source-field`, the ID of the foreign key field in the source Table will be recorded here. This information is used\n  to add `fk_field_id` information to the `:cols` in the query results, and also for drill-thru. When generating\n  explicit joins by hand you can usually omit this information, altho it doesn't hurt to include it if you know it.\n\n  Don't set this information yourself. It will have no effect.\"}\n     [:maybe ::lib.schema.id/field]]\n\n    [:source-metadata\n     {:optional true\n      :doc/message \"Metadata about the source query being used, if pulled in from a Card via the\n  `:source-table \\\"card__id\\\"` syntax. added automatically by the `resolve-card-id-source-tables` middleware.\"}\n     [:maybe [:sequential SourceQueryMetadata]]]]\n   ;; additional constraints\n   [:fn\n    {:error/message \"Joins must have either a `source-table` or `source-query`, but not both.\"}\n    (every-pred\n     (some-fn :source-table :source-query)\n     (complement (every-pred :source-table :source-query)))]])\n\n(def Join\n  \"Alias for ::Join. Prefer that going forward.\"\n  [:ref ::Join])\n\n(mr/def ::Joins\n  \"Schema for a valid sequence of `Join`s. Must be a non-empty sequence, and `:alias`, if specified, must be unique.\"\n  [:and\n   (helpers/non-empty [:sequential Join])\n   [:fn\n    {:error/message \"All join aliases must be unique.\"}\n    #(helpers/empty-or-distinct? (filter some? (map :alias %)))]])\n\n(mr/def ::Fields\n  [:schema\n   {:error/message \"Distinct, non-empty sequence of Field clauses\"}\n   (helpers/distinct [:sequential {:min 1} Field])])\n\n(mr/def ::Page\n  \"`page` = page num, starting with 1. `items` = number of items per page.\n  e.g.\n\n    {:page 1, :items 10} = items 1-10\n    {:page 2, :items 10} = items 11-20\"\n  [:map\n   [:page  PositiveInt]\n   [:items PositiveInt]])\n\n(mr/def ::MBQLQuery\n  [:and\n   [:map\n    [:source-query    {:optional true} SourceQuery]\n    [:source-table    {:optional true} SourceTable]\n    [:aggregation     {:optional true} [:sequential {:min 1} Aggregation]]\n    [:breakout        {:optional true} [:sequential {:min 1} Field]]\n    [:expressions     {:optional true} [:map-of ::lib.schema.common/non-blank-string [:ref ::FieldOrExpressionDef]]]\n    [:fields          {:optional true} Fields]\n    [:filter          {:optional true} Filter]\n    [:limit           {:optional true} ::lib.schema.common/int-greater-than-or-equal-to-zero]\n    [:order-by        {:optional true} (helpers/distinct [:sequential {:min 1} [:ref ::OrderBy]])]\n    [:page            {:optional true} [:ref ::Page]]\n    [:joins           {:optional true} [:ref ::Joins]]\n\n    [:source-metadata\n     {:optional true\n      :doc/message \"Info about the columns of the source query. Added in automatically by middleware. This metadata is\n  primarily used to let power things like binning when used with Field Literals instead of normal Fields.\"}\n     [:maybe [:sequential SourceQueryMetadata]]]]\n   ;;\n   ;; CONSTRAINTS\n   ;;\n   [:fn\n    {:error/message \"Query must specify either `:source-table` or `:source-query`, but not both.\"}\n    (fn [query]\n      (core/= 1 (core/count (select-keys query [:source-query :source-table]))))]\n   [:fn\n    {:error/message \"Fields specified in `:breakout` should not be specified in `:fields`; this is implied.\"}\n    (fn [{:keys [breakout fields]}]\n      (empty? (set/intersection (set breakout) (set fields))))]])\n\n\n;;; ----------------------------------------------------- Params -----------------------------------------------------\n\n(mr/def ::WidgetType\n  \"Schema for valid values of `:widget-type` for a [[::TemplateTag:FieldFilter]].\"\n  [:ref :metabase.lib.schema.parameter/widget-type])\n\n;; this is the reference like [:template-tag <whatever>], not the [[TemplateTag]] schema for when it's declared in\n;; `:template-tags`\n(defclause template-tag\n  tag-name [:or\n            ::lib.schema.common/non-blank-string\n            [:map\n             [:id ::lib.schema.common/non-blank-string]]])\n\n(defclause dimension\n  target [:or Field template-tag])\n\n(defclause variable\n  target template-tag)\n\n(def ^:private ParameterTarget\n  \"Schema for the value of `:target` in a [[Parameter]].\"\n  ;; not 100% sure about this but `field` on its own comes from a Dashboard parameter and when it's wrapped in\n  ;; `dimension` it comes from a Field filter template tag parameter (don't quote me on this -- working theory)\n  [:or\n   Field\n   (one-of dimension variable)])\n\n(mr/def ::Parameter\n  \"Schema for the *value* of a parameter (e.g. a Dashboard parameter or a native query template tag) as passed in as\n  part of the `:parameters` list in a query.\"\n  [:merge\n   [:ref :metabase.lib.schema.parameter/parameter]\n   [:map\n    [:target {:optional true} ParameterTarget]]])\n\n(def Parameter\n  \"Alias for ::Parameter. Prefer using that directly going forward.\"\n  [:ref ::Parameter])\n\n(mr/def ::ParameterList\n  [:maybe [:sequential Parameter]])\n\n(def ParameterList\n  \"Schema for a list of `:parameters` as passed in to a query.\"\n  [:ref ::ParameterList])\n\n;;; ---------------------------------------------------- Options -----------------------------------------------------\n\n(mr/def ::Settings\n  \"Options that tweak the behavior of the query processor.\"\n  [:map\n   [:report-timezone\n    {:optional    true\n     :doc/message \"The timezone the query should be ran in, overriding the default report timezone for the instance.\"}\n    TimezoneId]])\n\n(mr/def ::Constraints\n  \"Additional constraints added to a query limiting the maximum number of rows that can be returned. Mostly useful\n  because native queries don't support the MBQL `:limit` clause. For MBQL queries, if `:limit` is set, it will\n  override these values.\"\n  [:and\n   [:map\n    [:max-results\n     {:optional true\n      :doc/message\n      \"Maximum number of results to allow for a query with aggregations. If `max-results-bare-rows` is unset, this\n  applies to all queries\"}\n     ::lib.schema.common/int-greater-than-or-equal-to-zero]\n\n    [:max-results-bare-rows\n     {:optional true\n      :doc/message\n      \"Maximum number of results to allow for a query with no aggregations. If set, this should be LOWER than\n  `:max-results`.\"}\n     ::lib.schema.common/int-greater-than-or-equal-to-zero]]\n\n   [:fn\n    {:error/message \"max-results-bare-rows must be less or equal to than max-results\"}\n    (fn [{:keys [max-results max-results-bare-rows]}]\n      (if-not (core/and max-results max-results-bare-rows)\n        true\n        (core/>= max-results max-results-bare-rows)))]])\n\n(mr/def ::MiddlewareOptions\n  \"Additional options that can be used to toggle middleware on or off.\"\n  [:map\n   [:skip-results-metadata?\n    {:optional true\n     :doc/message\n     \"Should we skip adding `results_metadata` to query results after running the query? Used by\n     `metabase.query-processor.middleware.results-metadata`; default `false`. (Note: we may change the name of this\n     column in the near future, to `result_metadata`, to fix inconsistencies in how we name things.)\"}\n    :boolean]\n\n   [:format-rows?\n    {:optional true\n     :doc/message\n     \"Should we skip converting datetime types to ISO-8601 strings with appropriate timezone when post-processing\n     results? Used by `metabase.query-processor.middleware.format-rows`default `false`.\"}\n    :boolean]\n\n   [:disable-mbql->native?\n    {:optional true\n     :doc/message\n     \"Disable the MBQL->native middleware. If you do this, the query will not work at all, so there are no cases where\n  you should set this yourself. This is only used by the `metabase.query-processor.preprocess/preprocess` function to\n  get the fully pre-processed query without attempting to convert it to native.\"}\n    :boolean]\n\n   [:disable-max-results?\n    {:optional true\n     :doc/message\n     \"Disable applying a default limit on the query results. Handled in the `add-default-limit` middleware. If true,\n  this will override the `:max-results` and `:max-results-bare-rows` values in `Constraints`.\"}\n    :boolean]\n\n   [:userland-query?\n    {:optional true\n     :doc/message\n     \"Userland queries are ones ran as a result of an API call, Pulse, or the like. Special handling is done in\n  certain userland-only middleware for such queries -- results are returned in a slightly different format, and\n  QueryExecution entries are normally saved, unless you pass `:no-save` as the option.\"}\n    [:maybe :boolean]]\n\n   [:add-default-userland-constraints?\n    {:optional true\n     :doc/message\n     \"Whether to add some default `max-results` and `max-results-bare-rows` constraints. By default, none are added,\n  although the functions that ultimately power most API endpoints tend to set this to `true`. See\n  `add-constraints` middleware for more details.\"}\n    [:maybe :boolean]]\n\n   [:process-viz-settings?\n    {:optional true\n     :doc/message\n     \"Whether to process a question's visualization settings and include them in the result metadata so that they can\n  incorporated into an export. Used by `metabase.query-processor.middleware.visualization-settings`; default\n  `false`.\"}\n    [:maybe :boolean]]])\n\n\n;;; --------------------------------------------- Metabase [Outer] Query ---------------------------------------------\n\n;; To the reader: yes, this seems sort of hacky, but one of the goals of the Nested Query Initiative\u2122 was to minimize\n;; if not completely eliminate any changes to the frontend. After experimenting with several possible ways to do this\n;; implementation seemed simplest and best met the goal. Luckily this is the only place this \"magic number\" is defined\n;; and the entire frontend can remain blissfully unaware of its value.\n\n(mr/def ::DatabaseID\n  \"Schema for a valid `:database` ID, in the top-level 'outer' query. Either a positive integer (referring to an\n  actual Database), or the saved questions virtual ID, which is a placeholder used for queries using the\n  `:source-table \\\"card__id\\\"` shorthand for a source query resolved by middleware (since clients might not know the\n  actual DB for that source query.)\"\n  [:or\n   {:error/message \"valid Database ID\"}\n   [:ref ::lib.schema.id/saved-questions-virtual-database]\n   [:ref ::lib.schema.id/database]])\n\n;;; Make sure we have the combo of query `:type` and `:native`/`:query`\n(mr/def ::check-keys-for-query-type\n  [:and\n   [:fn\n    {:error/message \"Query must specify either `:native` or `:query`, but not both.\"}\n    (every-pred\n     (some-fn :native :query)\n     (complement (every-pred :native :query)))]\n   [:fn\n    {:error/message \"Native queries must specify `:native`; MBQL queries must specify `:query`.\"}\n    (fn [{native :native, mbql :query, query-type :type}]\n      (core/case query-type\n        :native native\n        :query  mbql))]])\n\n(mr/def ::check-query-does-not-have-source-metadata\n  \"`:source-metadata` is added to queries when `card__id` source queries are resolved. It contains info about the\n  columns in the source query.\n\n  Where this is added was changed in Metabase 0.33.0 -- previously, when `card__id` source queries were resolved, the\n  middleware would add `:source-metadata` to the top-level; to support joins against source queries, this has been\n  changed so it is always added at the same level the resolved `:source-query` is added.\n\n  This should automatically be fixed by `normalize`; if we encounter it, it means some middleware is not functioning\n  properly.\"\n  [:fn\n   {:error/message \"`:source-metadata` should be added in the same level as `:source-query` (i.e., the 'inner' MBQL query.)\"}\n   (complement :source-metadata)])\n\n(def Query\n  \"Schema for an [outer] query, e.g. the sort of thing you'd pass to the query processor or save in `Card.dataset_query`.\"\n  [:ref ::Query])\n\n(mr/def ::Query\n  [:and\n   [:map\n    [:database ::DatabaseID]\n\n    [:type\n     [:enum\n      {:doc/message \"Type of query. `:query` = MBQL; `:native` = native.\"}\n      :query :native]]\n\n    [:native     {:optional true} NativeQuery]\n    [:query      {:optional true} MBQLQuery]\n    [:parameters {:optional true} ParameterList]\n    ;;\n    ;; OPTIONS\n    ;;\n    ;; These keys are used to tweak behavior of the Query Processor.\n    ;;\n    [:settings    {:optional true} [:maybe [:ref ::Settings]]]\n    [:constraints {:optional true} [:maybe [:ref ::Constraints]]]\n    [:middleware  {:optional true} [:maybe [:ref ::MiddlewareOptions]]]\n    ;;\n    ;; INFO\n    ;;\n    [:info\n     {:optional true\n      :doc/message \"Used when recording info about this run in the QueryExecution log; things like context query was\n  ran in and User who ran it.\"}\n     [:maybe [:ref ::lib.schema.info/info]]]\n    ;;\n    ;; ACTIONS\n    ;;\n    ;; This stuff is only used for Actions.\n    [:create-row {:optional true} [:maybe [:ref ::lib.schema.actions/row]]]\n    [:update-row {:optional true} [:maybe [:ref ::lib.schema.actions/row]]]]\n   ;;\n   ;; CONSTRAINTS\n   [:ref ::check-keys-for-query-type]\n   [:ref ::check-query-does-not-have-source-metadata]])\n\n(def ^{:arglists '([query])} valid-query?\n  \"Is this a valid outer query? (Pre-compling a validator is more efficient.)\"\n  (mr/validator Query))\n\n(def ^{:arglists '([query])} validate-query\n  \"Validator for an outer query; throw an Exception explaining why the query is invalid if it is. Returns query if\n  valid.\"\n  (let [explainer (mr/explainer Query)]\n    (fn [query]\n      (if (valid-query? query)\n        query\n        (let [error     (explainer query)\n              humanized (me/humanize error)]\n          (throw (ex-info (i18n/tru \"Invalid query: {0}\" (pr-str humanized))\n                          {:error    humanized\n                           :original error})))))))\n"]}