{"version":3,"sources":["metabase/lib/drill_thru/summarize_column_by_time.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;;;;;;;kFAAA,6GAAAA,/LAASI,4KAGNC,MACAC;AAJH,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;aAAA,AAAAE,4CAAAF,eAAA,pEAKWM;YALX,AAAAJ,4CAAAF,eAAA,nEAKkBO;AALlB,AAME,oBAAM,iBAAAC,oBAAK,AAACC,iDAAkCL,MAAMC;AAA9C,AAAA,GAAAG;AAAA,IAAAA,wBACKF;AADL,AAAA,oBAAAE;AAAA,8BAAA,6DAAA,lFAEK,UAAA,TAAMD,sBACN,GAAK,AAACG,yCAA0BJ,iBAChC,AAACK,uCAAwBL,aACzB,oJAAA,pJAACM,gDAAK,AAAA,4FAAaN;;AALxBE;;;AAAAA;;;AAAN,AAOE,IAAAK,qBAA2B,AAACE,qDAAaC,uCACA,AAACC,yEAAkCb,MAAMC;AADlF,AAAA,oBAAAQ;AAAA,AAAA,sBAAAA,lBAAWC;AAAX,AAEE,IAAAD,yBAA0B,qDAAA,rDAACE,iHACa,AAACI,sFAA+Cf,MAAMC,aAAaS;AAD3G,AAAA,oBAAAD;AAAA,AAAA,qBAAAA,jBAAWK;AAAX,AAGE,IAAME,WAAS,AAACC,kDAAyCP,gBAAgBI;AAAzE,AACE,oBAAM,AAACI,8CAA+B,AAACC,4CAAIC,qBAAY,AAACC,eAAKL,SAAS,AAACM,8DAAuBtB,MAAMC;AAApG,AAAA,kDAAA,0DAAA,6GAAA,qDAAA,gHAAA,gEAAA,6EAAA,pFAGaC,oEACAQ,oEACA,AAACa,iDAAwCT;;AALtD;;;AAJJ;;;AAFF;;;AAPF;;;AAoBF,AAAAU,6FAAA,gHAAA;sDAAAC,nBACGzB,MAAMC,sBAA8D6B;AADvE,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAA7B,4BAAA6B;kBAAAA,dACwDG;eADxD,AAAA/B,4CAAA4B,eAAA,tEAC8BC;aAD9B,AAAA7B,4CAAA4B,eAAA,pEACuCxB;WADvC,AAAAJ,4CAAA4B,eAAA,lEAC8CE;AAD9C,AAEE,IAAMZ,WAAS,AAACC,kDAAyCU,SAASC;AAAlE,qIACM5B,jEACA,AAAC+B,uEAA0B9B,aAAa,AAAC+B,6BAAoB9B,rLAC7D,OAAC+B,uLAAsBhC,aAAae;;4CAL5CS,nBACGzB,MAAMC;IAA8D6B;;;;EAAAA;;uDADvEL,nBACGzB,MAAMC,sBAA8D6B;;;IAApE9B;;IAAMC;;IADTwB;IACuEK;6CADvEL,nBACGzB,MAAMC,sBAA8D6B","names":["p__79422","map__79423","cljs.core/--destructure-map","cljs.core.get","metabase.lib.drill-thru.summarize-column-by-time/summarize-column-by-time-drill","query","stage-number","column","value","and__5000__auto__","metabase.lib.drill-thru.common/mbql-stage?","metabase.lib.types.isa/structured?","metabase.lib.types.isa/summable?","cljs.core.not_EQ_","temp__5804__auto__","breakout-column","medley.core.find_first","metabase.lib.types.isa/temporal?","metabase.lib.breakout.breakoutable_columns","bucketing-unit","metabase.lib.temporal_bucket.available_temporal_buckets","bucketed","metabase.lib.temporal-bucket/with-temporal-bucket","metabase.lib.schema.util/distinct-refs?","cljs.core.map","metabase.lib.ref/ref","cljs.core/cons","metabase.lib.breakout.breakouts","metabase.lib.temporal-bucket/raw-temporal-bucket","metabase.lib.drill-thru.common/drill-thru-method","p__79424","map__79425","breakout","unit","_drill-thru","_","metabase.lib.aggregation.aggregate","metabase.lib.aggregation/sum","metabase.lib.breakout.breakout"],"sourcesContent":["(ns metabase.lib.drill-thru.summarize-column-by-time\n  \"Adds a `sum` aggregation clause for the selected column and a breakout on the first available date column.\n\n  Entry points:\n\n  - Column header\n\n  Requirements:\n\n  - No aggregation or breakout clauses in the query\n\n  - The selected column is `Summable`, i.e. compatible with `sum` operator\n\n  - There are date columns available for the breakout clause\n\n  Query transformation:\n\n  - Add aggregation clause for the selected column\n\n  - Add a breakout on the first available date column. Use the default temporal unit available for this column. This\n    unit is computed based on `fingerprint`\n    https://github.com/metabase/metabase/blob/0624d8d0933f577cc70c03948f4b57f73fe13ada/frontend/src/metabase-lib/metadata/Field.ts#L397\n\n  Question transformation:\n\n  - Set default display\"\n  (:require\n   [medley.core :as m]\n   [metabase.lib.aggregation :as lib.aggregation]\n   [metabase.lib.breakout :as lib.breakout]\n   [metabase.lib.drill-thru.common :as lib.drill-thru.common]\n   [metabase.lib.ref :as lib.ref]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.drill-thru :as lib.schema.drill-thru]\n   [metabase.lib.schema.util :as lib.schema.util]\n   [metabase.lib.temporal-bucket :as lib.temporal-bucket]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.util.malli :as mu]))\n\n(mu/defn summarize-column-by-time-drill :- [:maybe ::lib.schema.drill-thru/drill-thru.summarize-column-by-time]\n  \"A breakout summarizing a column over time.\n  Separate from single-value [[summarize-column-drill]] for sum, average, and distinct value count.\"\n  [query                  :- ::lib.schema/query\n   stage-number           :- :int\n   {:keys [column value]} :- ::lib.schema.drill-thru/context]\n  (when (and (lib.drill-thru.common/mbql-stage? query stage-number)\n             column\n             (nil? value)\n             (not (lib.types.isa/structured? column))\n             (lib.types.isa/summable? column)\n             (not= (:lib/source column) :source/aggregations))\n    ;; There must be a date dimension available.\n    (when-let [breakout-column (m/find-first lib.types.isa/temporal?\n                                             (lib.breakout/breakoutable-columns query stage-number))]\n      (when-let [bucketing-unit (m/find-first :default\n                                              (lib.temporal-bucket/available-temporal-buckets query stage-number breakout-column))]\n        ;; only suggest this drill thru if the breakout it would apply does not already exist.\n        (let [bucketed (lib.temporal-bucket/with-temporal-bucket breakout-column bucketing-unit)]\n          (when (lib.schema.util/distinct-refs? (map lib.ref/ref (cons bucketed (lib.breakout/breakouts query stage-number))))\n            {:lib/type :metabase.lib.drill-thru/drill-thru\n             :type     :drill-thru/summarize-column-by-time\n             :column   column\n             :breakout breakout-column\n             :unit     (lib.temporal-bucket/raw-temporal-bucket bucketing-unit)}))))))\n\n(defmethod lib.drill-thru.common/drill-thru-method :drill-thru/summarize-column-by-time\n  [query stage-number {:keys [breakout column unit] :as _drill-thru} & _]\n  (let [bucketed (lib.temporal-bucket/with-temporal-bucket breakout unit)]\n    (-> query\n        (lib.aggregation/aggregate stage-number (lib.aggregation/sum column))\n        (lib.breakout/breakout stage-number bucketed))))\n"]}