{"version":3,"sources":["metabase/lib/database/methods.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;;;;;;;;;8CAAA,9CAASA,mGAKEC,SACAC;AANX,AAOE,IAAMC,IAAE,wDAAA,mFAAA,+DAAA,1MAACC,+CAAOH,yOAAsCI;AAAtD,AACE,QAACF,kCAAAA,qCAAAA,LAAED,iBAAAA","names":["metabase.lib.database.methods/escape-alias","database","s","f","cljs.core.get_in","cljs.core/identity"],"sourcesContent":["(ns metabase.lib.database.methods\n  \"Wrappers around [[metabase.driver]] methods that we may need to use inside MLv2 such\n  as [[metabase.driver/escape-alias]], so we can decouple the driver interface from MLv2. Since driver methods are\n  Clojure-only, we should only expect these to be bound in Clojure-land usage (e.g. the QP) and not in Cljs usage.\n  MetadataProviders can pass these methods in as part of the database under the `:lib/methods` key. See the\n  `:metabase.lib.schema.metadata/database.methods` schema for more info.\"\n  (:require\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.util.malli :as mu]))\n\n(mu/defn escape-alias :- :string\n  \"MLv2-friendly wrapper around [[metabase.driver/escape-alias]]. By default this is `identity` but metadata providers\n  can override this by including `[:lib/methods :escape-alias]` as part of the Database metadata.\n\n  This is used for escaping a unique alias when generating `:lib/desired-alias`.\"\n  ^String [database :- [:maybe ::lib.schema.metadata/database]\n           s        :- :string]\n  (let [f (get-in database [:lib/methods :escape-alias] identity)]\n    (f s)))\n"]}