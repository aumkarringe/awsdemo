{"version":3,"sources":["metabase/shared/util/internal/time_common.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,oDAAA,8DAAAA,lHAAOI,gHAASC;AAAhB,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,lEAA0BK;AAA1B,AAAkC,OAACC,gDAAQD;;AAE3C,GAAA,QAAAE,qCAAAC,4CAAAC,iDAAAC,0DAAAC,sEAAAC;AAAA;AAAA,AAAA;;;;qDAAA,iBAAAC,6BAAA,AAAAC,6CAAA,hJAAUQ;IAAVP,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAhB,4CAAA,mCAAA,gEAAA,iBAAAiB,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,4CAAA,8DAAA,4DAAAH,wBAAAL,2BAAAE,2BAAAC,2BAAAC,vNAGEd;;;AAEF,GAAA,QAAAI,qCAAAC,4CAAAC,iDAAAC,0DAAAC,sEAAAY;AAAA;AAAA,AAAA;;;;;iEAAA,iBAAAV,6BAAA,AAAAC,6CAAA,5JAAUW;IAAVV,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAhB,4CAAA,mCAAA,gEAAA,iBAAAsB,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAJ,kBAAA,AAAAC,+CAAA,4CAAA,uEAAA,4DAAAH,wBAAAL,2BAAAE,2BAAAC,2BAAAC,vNAIEd;;;AAEF,GAAA,QAAAI,qCAAAC,4CAAAC,iDAAAC,0DAAAC,sEAAAe;AAAA;AAAA,AAAA;;;;;;;;;;iEAAA,iBAAAb,6BAAA,AAAAC,6CAAA,5JAAUc;IAAVb,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAhB,4CAAA,mCAAA,gEAAA,iBAAAyB,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAP,kBAAA,AAAAC,+CAAA,4CAAA,uEAAA,4DAAAH,wBAAAL,2BAAAE,2BAAAC,2BAAAC,vNASEd;;;AAEF,sDAAA,tDAAe0B;AAGf,uDAAA,vDAAeC;AAGf,qDAAA,rDAAeC;AAGf,AAAeC,sDACb,qDAAA,yDAAA,7GAAKH,wDAAaC,yDAAcC;AAElC,sDAAA,tDAAeE;AAGf,yDAAA,zDAAeC;AAGf,AAAA,qDAAA,6DAAAC,lHAAOM;AAAP,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,wFAAAF;;;AAAA,AAAA,CAAA,0FAAA,1FAAOE,qGAAYI;AAAnB,AACE,QAAA,sHAAA,pEAAW,AAACC,8CAAMC,cAAIF;;;AADxB,CAAA,6EAAA,7EAAOJ;;AAAP;AAAA,CAAA,uEAAA,WAAAC,lFAAOD;AAAP,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAF;;;AAAA,AAGA,AAAeM,sEACb,CAAA,UAAe,0IAAA,1IAACC;AAElB,AAAeC,sDACb,qDAAA,pDAAKjB,wDAAaC,uDAAa,AAACe,0IAASD;AAE3C,AAAeG,2DACb,qDAAA,pDAAKnB,2DAAiBkB;AAExB,AAAeE,wDACb,CAAA,mEAAA,pDAAoBF;AAEtB;;;AAAKG,mEAEH,AAACC,qBAAWF;AAEd;;;AAAaG,6DAEX,AAACD,qBAAW,CAAA,wDAAA,pDAAQtB;AAEtB;;;AAAawB,6DAEX,AAACF,qBAAW,CAAA,wDAAA,pDAAQJ;AAEtB;;;AAAaO,8DAEX,AAACH,qBAAW,CAAA,8GAAA,1GAAQJ,oDAAUE;AAEhC;;;AAAaM,iEAEX,AAACJ,qBAAW,CAAA,6DAAA,zDAAQH;AAEtB;;;AAAaQ,kEAEX,AAACL,qBAAW,CAAA,mHAAA,/GAAQH,yDAAeC;AAErC;;;AAAaQ,6DAEX,AAACN,qBAAW,CAAA,wDAAA,yDAAA,7GAAQzB,wDAAaC;AAEnC;;;AAAa+B,uDAEX,AAACP,qBAAW,CAAA,wDAAA,pDAAQzB;AAEtB;;;gEAAA,hEAAMiC,wIAEHC;AAFH,AAGE,OAACC,qBAAWR,2DAAiBO;;AAE/B;;;gEAAA,hEAAME,wIAEHF;AAFH,AAGE,OAACC,qBAAWT,2DAAiBQ;;AAE/B;;;qEAAA,rEAAMG,kJAEHH;AAFH,AAGE,OAACC,qBAAW,AAACV,qBAAW,CAAKH,yDAAe,AAACF,0IAASG,uEAAeW;;AAEvE;;;oEAAA,pEAAMI,gJAEHC;AAFH,AAGE,IAAAC,mBAAI,AAACC,iBAAO,AAACN,qBAAW,AAACV,qBAAW,CAAA,8MAAA,tMAAa,AAACL,0IAASG,2EAAkBgB;AAA7E,AAAA,oBAAAC;AAAAA;;AACID","names":["p__74786","map__74787","cljs.core/--destructure-map","cljs.core.get","metabase.shared.util.internal.time-common/by-unit","_","unit","cljs.core.keyword","js/metabase","js/metabase.shared","js/metabase.shared.util","js/metabase.shared.util.internal","js/metabase.shared.util.internal.time-common","js/metabase.shared.util.internal.time-common.to-range","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","fexpr__74788","cljs.core/MultiFn","cljs.core.symbol","metabase.shared.util.internal.time-common/to-range","js/metabase.shared.util.internal.time-common.string->timestamp","fexpr__74789","metabase.shared.util.internal.time-common/string->timestamp","js/metabase.shared.util.internal.time-common.number->timestamp","fexpr__74790","metabase.shared.util.internal.time-common/number->timestamp","metabase.shared.util.internal.time-common/year-part","metabase.shared.util.internal.time-common/month-part","metabase.shared.util.internal.time-common/day-part","metabase.shared.util.internal.time-common/date-part","metabase.shared.util.internal.time-common/hour-part","metabase.shared.util.internal.time-common/minutes-part","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","metabase.shared.util.internal.time-common/optional","seq74791","self__5712__auto__","cljs.core/seq","parts","cljs.core.apply","cljs.core/str","metabase.shared.util.internal.time-common/seconds-milliseconds-part","metabase.shared.util.internal.time_common.optional","metabase.shared.util.internal.time-common/time-part","metabase.shared.util.internal.time-common/date-time-part","metabase.shared.util.internal.time-common/offset-part","metabase.shared.util.internal.time-common/zone-offset-part-regex","cljs.core/re-pattern","metabase.shared.util.internal.time-common/local-date-regex","metabase.shared.util.internal.time-common/local-time-regex","metabase.shared.util.internal.time-common/offset-time-regex","metabase.shared.util.internal.time-common/local-datetime-regex","metabase.shared.util.internal.time-common/offset-datetime-regex","metabase.shared.util.internal.time-common/year-month-regex","metabase.shared.util.internal.time-common/year-regex","metabase.shared.util.internal.time-common/matches-time?","input","cljs.core/re-matches","metabase.shared.util.internal.time-common/matches-date?","metabase.shared.util.internal.time-common/matches-date-time?","metabase.shared.util.internal.time-common/drop-trailing-time-zone","time-str","or__5002__auto__","cljs.core/second"],"sourcesContent":["(ns metabase.shared.util.internal.time-common\n  \"Shared core of time utils used by the internal CLJ and CLJS implementations.\n  See [[metabase.shared.util.time]] for the public interface.\")\n\n(defn- by-unit [_ {:keys [unit]}] (keyword unit))\n\n(defmulti to-range\n  \"Given a datetime and a unit (eg. \\\"hour\\\"), returns an *inclusive* datetime range as a pair of datetimes.\n  For a unit of an hour, and a datetime for 13:49:28, that means [13:00:00 13:59:59.999], ie. 1 ms before the end.\"\n  by-unit)\n\n(defmulti string->timestamp\n  \"Given a string representation of a datetime and the `options` map, parses the string as a representation of the\n  `:unit` option (eg. \\\"hour\\\").\n  Returns a platform-specific datetime.\"\n  by-unit)\n\n(defmulti number->timestamp\n  \"Given a numeric representation of a datetime and the `options` map, interprets the number based on the `:unit` option\n  (eg. \\\"day-of-week\\\").\n\n  Note that for two relative units - `day-of-month` and `day-of-year` - an arbitrary date is generated, not necessarily\n  one in the current month or year. When grouping user data by day-of-month, it doesn't matter whether the current month\n  has 31 days or not.\n\n  Returns a platform-specific datetime.\"\n  by-unit)\n\n(def ^:private year-part\n  \"\\\\d{4}\")\n\n(def ^:private month-part\n  \"\\\\d{2}\")\n\n(def ^:private day-part\n  \"\\\\d{2}\")\n\n(def ^:private date-part\n  (str year-part \\- month-part \\- day-part))\n\n(def ^:private hour-part\n  \"\\\\d{2}\")\n\n(def ^:private minutes-part\n  \"\\\\d{2}\")\n\n(defn- optional [& parts]\n  (str \"(?:\" (apply str parts) \")?\"))\n\n(def ^:private seconds-milliseconds-part\n  (str \":\\\\d{2}\" (optional \"\\\\.\\\\d{1,6}\")))\n\n(def ^:private time-part\n  (str hour-part \\: minutes-part (optional seconds-milliseconds-part)))\n\n(def ^:private date-time-part\n  (str date-part \"[T ]\" time-part))\n\n(def ^:private offset-part\n  (str \"(?:Z|(?:[+-]\" time-part \"))\"))\n\n(def zone-offset-part-regex\n  \"Regex for a zone-offset string.\"\n  (re-pattern offset-part))\n\n(def ^:const local-date-regex\n  \"Regex for a local-date string.\"\n  (re-pattern (str \\^ date-part \\$)))\n\n(def ^:const local-time-regex\n  \"Regex for a local-time string.\"\n  (re-pattern (str \\^ time-part \\$)))\n\n(def ^:const offset-time-regex\n  \"Regex for an offset-time string.\"\n  (re-pattern (str \\^ time-part offset-part \\$)))\n\n(def ^:const local-datetime-regex\n  \"Regex for a local-datetime string.\"\n  (re-pattern (str \\^ date-time-part \\$)))\n\n(def ^:const offset-datetime-regex\n  \"Regex for an offset-datetime string.\"\n  (re-pattern (str \\^ date-time-part offset-part \\$)))\n\n(def ^:const year-month-regex\n  \"Regex for a year-month literal string.\"\n  (re-pattern (str \\^ year-part \\- month-part \\$)))\n\n(def ^:const year-regex\n  \"Regex for a year literal string.\"\n  (re-pattern (str \\^ year-part \\$)))\n\n(defn matches-time?\n  \"Matches a local time string.\"\n  [input]\n  (re-matches local-time-regex input))\n\n(defn matches-date?\n  \"Matches a local date string.\"\n  [input]\n  (re-matches local-date-regex input))\n\n(defn matches-date-time?\n  \"Matches a local AND offset date time string.\"\n  [input]\n  (re-matches (re-pattern (str date-time-part (optional offset-part))) input))\n\n(defn drop-trailing-time-zone\n  \"Strips off a trailing +0500, -0430, or Z from a time string.\"\n  [time-str]\n  (or (second (re-matches (re-pattern (str \"(.*?)\" (optional offset-part) \\$)) time-str))\n      time-str))\n"]}