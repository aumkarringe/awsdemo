{"version":3,"sources":["metabase/util/devtools.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASG,AAIE,6BAAA,mGAAA,hIAACA;;AACD,AAACC;;AACD,YAAA,ZAACC;;AAED,GAAA,QAAAC,qCAAAC,0CAAAC,mDAAAC;AAAA;AAAA,AAAA,AAASC,mDAAoB,6CAAA,7CAACC;;;AAE9B,mCAAA,nCAAwBC;AAAxB,AACE,GAAM,iFAAA,MAAA,vFAACC,gCAAiBH;AAAxB,AACE,YAAA,ZAACL;;AACD,+BAAA,xBAAmBS,uCACA,WAAKC;AAAL,AACE,YAAA,ZAACV;;AACD,MAAA,NAACW;;AAGD,IAAMC,SAAO,qBAAA,pBAAG,AAACC;AAAjB,AACE;AAAA,AACE,GAAM,CAAG,AAACA,oBAAoBD;AAA9B,AACE;;AADF;;;;;;AAV3B","names":["devtools.core/set-pref!","devtools.core.install_BANG_","js/console.log","js/metabase","js/metabase.util","js/metabase.util.devtools","js/metabase.util.devtools.unload-handler-set?","metabase.util.devtools/unload-handler-set?","cljs.core.atom","metabase.util.devtools/on-reload","cljs.core/compare-and-set!","js/window","_event","js/fetch","target","js/performance.now"],"sourcesContent":["(ns metabase.util.devtools\n  \"Preload magic to load cljs-devtools. Only imported by dev.js in dev mode; no-op in production.\"\n  ;; This special context is defined only for dev-mode shadow-cljs builds; see shadow-cljs.edn\n  ;; In release builds, and JVM Clojure, this file is an empty namespace.\n  #?(:cljs-dev (:require\n                 [devtools.core :as devtools]\n                 [shadow.cljs.devtools.client.browser])))\n\n#?(:cljs-dev\n   (do\n     ;; The advanced mode check is busted, it always assumes Webpack is advanced.\n     ;; The reader conditionals empty this file in release builds, plus it's only required\n     ;; from frontend/src/metabase/dev.js, which is replaced with dev-noop.js in release mode.\n     (devtools/set-pref! :disable-advanced-mode-check true)\n     (devtools/install!)\n     (js/console.log \"CLJS Devtools loaded\")\n\n     (defonce unload-handler-set? (atom false))\n\n     (defn- ^:dev/after-load on-reload []\n       (when (compare-and-set! unload-handler-set? false true)\n         (js/console.log \"CLJS code hot loaded; setting up webpack invalidation on unload\")\n         (.addEventListener js/window \"beforeunload\"\n                            (fn [_event]\n                              (js/console.log \"invalidating webpack build\")\n                              (js/fetch \"http://localhost:8080/webpack-dev-server/invalidate\")\n                              ;; HACK: Spin-lock to buy time for webpack to actually start rebuilding. Without this\n                              ;; there's a race between the invalidation and the refreshed page loading the bundles.\n                              (let [target (+ (js/performance.now) 500)]\n                                (loop []\n                                  (when (< (js/performance.now) target)\n                                    (recur))))))))))\n"]}