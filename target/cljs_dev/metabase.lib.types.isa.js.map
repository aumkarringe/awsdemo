{"version":3,"sources":["metabase/lib/types/isa.cljc"],"mappings":"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","names":["p__76694","map__76695","cljs.core/--destructure-map","cljs.core.get","metabase.lib.types.isa/isa?","effective-type","base-type","semantic-type","_column","type-kw","cljs.core.isa_QMARK_","or__5002__auto__","metabase.lib.types.isa/field-type?","category","column","type-definition","metabase.lib.types.constants/type-hierarchies","G__76705","cljs.core/map?","cljs.core/not","cljs.core.assoc","cljs.core/some","p__76722","vec__76723","cljs.core.nth","type-type","types","and__5000__auto__","fexpr__76726","p1__76697#","p1__76698#","p1__76699#","metabase.lib.types.isa/field-type","p1__76728#","medley.core.find_first","metabase.lib.types.isa/temporal?","metabase.lib.types.isa/numeric?","metabase.lib.types.isa/boolean?","metabase.lib.types.isa/string?","metabase.lib.types.isa/string-like?","metabase.lib.types.isa/string-or-string-like?","metabase.lib.types.isa/summable?","metabase.lib.types.isa/scope?","metabase.lib.types.isa/category?","metabase.lib.types.isa/location?","metabase.lib.types.isa/description?","metabase.lib.types.isa/dimension?","cljs.core.not_EQ_","metabase.lib.types.isa/metric?","metabase.lib.types.isa/foreign-key?","metabase.lib.types.isa/primary-key?","metabase.lib.types.isa/entity-name?","metabase.lib.types.isa/title?","metabase.lib.types.isa/json?","metabase.lib.types.isa/xml?","metabase.lib.types.isa/structured?","metabase.lib.types.isa/any?","metabase.lib.types.isa/numeric-base-type?","metabase.lib.types.isa/date-without-time?","metabase.lib.types.isa/creation-timestamp?","metabase.lib.types.isa/creation-date?","metabase.lib.types.isa/creation-time?","metabase.lib.types.isa/number?","metabase.lib.types.isa/integer?","metabase.lib.types.isa/time?","metabase.lib.types.isa/address?","metabase.lib.types.isa/city?","metabase.lib.types.isa/state?","metabase.lib.types.isa/zip-code?","metabase.lib.types.isa/country?","metabase.lib.types.isa/coordinate?","metabase.lib.types.isa/latitude?","metabase.lib.types.isa/longitude?","metabase.lib.types.isa/currency?","metabase.lib.types.isa/comment?","metabase.lib.types.isa/id?","metabase.lib.types.isa/URL?","metabase.lib.types.isa/email?","metabase.lib.types.isa/avatar-URL?","metabase.lib.types.isa/image-URL?","metabase.lib.types.isa/has-latitude-and-longitude?","columns","p1__76757#","cljs.core/every?","metabase.lib.types.isa/primary-key-pred","table-id","pk?","metabase.lib.util/legacy-string-table-id->card-id","cljs.core._EQ_","p__76758","map__76759","metabase.lib.types.isa/searchable?","column-type","metabase.lib.types.isa/valid-filter-for?","src-column","dst-column"],"sourcesContent":["(ns metabase.lib.types.isa\n  \"Ported from frontend/src/metabase-lib/types/utils/isa.js\"\n  (:refer-clojure :exclude [isa? any? boolean? number? string? integer?])\n  (:require\n   [medley.core :as m]\n   [metabase.lib.types.constants :as lib.types.constants]\n   [metabase.lib.util :as lib.util]\n   [metabase.types]))\n\n(comment metabase.types/keep-me)\n\n(defn ^:export isa?\n  \"Decide if `_column` is a subtype of the type denoted by the keyword `type-kw`.\n  Both effective and semantic types are taken into account.\"\n  [{:keys [effective-type base-type semantic-type] :as _column} type-kw]\n  (or (clojure.core/isa? (or effective-type base-type) type-kw)\n      (clojure.core/isa? semantic-type type-kw)))\n\n(defn ^:export field-type?\n  \"Returns if `column` is of category `category`.\n  The possible categories are the keys in [[metabase.lib.types.constants/type-hierarchies]].\"\n  [category column]\n  (let [type-definition (lib.types.constants/type-hierarchies category)\n        column          (cond-> column\n                          (and (map? column)\n                               (not (:effective-type column)))\n                          (assoc :effective-type (:base-type column)))]\n    (cond\n      (nil? column) false\n\n      ;; check field types\n      (some (fn [[type-type types]]\n              (and (#{:effective-type :semantic-type} type-type)\n                   (some #(clojure.core/isa? (type-type column) %) types)))\n            type-definition)\n      true\n\n      ;; recursively check if it's not an excluded type\n      (some #(field-type? % column) (:exclude type-definition))\n      false\n\n      ;; recursively check if it's an included type\n      (some #(field-type? % column) (:include type-definition))\n      true\n\n      :else false)))\n\n(defn ^:export field-type\n  \"Return the category `column` belongs to.\n  The possible categories are the keys in [[metabase.lib.types.constants/type-hierarchies]].\"\n  [column]\n  (m/find-first #(field-type? % column)\n                [::lib.types.constants/temporal\n                 ::lib.types.constants/location\n                 ::lib.types.constants/coordinate\n                 ::lib.types.constants/foreign_key\n                 ::lib.types.constants/primary_key\n                 ::lib.types.constants/boolean\n                 ::lib.types.constants/string\n                 ::lib.types.constants/string_like\n                 ::lib.types.constants/number]))\n\n(defn ^:export temporal?\n  \"Is `column` of a temporal type?\"\n  [column]\n  (field-type? ::lib.types.constants/temporal column))\n\n(defn ^:export numeric?\n  \"Is `column` of a numeric type?\"\n  [column]\n  (field-type? ::lib.types.constants/number column))\n\n(defn ^:export boolean?\n  \"Is `column` of a boolean type?\"\n  [column]\n  (field-type? ::lib.types.constants/boolean column))\n\n(defn ^:export string?\n  \"Is `column` of a string type?\"\n  [column]\n  (field-type? ::lib.types.constants/string column))\n\n(defn ^:export string-like?\n  \"Is `column` of a temporal type?\"\n  [column]\n  (field-type? ::lib.types.constants/string_like column))\n\n(defn ^:export string-or-string-like?\n  \"Is `column` of a temporal type?\"\n  [column]\n  (or (string? column) (string-like? column)))\n\n(defn ^:export summable?\n  \"Is `column` of a summable type?\"\n  [column]\n  (field-type? ::lib.types.constants/summable column))\n\n(defn ^:export scope?\n  \"Is `column` of a scope type?\"\n  [column]\n  (field-type? ::lib.types.constants/scope column))\n\n(defn ^:export category?\n  \"Is `column` of a categorical type?\"\n  [column]\n  (field-type? ::lib.types.constants/category column))\n\n(defn ^:export location?\n  \"Is `column` of a location type?\"\n  [column]\n  (field-type? ::lib.types.constants/location column))\n\n(defn ^:export description?\n  \"Is `column` a description?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Description))\n\n(defn ^:export dimension?\n  \"Is `column` a dimension?\"\n  [column]\n  (and column\n       (not= (:lib/source column) :source/aggregations)\n       (not (description? column))))\n\n(defn ^:export metric?\n  \"Is `column` a metric?\"\n  [column]\n  (and (not= (:lib/source column) :source/breakouts)\n       (summable? column)))\n\n(defn ^:export foreign-key?\n  \"Is `column` a foreign-key?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/FK))\n\n(defn ^:export primary-key?\n  \"Is `column` a primary-key?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/PK))\n\n(defn ^:export entity-name?\n  \"Is `column` an entity name?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Name))\n\n(defn ^:export title?\n  \"Is `column` a title column?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Title))\n\n(defn ^:export json?\n  \"Is `column` a serialized JSON column?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/SerializedJSON))\n\n(defn ^:export xml?\n  \"Is `column` a serialized XML column?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/XML))\n\n(defn ^:export structured?\n  \"Is `column` serialized structured data? (eg. JSON, XML)\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Structured))\n\n(defn ^:export any?\n  \"Is this `_column` whatever (including nil)?\"\n  [_column]\n  true)\n\n(defn ^:export numeric-base-type?\n  \"Is `column` a numneric base type?\"\n  [column]\n  (clojure.core/isa? (:effective-type column) :type/Number))\n\n(defn ^:export date-without-time?\n  \"Is `column` a date without time?\"\n  [column]\n  (clojure.core/isa? (:effective-type column) :type/Date))\n\n(defn ^:export creation-timestamp?\n  \"Is `column` a creation timestamp column?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/CreationTimestamp))\n\n(defn ^:export creation-date?\n  \"Is `column` a creation date column?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/CreationDate))\n\n(defn ^:export creation-time?\n  \"Is `column` a creation time column?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/CreationTime))\n\n;; ZipCode, ID, etc derive from Number but should not be formatted as numbers\n(defn ^:export number?\n  \"Is `column` a number without some other semantic type (like ZIP code)?\"\n  [column]\n  (and (numeric-base-type? column)\n       (let [semantic-type (:semantic-type column)]\n         (or (nil? semantic-type)\n             ;; this is a precaution, :type/Number is not a semantic type\n             (clojure.core/isa? semantic-type :type/Number)))))\n\n(defn ^:export integer?\n  \"Is `column` a integer column?\"\n  [column]\n  (field-type? ::lib.types.constants/integer column))\n\n(defn ^:export time?\n  \"Is `column` a time?\"\n  [column]\n  (clojure.core/isa? (:effective-type column) :type/Time))\n\n(defn ^:export address?\n  \"Is `column` an address?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Address))\n\n(defn ^:export city?\n  \"Is `column` a city?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/City))\n\n(defn ^:export state?\n  \"Is `column` a state?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/State))\n\n(defn ^:export zip-code?\n  \"Is `column` a zip-code?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/ZipCode))\n\n(defn ^:export country?\n  \"Is `column` a country?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Country))\n\n(defn ^:export coordinate?\n  \"Is `column` a coordinate?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Coordinate))\n\n(defn ^:export latitude?\n  \"Is `column` a latitude?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Latitude))\n\n(defn ^:export longitude?\n  \"Is `column` a longitude?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Longitude))\n\n(defn ^:export currency?\n  \"Is `column` a currency?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Currency))\n\n(defn ^:export comment?\n  \"Is `column` a comment?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Comment))\n\n(defn ^:export id?\n  \"Is `column` an ID?\"\n  [column]\n  (or (clojure.core/isa? (:semantic-type column) :type/FK)\n      (clojure.core/isa? (:semantic-type column) :type/PK)))\n\n(defn ^:export URL?\n  \"Is `column` a URL?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/URL))\n\n(defn ^:export email?\n  \"Is `column` an email?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Email))\n\n(defn ^:export avatar-URL?\n  \"Is `column` an avatar URL?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/AvatarURL))\n\n(defn ^:export image-URL?\n  \"Is `column` an image URL?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/ImageURL))\n\n(defn ^:export has-latitude-and-longitude?\n  \"Does the collection `columns` contain both a latitude and a longitude column?\"\n  [columns]\n  (every? #(some % columns) [latitude? longitude?]))\n\n(defn ^:export primary-key-pred\n  \"Return a prdicate for checking if a column is a primary key.\"\n  [table-id]\n  (fn primary-key-pred-for-table-id [column]\n    (let [pk? (primary-key? column)]\n      ;; comment from isa.js:\n      ;; > FIXME: columns of nested questions at this moment miss table_id value\n      ;; > which makes it impossible to match them with their tables that are nested cards\n      (if (lib.util/legacy-string-table-id->card-id table-id)\n        pk?\n        (and pk? (= (:table-id column) table-id))))))\n\n;;; TODO -- This stuff should probably use the constants in [[metabase.lib.types.constants]], however this logic isn't\n;;; supposed to include things with semantic type = Category which the `::string` constant define there includes.\n(defn searchable?\n  \"Is this column one that we should show a search widget for (to search its values) in the QB filter UI? If so, we can\n  give it a `has-field-values` value of `:search`.\"\n  [{:keys [base-type effective-type]}]\n  ;; For the time being we will consider something to be \"searchable\" if it's a text Field since the `starts-with`\n  ;; filter that powers the search queries (see [[metabase.api.field/search-values]]) doesn't work on anything else\n  (let [column-type (or effective-type base-type)]\n    (or (clojure.core/isa? column-type :type/Text)\n        (clojure.core/isa? column-type :type/TextLike))))\n\n(defn valid-filter-for?\n  \"Given two CLJS `:metadata/columns` returns true if `src-column` is a valid source to use for filtering `dst-column`.\n\n  That's the case if both are from the same family (strings, numbers, temporal) or if the `src-column` [[isa?]] subtype\n  of `dst-column`.\"\n  [src-column dst-column]\n  (or\n    (and (string? src-column)   (string? dst-column))\n    (and (number? src-column)   (number? dst-column))\n    (and (temporal? src-column) (temporal? dst-column))\n    (clojure.core/isa? (:base-type src-column) (:base-type dst-column))))\n"]}