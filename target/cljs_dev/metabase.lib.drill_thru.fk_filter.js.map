{"version":3,"sources":["metabase/lib/drill_thru/fk_filter.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;;;;;;;;;;;oDAAA,+EAAAA,nIAASI,gHAONC,MACAC;AARH,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;eAAAA,XASyCS;aATzC,AAAAP,4CAAAF,eAAA,pEASWM;iBATX,AAAAJ,4CAAAF,eAAA,xEASkBO;YATlB,AAAAL,4CAAAF,eAAA,nEAS6BQ;AAT7B,AAUE,oBAAM,iBAAAE,oBAAKJ;AAAL,AAAA,oBAAAI;AAAA,mCAAA,mHAAA,4EAAA,zNACK,GAAA,UAAA,TAAOF,wBACP,sDAAA,tDAACG,gDAAKH,mEACN,AAACI,iDAAkCR,MAAMC,qBACzC,GAAK,AAACQ,0CAA2BP,eACjC,AAACQ,0CAA2BR;;AALjCI;;;AAAN,AAME,IAAMK,SAAO,iBAAAC,mBAAI,iBAAAC,WAASb;IAATa,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,kCAAAA,lCAAeC;AAAf,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAwC,yCAAAA,lCAACE,4BAAmBf;;;AAAhE,AAAA,oBAAAY;AAAAA;;AACI,IAAAI,WAAShB;IAATgB,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,iCAAAA,jCAAeC;AAAf,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAuC,wCAAAA,jCAACE,2BAAkBlB;;;;AAD3E,AAAA,kDAAA,0DAAA,6GAAA,qDAAA,kFAAA,yRAAA,+NAAA,/bAIa,iCAAA,mFAAA,+CAAA,nKAACmB,sMAA+BhB,WAAWC,iFACxC,uGAAA,vGAACgB,6EAAsCpB,MAAMC,aAAaC,+HAC3D,mFAAA,nFAACkB,6EAAsCpB,UAAQW;;AAZhE;;;AAcF,AAAAU,kGAAA,kFAAA,WACGC,OAAOC,cAAcC;AADxB,AAEE,wCAAA,mFAAA,qDAAA,kEAAA,3OAACC,sBAAYD;;AAEf,AAAAE,6FAAA,kFAAA;mCACG1B,MACAC,aACAuB,WACEG;AAJL,AASE,IAAAC,aAA2B,EAAI,AAACpB,iDAAkCR,MAAMC,eAE3C,oKAAA,lKAAI,AAAC6B,cAAI,AAACC,oEAA6B/B,MAAMC,gBAC3C,AAAC+B,sCAA6BhC,MAAMC,iGACnCD,MAAMC,sBAET,iBACMA,mBAAkB,AAACgC,wCAA+BjC,MAAMC;IAGxDD,YAAkB,AAACkC,0CAAiClC;IACpDmC,oBAAkB,AAACC,oCAA2BpC,UAAMC;AAL1D,AAME,oBAAQ,AAACqC,8BAAqBtC,UAAMmC;AAApC;AAAA,AAAA,MAAA,KAAAE,MAAA,CAAA,kBAAA,2DAAA,KAAA;;;AANF,0FAQGrC,UAAMmC;;gBAdtC,AAAAN,4CAAAD,WAAA,IAAA,vEAAO5B;uBAAP,AAAA6B,4CAAAD,WAAA,IAAA,9EAAa3B;AAAb,AAeE,OAACsC,yDAAkBvC,UAAMC,iBAAa,AAAA,uFAASuB;;yBAvBhDxB,MACAC,aACAuB;IACEG;;;;EAAAA;;oCAHF3B,MACAC,aACAuB,WACEG;;;IAHF3B;;IACAC;;IACAuB;IACEG;0BAHF3B,MACAC,aACAuB,WACEG","names":["p__79244","map__79245","cljs.core/--destructure-map","cljs.core.get","metabase.lib.drill-thru.fk-filter/fk-filter-drill","query","stage-number","column","column-ref","value","_context","and__5000__auto__","cljs.core.not_EQ_","metabase.lib.drill-thru.common/mbql-stage?","metabase.lib.types.isa/primary-key?","metabase.lib.types.isa/foreign-key?","source","or__5002__auto__","G__79250","metabase.lib.util/source-table-id","metabase.lib.metadata/table","G__79252","metabase.lib.util/source-card-id","metabase.lib.metadata/card","metabase.lib.options/ensure-uuid","metabase.lib.metadata.calculation.display_name","metabase.lib.drill-thru.common/drill-thru-info-method","_query","_stage-number","drill-thru","cljs.core/select-keys","metabase.lib.drill-thru.common/drill-thru-method","_args","vec__79256","cljs.core.nth","cljs.core/seq","metabase.lib.aggregation.aggregations","metabase.lib.stage/ensure-extra-stage","metabase.lib.util/canonical-stage-index","metabase.lib.util/ensure-mbql-final-stage","next-stage-number","metabase.lib.util/next-stage-number","js/Error","metabase.lib.util/query-stage","metabase.lib.filter.filter"],"sourcesContent":["(ns metabase.lib.drill-thru.fk-filter\n  \"Adds a simple `=` filter for the selected FK column. Enables option like `View this Product's Reviews`.\n\n  Entry points:\n\n  - Cell\n\n  Requirements:\n\n  - Selected column is `type/FK`\n\n  - Structured (MBQL) query\n\n  - Return `columnName` and `tableName` for the FK column. On the FE we strip `ID` suffix and turn `Product ID` into\n    `Product's` and pluralize the table name.\n\n  Query transformation:\n\n  - Add a `=` filter for the selected column and value. Make sure to append the query stage when needed.\n\n  Question transformation:\n  - None\"\n  (:require\n   [metabase.lib.aggregation :as lib.aggregation]\n   [metabase.lib.drill-thru.common :as lib.drill-thru.common]\n   [metabase.lib.filter :as lib.filter]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.drill-thru :as lib.schema.drill-thru]\n   [metabase.lib.stage :as lib.stage]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.lib.util :as lib.util]\n   [metabase.util.malli :as mu]))\n\n(mu/defn fk-filter-drill :- [:maybe ::lib.schema.drill-thru/drill-thru.fk-filter]\n  \"When clicking on a foreign key value, filter this query by that column.\n\n  This has the same effect as the `=` filter on a generic field (ie. not a key), but renders differently.\n\n  Contrast [[metabase.lib.drill-thru.object-details/object-detail-drill]], which shows the details of the foreign\n  object.\"\n  [query                                           :- ::lib.schema/query\n   stage-number                                    :- :int\n   {:keys [column column-ref value], :as _context} :- ::lib.schema.drill-thru/context]\n  (when (and column\n             (some? value)\n             (not= value :null)         ; If the FK is null, don't show this option.\n             (lib.drill-thru.common/mbql-stage? query stage-number)\n             (not (lib.types.isa/primary-key? column))\n             (lib.types.isa/foreign-key? column))\n    (let [source (or (some->> query lib.util/source-table-id (lib.metadata/table query))\n                     (some->> query lib.util/source-card-id (lib.metadata/card query)))]\n      {:lib/type :metabase.lib.drill-thru/drill-thru\n       :type     :drill-thru/fk-filter\n       :filter   (lib.options/ensure-uuid [:= {} column-ref value])\n       :column-name (lib.metadata.calculation/display-name query stage-number column :long)\n       :table-name (lib.metadata.calculation/display-name query 0 source)})))\n\n(defmethod lib.drill-thru.common/drill-thru-info-method :drill-thru/fk-filter\n  [_query _stage-number drill-thru]\n  (select-keys drill-thru [:type :column-name :table-name]))\n\n(mu/defmethod lib.drill-thru.common/drill-thru-method :drill-thru/fk-filter :- ::lib.schema/query\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   drill-thru   :- ::lib.schema.drill-thru/drill-thru.fk-filter\n   & _args]\n  ;; If the stage in question is an MBQL stage, we can simply add a `=` filter to it.\n  ;; If it's a native stage, we have to apply the drill to the stage after that stage, which will be an MBQL stage,\n  ;; adding it if needed (native stages are currently only allowed to be the first stage.)\n  ;; Similarly if the query contains aggregations we will have to add a new stage to do the filtering.\n  (let [[query stage-number] (if (lib.drill-thru.common/mbql-stage? query stage-number)\n                               ;; MBQL stage - append a stage if there are aggregations\n                               (if (seq (lib.aggregation/aggregations query stage-number))\n                                 (lib.stage/ensure-extra-stage query stage-number)\n                                 [query stage-number])\n                               ;; native stage - append an MBQL stage\n                               (let [;; convert the stage number e.g. `-1` to the canonical non-relative stage number\n                                     stage-number      (lib.util/canonical-stage-index query stage-number)\n                                     ;; make sure the query has at least one MBQL stage after the native stage, which we\n                                     ;; know is the first stage.\n                                     query             (lib.util/ensure-mbql-final-stage query)\n                                     next-stage-number (lib.util/next-stage-number query stage-number)]\n                                 (assert (lib.util/query-stage query next-stage-number)\n                                         \"Sanity check: there should be an additional stage by now\")\n                                 [query next-stage-number]))]\n    (lib.filter/filter query stage-number (:filter drill-thru))))\n"]}