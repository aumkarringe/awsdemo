{"version":3,"sources":["metabase/lib/schema/binning.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,AAAAA,4CAAA,mHAAA,mFAAA,qDAAA,2CAAA,+HAAA,+DAAA,4DAAA,hLAEsBC;AAGtB,AAAAD,4CAAA,kHAAA,AAAAE,gEAAA,zBAEEC;AAEF,AAAAH,4CAAA,mHAAA,AAAAE,uCAAA,8HAAA;AAKA,AAAAF,4CAAA,gHAAA,AAAAE,uCAAA,mFAAA,mDAAA,2CAAA,2DAAA,6BAAA,mFAAA,mDAAA,2CAAA,2HAAA,mFAAA,8DAAA,mFAAA,mDAAA,2IAAA,mFAAA,uDAAA,2CAAA,xoBAKuBE,qsBAED,WAAKC;AAAL,AACE,OAACC,gDAAQ,eAAA,WAAAC,1BAACC;AAAD,AAAO,qDAAAD,9CAACE,4CAAIJ;GAAZ,mFAAA,8DAAA;GARjC,2DASsB,WAAAK,SAAqBI;AAArB,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAF,4CAAAE,eAAA,nEAAaE;AAAb,AACE,QAAA,2BAAgC,AAACE,wGAAOF;WAVhE,mFAAA,4DAAA,mFAAA,mDAAA,mFAAA,8DAAA,mFAAA,+CAAA,4FAAA,mFAAA,+DAAA,mFAAA,mDAAA,mFAAA,8DAAA,mFAAA,+CAAA,+EAAA,mFAAA,+DAAA,mFAAA,mDAAA,mJAAA,mFAAA,4DAAA,mFAAA,mDAAA,mFAAA,8DAAA,mFAAA,+CAAA,4EAAA,mFAAA,4DAAA,mFAAA,mDAAA,kKAAA;AAoBA,AAAAb,4CAAA,4HAAA,mFAAA,mDAAA,mFAAA,0DAAA,mFAAA,+CAAA,uFAAA,mFAAA,oEAAA,kEAAA,mFAAA,mDAAA,mFAAA,uDAAA,gIAAA,mFAAA,4DAAA,2CAAA,6DAAA,aAAA","names":["metabase.util.malli.registry/register!","metabase.lib.schema.common/normalize-keyword","metabase.util.malli.registry/-with-doc","cljs.core/pos-int?","metabase.lib.schema.common/normalize-map","x","cljs.core.keyword","p1__75085#","cljs.core/some","cljs.core.get","p__75089","map__75090","cljs.core/--destructure-map","value","_","cljs.core.pr_str"],"sourcesContent":["(ns metabase.lib.schema.binning\n  \"Malli schema for binning of a column's values.\n\n  There are two approaches to binning, selected by `:strategy`:\n  - `{:strategy :bin-width :bin-width 10}` makes 1 or more bins that are 10 wide;\n  - `{:strategy :num-bins  :num-bins  12}` splits the column into 12 bins.\"\n  (:require\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.util.malli.registry :as mr]))\n\n(mr/def ::strategy\n  [:enum\n   {:decode/normalize lib.schema.common/normalize-keyword}\n   :bin-width :default :num-bins])\n\n(mr/def ::num-bins\n  \"Number of bins to use.\"\n  pos-int?)\n\n(mr/def ::bin-width\n  \"Bin width (size of each bin).\"\n  ::lib.schema.common/positive-number)\n\n;;; the binning options that goes in a `:field` ref under the `:binning` key\n(mr/def ::binning\n  \"Schema for `:binning` options passed to a `:field` clause.\"\n  [:and\n   {:doc/title \"`:binning` options\"}\n   [:map\n    {:decode/normalize lib.schema.common/normalize-map}\n    [:strategy [:ref ::strategy]]]\n   [:multi {:dispatch (fn [x]\n                        (keyword (some #(get x %) [:strategy \"strategy\"])))\n            :error/fn (fn [{:keys [value]} _]\n                        (str \"Invalid binning strategy\" (pr-str value)))}\n    [:default   [:map\n                 [:strategy [:= :default]]]]\n    [:bin-width [:map\n                 [:strategy  [:= :bin-width]]\n                 [:bin-width [:ref ::bin-width]]]]\n    [:num-bins  [:map\n                 [:strategy [:= :num-bins]]\n                 [:num-bins [:ref ::num-bins]]]]]])\n\n(mr/def ::binning-option\n  [:map\n   [:lib/type [:= :option/binning]]\n   [:display-name :string]\n   [:mbql [:maybe ::binning]]\n   [:default {:optional true} :boolean]])\n"]}