{"version":3,"sources":["metabase/lib/schema/expression/window.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,AAAAA,4CAAA,sIAAA,mFAAA,mDAAA,oDAAA,mFAAA,kDAAA,2CAAA,oEAAA,gCAKI,AAACC,gDAAQC,yBAASC;AAGtB,8FAAA,0GAAA,mFAAA,mDAAA,qIAAA,ndAACC;AAID,AAAAC,0FAAA,wDAAA,WAAAC;AAAA,AAAA,IAAAC,aAAAD;WAAA,AAAAE,4CAAAD,WAAA,IAAA,lEACIE;YADJ,AAAAD,4CAAAD,WAAA,IAAA,nEACSG;WADT,AAAAF,4CAAAD,WAAA,IAAA,lEACeI;SADf,AAAAH,4CAAAD,WAAA,IAAA,hEACoBK;AADpB,AAEE,OAACC,uCAAmBF","names":["metabase.util.malli.registry/register!","cljs.core.some_fn","cljs.core/pos-int?","cljs.core/neg-int?","metabase.lib.schema.mbql_clause.define_tuple_mbql_clause","metabase.lib.schema.expression/type-of-method","p__75139","vec__75140","cljs.core.nth","_tag","_opts","expr","_n","metabase.lib.schema.expression/type-of"],"sourcesContent":["(ns metabase.lib.schema.expression.window\n  (:require\n   [metabase.lib.schema.expression :as expression]\n   [metabase.lib.schema.mbql-clause :as mbql-clause]\n   [metabase.util.malli.registry :as mr]))\n\n(mr/def ::offset.n\n  [:and\n   :int\n   [:fn\n    {:error/message \"offset cannot be zero\"}\n    (some-fn pos-int? neg-int?)]])\n\n;;; added 0.50.0\n(mbql-clause/define-tuple-mbql-clause :offset\n  #_expr [:ref ::expression/expression]\n  #_n    ::offset.n)\n\n(defmethod expression/type-of-method :offset\n  [[_tag _opts expr _n]]\n  (expression/type-of expr))\n"]}