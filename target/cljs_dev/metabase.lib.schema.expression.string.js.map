{"version":3,"sources":["metabase/lib/schema/expression/string.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAAA,mBAAA,AAAAC,cAAA,mFAAA,oDAAA,uDAAA,uDAAA,sDAAA;IAAAC,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,eAAA,AAAAD,wDAAAE,nEAAQS;AAAR,AAAA,AACE,yJAAA,gDAAA,2DAAA,mFAAA,0DAAA,mFAAA,mDAAA,vhBAACC,8FAAqCD;;AADxC;AAAA,eAAAb;eAAAE;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAC,2BAAA,AAAAJ,cAAAD;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,uBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,wBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,eAAA,AAAAI,gBAAAX,3BAAQa;AAAR,AAAA,AACE,yJAAA,gDAAA,2DAAA,mFAAA,0DAAA,mFAAA,mDAAA,vhBAACC,8FAAqCD;;AADxC;AAAA,eAAA,AAAAD,eAAAZ;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;AAIA,IAAAe,mBAAA,AAAAd,cAAA,mFAAA,sDAAA,yDAAA;IAAAe,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,eAAA,AAAAD,wDAAAE,nEAAQL;AAAR,AAAA,AACE,yJAAA,gDAAA,2DAAA,mFAAA,0DAAA,mFAAA,mDAAA,vhBAACC,8FAAqCD;;AADxC;AAAA,eAAAE;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAb,2BAAA,AAAAJ,cAAAc;AAAA,AAAA,GAAAV;AAAA,AAAA,IAAAU,uBAAAV;AAAA,AAAA,GAAA,AAAAC,6BAAAS;AAAA,IAAAR,wBAAA,AAAAC,sBAAAO;AAAA,AAAA,eAAA,AAAAN,qBAAAM;eAAAR;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,eAAA,AAAAI,gBAAAI,3BAAQF;AAAR,AAAA,AACE,yJAAA,gDAAA,2DAAA,mFAAA,0DAAA,mFAAA,mDAAA,vhBAACC,8FAAqCD;;AADxC;AAAA,eAAA,AAAAD,eAAAG;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;AAIA,IAAAI,mBAAA,AAAAlB,cAAA,mFAAA,iEAAA,qEAAA;IAAAmB,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,eAAA,AAAAD,wDAAAE,nEAAQT;AAAR,AAAA,AACE,yJAAA,gDAAA,2DAAA,mFAAA,0DAAA,mFAAA,mDAAA,vhBAACC,8FAAqCD;;AADxC;AAAA,eAAAM;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAjB,2BAAA,AAAAJ,cAAAkB;AAAA,AAAA,GAAAd;AAAA,AAAA,IAAAc,uBAAAd;AAAA,AAAA,GAAA,AAAAC,6BAAAa;AAAA,IAAAZ,wBAAA,AAAAC,sBAAAW;AAAA,AAAA,eAAA,AAAAV,qBAAAU;eAAAZ;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,eAAA,AAAAI,gBAAAQ,3BAAQN;AAAR,AAAA,AACE,yJAAA,gDAAA,2DAAA,mFAAA,0DAAA,mFAAA,mDAAA,vhBAACC,8FAAqCD;;AADxC;AAAA,eAAA,AAAAD,eAAAO;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;AAIA,8FAAA,0GAAA,gDAAA,kEAAA,mFAAA,0DAAA,mFAAA,mDAAA,7kBAACL;AAGD,IAAAS,mBAAA,AAAAtB,cAAA,mFAAA,oEAAA;IAAAuB,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,eAAA,AAAAD,wDAAAE,nEAAQb;AAAR,AAAA,AACE,yJAAA,gDAAA,2DAAA,mFAAA,0DAAA,mFAAA,mDAAA,oIAAA,mFAAA,0DAAA,mFAAA,mDAAA,96BAACC,8FAAqCD;;AADxC;AAAA,eAAAU;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAArB,2BAAA,AAAAJ,cAAAsB;AAAA,AAAA,GAAAlB;AAAA,AAAA,IAAAkB,uBAAAlB;AAAA,AAAA,GAAA,AAAAC,6BAAAiB;AAAA,IAAAhB,wBAAA,AAAAC,sBAAAe;AAAA,AAAA,eAAA,AAAAd,qBAAAc;eAAAhB;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,eAAA,AAAAI,gBAAAY,3BAAQV;AAAR,AAAA,AACE,yJAAA,gDAAA,2DAAA,mFAAA,0DAAA,mFAAA,mDAAA,oIAAA,mFAAA,0DAAA,mFAAA,mDAAA,96BAACC,8FAAqCD;;AADxC;AAAA,eAAA,AAAAD,eAAAW;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;AAMA,8FAAA,6GAAA,gDAAA,2DAAA,mFAAA,0DAAA,mFAAA,mDAAA,oIAAA,mFAAA,0DAAA,mFAAA,mDAAA,oIAAA,mFAAA,0DAAA,mFAAA,mDAAA,v3CAACT;AAKD,6FAAA,iHAAA,gDAAA,2DAAA,mFAAA,mDAAA,mFAAA,0DAAA,mFAAA,mDAAA,4IAAA,mFAAA,uDAAA,mFAAA,0DAAA,mFAAA,mDAAA,8IAAA,mFAAA,wDAAA,mFAAA,gDAAA,mFAAA,0DAAA,mFAAA,mDAAA,16DAACa;AAKD,6FAAA,4GAAA,gDAAA,2DAAA,mFAAA,qDAAA,mFAAA,wDAAA,2CAAA,kDAAA,YAAA,mFAAA,0DAAA,mFAAA,mDAAA,n8BAACA","names":["seq__75397","cljs.core/seq","chunk__75398","count__75399","i__75400","temp__5804__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","op","metabase.lib.schema.mbql_clause.define_tuple_mbql_clause","seq__75401","chunk__75402","count__75403","i__75404","seq__75413","chunk__75414","count__75415","i__75416","seq__75421","chunk__75422","count__75423","i__75424","metabase.lib.schema.mbql_clause.define_catn_mbql_clause"],"sourcesContent":["(ns metabase.lib.schema.expression.string\n  (:require\n    [metabase.lib.schema.expression :as expression]\n    [metabase.lib.schema.mbql-clause :as mbql-clause]))\n\n(doseq [op [:trim :ltrim :rtrim :upper :lower]]\n  (mbql-clause/define-tuple-mbql-clause op :- :type/Text\n    [:schema [:ref ::expression/string]]))\n\n(doseq [op [:host :domain :subdomain]]\n  (mbql-clause/define-tuple-mbql-clause op :- :type/Text\n    [:schema [:ref ::expression/string]]))\n\n(doseq [op [:month-name :quarter-name :day-name]]\n  (mbql-clause/define-tuple-mbql-clause op :- :type/Text\n    [:schema [:ref ::expression/integer]]))\n\n(mbql-clause/define-tuple-mbql-clause :length :- :type/Integer\n  [:schema [:ref ::expression/string]])\n\n(doseq [op [:regexextract :regex-match-first]]\n  (mbql-clause/define-tuple-mbql-clause op :- :type/Text\n    #_str [:schema [:ref ::expression/string]]\n    ;; TODO regex type?\n    #_regex [:schema [:ref ::expression/string]]))\n\n(mbql-clause/define-tuple-mbql-clause :replace :- :type/Text\n  #_str [:schema [:ref ::expression/string]]\n  #_find [:schema [:ref ::expression/string]]\n  #_replace [:schema [:ref ::expression/string]])\n\n(mbql-clause/define-catn-mbql-clause :substring :- :type/Text\n  [:str [:schema [:ref ::expression/string]]]\n  [:start [:schema [:ref ::expression/integer]]]\n  [:length [:? [:schema [:ref ::expression/integer]]]])\n\n(mbql-clause/define-catn-mbql-clause :concat :- :type/Text\n  [:args [:repeat {:min 2} [:schema [:ref ::expression/expression]]]])\n"]}