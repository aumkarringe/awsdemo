{"version":3,"sources":["metabase/lib/schema/temporal_bucketing.cljc"],"mappings":"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","names":["metabase.lib.schema.temporal-bucketing/ordered-date-extraction-units","metabase.lib.schema.temporal-bucketing/date-extraction-units","cljs.core/set","metabase.util.malli.registry/register!","cljs.core.into","metabase.lib.schema.common/normalize-keyword","metabase.lib.schema.temporal-bucketing/ordered-date-truncation-units","metabase.lib.schema.temporal-bucketing/date-truncation-units","metabase.lib.schema.temporal-bucketing/ordered-date-bucketing-units","cljs.core.distinct","cljs.core.concat","metabase.lib.schema.temporal-bucketing/date-bucketing-units","metabase.lib.schema.temporal-bucketing/ordered-time-extraction-units","metabase.lib.schema.temporal-bucketing/time-extraction-units","metabase.lib.schema.temporal-bucketing/ordered-time-truncation-units","metabase.lib.schema.temporal-bucketing/time-truncation-units","metabase.lib.schema.temporal-bucketing/ordered-time-bucketing-units","metabase.lib.schema.temporal-bucketing/time-bucketing-units","metabase.lib.schema.temporal-bucketing/ordered-datetime-bucketing-units","metabase.lib.schema.temporal-bucketing/datetime-bucketing-units","metabase.lib.schema.temporal-bucketing/temporal-bucketing-units","cljs.core.conj","metabase.lib.schema.temporal-bucketing/datetime-truncation-units","clojure.set.union","metabase.lib.schema.temporal-bucketing/datetime-extraction-units","metabase.lib.schema.temporal-bucketing/date-interval-units","metabase.lib.schema.temporal-bucketing/time-interval-units","metabase.lib.schema.temporal-bucketing/datetime-interval-units"],"sourcesContent":["(ns metabase.lib.schema.temporal-bucketing\n  \"Malli schema for temporal bucketing units and expressions.\"\n  (:require\n   [clojure.set :as set]\n   [metabase.lib.schema.common :as common]\n   [metabase.util.malli.registry :as mr]))\n\n(def ordered-date-extraction-units\n  \"Units that you can EXTRACT from a date or datetime. These return integers in temporal bucketing expressions.\n  The front end shows the options in this order.\"\n  [:day-of-week\n   :day-of-month\n   :day-of-year\n   :week-of-year\n   :month-of-year\n   :quarter-of-year\n   :year\n   :year-of-era])\n\n(def date-extraction-units\n  \"Units that you can EXTRACT from a date or datetime. These return integers in temporal bucketing expressions.\"\n  (set ordered-date-extraction-units))\n\n(mr/def ::unit.date.extract\n  (into [:enum {:error/message    \"Valid date extraction unit\"\n                :decode/normalize common/normalize-keyword}]\n        date-extraction-units))\n\n(def ordered-date-truncation-units\n  \"Units that you can TRUNCATE a date or datetime to. In temporal bucketing expressions these return a `:type/Date`.\n  The front end shows the options in this order.\"\n  [:day :week :month :quarter :year])\n\n(def date-truncation-units\n  \"Units that you can TRUNCATE a date or datetime to. In temporal bucketing expressions these return a `:type/Date`.\"\n  (set ordered-date-truncation-units))\n\n(mr/def ::unit.date.truncate\n  (into [:enum {:error/message    \"Valid date truncation unit\"\n                :decode/normalize common/normalize-keyword}]\n        date-truncation-units))\n\n(def ordered-date-bucketing-units\n  \"Valid date or datetime bucketing units for either truncation or extraction operations.\n  The front end shows the options in this order.\"\n  (into [] (distinct) (concat ordered-date-truncation-units ordered-date-extraction-units)))\n\n(def date-bucketing-units\n  \"Valid date or datetime bucketing units for either truncation or extraction operations.\"\n  (set ordered-date-bucketing-units))\n\n(mr/def ::unit.date\n  (into [:enum {:error/message    \"Valid date bucketing unit\"\n                :decode/normalize common/normalize-keyword}]\n        date-bucketing-units))\n\n(def ordered-time-extraction-units\n  \"Units that you can EXTRACT from a time or datetime. These return integers in temporal bucketing expressions.\n  The front end shows the options in this order.\"\n  [:second-of-minute\n   :minute-of-hour\n   :hour-of-day])\n\n(def time-extraction-units\n  \"Units that you can EXTRACT from a time or datetime. These return integers in temporal bucketing expressions.\"\n  (set ordered-time-extraction-units))\n\n(mr/def ::unit.time.extract\n  (into [:enum {:error/message \"Valid time extraction unit\"}] time-extraction-units))\n\n(def ordered-time-truncation-units\n  \"Units you can TRUNCATE a time or datetime to. These return the same type as the expression being bucketed in temporal\n  bucketing expressions. The front end shows the options in this order.\"\n  [:millisecond :second :minute :hour])\n\n(def time-truncation-units\n  \"Units you can TRUNCATE a time or datetime to. These return the same type as the expression being bucketed in temporal\n  bucketing expressions.\"\n  (set ordered-time-truncation-units))\n\n(mr/def ::unit.time.truncate\n  (into [:enum {:error/message    \"Valid time truncation unit\"\n                :decode/normalize common/normalize-keyword}]\n        time-truncation-units))\n\n(def ordered-time-bucketing-units\n  \"Valid time bucketing units for either truncation or extraction operations.\n  The front end shows the options in this order.\"\n  (into []\n        (distinct)\n        (concat ordered-time-truncation-units ordered-time-extraction-units)))\n\n(def time-bucketing-units\n  \"Valid time bucketing units for either truncation or extraction operations.\"\n  (set ordered-time-bucketing-units))\n\n(mr/def ::unit.time\n  (into [:enum {:error/message    \"Valid time bucketing unit\"\n                :decode/normalize common/normalize-keyword}]\n        time-bucketing-units))\n\n(def ordered-datetime-bucketing-units\n  \"Valid datetime bucketing units for either truncation or extraction operations.\n  The front end shows the options in this order.\"\n  (into []\n        (distinct)\n        (concat ordered-time-truncation-units ordered-date-truncation-units\n                ordered-time-extraction-units ordered-date-extraction-units)))\n\n(def datetime-bucketing-units\n  \"Valid datetime bucketing units for either truncation or extraction operations.\"\n  (set ordered-datetime-bucketing-units))\n\n(mr/def ::unit.date-time\n  (into [:enum {:error/message    \"Valid datetime bucketing unit\"\n                :decode/normalize common/normalize-keyword}]\n        ordered-datetime-bucketing-units))\n\n(def temporal-bucketing-units\n  \"This is the same as [[datetime-bucketing-units]], but also includes `:default`.\"\n  (conj datetime-bucketing-units :default))\n\n(mr/def ::unit\n  (into [:enum {:error/message    \"Valid temporal bucketing unit\"\n                :decode/normalize common/normalize-keyword}]\n        temporal-bucketing-units))\n\n(def datetime-truncation-units\n  \"Valid TRUNCATION units for a datetime.\"\n  (set/union date-truncation-units time-truncation-units))\n\n(mr/def ::unit.date-time.truncate\n  (into [:enum {:error/message    \"Valid datetime truncation unit\"\n                :decode/normalize common/normalize-keyword}]\n        datetime-truncation-units))\n\n(def datetime-extraction-units\n  \"Valid EXTRACTION units for a datetime. Extraction units return integers!\"\n  (set/union date-extraction-units time-extraction-units))\n\n(mr/def ::unit.date-time.extract\n  (into [:enum {:error/message    \"Valid datetime extraction unit\"\n                :decode/normalize common/normalize-keyword}]\n        datetime-extraction-units))\n\n(def date-interval-units\n  \"Date units that are valid in intervals or clauses like `:datetime-add`. This is a superset\n  of [[date-truncation-units]].\"\n  ;; it's the same but also includes `:year`, not normally allowed as a date truncation unit; `:year` is interpreted\n  ;; as extraction instead.\n  (conj date-truncation-units :year))\n\n(mr/def ::unit.date.interval\n  (into [:enum {:error/message    \"Valid date interval unit\"\n                :decode/normalize common/normalize-keyword}]\n        date-interval-units))\n\n(def time-interval-units\n  \"Time units that are valid in intervals or clauses like `:datetime-add`. Currently the same\n  as [[time-truncation-units]].\"\n  time-truncation-units)\n\n(mr/def ::unit.time.interval\n  (into [:enum {:error/message    \"Valid time interval unit\"\n                :decode/normalize common/normalize-keyword}]\n        time-interval-units))\n\n(def datetime-interval-units\n  \"Units valid in intervals or clauses like `:datetime-add` for datetimes.\"\n  (set/union date-interval-units time-interval-units))\n\n(mr/def ::unit.date-time.interval\n  (into [:enum {:error/message    \"Valid datetime interval unit\"\n                :decode/normalize common/normalize-keyword}]\n        datetime-interval-units))\n\n(mr/def ::option\n  [:map\n   [:lib/type [:= :option/temporal-bucketing]]\n   [:unit ::unit]\n   [:default {:optional true} :boolean]])\n"]}