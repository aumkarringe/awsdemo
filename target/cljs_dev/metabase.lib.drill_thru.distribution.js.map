{"version":3,"sources":["metabase/lib/drill_thru/distribution.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;;;;;;;;;;0DAAA,qFAAAA,/IAASI,4HAKNC,MACAC;AANH,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;aAAA,AAAAE,4CAAAF,eAAA,pEAOWM;YAPX,AAAAJ,4CAAAF,eAAA,nEAOkBO;AAPlB,AAQE,oBAAM,iBAAAC,oBAAK,AAACC,iDAAkCL,MAAMC;AAA9C,AAAA,GAAAG;AAAA,IAAAA,wBACKF;AADL,AAAA,oBAAAE;AAAA,8BAAA,6OAAA,8DAAA,6DAAA,0DAAA,vbAEK,UAAA,TAAMD,sBACN,oJAAA,pJAACG,gDAAK,AAAA,4FAAaJ,iGACnB,GAAK,AAACK,0CAA2BL,iBACjC,GAAK,AAACM,yCAA2BN,iBACjC,GAAK,AAACO,sCAA2BP,iBACjC,GAAK,AAACQ,0CAA2BR,eACjC,AAACS,cAAI,AAACC,6CAA8BZ,MAAMC,aAAaC;;AAR5DE;;;AAAAA;;;AAAN,AAAA,kDAAA,0DAAA,6GAAA,qDAAA,wFAAA,yDAWcF;;AAXd;;;AAaF,yEAAA,zEAAOW,0JACJX;AADH,AAEE,GACE,AAACY,uCAAwBZ;AACzB,gEAAA,zDAACa,kDAAyCb;;AAF5C,GAIE,EAAK,AAACc,sCAAuBd,aACxB,GAAK,AAACe,0CAA2Bf;AACtC,OAACgB,kCAAyBhB,OAAO,AAACiB;;AANpC,AASEjB;;;;;AAEJ,AAAAkB,6FAAA,wFAAA,8BAAAC,nBACGrB,MACAC;AAFH,AAAA,IAAAqB,aAAAD;IAAAC,iBAAA,AAAAzB,4BAAAyB;kBAAAA,dAGuBC;aAHvB,AAAAzB,4CAAAwB,eAAA,pEAGWpB;AAHX,AAIE,GAAM,AAACG,iDAAkCL,MAAMC;AAA/C,AACE,IAAMuB,WAAS,AAACX,uEAAkCX;AAAlD,+MACMF,1EAEA,gKAAA,mEAAA,6DAAA,wDAAA,xVAACyB,gFAA4BxB,aAAayB,9JAE1C,AAACC,4dAA0B1B,aAAa,AAAC2B,7iBACzC,OAACC,smBAAsB5B,aAAauB;;AAP5C","names":["p__79094","map__79095","cljs.core/--destructure-map","cljs.core.get","metabase.lib.drill-thru.distribution/distribution-drill","query","stage-number","column","value","and__5000__auto__","metabase.lib.drill-thru.common/mbql-stage?","cljs.core.not_EQ_","metabase.lib.types.isa/primary-key?","metabase.lib.types.isa/structured?","metabase.lib.types.isa/comment?","metabase.lib.types.isa/description?","cljs.core/not","metabase.lib.breakout/breakout-column?","metabase.lib.drill-thru.distribution/add-temporal-bucketing-or-binning","metabase.lib.types.isa/temporal?","metabase.lib.temporal-bucket/with-temporal-bucket","metabase.lib.types.isa/numeric?","metabase.lib.types.isa/foreign-key?","metabase.lib.binning/with-binning","metabase.lib.binning/default-auto-bin","metabase.lib.drill-thru.common/drill-thru-method","p__79098","map__79099","_drill-thru","breakout","metabase.lib.util.update_query_stage","cljs.core/dissoc","metabase.lib.aggregation.aggregate","metabase.lib.aggregation.count","metabase.lib.breakout.breakout"],"sourcesContent":["(ns metabase.lib.drill-thru.distribution\n  \"Raw data with a breakout based on the selected column.\n\n  For date columns, sets \\\"Month\\\" as a temporal unit. For numeric columns, uses the default binning strategy. Other\n  columns are not changed.\n\n  Entry points:\n\n  - Column header\n\n  Requirements:\n\n  - No aggregation or breakout clauses in the query\n  - Column not `type/PK`, `type/SerializedJSON`, `type/Description`, `type/Comment`\n\n  Query transformation (last stage only):\n\n  - Remove all aggregation, breakout, orderBy, limit clauses\n\n  - Aggregate by \\\"count\\\" operator\n\n  - Breakout by the selected column. If the column is a date column, add \\\"Month\\\" temporal unit. If the column is a\n    numeric column, apply the default binning strategy. Otherwise use the column as it is.\n\n  Question transformation:\n\n  - Set \\\"bar\\\" display\"\n  (:require\n   [metabase.lib.aggregation :as lib.aggregation]\n   [metabase.lib.binning :as lib.binning]\n   [metabase.lib.breakout :as lib.breakout]\n   [metabase.lib.drill-thru.common :as lib.drill-thru.common]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.drill-thru :as lib.schema.drill-thru]\n   [metabase.lib.temporal-bucket :as lib.temporal-bucket]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.lib.util :as lib.util]\n   [metabase.util.malli :as mu]))\n\n;; TODO: The original `Question.distribution()` sets the display to `bar`, but that's out of scope for MLv2.\n;; Make sure the FE does this on the question after evolving the query.\n(mu/defn distribution-drill :- [:maybe ::lib.schema.drill-thru/drill-thru.distribution]\n  \"Select a column and see a histogram of how many rows fall into an automatic set of bins/buckets.\n  - For dates, breaks out by month by default.\n  - For numeric values, by an auto-selected set of bins\n  - For strings, by each distinct value (which might be = the number of rows)\"\n  [query                  :- ::lib.schema/query\n   stage-number           :- :int\n   {:keys [column value]} :- ::lib.schema.drill-thru/context]\n  (when (and (lib.drill-thru.common/mbql-stage? query stage-number)\n             column\n             (nil? value)\n             (not= (:lib/source column) :source/aggregations)\n             (not (lib.types.isa/primary-key? column))\n             (not (lib.types.isa/structured?  column))\n             (not (lib.types.isa/comment?     column))\n             (not (lib.types.isa/description? column))\n             (not (lib.breakout/breakout-column? query stage-number column)))\n    {:lib/type  :metabase.lib.drill-thru/drill-thru\n     :type      :drill-thru/distribution\n     :column    column}))\n\n(defn- add-temporal-bucketing-or-binning\n  [column]\n  (cond\n    (lib.types.isa/temporal? column)\n    (lib.temporal-bucket/with-temporal-bucket column :month)\n\n    (and (lib.types.isa/numeric? column)\n         (not (lib.types.isa/foreign-key? column)))\n    (lib.binning/with-binning column (lib.binning/default-auto-bin))\n\n    :else\n    column))\n\n(mu/defmethod lib.drill-thru.common/drill-thru-method :drill-thru/distribution :- ::lib.schema/query\n  [query                            :- ::lib.schema/query\n   stage-number                     :- :int\n   {:keys [column] :as _drill-thru} :- ::lib.schema.drill-thru/drill-thru.distribution]\n  (when (lib.drill-thru.common/mbql-stage? query stage-number)\n    (let [breakout (add-temporal-bucketing-or-binning column)]\n      (-> query\n          ;; Remove most of the target stage.\n          (lib.util/update-query-stage stage-number dissoc :aggregation :breakout :limit :order-by)\n          ;; Then set a count aggregation and the breakout above.\n          (lib.aggregation/aggregate stage-number (lib.aggregation/count))\n          (lib.breakout/breakout stage-number breakout)))))\n"]}