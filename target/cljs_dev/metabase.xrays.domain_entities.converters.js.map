{"version":3,"sources":["metabase/xrays/domain_entities/converters.cljs"],"mappings":"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","names":["metabase.xrays.domain-entities.converters/decode-map","schema","_","by-prop","cljs.core.into","iter__5480__auto__","s__80474","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__80476","cljs.core/chunk-buffer","i__80475","vec__80483","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__80473","cljs.core/chunk-rest","vec__80487","cljs.core/first","cljs.core/cons","cljs.core/rest","map-key","props","malli.core.children","or__5002__auto__","cljs.core.get","G__80486","G__80490","metabase.util/->snake_case_en","metabase.util/qualified-name","x","cljs.core/map?","cljs.core/object?","s__80500","b__80502","i__80501","iter__80499","prop","cljs.core/js-keys","js-val","cljs.core.get_in","cljs.core.keyword","metabase.util/->kebab-case-en","cljs.core.ex_info","malli.core.form","metabase.xrays.domain-entities.converters/infer-child-decoder","p1__80517#","mapping","s__80519","b__80521","i__80520","iter__80518","c","cljs.core/Keyword","cljs.core/name","metabase.xrays.domain-entities.converters/infer-child-encoder","p1__80525#","s__80528","b__80530","i__80529","iter__80527","metabase.xrays.domain-entities.converters/decode-map-of","keydec","s__80534","b__80536","i__80535","iter__80533","js/Object.keys","metabase.xrays.domain-entities.converters/encode-map","keyenc","cljs.core/reduce-kv","obj","k","v","metabase.xrays.domain-entities.converters/identity-transformers","cljs.core/zipmap","cljs.core.repeat","cljs.core/identity","metabase.xrays.domain-entities.converters/js-transformer","malli.transform.transformer","p1__80540#","p1__80538#","p1__80539#","p1__80537#","p1__80541#","cljs.core.merge","cljs.core/keyword","cljs.core/parse-uuid","and__5000__auto__","cljs.core/vec","vec__80551","p1__80542#","key-schema","malli.core.decoder","p1__80543#","p1__80546#","cljs.core/namespace","cljs.core/str","cljs.core/clj->js","p1__80545#","js-props","s__80555","b__80557","i__80556","vec__80564","iter__80554","vec__80568","G__80572","metabase.xrays.domain-entities.converters/incoming","metabase.xrays.domain-entities.converters/outgoing","malli.core.encoder","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.xrays.domain-entities.converters\n  (:require\n    [malli.core :as mc]\n    [malli.transform :as mtx]\n    [metabase.util :as u]))\n\n(defn- decode-map [schema _]\n  (let [by-prop (into {} (for [[map-key props] (mc/children schema)]\n                           [(or (get props :js/prop)\n                                (u/->snake_case_en (u/qualified-name map-key)))\n                            {:map-key map-key}]))]\n    {:enter (fn [x]\n              (cond\n                (map? x) x\n                (object? x)\n                (into {} (for [prop (js-keys x)\n                               :let [js-val  (unchecked-get x prop)\n                                     map-key (or (get-in by-prop [prop :map-key])\n                                                 (keyword (u/->kebab-case-en prop)))]]\n                           [map-key js-val]))))\n     :leave (fn [x]\n              (if (object? x)\n                (throw (ex-info \"decode-map leaving with a JS object not a CLJS map\"\n                                {:value  x\n                                 :schema (mc/form schema)}))\n                x))}))\n\n(defn- infer-child-decoder [schema _]\n  (let [mapping (into {} (for [c (mc/children schema)]\n                           (if (keyword? c)\n                             [(name c) c]\n                             [c c])))]\n    {:enter #(mapping % %)}))\n\n(defn- infer-child-encoder [schema _]\n  (let [mapping (into {} (for [c (mc/children schema)]\n                           (if (keyword? c)\n                             [c (name c)]\n                             [c c])))]\n    {:enter #(mapping % %)}))\n\n(defn- decode-map-of [keydec x]\n  (cond\n    (map? x)    x\n    (object? x) (into {} (for [prop (js/Object.keys x)]\n                           [(keydec prop) (unchecked-get x prop)]))))\n\n(defn- encode-map [x keyenc]\n  (cond\n    (object? x) x\n    (map? x) (reduce-kv (fn [obj k v]\n                          (unchecked-set obj (keyenc k) v)\n                          obj)\n                        #js {}\n                        x)))\n\n(def ^:private identity-transformers\n  (-> ['string? :string\n       'number? :number\n       'int?    :int\n       'double? :double\n       'float?  :float]\n      (zipmap (repeat {:enter identity}))))\n\n(def js-transformer\n  \"Malli transformer for converting JavaScript data to and from CLJS data.\n\n  This is a bit more flexible than a JSON transformer. In particular, it normalizes the keys of `:map`\n  schema objects to `:kebab-case-keywords`, and restores them to strings with the original spelling when\n  converting back.\n\n  **On keyword conversion**\n\n  Note that `\\\"snake_case\\\"` is the default spelling we expect in the JS data.\n  This can be overridden with the `{:js/prop \\\"correctSpelling\\\"}` property on the schema, eg.\n  ```\n  [:map\n   [:camel-case {:js/prop \\\"camelCase\\\"} string?]\n   [:kebab-case {:js/prop \\\"kebab-case\\\"} number?]\n   [:snake-case [:enum \\\"foo\\\" \\\"bar\\\"]]]\n  ```\n\n  Observe that `:snake-case` does not need a `:js/prop` setting, since that is the default.\n\n  **On `:map-of`**\n\n  Note that `:map-of` is not `:map`. The spelling of the keys in a `:map-of` is not changed. If the key\n  schema is `keyword?`, they will be converted to keywords and back, but with the original spelling.\n\n  **On sequences**\n  `:tuple`, `:vector` and `:sequential` all get transformed into CLJS vectors. When converting back to JS,\n  they are JS arrays.\"\n  (mtx/transformer\n    {:name :js\n     :decoders\n     (merge identity-transformers\n            {:keyword           keyword\n             'keyword?          keyword\n             :qualified-keyword keyword\n             :uuid              parse-uuid\n             :vector            {:enter #(and % (vec %))}\n             :sequential        {:enter #(and % (vec %))}\n             :tuple             {:enter #(and % (vec %))}\n             :cat               {:enter #(and % (vec %))}\n             :catn              {:enter #(and % (vec %))}\n             :enum              {:compile infer-child-decoder}\n             :=                 {:compile infer-child-decoder}\n             :map               {:compile decode-map}\n             :map-of            {:compile (fn [schema _]\n                                            (let [[key-schema] (mc/children schema)\n                                                  keydec (mc/decoder key-schema js-transformer)]\n                                              {:enter #(decode-map-of keydec %)}))}})\n     :encoders\n     (merge identity-transformers\n            {:keyword           name\n             'keyword?          name\n             :qualified-keyword #(str (namespace %) \"/\" (name %))\n             :uuid              str\n             :vector            {:leave clj->js}\n             :sequential        {:leave clj->js}\n             :tuple             {:leave clj->js}\n             :enum              {:compile infer-child-encoder}\n             :=                 {:compile infer-child-encoder}\n             :map               {:compile\n                                 (fn [schema _]\n                                   (let [js-props (into {} (for [[k props] (mc/children schema)\n                                                                 :when (:js/prop props)]\n                                                             [k (:js/prop props)]))\n                                         keyenc   (fn [k] (or (get js-props k)\n                                                              (u/->snake_case_en (u/qualified-name k))))]\n                                     {:leave #(encode-map % keyenc)}))}\n             :map-of            {:leave #(encode-map % name)}})}))\n\n(defn incoming\n  \"Returns a function for converting a JS value into CLJS data structures, based on a schema.\"\n  [schema]\n  ;; TODO This should be a mc/coercer that decodes and then validates, throwing if it doesn't match.\n  ;; However, enabling that now breaks loads of tests that pass input data with lots of holes. The JS\n  ;; tests (as opposed to TS) are particularly bad for this.\n  ;; Don't forget the nested `mc/decoder` calls elsewhere in this file!\n  (mc/decoder schema js-transformer))\n\n(defn outgoing\n  \"Returns a function for converting a CLJS value back into a plain JS one, based on its schema.\"\n  [schema]\n  (mc/encoder schema js-transformer))\n"]}