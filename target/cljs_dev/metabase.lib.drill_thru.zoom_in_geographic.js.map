{"version":3,"sources":["metabase/lib/drill_thru/zoom_in_geographic.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA,+DAAA,mFAAA,wDAAA,qHAAA,mFAAA,mDAAA,mFAAA,iEAAA,wHAAA,mFAAA,gEAAA,wHAAA,mFAAA,8DAAA,mFAAA,+FAAA,mFAAA,+DAAA,mFAAA,pgDAAeA,uvCAMUC,oUACAA;AAEzB;;;;kEAAA,6FAAAC,/JAAmBI,4IAChBC,MACAC;AAFH,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;cAAAA,VAGqBO;UAHrB,AAAAL,4CAAAF,eAAA,jEAGWM;AAHX,AAIE,IAAMI,QAAM,AAACC,8BAAqBP,MAAMC;IAAxCG,aAE8B,AAACM,eACC,WAAKC;AAAL,AACE,IAAAC,qBAAsB,AAACC,qDAAaC,uCAAwBH;AAA5D,AAAA,oBAAAC;AAAA,AAAA,iBAAAA,bAAWJ;AAAX,AACE,IAAAI,yBAAsB,AAACC,qDAAaE,wCAAyBJ;AAA7D,AAAA,oBAAAC;AAAA,AAAA,iBAAAA,bAAWH;AAAX,AAAA,0FACGD,WAAWC;;AADd;;;AADF;;GAFJ,mFAKG,AAACO,iFAA0ChB,MAAMC,aAAaK,OAC9D,AAACW,gFAAyCjB,MAAMC,aAAaK;iBAR9F,AAAAD,4CAAAD,WAAA,IAAA,xEAEOI;iBAFP,AAAAH,4CAAAD,WAAA,IAAA,xEAEkBK;AAFlB,AASE,oBAAM,iBAAAS,oBAAKV;AAAL,AAAA,oBAAAU;AAAgBT;;AAAhBS;;;AAAN,AACE,yBAAA,+FAAuBC,MAAMC;AAA7B,AACU,oBAAI,AAAA,gFAAKD;AACP,OAACE,6CAAE,AAAA,gFAAKF,OAAO,AAAA,gFAAKC;;AACpB,OAACC,6CAAE,AAAA,yHAA2BF,OAAO,AAAA,yHAA2BC;;;mBAH5E,yFAIuBE;AAJvB,AAKU,OAACZ,eACC,WAAKa;AAAL,AACE,oBAAM,AAACC,mBAAaF,OAAO,AAAA,uFAASC;AAApC,AACE,OAAA,oFAAQA;;AADV;;GAEFrB;;AATZ,AAUE,oEAAA,8HAAA,2EAAA,uFAAA,7VAACuB,qDAAMtB,yEACYK,6HACAC,yEACD,AAACiB,aAAalB,2EACd,AAACkB,aAAajB;;AAfpC;;;AAqBJ;;;;yFAAA,iGAAAkB,1LAAmBE,mMAEhBG;AAFH,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAA/B,4BAAA+B;eAAAA,XACoDG;aADpD,AAAAjC,4CAAA8B,eAAA,pEACWN;YADX,AAAAxB,4CAAA8B,eAAA,nEACkBE;iBADlB,AAAAhC,4CAAA8B,eAAA,xEACwBpB;iBADxB,AAAAV,4CAAA8B,eAAA,xEACmCnB;AADnC,AAGE,oBAAMqB;AAAN,AAAA,kDAAA,0DAAA,6GAAA,qDAAA,oGAAA,4DAAA,0KAAA,gEAAA,4DAAA,4DAAA,2CAAA,oEAAA,yFAAA,gEAAA,2CAAA,oEAAA,tfAIcR,6DACAQ,sKACYtB,0EACAwB,8LACAvB,0EACAuB;;AAT1B;;;AAWF;;;;8EAAA,sFAAAC,pKAAmBE;AAAnB,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAArC,4BAAAqC;cAAAA,VACwB/B;aADxB,AAAAL,4CAAAoC,eAAA,pEACWZ;AADX,AAEE,oBAAM,iBAAAc,WAAQd;AAAR,AAAA,GAAA,CAAAc,YAAA;AAAA;;AAAA,6CAAAA,tCAAeC;;;AAArB,AACE,sGAAA,/FAACR,uFAAyC1B;;AAD5C;;;AAGF;;;;4EAAA,oFAAAmC,hKAAmBE;AAAnB,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA1C,4BAAA0C;cAAAA,VACwBpC;aADxB,AAAAL,4CAAAyC,eAAA,pEACWjB;AADX,AAEE,oBAAM,iBAAAmB,WAAQnB;AAAR,AAAA,GAAA,CAAAmB,YAAA;AAAA;;AAAA,2CAAAA,pCAAeC;;;AAArB,AACE,sGAAA,/FAACb,uFAAyC1B;;AAD5C;;;AAGF;;;;2EAAA,mFAAAwC,9JAAmBE;AAAnB,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA/C,4BAAA+C;cAAAA,VACwBzC;aADxB,AAAAL,4CAAA8C,eAAA,pEACWtB;AADX,AAEE,oBAAM,iBAAAwB,WAAQxB;AAAR,AAAA,GAAA,CAAAwB,YAAA;AAAA;;AAAA,0CAAAA,nCAAeC;;;AAArB,AACE,sGAAA,/FAAClB,uFAAyC1B;;AAD5C;;;AAGF;;;;qFAAA,mHAAA6C,xMAAmBE,kLAChBC;AADH,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAApD,4BAAAoD;eAAAA,XAE2DlB;iBAF3D,AAAAjC,4CAAAmD,eAAA,xEAEWzC;iBAFX,AAAAV,4CAAAmD,eAAA,xEAEsBxC;gBAFtB,AAAAX,4CAAAmD,eAAA,vEAEiCG;gBAFjC,AAAAtD,4CAAAmD,eAAA,vEAE2CI;AAF3C,AAGE,oBAAM,iBAAAnC,oBAAKkC;AAAL,AAAA,oBAAAlC;AACKmC;;AADLnC;;;AAAN,AAEE,IAAAN,qBAAsC,AAAC4C,uCAA8BL,sBAAsB3C,WAAW4C;AAAtG,AAAA,oBAAAxC;AAAA,AAAA,IAAA0C,aAAA1C;IAAA0C,iBAAA,AAAAzD,4BAAAyD;oBAAA,AAAAxD,4CAAAwD,eAAA,3EAAYC;AAAZ,AACE,IAAA3C,yBAAsC,AAAC4C,uCAA8BL,sBAAsB1C,WAAW4C;AAAtG,AAAA,oBAAAzC;AAAA,AAAA,IAAA6C,aAAA7C;IAAA6C,iBAAA,AAAA5D,4BAAA4D;oBAAA,AAAA3D,4CAAA2D,eAAA,3EAAYC;AAAZ,AACE,IAAAC,aAA4C,4DAAA,mFAAA,KAAA,aAAA,/JAAI,EAAK,kBAAA,jBAAIJ,4BACJ,kBAAA,jBAAIG,kNAEV,iBAAA,hBAAGH,sBACH,iBAAA,hBAAGG;wBAJlD,AAAArD,4CAAAsD,WAAA,IAAA,/EAAOC;wBAAP,AAAAvD,4CAAAsD,WAAA,IAAA,/EAAyBE;AAAzB,AAAA,kDAAA,0DAAA,6GAAA,qDAAA,oGAAA,4DAAA,kKAAA,4DAAA,2CAAA,oEAAA,iFAAA,4DAAA,qFAAA,gEAAA,2CAAA,oEAAA,iFAAA,4DAAA,ziBAQ0BrD,0EACAoD,oEACAR,2DACA,CAAGA,YAAUG,2LACb9C,0EACAoD,oEACAR,2DACA,CAAGA,YAAUK;;AAhBzC;;;AADF;;;AAFF;;;AAqBF;;;;;;;;;sEAAA,iGAAAI,vKAASE,oJAINhE,MACAC;AALH,AAAA,IAAA8D,aAAAD;IAAAC,iBAAA,AAAAlE,4BAAAkE;cAAAA,VAMuB5D;YANvB,AAAAL,4CAAAiE,eAAA,nEAMWjC;AANX,AAOE,oBAAMA;AAAN,AACE,IAAAlB,qBAAmB,AAACb,gEAAqBC,MAAMC,aAAaE;AAA5D,AAAA,oBAAAS;AAAA,AAAA,kBAAAA,dAAWT;AAAX,AACE,OAACO,eAAK,WAAKuD;AAAL,AACE,QAACA,kCAAAA,+CAAAA,fAAE9D,2BAAAA;GADX,mFAEOgC,4EACAK,0EACAK,yEACA,AAACqB,gDAAQhB,mFAAqClD;;AANvD;;;AADF;;;AAaF;;;;mEAAA,nEAAmBmE,8IAChBnE,MACAC,aACAqB,OACA8C;AAJH,AAKE,cAAA,2CAAA,8DAAA,+DAAA,lLAAMC,iPACoBD;AAD1B,AAEE,IAAAE,qBAA2B,AAACE,gBAAM,AAACC,uEAAgCzE,MAAMC,aAAaqB;AAAtF,AAAA,oBAAAgD;AAAA,wBAAAA,pBAASC;AAAT,AACE,IAAMG,eAAa,AAACC,kCAAyBJ,kBAAkBF;AAA/D,AACE,OAACO,yEAAkC5E,MAAMC,aAAasE,kBAAkBG;;AAC1E,OAACG,6DAAsB7E,MAAMC,aAAa,AAAC0E,kCAAyBrD,OAAO+C;;;AAEjF;;;;2EAAA,sGAAAS,jLAAmBI,8JAChBlF,MACAC;AAFH,AAAA,IAAA8E,aAAAD;IAAAC,iBAAA,AAAAlF,4BAAAkF;IAAAC,aAAA,AAAAlF,4CAAAiF,eAAA;IAAAC,iBAAA,AAAAnF,4BAAAmF;UAAA,AAAAlF,4CAAAkF,eAAA,jEAGKG;oBAHL,AAAArF,4CAAAkF,eAAA,3EAGkBzB;IAHlB0B,aAAA,AAAAnF,4CAAAiF,eAAA;IAAAE,iBAAA,AAAApF,4BAAAoF;UAAA,AAAAnF,4CAAAmF,eAAA,jEAIKG;oBAJL,AAAAtF,4CAAAmF,eAAA,3EAIkBvB;AAJlB,yIAKM1D,jEACA,AAACmE,uEAAsBlE,aAAakF,IAAI5B,hKACxC,OAACY,wKAAsBlE,aAAamF,IAAI1B;;AAE9C;;;;+FAAA,0HAAA2B,zNAAmBE,sMAChBvF,MACAC;AAFH,AAAA,IAAAqF,aAAAD;IAAAC,iBAAA,AAAAzF,4BAAAyF;YAAAA,RAG8BE;aAH9B,AAAA1F,4CAAAwF,eAAA,pEAGWhE;YAHX,AAAAxB,4CAAAwF,eAAA,nEAGkBxD;AAHlB,kOAIM9B,zFACA,AAACyF,+FAAkDxF,aAAaqB,rKAEhE,AAACoE,6KAAkBzF,aAAa,AAAC0F,yBAAarE,OAAOQ,1SACrD,OAACoD,2SAA8BjF,aAAauF;;AAElD;;;;2FAAA,sHAAAI,jNAAmBI,8LAChBhG,MACAC;AAFH,AAAA,IAAA4F,aAAAD;IAAAC,iBAAA,AAAAhG,4BAAAgG;YAAAA,RAKQL;IALRM,aAAA,AAAAhG,4CAAA+F,eAAA;IAAAC,iBAAA,AAAAjG,4BAAAiG;UAAA,AAAAhG,4CAAAgG,eAAA,jEAGKX;cAHL,AAAArF,4CAAAgG,eAAA,rEAGkBG;cAHlB,AAAAnG,4CAAAgG,eAAA,rEAGgCI;IAHhCH,aAAA,AAAAjG,4CAAA+F,eAAA;IAAAE,iBAAA,AAAAlG,4BAAAkG;UAAA,AAAAjG,4CAAAiG,eAAA,jEAIKX;cAJL,AAAAtF,4CAAAiG,eAAA,rEAIkBI;cAJlB,AAAArG,4CAAAiG,eAAA,rEAIgCK;AAJhC,oTAMMpG,zDAEA,AAAC0F,+DAAkBzF,aAAa,AAACoG,6BAAclB,IAAIc,tKACnD,AAACP,gLAAkBzF,aAAa,AAACqG,yBAAcnB,IAAIe,nRACnD,AAACR,6RAAkBzF,aAAa,AAACoG,6BAAcjB,IAAIe,pYACnD,AAACT,8YAAkBzF,aAAa,AAACqG,yBAAclB,IAAIgB,xgBACnD,OAAClB,2gBAA8BjF,aAAauF;;AAElD,AAAAe,6FAAA,oGAAA,8BAAAC,nBACGxG,MACAC;AAFH,AAAA,IAAAwG,aAAAD;IAAAC,iBAAA,AAAA5G,4BAAA4G;YAAAA,RAGyBjB;cAHzB,AAAA1F,4CAAA2G,eAAA,rEAGWC;AAHX,AAIE,IAAAC,WAAMD;IAANC,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAEE,OAACpB,6FAA+CvF,MAAMC,aAAauF;;;KAFrE;AAKE,OAACQ,yFAA2ChG,MAAMC,aAAauF;;;;AALjE,MAAA,KAAAqB,MAAA,CAAA,mEAAAF","names":["metabase.lib.drill-thru.zoom-in-geographic/ContextWithLatLon","cljs.core/number?","p__79440","map__79442","cljs.core/--destructure-map","cljs.core.get","metabase.lib.drill-thru.zoom-in-geographic/context-with-lat-lon","query","stage-number","row","context","vec__79444","cljs.core.nth","stage","metabase.lib.util/query-stage","lat-column","lon-column","cljs.core/some","columns","temp__5804__auto__","medley.core.find_first","metabase.lib.types.isa/latitude?","metabase.lib.types.isa/longitude?","metabase.lib.metadata.calculation.returned_columns","metabase.lib.metadata.calculation.visible_columns","and__5000__auto__","col-x","col-y","cljs.core._EQ_","column","row-value","same-column?","cljs.core.assoc","column-value","p__79452","map__79453","metabase.lib.drill-thru.zoom-in-geographic/country-state-city->binned-lat-lon-drill","value","_context","lat-lon-bin-width","p__79454","map__79455","metabase.lib.drill-thru.zoom-in-geographic/country->binned-lat-lon-drill","G__79456","metabase.lib.types.isa/country?","p__79459","map__79460","metabase.lib.drill-thru.zoom-in-geographic/state->binned-lat-lon-drill","G__79461","metabase.lib.types.isa/state?","p__79462","map__79463","metabase.lib.drill-thru.zoom-in-geographic/city->binned-lat-lon-drill","G__79464","metabase.lib.types.isa/city?","p__79465","map__79466","metabase.lib.drill-thru.zoom-in-geographic/binned-lat-lon->binned-lat-lon-drill","metadata-providerable","lat-value","lon-value","map__79467","lat-bin-width","metabase.lib.binning/resolve-bin-width","map__79468","lon-bin-width","vec__79470","new-lat-bin-width","new-lon-bin-width","p__79474","map__79481","metabase.lib.drill-thru.zoom-in-geographic/zoom-in-geographic-drill","f","cljs.core.partial","metabase.lib.drill-thru.zoom-in-geographic/add-or-update-binning","bin-width","binning","temp__5802__auto__","existing-breakout","cljs.core/first","metabase.lib.breakout.existing_breakouts","new-breakout","metabase.lib.binning/with-binning","metabase.lib.remove_replace.replace_clause","metabase.lib.breakout.breakout","p__79490","map__79491","map__79492","map__79493","metabase.lib.drill-thru.zoom-in-geographic/add-or-update-lat-lon-binning","lat","lon","p__79495","map__79496","metabase.lib.drill-thru.zoom-in-geographic/apply-country-state-city->binned-lat-lon-drill","drill","metabase.lib.breakout.remove_existing_breakouts_for_column","metabase.lib.filter.filter","metabase.lib.filter/=","p__79504","map__79505","map__79506","map__79507","metabase.lib.drill-thru.zoom-in-geographic/apply-binned-lat-lon->binned-lat-lon-drill","lat-min","lat-max","lon-min","lon-max","metabase.lib.filter/>=","metabase.lib.filter/<","metabase.lib.drill-thru.common/drill-thru-method","p__79509","map__79510","subtype","G__79511","cljs.core/Keyword","js/Error"],"sourcesContent":["(ns metabase.lib.drill-thru.zoom-in-geographic\n  \"\\\"Zoom\\\" transform for different geo semantic types.\n\n  Entry points:\n\n  - Cell\n\n  - Pivot cell\n\n  - Legend item\n\n  Possible transformations:\n\n  - Country -> State\n\n  - Country -> LatLon(10)\n\n  - State -> LatLon(1)\n\n  - City -> LatLon(0.1)\n\n  - LatLon -> LatLon\n\n  Query transformation follows rules from other `zoom-in` transforms, however new breakout columns are handled\n  differently for each type.\n\n  - Country -> State. If a column with `type/State` semantic type exists, add a filter based on the selected country\n    and breakout by State.\n\n  - Country -> LatLon(10). If there is no `type/State` column available but there are `type/Latitude` and\n    `type/Longitude` columns, add a filter based on the selected country and 2 breakouts (latitude and longitude)\n    using \\\"Every 10 degrees\\\" binning strategy.\n\n  - State -> LatLon(1). Add a filter based on the selected state and 2 breakouts (latitude and longitude) using \\\"Every 1\n    degree\\\" binning strategy.\n\n  - City -> LatLon(0.1). Add a filter based on the selected city and 2 breakouts (latitude and longitude) using \\\"Every\n    0.1 degrees\\\" binning strategy.\n\n  - LatLon -> LatLon. If the binning strategy is more greater than every 20 degrees, change it to 10 degrees. Otherwise\n    divide the value by 10 and use it as the new binning strategy.\n\n  Question transformation:\n\n  - Set default display\n\n  All geographic zooms require both a `:type/Latitude` and a `:type/Longitude` column\n  in [[metabase.lib.metadata.calculation/visible-columns]], not necessarily in the\n  query's [[metabase.lib.metadata.calculation/returned-columns]]. E.g. 'count broken out by state' query should still\n  get presented this drill.\n\n  These drills are only for 'cell' context for specific values.\n\n  Geographic zooms are of the following flavors:\n\n  1. Country, State, or City => Binned LatLon\n\n     1a. If we are breaking out by a `:type/Country` column: remove breakout on country column, and add/replace\n         breakouts on Latitude/Longitude with binning `:bin-width` of 10\u00b0, and add `=` filter for the clicked\n         country value.\n\n     1b. If we have a `:type/State` column, remove breakout on state column, add/replace breakouts on\n         Latitude/Longitude with binning `:bin-width` of 1\u00b0, and add `=` filter for the clicked state value.\n\n     1c. If we have a `:type/City` column, remove breakout on city column, add/replace breakouts on Latitude/Longitude\n         with binning `:bin-width` of 0.1\u00b0, and add `=` filter for the clicked city value.\n\n  2. Binned LatLon => Binned LatLon\n\n     If we have binned breakouts on latitude and longitude:\n\n     2a. With binning `:bin-width` >= 20\u00b0, replace them with `:bin-width` of 10\u00b0 and add `:>=`/`:<` filters for the\n         clicked latitude/longitude values.\n\n     2b. Otherwise if `:bin-width` is < 20\u00b0, replace them with the current `:bin-width` divided by 10, and add\n         `:>=`/`:<` filters for the clicked latitude/longitude values.\"\n  (:require\n   [medley.core :as m]\n   [metabase.lib.binning :as lib.binning]\n   [metabase.lib.breakout :as lib.breakout]\n   [metabase.lib.drill-thru.common :as lib.drill-thru.common]\n   [metabase.lib.filter :as lib.filter]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.remove-replace :as lib.remove-replace]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.binning :as lib.schema.binning]\n   [metabase.lib.schema.drill-thru :as lib.schema.drill-thru]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.lib.util :as lib.util]\n   [metabase.util.malli :as mu]))\n\n(def ^:private ContextWithLatLon\n  [:merge\n   ::lib.schema.drill-thru/context\n   [:map\n    [:lat-column ::lib.schema.metadata/column]\n    [:lon-column ::lib.schema.metadata/column]\n    [:lat-value  [:maybe number?]]\n    [:lon-value  [:maybe number?]]]])\n\n(mu/defn ^:private context-with-lat-lon :- [:maybe ContextWithLatLon]\n  [query                      :- ::lib.schema/query\n   stage-number               :- :int\n   {:keys [row], :as context} :- ::lib.schema.drill-thru/context]\n  (let [stage (lib.util/query-stage query stage-number)\n        ;; First check returned columns in case we breakout by lat/lon so we maintain the binning, othwerwise check visible.\n        [lat-column lon-column] (some\n                                  (fn [columns]\n                                    (when-let [lat-column (m/find-first lib.types.isa/latitude? columns)]\n                                      (when-let [lon-column (m/find-first lib.types.isa/longitude? columns)]\n                                        [lat-column lon-column])))\n                                  [(lib.metadata.calculation/returned-columns query stage-number stage)\n                                   (lib.metadata.calculation/visible-columns query stage-number stage)])]\n    (when (and lat-column lon-column)\n      (letfn [(same-column? [col-x col-y]\n                (if (:id col-x)\n                  (= (:id col-x) (:id col-y))\n                  (= (:lib/desired-column-alias col-x) (:lib/desired-column-alias col-y))))\n              (column-value [column]\n                (some\n                  (fn [row-value]\n                    (when (same-column? column (:column row-value))\n                      (:value row-value)))\n                  row))]\n        (assoc context\n               :lat-column lat-column\n               :lon-column lon-column\n               :lat-value (column-value lat-column)\n               :lon-value (column-value lon-column))))))\n\n;;;\n;;; available-drill-thrus\n;;;\n\n(mu/defn ^:private country-state-city->binned-lat-lon-drill :- [:maybe ::lib.schema.drill-thru/drill-thru.zoom-in.geographic.country-state-city->binned-lat-lon]\n  [{:keys [column value lat-column lon-column], :as _context} :- ContextWithLatLon\n   lat-lon-bin-width                                          :- ::lib.schema.binning/bin-width]\n  (when value\n    {:lib/type  :metabase.lib.drill-thru/drill-thru\n     :type      :drill-thru/zoom-in.geographic\n     :subtype   :drill-thru.zoom-in.geographic/country-state-city->binned-lat-lon\n     :column    column\n     :value     value\n     :latitude  {:column    lat-column\n                 :bin-width lat-lon-bin-width}\n     :longitude {:column    lon-column\n                 :bin-width lat-lon-bin-width}}))\n\n(mu/defn ^:private country->binned-lat-lon-drill :- [:maybe ::lib.schema.drill-thru/drill-thru.zoom-in.geographic.country-state-city->binned-lat-lon]\n  [{:keys [column], :as context} :- ContextWithLatLon]\n  (when (some-> column lib.types.isa/country?)\n    (country-state-city->binned-lat-lon-drill context 10)))\n\n(mu/defn ^:private state->binned-lat-lon-drill :- [:maybe ::lib.schema.drill-thru/drill-thru.zoom-in.geographic.country-state-city->binned-lat-lon]\n  [{:keys [column], :as context} :- ContextWithLatLon]\n  (when (some-> column lib.types.isa/state?)\n    (country-state-city->binned-lat-lon-drill context 1)))\n\n(mu/defn ^:private city->binned-lat-lon-drill :- [:maybe ::lib.schema.drill-thru/drill-thru.zoom-in.geographic.country-state-city->binned-lat-lon]\n  [{:keys [column], :as context} :- ContextWithLatLon]\n  (when (some-> column lib.types.isa/city?)\n    (country-state-city->binned-lat-lon-drill context 0.1)))\n\n(mu/defn ^:private binned-lat-lon->binned-lat-lon-drill :- [:maybe ::lib.schema.drill-thru/drill-thru.zoom-in.geographic.binned-lat-lon->binned-lat-lon]\n  [metadata-providerable                                             :- ::lib.schema.metadata/metadata-providerable\n   {:keys [lat-column lon-column lat-value lon-value], :as _context} :- ContextWithLatLon]\n  (when (and lat-value\n             lon-value)\n    (when-let [{lat-bin-width :bin-width} (lib.binning/resolve-bin-width metadata-providerable lat-column lat-value)]\n      (when-let [{lon-bin-width :bin-width} (lib.binning/resolve-bin-width metadata-providerable lon-column lon-value)]\n        (let [[new-lat-bin-width new-lon-bin-width] (if (and (>= lat-bin-width 20)\n                                                             (>= lon-bin-width 20))\n                                                      [10 10]\n                                                      [(/ lat-bin-width 10.0)\n                                                       (/ lon-bin-width 10.0)])]\n          {:lib/type  :metabase.lib.drill-thru/drill-thru\n           :type      :drill-thru/zoom-in.geographic\n           :subtype   :drill-thru.zoom-in.geographic/binned-lat-lon->binned-lat-lon\n           :latitude  {:column    lat-column\n                       :bin-width new-lat-bin-width\n                       :min       lat-value\n                       :max       (+ lat-value lat-bin-width)}\n           :longitude {:column    lon-column\n                       :bin-width new-lon-bin-width\n                       :min       lon-value\n                       :max       (+ lon-value lon-bin-width)}})))))\n\n(mu/defn zoom-in-geographic-drill :- [:maybe ::lib.schema.drill-thru/drill-thru.zoom-in.geographic]\n  \"Return a `:drill-thru/zoom-in.geographic` drill if appropriate. See docstring\n  for [[metabase.lib.drill-thru.zoom-in-geographic]] for more information on what circumstances this is returned in\n  and what it means to apply this drill.\"\n  [query                        :- ::lib.schema/query\n   stage-number                 :- :int\n   {:keys [value], :as context} :- ::lib.schema.drill-thru/context]\n  (when value\n    (when-let [context (context-with-lat-lon query stage-number context)]\n      (some (fn [f]\n              (f context))\n            [country->binned-lat-lon-drill\n             state->binned-lat-lon-drill\n             city->binned-lat-lon-drill\n             (partial binned-lat-lon->binned-lat-lon-drill query)]))))\n\n;;;\n;;; Application\n;;;\n\n(mu/defn ^:private add-or-update-binning :- ::lib.schema/query\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   column       :- ::lib.schema.metadata/column\n   bin-width    :- pos?]\n  (let [binning {:strategy  :bin-width\n                 :bin-width bin-width}]\n    (if-let [existing-breakout (first (lib.breakout/existing-breakouts query stage-number column))]\n      (let [new-breakout (lib.binning/with-binning existing-breakout binning)]\n        (lib.remove-replace/replace-clause query stage-number existing-breakout new-breakout))\n      (lib.breakout/breakout query stage-number (lib.binning/with-binning column binning)))))\n\n(mu/defn ^:private add-or-update-lat-lon-binning :- ::lib.schema/query\n  [query                                                :- ::lib.schema/query\n   stage-number                                         :- :int\n   {{lat :column, lat-bin-width :bin-width} :latitude\n    {lon :column, lon-bin-width :bin-width} :longitude} :- ::lib.schema.drill-thru/drill-thru.zoom-in.geographic]\n  (-> query\n      (add-or-update-binning stage-number lat lat-bin-width)\n      (add-or-update-binning stage-number lon lon-bin-width)))\n\n(mu/defn ^:private apply-country-state-city->binned-lat-lon-drill :- ::lib.schema/query\n  [query                             :- ::lib.schema/query\n   stage-number                      :- :int\n   {:keys [column value], :as drill} :- ::lib.schema.drill-thru/drill-thru.zoom-in.geographic.country-state-city->binned-lat-lon]\n  (-> query\n      (lib.breakout/remove-existing-breakouts-for-column stage-number column)\n      ;; TODO -- remove/update existing filter?\n      (lib.filter/filter stage-number (lib.filter/= column value))\n      (add-or-update-lat-lon-binning stage-number drill)))\n\n(mu/defn ^:private apply-binned-lat-lon->binned-lat-lon-drill :- ::lib.schema/query\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   {{lat :column, lat-min :min, lat-max :max} :latitude\n    {lon :column, lon-min :min, lon-max :max} :longitude\n    :as drill} :- ::lib.schema.drill-thru/drill-thru.zoom-in.geographic.binned-lat-lon->binned-lat-lon]\n  (-> query\n      ;; TODO -- remove/update existing filters on these columns?\n      (lib.filter/filter stage-number (lib.filter/>= lat lat-min))\n      (lib.filter/filter stage-number (lib.filter/<  lat lat-max))\n      (lib.filter/filter stage-number (lib.filter/>= lon lon-min))\n      (lib.filter/filter stage-number (lib.filter/<  lon lon-max))\n      (add-or-update-lat-lon-binning stage-number drill)))\n\n(mu/defmethod lib.drill-thru.common/drill-thru-method :drill-thru/zoom-in.geographic :- ::lib.schema/query\n  [query                        :- ::lib.schema/query\n   stage-number                 :- :int\n   {:keys [subtype], :as drill} :- ::lib.schema.drill-thru/drill-thru.zoom-in.geographic]\n  (case subtype\n    :drill-thru.zoom-in.geographic/country-state-city->binned-lat-lon\n    (apply-country-state-city->binned-lat-lon-drill query stage-number drill)\n\n    :drill-thru.zoom-in.geographic/binned-lat-lon->binned-lat-lon\n    (apply-binned-lat-lon->binned-lat-lon-drill query stage-number drill)))\n"]}