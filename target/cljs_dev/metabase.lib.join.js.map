{"version":3,"sources":["metabase/lib/join.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,gCAAA,hCAAOA,wEAAOC;AAAd,AACE,4FAAA,rFAACC,6CAAE,AAACC,qCAA4BF;;AAElC,6BAAA,mFAAA,gDAAA,+GAAA,/QAAeG;AAGf,mCAAA,mFAAA,gDAAA,mFAAA,mDAAA,5SAAeC,wZAGZD;AAEH,AAAA,AAEA;;;;uDAAA,vDAAOE,sHAGJC,KAAKC;AAHR,AAIE,IAAAC,WAAQF;AAAR,AAAA,oBACE,AAAA,wFAASA;AAAM,sDAAAE,SAAA,xDAACC,kHAAe,WAAKC;AAAL,AACE,GAAA,GAAQ,AAACC,4BAAYD;AACnBA;;AACA,OAACE,6CAAK,WAAKC;AAAL,AACE,QAACC,kEAAAA,uFAAAA,vBAAgBD,mEAAAA,zDAAUN,mEAAAA;GAC7BG;;;;AAN3CF;;;AAQF;;;;;;;;;mDAAA,nDAAmBO,8GAIhBC;AAJH,AAKE,oBAAMA;AAAN,AACE,OAAAC,gBAAA,AAAAC,cAAA,AAAAC,+CAAAC,sBAAA,AAAA,yEAAAC,mBAAAC;AAAA,AAAA,IAAA,AAAA,GAAA,EAAA,AAAAC,wBAAAD,uBAAA,CAAA,AAAAE,gBAAAF,sBAAA;AAAA,IAAA,AAAA,IAAAG,4BAAA,AAAAC,4CAAAJ,iBAAA;AAAA,AAAA,GAAA,CAAAG,qCAAAE;AAAA,IAAA,AAAA,IAAAC,4BAAA,AAAAF,4CAAAJ,iBAAA;AAAA,AAAA,GAAA,EAAA,AAAAC,wBAAAK,gCAAA,CAAA,AAAAJ,gBAAAI,+BAAA;AAAA,IAAA,AAAA,IAAAC,qCAAA,AAAAH,4CAAAE,0BAAA;AAAA,AAAA,GAAA,AAAAE,mCAAAD,mCAAA;AAAA,IAAA,AAAA,IAAAE,4BAAA,AAAAL,4CAAAJ,iBAAA;AAAA,AAAA,GAAA,EAAA,AAAAC,wBAAAQ,gCAAA,CAAA,AAAAP,gBAAAO,+BAAA;AAAA,IAAA,AAAA,IAAAC,qCAAA,AAAAN,4CAAAK,0BAAA;AAAA,AAAA,GAAA,AAAAD,mCAAAE,mCAAA;AAAA,gBAAA,AAAAN,4CAAAK,0BAAA,lFAIWe;sBAJX,AAAApB,4CAAAK,0BAAA,xFAIqBgB;gBAJrB,AAAArB,4CAAAE,0BAAA,lFAGWgB;sBAHX,AAAAlB,4CAAAE,0BAAA,xFAGqBiB;gBAHrB,AAAAnB,4CAAAJ,iBAAA,zEACIoB;YADJ,AAAAhB,4CAAAJ,iBAAA,rEAEGqB;AAFH,AAAA,0FAAA;;AAAA,AAAA,MAAAV;;;gBAAA,GAAA,CAAAC,kBAAAC;AAAA,IAAAC,mBAAAF;AAAA,AAAA,GAAA,CAAAE,qBAAAH;AAAA,AAAA,MAAAA;;AAAA,MAAAG;;;AAAA,AAAA,MAAAF;;;;AAAA,AAAA,MAAAD;;;gBAAA,GAAA,CAAAI,kBAAAF;AAAA,IAAAC,mBAAAC;AAAA,AAAA,GAAA,CAAAD,qBAAAH;AAAA,AAAA,MAAAA;;AAAA,MAAAG;;;AAAA,AAAA,MAAAC;;;;AAAA,AAAA,MAAAJ;;;gBAAA,GAAA,CAAAK,kBAAAH;AAAA,IAAAC,mBAAAE;AAAA,AAAA,GAAA,CAAAF,qBAAAH;AAAA,AAAA,MAAAA;;AAAA,MAAAG;;;AAAA,AAAA,MAAAE;;;;AAAA,AAAA,MAAAL;;;gBAAA,GAAA,CAAAM,kBAAAJ;AAAA,IAAAC,mBAAAG;AAAA,AAAA,GAAA,CAAAH,qBAAAH;AAAA,AAAA,MAAAA;;AAAA,MAAAG;;;AAAA,AAAA,MAAAG;;;;AAAA,AAAA,MAAAN;;;gBAAA,GAAA,CAAAO,kBAAAL;AAAA,IAAAC,mBAAAI;AAAA,AAAA,GAAA,CAAAJ,qBAAAH;AAAA,AAAA,MAAAA;;AAAA,MAAAG;;;AAAA,AAAA,MAAAI;;;;AAAA,AAAA,MAAAP;;;gBAAA,GAAA,CAAAQ,kBAAAN;AAAA,IAAAC,mBAAAK;AAAA,AAAA,GAAA,CAAAL,qBAAAH;AAAA,AAAA,0FAAA;;AAAA,MAAAG;;;AAAA,AAAA,MAAAK;;;IAAA,iCAA0BzB;;AAD5B;;;AAUF;;;gDAAA,hDAAOgC,wGAEJhC;AAFH,AAGE,oBAAM,AAACD,iDAAyBC;AAAhC,AACE,IAAAiC,aAAiCjC;gBAAjC,AAAAU,4CAAAuB,WAAA,IAAA,vEAAOP;YAAP,AAAAhB,4CAAAuB,WAAA,IAAA,nEAAiBN;UAAjB,AAAAjB,4CAAAuB,WAAA,IAAA,jEAAuBC;WAAvB,AAAAxB,4CAAAuB,WAAA,IAAA,lEAA2BE;AAA3B,AACED;;AAFJ;;;AAIF;;;gDAAA,hDAAOE,wGAEJpC;AAFH,AAGE,oBAAM,AAACD,iDAAyBC;AAAhC,AACE,IAAAqC,aAAiCrC;gBAAjC,AAAAU,4CAAA2B,WAAA,IAAA,vEAAOX;YAAP,AAAAhB,4CAAA2B,WAAA,IAAA,nEAAiBV;WAAjB,AAAAjB,4CAAA2B,WAAA,IAAA,lEAAuBC;UAAvB,AAAA5B,4CAAA2B,WAAA,IAAA,jEAA4BE;AAA5B,AACEA;;AAFJ;;;AAIF,AAAA;;;;;uDAAA,+DAAAC,tHAAOM;AAAP,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,0FAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,4FAAA,5FAAOE,uGAIJ9C,UAAUoD,EAAIC;AAJjB,AAKE,GAAA,AAAAC,cAAQ,AAACvD,iDAAyBC;AAChCA;;AACA,IAAAuD,aAA8BvD;eAA9B,AAAAU,4CAAA6C,WAAA,IAAA,tEAAOC;WAAP,AAAA9C,4CAAA6C,WAAA,IAAA,lEAAgBE;UAAhB,AAAA/C,4CAAA6C,WAAA,IAAA,jEAAqBrB;UAArB,AAAAxB,4CAAA6C,WAAA,IAAA,jEAAyBhB;AAAzB,AAAA,0FACGiB,SAASC,KAAKvB,IAAI,AAACwB,8CAAMN,EAAEb,IAAIc;;;;AARtC,CAAA,+EAAA,/EAAOP;;AAAP;AAAA,CAAA,yEAAA,WAAAC,pFAAOD;AAAP,AAAA,IAAAE,WAAA,AAAA/C,gBAAA8C;IAAAA,eAAA,AAAAE,eAAAF;IAAAG,WAAA,AAAAjD,gBAAA8C;IAAAA,eAAA,AAAAE,eAAAF;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAE,SAAAH;;;AAAA,AAUA;;;;;;;;;;;;;;;;2DAAA,3DAAmBY,8HAWhBrE,KACAsE,UACArE;AAbH,AAcE,GACE,AAACsE,uBAAO,AAAA,gGAAavE;AACrBA;;AAFF,oBAKEsE;AACA,OAAAE,yDAAA,mFAAA,0EAAA,WAAAC,7KAA2BzE;AAA3B,AAAA,OAAA,mFAAAe,mBAAAC;AAAA,AAAA,IAAA,AAAA,GAAA,EAAA,AAAAC,wBAAAD,uBAAA,CAAA,AAAAE,gBAAAF,sBAAA;AAAA,IAAA,AAAA,IAAA0D,4BAAA,AAAAtD,4CAAAJ,iBAAA;AAAA,AAAA,GAAA,AAAAQ,mCAAAkD,0BAAA;AAAA,IAAA,AAAA,IAAAC,4BAAA,AAAAvD,4CAAAJ,iBAAA;AAAA,AAAA,GAAA,EAAA,GAAA,CAAA2D,6BAAA,SAAA,EAAA,EAAA,CAAA,AAAAA,gEAAA,YAAA,CAAAC,gCAAA,AAAAD,iDAAA,KAAA,EAAA,EAAA,AAAAA,gEAAA,AAAAE,kCAAAC,kBAAAH,2BAAA,QAAA,AAAAE,kCAAAC,kBAAAH;AAAA,IAAA,AAAA,IAAAI,8CAAA,AAAAC,4CAAAL,0BAAA,iEAAA;AAAA,AAAA,GAAA,AAAAhF,6CAAAoF,4CACuBT;AADvB,kBAAA,AAAAlD,4CAAAJ,iBAAA,3EACkCuE;AADlC,AAAA,QAEG/E,kEAAAA,8FAAAA,9BAAgBQ,0EAAAA,zDAAOf,0EAAAA;;AAF1B,AAAA,MAAA0B;;;gBAAA,GAAA,CAAAsD,kBAAApD;AAAA,IAAAC,mBAAAmD;AAAA,AAAA,GAAA,CAAAnD,qBAAAH;AAAA,AAAA,MAAAA;;AAAA,MAAAG;;;AAAA,AAAA,MAAAmD;;;;AAAA,AAAA,MAAAtD;;;gBAAA,GAAA,CAAAuD,kBAAArD;AAAA,IAAAC,mBAAAoD;AAAA,AAAA,GAAA,CAAApD,qBAAAH;AAAA,AAAA,MAAAA;;AAAA,MAAAG;;;AAAA,AAAA,MAAAoD;;;;AAAA,AAAA,MAAAvD;;;gBAAA,GAAA,CAAAwD,kBAAAtD;AAAA,IAAAC,mBAAAqD;AAAA,AAAA,GAAA,CAAArD,qBAAAH;AAAA,AAAA,MAAAA;;AAAA,MAAAG;;;AAAA,AAAA,MAAAqD;;;;AAAA,AAAA,MAAAxD;;;gBAAA,GAAA,CAAAyD,kBAAAvD;AAAA,IAAAC,mBAAAsD;AAAA,AAAA,GAAA,CAAAtD,qBAAAH;AAAA,AAAA,OAAA0D,mDAAAC,yEAAAvE,mBAAAC;;AAAA,MAAAc;;;AAAA,AAAA,MAAAsD;;;IAAA,iCAAAX;;;AANF,AAaE,2DAAA,pDAACtE,+CAAOH,uEAAiB,WAAKwF;AAAL,AACE,OAAClF,6CAAK,WAAKI;AAAL,AACE,OAAC+E,0FAAmC/E,UAAUF,oFAAgBP;GAChEuF;;;;;;AAErC;;;gDAAA,hDAAOE,wGAEJ1F,KAAKC;AAFR,AAGE,IAAMqE,YAAU,AAACqB,0CAAiC3F;AAAlD,gJACMA,3BACA,gCAAA,hCAAC4F,wFAAsB3F,7IACvB,AAACF,wJAAmCE,xNACpC,OAACoE,4NAAuCC,UAAUrE;;AAE1D;;;;;;;;oCAAA,pCAASO,gFAINqF,cACAC;AALH,AAME,IAAAC,WAAM,AAACnG,qCAA4BiG;IAAnCE,eAAA,EAAA,CAAAA,oBAAA1E,oBAAA,AAAA0E,aAAA;AAAA,AAAA,QAAAA;KAAA;AAEE,2KAAA,pKAACC,yEAA2BH,cAAcD,8IAA2BE;;;KAFvE;AAKE,gDAAA,zCAACF,2BAAeC,gHAA2BC;;;KAL7C;AAQE,OAACJ,8CAA4BG,cAAcC;;;;AAI3C,AAAI,IAAAG,6BAAA,AAAAC,8BAAA;IAAAC,8BAAA;AAAA,AAAA,oBAAA,AAAAC,qCAAAD,4BAAAF;AAAA,AAAA,IAAAI,yBAAA;AAAA,AAAA,GAAA,CAAAA,kCAAAxE;AAAA,AAAAyE,qDAAAH,4BAAAF,2BAAA,AAAAM,6OAAAF,lIAAuD,AAACG,wGAAOX;;AAA/D,AAAAS,qDAAAH,4BAAAF,2BAAA,AAAAM,2GAAAF,yJAAA,lIAAuD,AAACG,wGAAOX;;;AAA/D;;AACAA;;;;AAER;;;;;;;iCAAA,jCAASY,0EAENC,MACAC,aACAb;AAJH,AAKE,IAAAc,aAAsB,AAACG,8BAAqBL,MAAMC;IAAlDC,iBAAA,AAAAC,4BAAAD;YAAA,AAAA5B,4CAAA4B,eAAA,nEAAcE;AAAd,AACE,IAAAE,mBAAI,qDAAA,WAAAC,hEAACC;AAAD,AAAe,OAACvH,6CAAE,AAAA,sFAAAsH,kBAAWnB;GACfgB;AADlB,AAAA,oBAAAE;AAAAA;;AAEI,MAAO,kiBAAA,2CAAA,4EAAA,8DAAA,vtBAACG,gDAAQ,AAAAC,uEAAA,kFACU,AAACZ,wGAAOV,iBACR,AAACU,wGAAO,6CAAA,7CAAClG,qGAAYwG,+HAChBhB,mEACAY,4EACAC;;;AAEvC,AAAAU,kGAAA,4DAAA,+BAAAC,pBACGZ,MAAMgB,uBAA0FK;AADnG,AAAA,IAAAR,aAAAD;IAAAC,iBAAA,AAAAV,4BAAAU;YAAAA,RAC4FO;IAD5FN,aAAA,AAAAxC,4CAAAuC,eAAA;IAAAE,aAAA,AAAArG,4CAAAoG,WAAA,IAAA;IAAAC,iBAAA,AAAAZ,4BAAAY;mBAAAA,fACgEI;mBADhE,AAAA7C,4CAAAyC,eAAA,1EACiCE;kBADjC,AAAA3C,4CAAAyC,eAAA,zEAC8CG;AAD9C,AAEE,IAAAZ,mBACC,gCAAA,mJAAA,jKAAMW,cACJ,AAAA,kGAAe,AAACK,4BAAmBtB,MAAMiB;AAF5C,AAAA,oBAAAX;AAAAA;;AAAA,IAAAA,uBAGC,+BAAA,bAAMY,aACJ,iBAAAK,qBAAuB,AAACE,2BAAkBzB,MAAMkB;AAAhD,AAAA,oBAAAK;AAAA,oBAAAA,hBAASC;AAAT,AACE,0FAAA,nFAACE,6EAAsC1B,UAAQwB;;AAC/C,OAACG,wCAA+BT;;KAHpC;AAHD,AAAA,oBAAAZ;AAAAA;;AAOC,OAAAsB,kCAAA;;;;AAEH,AAAAC,kGAAA,4DAAA,WACG7B,MAAMC,aAAa3G;AADtB,AAEE,IAAMwI,eAAa,AAACJ,6EAAsC1B,MAAMC,aAAa3G;AAA7E,AAAA,kDAAA,qDACS,iBAAAgH,mBAAI,AAAA,sFAAQhH;AAAZ,AAAA,oBAAAgH;AAAAA;;AAAkBwB;;KAD3B,oEACwDA;;AAE1D,AAAAC,8FAAA,4DAAA,WACGC,OAAOhB,cAAciB;AADxB,AAGE,MAAO,gDAAA,+GAAA,/JAACxB;;AAGV;;;;;;;;4CAAA,5CAAmByB,gGAGhBlC,MACAC,aACAkC,gBACA/C;AANH,AAOE,IAAM+C,sBAAgB,8DAAA,9DAACC,8CAAMD,qFAA8B/C;IACrDiD,wCAAoB,yEAAA,2OAAA,8DAAA,lXAACD,qDAAMD,wFACc,AAACT,6EAAsC1B,MAAMC,aAAakC,/QAE/E,AAACrI,4dAAgBsF;AAJ3C,AAKE,GAAQ,AAACnG,6CAAE,AAACgG,0CAAiCoD,KAAKjD;AAAlD;AAAA,AAAA,MAAA,KAAAjE,MAAA;;;AACAkH;;AAEJ,AAAA1B,kGAAA,kFAAA,gCAAA2B,rBACGN,OAAOhB,uBAAiCK;AAD3C,AAAA,IAAAkB,aAAAD;IAAAC,iBAAA,AAAApC,4BAAAoC;eAAA,AAAAjE,4CAAAiE,eAAA,tEACgCC;AADhC,AAEE,IAAAC,WAAMD;IAANC,eAAA,EAAA,CAAAA,oBAAA9H,oBAAA,AAAA8H,aAAA;AAAA,AAAA,QAAAA;KAAA;AACc,OAAAb,kCAAA;;;KADd;AAEc,OAAAA,kCAAA;;;KAFd;AAGc,OAAAA,kCAAA;;;KAHd;AAIc,OAAAA,kCAAA;;;;AAJd,MAAA,KAAAzG,MAAA,CAAA,mEAAAsH;;;;AAMF,AAAAZ,kGAAA,kFAAA,8BAAAa,nBACG1C,MAAMC;AADT,AAAA,IAAA0C,aAAAD;IAAAC,iBAAA,AAAAxC,4BAAAwC;aAAAA,TACqDE;eADrD,AAAAvE,4CAAAqE,eAAA,tEAC8BH;eAD9B,AAAAlE,4CAAAqE,eAAA,tEACuCC;AADvC,AAEE,IAAAE,WAAA,2CAAA,yGAAA,vCAAuB,AAACC,6BAAiBP,8EAClB,AAACd,6EAAsC1B,MAAMC,aAAa4C;AADjF,AAAA,oBAEED;AAAQ,qDAAAE,SAAA,4DAAA,nHAACV;;AAFXU;;;AAIF;;;;mDAAA,nDAAmBE,8GAChB1J,KAIA2J,eACAZ;AANH,AAOE,gEAAA,6UAAA,tYAACD,qDAAMC,4FAC0B,AAAC,gDAAA,wFAAA,xIAACa,8LAAwCb,kJAC1C,iBAAAc,WAAgB,AAACC,kDACA,AAAA,sFAAQ9J,MACR,AAAC,gDAAA,wFAAA,xIAAC4J,8LAAwCb;AAF3D,AAAA,oGAAAc,qCAAAA,jIAACF,+CAAAA,yDAAAA;;;AAIpC,AAAAI,sGAAA,4DAAA,8BAAAC,SAAAC,5BACGvD,MACAC;AAFH,AAAA,IAAAuD,aAAAF;IAAAE,iBAAA,AAAArD,4BAAAqD;WAAAA,PAGsElK;iBAHtE,AAAAgF,4CAAAkF,eAAA,xEAG2BpE;aAH3B,AAAAd,4CAAAkF,eAAA,0DAAA,9HAGW9J;aAHX,AAAA4E,4CAAAkF,eAAA,pEAGkBE;IAHlBD,aAAAF;IAAAE,iBAAA,AAAAtD,4BAAAsD;cAAAA,VAIgCE;qBAJhC,AAAArF,4CAAAmF,eAAA,5EAIWR;AAJX,AAME,GAAU,oDAAA,pDAAChK,6CAAES;AAAb;;AAAA,AACE,IAAMkK,uCAAqC,EAAA,QAAAC,qCAAAC,yCAAAC,+CAAAC,0EAAA,AAAA,KAAAC,cAAA;AAAA,AAAAC;GAAA,AAAA,oUAAA,OAAA;IACrCC,aAAW,iBAAAC,WAAQ,oDAAA,pDAAChC,8CAAMpC,+DAAc0D;AAA7B,AAAA,oBACEE;AACA,gJAAAQ,SAAA,uDAAAA,SAAA,jNAACR,qEAAAA,oFAAAA;;AAFHQ;;;IAGXC,kBAAgB,EAAI,oDAAA,pDAACpL,6CAAES,2DACL,4FAAA,5FAAC4K,iFAA0CH,gBAAc,AAACI,eAAKb,QAAQC,SACvE,iBAAAa,qBAAA,wCAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAzK,cAAAuK;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAC,6BAAAH;AAAA,IAAAI,kBAwtEuB,AAAAuQ,sBAAA3Q;IAxtEvBK,qBAAA,AAAAtK,gBAAAqK;IAAAE,WAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAH;AAAA,gBAAA,AAAAI,eAAAL,gBAAAI,3CAAMpL;AAAN,AAAA,IACY6L,aAAW,sJAAA,tJAACpG,yEAA2BzF,UAAU8L;AAD7D,AAAA,AAAA,AAAAR,uBAAAJ,SAEE,oFAAA,pFAACa,yEAAkCzB,gBAAcuB;;AAFnD,eAAA,CAAAT,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,8BAAA,AAAAC,qBAAAd;;AAAA,OAAAW,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,gBAAA,AAAA9K,gBAAAwK,5BAAM5K;AAAN,AAAA,IACY6L,aAAW,sJAAA,tJAACpG,yEAA2BzF,UAAU8L;AAD7D,AAAA,OAAAH,oHAAA,AAAAF,8BAAA,AAAAG,eAAAhB,lJAEE,oFAAA,pFAACmB,yEAAkCzB,gBAAcuB;;;AAFnD;;;;GAAA,KAAA;;AAAA,AAAA,OAAAlB,mBAAgB9K;;AANxC,AASE,OAACE,6CAAK,WAAKiM;AAAL,4EACO,AAAC3D,0CAAwBlC,MAAMC,aAAa4F,eAAezG,xJAC3D,OAAC4D,iDAA+B1J,KAAK2J;GAC5CoB;;;AAEZ,AAAAyB,qGAAA,4DAAA,WACG9F,MAAMC,aAAa3G,KAAKqK;AAD3B,AAEE,OAACW,iFAA0CtE,MAAMC,aAAa,mDAAA,0DAAA,7GAACmC,8CAAM9I,kHAAmBqK;;AAE1F;;;;;;;8CAAA,9CAASoC,oGAEN/F,MACAC,aACAgD;AAJH,AAKE,oDAAA,7CAAC+C,8EACK,AAACC,+CAAO,WAAK3M;AAAL,AACE,+GAAA,2CAAA,wFAAA,qGAAA,hVAAC4M,gFAAyClG,MACAC,aACA3G,yHAC+B2J;IAEnF,AAAA,qFAAQ,AAAC5C,8BAAqBL,MAAMC;;AAE5C;;;;;;;+CAAA,/CAASkG,sGAENnG,MACAC,aACA0D;AAJH,AAKE,oDAAA,7CAACqC,8EACK,AAACC,+CAAO,WAAK3M;AAAL,AACE,OAACgL,iFAA0CtE,MAAMC,aAAa3G,KAAKqK;IAC7E,AAAA,qFAAQ,AAACtD,8BAAqBL,MAAMC;;AAE5C,GAAA,QAAA4D,qCAAAC,yCAAAsC,8CAAAC;AAAA;AAAA,AAAA;;;uCAAA,iBAAAC,6BAAA,AAAAC,6CAAA,lIAAoBQ;IAApBP,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAArI,4CAAA,2CAAA,yGAAA,gEAAA,iBAAAsI,eAAA,zIAIaI;AAJb,AAAA,QAAAJ,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,oBAAA,2DAAA,4DAAAH,wBAAAL,2BAAAE,2BAAAC,2BAAAC,1MAGExN;;;AAMF,AAAA6N,iFAAA,4DAAA,WACGE;AADH,AAEEA;;AAGF,AAAAF,iFAAA,+DAAA,WACGG;AADH,AAEE,wCAAA,2CAAA,0DAAA,4DAAA,yDACe,AAAA,uFAAS,AAACC,2BAAkBD,7WACvCE;;AAGN,AAAAL,iFAAA,wEAAA,WACGM;AADH,AAEE,wCAAA,2CAAA,0DAAA,4DAAA,yDAAA,mFACgBA,9UACZD;;AAEN,AAAAL,iFAAA,qEAAA,WACGO;AADH,AAEE,wCAAA,2CAAA,0DAAA,4DAAA,yDAAA,mFAAA,2CAAA,0JAAA,0DAAA,hJAC4B,AAAA,gFAAKA,7gBAE7BF;;AAEN,AAAA,AAEA,AAAAL,iFAAA,sEAAA,WAAAQ;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAArH,4BAAAqH;qBAAAA,jBACyCE;iBADzC,AAAApJ,4CAAAkJ,eAAA,xEACYpI;kBADZ,AAAAd,4CAAAkJ,eAAA,zEACuBC;AADvB,AAEE,IAAAE,WAAQ,mEAAA,2CAAA,0DAAA,wEAAA,8DAAA,2CAAA,wIAAA,jeAACZ,oZAC6C,4CAAK,AAACa,sGACjB,AAAA,gFAAKF;IAFhDC,eAAA,qFAAAA,nEAGEvI,YAAY,kCAAAuI,lCAAC7N,2CAAgBsF;AAH/B,AAAA,oBAIEqI;AAAY,4IAAAE,yEAAAA,7MAACE,mEAAAA,6FAAAA,fAAiBJ,yEAAAA;;AAJhCE;;;AAMF;;;;4DAAA,5DAAOG,gIAGJhJ,WAAWM;AAHd,AAIE,GAAA,AAAA9B,cAAQ8B;AACNN;;AACA,OAAClF,6CAAK,WAAKI;AAAL,AACE,IAAAsG,mBAAI,iBAAAqE,qBAAe,AAACvI,8CAA4BpC;AAA5C,AAAA,oBAAA2K;AAAA,AAAA,UAAAA,NAAWpI;AAAX,AACE,oBAAU,AAAC0C,0CAAiC1C;AAA5C;;AAAA,AACE,OAACwC,0FAAmC/E,UAAUF,oFAAgBsF;;;AAFlE;;;AAAJ,AAAA,oBAAAkB;AAAAA;;AAGItG;;GACN8E;;;AAEV;;;;;;;yCAAA,zCAASiJ,0FAGNC,OACAlJ;AAJH,AAKE,IAAMA,2EAAe,AAAClF,6CAAKqO,gCAAoBnJ,vIAC1B,AAACgJ,mJAAwC,AAAC7I,0CAAiC+I;AADhG,AAEE,yCAAA,lCAAC9I,2BAAe8I,yEAAmB,AAACE,oBAAUpJ;;AAElD;;;;;;;;qCAAA,rCAAS+I,kFAGNM,SACAzO;AAJH,AAKE,IAAMA,aAAO,gDAAA,yFAAA,qDAAA,5LACE,mBAAAiB,lBAAUjB,sCAAQA,SAClB,oDAAA,pDAACT,6CAAES,+FACe,AAACwO,oBACA,6CAAA,7CAAClC,8EACK,AAACoC,6CAAK,AAACC,4CAAIC,sBACL,iBAAA/G,qBAAuB,AAACtC,0CAAiCkJ;AAAzD,AAAA,oBAAA5G;AAAA,oBAAAA,hBAASgH;AAAT,AACE,mDAAA,WAAAC,vDAACH;AAAD,AAAM,yCAAAG,lCAAC1O,mDAAkByO;;;AACzBE;;MACR/O;;AATxC,AAUE,2CAAA,pCAACwF,2BAAeiJ,mEAAiBzO;;AAErC,uCAAA,vCAAOgP,sFACJC,UAAUC;AADb,AAEE,IAAMC,iBAAe,6CAAA,WAAAC,xDAACC;AAAD,AAAO,gFAAAD,zEAACE,0FAAoCL;GAAWC;AAA5E,AAEE,IAAAtI,mBAAI,AAACE,qDAAa,AAAC0C,gDAAQ+F,0CAA2BC,2CAA4BL;AAAlF,AAAA,oBAAAvI;AAAAA;;AAAA,IAAAA,uBAEI,AAACrG,gBAAM4O;AAFX,AAAA,oBAAAvI;AAAAA;;AAAA,IAAAA,uBAII,AAACE,qDAAayI,0CAA2BN;AAJ7C,AAAA,oBAAArI;AAAAA;;AAAA,IAAAA,uBAMI,AAACE,qDAAa0I,0CAA2BP;AAN7C,AAAA,oBAAArI;AAAAA;;AAQI,OAACrG,gBAAM0O;;;;;;AAEf,6BAAA,7BAAOQ,kEAAUC;AAAjB,AACE,GAAM,OAASA;AAAf,AACE,OAACC,oBAAS,yBAAA,QAAA,jCAACC,uBAAYF;;AADzB;;;AAGF;;;;;;;yCAAA,zCAAOG,0FAMJC,MAAMC;AANT,AAOE,IAAAC,oBAAK,OAASF;AAAd,AAAA,GAAAE;AAAA,IAAAA,wBAAqB,OAASD;AAA9B,AAAA,GAAAC;AACK,IAAMC,UAAQ,KAAAC,gBAAA;AAAA,AAAO,OAACC,wBAAmBJ;GAA3B;IACRK,UAAQ,KAAAF,gBAAA;AAAA,AAAO,OAACC,wBAAmBL;GAA3B;AADd,AAEE,wEAAA,oFAAA,nJAAI,AAACvQ,6CAAEuQ,MAAMC,cACT,mDAAA,AAAAM,nDAAC9Q,6CAAEuQ,sBAAOG,iBACV,6CAAA,AAAAI,7CAAC9Q,6DAAG6Q,SAAQL,YACZ,6CAAA,AAAAM,yBAAA,AAAAA,tEAAC9Q,6DAAG6Q,yBAASH;;AANxBD;;;AAAAA;;;AAQF,yCAAA,zCAAOM,0FAAsBhK,MAAMiK,OAAOC;AAA1C,AACE,IAAMC,cAAY,AAACzI,6EACA,EAAI,6IAAA,7IAACzI,6CAAE,AAAA,wFAAWgR,yEAAqBA,OAAOjK,OAC9CiK;IACbG,YAAY,4BAAA,yHAAA,nIAAMF,UAAS,AAACf,2BAAS,AAACzH,6EAAsC1B,MAAMkK;IAClFG,UAAY,AAACd,uCAAeY,YAAYC;IACxChL,aAAY,iBAAAkB,mBAAI,iBAAAoJ,oBAAKS;AAAL,AAAA,oBAAAT;AAAA,IAAAA,wBACKU;AADL,AAAA,oBAAAV;AAAA,IAAAA,wBAEK,AAACpM,cAAI,qBAAA,rBAACgN,2BAAqBF;AAFhC,AAAA,GAAAV;AAAA,IAAAA,wBAGK,GAAKW;AAHV,AAAA,GAAAX;AAIK,iEAAA,bAAKS,mBAAkBC;;AAJ5BV;;;AAAAA;;;AAAAA;;;AAAAA;;;AAAJ,AAAA,oBAAApJ;AAAAA;;AAAA,IAAAA,uBAKI6J;AALJ,AAAA,oBAAA7J;AAAAA;;AAAA,IAAAA,uBAMI8J;AANJ,AAAA,oBAAA9J;AAAAA;;AAAA;;;;;AALlB,AAaElB;;AAEJ,2CAAA,3CAAOmL,8FAAwBvK,MAAMC,aAAauK,KAAKpL,WAAWqL;AAAlE,AACE,OAAA,mEAAApQ,mBAAAC;AAAA,AAAA,IAAA,AAAA,GAAA,AACgB,WAAKuQ;AAAL,AACE,SAAK,AAACC,sCAAuBD,mBACxB,AAACE,mBAAQ,AAAC/B,yEAAkChJ,MAAMC,aAAa4K,aAAaJ;GAHnGnQ;AAAA,YAAAA,RACGsQ;AADH,AAAA,OAIG9Q,kCAAgB8Q,MAAMxL;;AAJzB,AAAA,MAAAnE;;;gBAAA,GAAA,CAAAyP,kBAAAvP;AAAA,IAAAC,mBAAAsP;AAAA,AAAA,GAAA,CAAAtP,qBAAAH;AAAA,AAAA,OAAA0D,mDAAAgM,yDAAAtQ,mBAAAC;;AAAA,MAAAc;;;AAAA,AAAA,MAAAsP;;;IAAA,iCAAwBF;;AAM1B,2CAAA,3CAAOQ,8FACJhL,MAAMC,aAAajG,UAAUoF,WAAWuJ,UAAU8B;AADrD,AAEE,IAAMzQ,gBAAU,AAACuQ,yCAAuBvK,MAAMC,aAAajG,UAAUoF,WAAWqL;AAAhF,AAME,OAAA,mEAAApQ,mBAAAC;AAAA,AAAA,IAAA,AAAA,GAAA,EAAA,AAAAC,wBAAAD,uBAAA,CAAA,AAAAE,gBAAAF,sBAAA;AAAA,IAAA,AAAA,IAAA2Q,4BAAA,AAAAvQ,4CAAAJ,iBAAA;AAAA,AAAA,GAAA,sCAAA2Q,tCAC0BH;AAD1B,IAAA,AAAA,IAAAI,4BAAA,AAAAxQ,4CAAAJ,iBAAA;AAAA,AAAA,GAAA,sCAAA4Q,tCAC8DJ;AAD9D,UAAA,AAAApQ,4CAAAJ,iBAAA,nEACmDiC;UADnD,AAAA7B,4CAAAJ,iBAAA,nEACe4B;SADf,AAAAxB,4CAAAJ,iBAAA,lEACGiR;cADH,AAAA7Q,4CAAAJ,iBAAA,vEACMkR;AADN,AAAA,gBAAA,ZAEQC,YAAWxM,0CAAiC/C;gBAFpD,ZAGQwP,YAAWzM,0CAAiC1C;AAHpD,AAAA,GAAA,cAAA,iBAAA+D,/BAMOhD,kDAAQmO;AANf,AAAA,oBAAAnL;AAAAA;;AAMyBoL;;;AANzB,oBAAA,AAOW1C,yEAAkChJ,MAAMC,aAAa1D,IAAIoM;AAPpE,qGAAA,XAQS4C,GAAGC,QAAS1R,kCAAgBoC,IAAIkD,YAAY7C;;AARrD,yGAAA,fASSgP,GAAGC,QAAQtP,IAAKpC,kCAAgByC,IAAI6C;;;AAT7C,GAAA,EAAA,wEAAA,xEAcYnG,6CAAEwS,UAAUrM,iBAAanG,6CAAEyS,UAAUtM;AAdjD,eAAA,gJAAA,3JAeYuM,WAAUrM,yEAA2BpD,IAAIyJ;eAfrD,gJAAA,3JAgBYiG,WAAUtM,yEAA2B/C,IAAIoJ;AAhBrD,AAAA,oBAAA,iBAAA+D,oBAAA,CAAA,mHAAA,nHAiBwBV,yEAAkChJ,MAAMC,aAAa0L,SAAShD;AAjBtF,AAAA,GAAAe;AAAA,OAkBkBV,yEAAkChJ,MAAMC,aAAa2L,SAASjD;;AAlBhFe;;;AAAA,0FAmBW6B,GAAGC,QAAQtP,IAAI0P;;AAnB1B,0FAoBWL,GAAGC,QAAQG,SAASpP;;;AApB/B,AAuBYjC;;;;;AAvBZ,AAAA,MAAAW;;;gBAAA,GAAA,CAAAkQ,kBAAAhQ;AAAA,IAAAC,mBAAA+P;AAAA,AAAA,GAAA,CAAA/P,qBAAAH;AAAA,AAAA,MAAAA;;AAAA,MAAAG;;;AAAA,AAAA,MAAA+P;;;;AAAA,AAAA,MAAAlQ;;;gBAAA,GAAA,CAAAmQ,kBAAAjQ;AAAA,IAAAC,mBAAAgQ;AAAA,AAAA,GAAA,CAAAhQ,qBAAAH;AAAA,AAAA,MAAAA;;AAAA,MAAAG;;;AAAA,AAAA,MAAAgQ;;;;AAAA,AAAA,MAAAnQ;;;gBAAA,GAAA,CAAAoQ,kBAAAlQ;AAAA,IAAAC,mBAAAiQ;AAAA,AAAA,GAAA,CAAAjQ,qBAAAH;AAAA,AAAA,OAAA0D,mDAAA2M,yDAAAjR,mBAAAC;;AAAA,MAAAc;;;AAAA,AAAA,MAAAiQ;;;IAAA,iCAAwBrR;;AAyB5B,yCAAA,zCAAO6R,0FAAsBC,sBAAsBC,UAAUC;AAA7D,AACE,IAAMC,YAAU,AAACC,sEAA+B,AAACC,6CAAiCL;AAAlF,AACE,AAACM,oBAAKH,UAAUD;;AAChB,QAACC,0CAAAA,qDAAAA,bAAUF,iCAAAA;;AAEf;;;;;;;sCAAA,tCAASM,oFAENrM,MACAC,aACA+H;AAJH,AAKE,GAAI,iCAAA,jCAACsE,0BAAUtE;AAGbA;;AACA,IAAMuE,QAAY,AAAClM,8BAAqBL,MAAMC;IACxC0I,YAAY,AAACzC,gFAAyClG,MAAMC,aAAasM;IACzE3D,cAAY,AAAA1O,cAAA,AAAAC,+CAAAC,sBAAA,AAAA,4DAAAC,mBAAAC;AAAA,AAAA,IAAA,AAAA,GAAA,EAAA,AAAAC,wBAAAD,uBAAA,CAAA,AAAAE,gBAAAF,qBAAA;AAAA,IAAA,AAAA,IAAAkS,+BAAA,AAAAC,+CAAAnS,iBAAA,IAAA;AAAA,AAAA,GAAA,EAAA,AAAAC,wBAAAiS,mCAAA,CAAA,AAAAhS,gBAAAgS,kCAAA;AAAA,IAAA,AAAA,IAAAE,wCAAA,AAAAhS,4CAAA8R,6BAAA;AAAA,AAAA,GAAA,AAAA1R,mCAAA4R,sCAAA;AAAA,0FAAApS;;AAAA,AAAA,MAAAW;;;gBAAA,GAAA,CAAA0R,kBAAAxR;AAAA,IAAAC,mBAAAuR;AAAA,AAAA,GAAA,CAAAvR,qBAAAH;AAAA,AAAA,MAAAA;;AAAA,MAAAG;;;AAAA,AAAA,MAAAuR;;;;AAAA,AAAA,MAAA1R;;;gBAAA,GAAA,CAAA2R,kBAAAzR;AAAA,IAAAC,mBAAAwR;AAAA,AAAA,GAAA,CAAAxR,qBAAAH;AAAA,AAAA,MAAAA;;AAAA,MAAAG;;;AAAA,AAAA,MAAAwR;;;;AAAA,AAAA,MAAA3R;;;gBAAA,GAAA,CAAA4R,kBAAA1R;AAAA,IAAAC,mBAAAyR;AAAA,AAAA,GAAA,CAAAzR,qBAAAH;AAAA,AAAA,OAAA6R,iDAAAC,kDAAA1S,mBAAAC;;AAAA,MAAAc;;;AAAA,AAAA,MAAAyR;;;IAAA,iCAAsB,AAAA,gGAAa7E;IAC/CkC,WAAY,AAACxB,qCAAmBC,UAAUC;IAC1CxJ,aAAY,qBAAM,AAAC4K,uCAAqBhK,MAAMgI,OAAOkC,xDAAUd;AAAnD,AACE,OAACyC,uCAAqB7L,MAAMoJ,EAAE,6CAAA,7CAACL,qGAAY,AAAA,qFAAQwD;;IACjE9B,YAAY,AAACnG,iFACA,AAAC0I,mEAA4BhN,MAAM,AAAA,uFAASgI;AAP/D,wFAQMA,/CACA,sDAAA,tDAACvO,wHACO,WAAKqF,5KAGb,OAAChF;AAHO,AACE,oDAAA,WAAAmT,xDAACrT;AAAD,AAAO,mEAAAqT,5DAACjC,yCAAuBhL,MAAMC,8BAAeb,WAAWuJ,UAAU8B;GACnE3L;IACCM;;;AAE3B,AAAA;AAAA;AAAA,AAIA;;;;;;;;;0BAAA,1BAAS8N;;4CAGLlN;AAHJ,AAIG,4HAAA,gDAAA,pKAACkN,wDAAAA,oEAAAA,dAAMlN,gDAAAA;;4CACNA,MACAC;AANJ,AAOG,OAACiI,oBAAU,8FAAA,9FAAC5J,4CAAI,AAAC+B,8BAAqBL,MAAMC;;mCAF3CD,MACAC;;;4CADAD;;4CAAAA,MACAC;;;;;;;;;AAGJ;;;;;;;oCAAA,pCAASkN,gFAENnF;AAFH,AAGE,OAAA,gGAAaA;;AAEf;;;;;;;gCAAA,hCAASoF,wEAENpF;AAFH,AAGE,OAAA,wFAASA;;AAEX,0DAAA,1DAAOqF,4HAAoCC;AAA3C,AACE,8GAAA,2CAAA,0DAAA,kFAAA,9RAACC,4VAEWD,qBACX,6HAAA,AAAA,2CAAA,4DAAA,aAAA,/OAAM,0DAAA,1DAACrU,6CAAEqU;;AAGZ;;;;;;;;sCAAA,tCAASE,oFAGNxF;AAHH,AAIE,0DAAA,8DAAA,jHAAC1J,4CAAI0J;;AAEP;;;;;;;;kCAAA,lCAASyF,4EAGNzF;AAHH,AAIE,OAACqF,wDAAmC,AAACG,oCAAkBxF;;AAEzD;;;;;;;uCAAA,vCAAS0F,sFAEN1F,OACAxF;AAHH,AAKE,4DAAA,rDAACJ,8CAAM4F,qEAAiB,iBAAA2F,WAAQnL;AAAR,AAAA,GACE,4FAAA,5FAACvJ,6CAAE,AAACC,qCAA4BsJ;AADlC,OAAA,4FAAAmL;;AAAAA;;;;AAI1B;;;;;;;;;8CAAA,9CAASC;;gEAGL5N;AAHJ,AAIG,oKAAA,oEAAA,hOAAC4N,4EAAAA,wFAAAA,dAA0B5N,oEAAAA;;gEAG1BA,MACAgB;AARJ,AASG,IAAM6M,WAAS,AAACC,+BAAsB9N;IAChC+N,WAAS,AAAA,4FAAWF;AAD1B,AAEE,oDAAA,wTAAA,mFAAA,+DAAA,gEAAA,gEAAA,vnBAAC7H,8EACK,AAACoC,6CAAK,AAACjO,+CAAO,AAAC6T,gDAAQ1B,0BAAUyB,WAC3B,AAAC1F,4CAAIgF;;uDANlBrN,MACAgB;;;gEADAhB;;gEAAAA,MACAgB;;;;;;;;;AAQJ;;;;;;;;;;;gCAAA,hCAASiN;;kDAIL9F;AAJJ,iEAKO,AAACpB,mEAAmBoB,pIACpB,8IAAA,0DAAA,jMAAC+F;;kDAEJ/F,SAASrJ;AARb,AASG,sJAAA,8HAAA,5QAACmP,8DAAAA,kJAAAA,tFAAY9F,8HAAAA,rHAASrJ,8HAAAA;;kDAErBqJ,SAASrJ,WAAW0D;AAXxB,mFAYO,CAACyL,8DAAAA,wEAAAA,ZAAY9F,oDAAAA,tNACb,AAACJ,iOAAqBjJ,7QACtB,OAAC4O,kRAAmBlL;;yCAHvB2F,SAASrJ,WAAW0D;;;kDAApB2F;;kDAAAA,SAASrJ;;kDAATqJ,SAASrJ,WAAW0D;;;;;;;;;;AAKxB;;;;;;;;yBAAA,zBAAS2L;;2CAELnO,MAAMgI;AAFV,AAGG,0HAAA,sDAAA,xKAACmG,uDAAAA,0EAAAA,rBAAKnO,sDAAAA,3CAASgI,sDAAAA;;2CAEdhI,MACCC,aACA+H;AAPL,AAQG,IAAMA,aAAoB,AAACoG,4DAAYpG;IACjCqG,uBAAqB,yEAAA,vEAAM,AAACxQ,uBAAO,AAACsP,kCAAgBnF,cAC7B,iBAAAsG,WAA2BtO;IAA3BuO,WAAiCtO;IAAjCuO,WAA8C,CAACE,+DAAAA,iFAAAA,pBAAa1O,6DAAAA,vDAAMgI,6DAAAA;AAAlE,AAAA,8JAAAsG,SAAAC,SAAAC,kEAAAF,SAAAC,SAAAC,5PAACC,4EAAAA,wGAAAA;KADH;IAErBzG,aAAoB,iBAAA2G,WAAQ3G;AAAR,AAAA,GACE,AAAC9N,cAAImU;AAAsB,8CAAAM,vCAAC5G,gDAAqBsG;;AADnDM;;;IAEpB3G,aAAoB,AAACqE,oCAAkBrM,MAAMC,aAAa+H;AALhE,AAME,uKAAA,hKAAC4G,0EAA4B5O,MAAMC,aAAa4O,0HAAc,WAAKC;AAAL,AACE,OAACC,6CAAK,AAACC,cAAIF,gBAAgB9G;;;kCAV5FhI,MACCC,aACA+H;;;2CAFDhI,MACCC;;2CADDD,MACCC,aACA+H;;;;;;;;;AAUL;;;;;;;iCAAA,jCAAS0G,0EAEN5C,sBACA9D;AAHH,AAIE,IAAMiH,SAAO,gBAAA,AAAA,uFAAIjH,vGAAe/N;AAAhC,AACE,oBACE,AAAA,kGAAcgV;AAAS,OAACxN,2BAAkBqK,sBAAsB,AAAA,kGAAcmD;;AADhF,oBAEE,AAAA,mGAAeA;AAAQ,OAAC3N,4BAAmBwK,sBAAsB,AAAA,mGAAemD;;AAFlF;;;;AAiCJ;;;;;;;;;gDAAA,hDAAmBC,wGAIhBC;AAJH,AAKE,IAAAC,aAA4B,AAACI,mBAAS,WAAKC;AAAL,AACE,GACE,AAACvG,0CAA2BuG;AAD9B;;AAAA,GAEE,AAACxG,0CAA2BwG;AAF9B;;AAAA,AAAA;;;;GAIFN;IALtCC,iBAAA,AAAAjP,4BAAAiP;SAAA,AAAA9Q,4CAAA8Q,eAAA,hEAAcC;SAAd,AAAA/Q,4CAAA8Q,eAAA,hEAAiBE;YAAjB,AAAAhR,4CAAA8Q,eAAA,nEAAoBG;AAApB,AAME,OAACG,sDAAOL,GAAGC,qDAAGC;;AAElB,yCAAA,zCAAOI,0FAAsB3P,MAAMC,aAAa2P,uBAAuBT;AAAvE,AACE,GAAA,AAAA7R,cAAQsS;AACNT;;AACA,OAACvV,6CAAK,WAAK6V;AAAL,AACE,oBAAI,AAAA,6FAAYA;AACd,OAACI,kDACCJ,OACA,AAACK,6CAAoCF;;AACvCH;;GACJ,qGAAA,rGAACM,0EAAmC/P,MAAMC,aAAakP,2FAASS;;;AAE1E;;;;;;;;;;;;;;;;;;;;;;;;;;+CAAA,/CAASI;;iEAoBLhQ,MAAMmI,SAAS8H,kBAAkBC;AApBrC,AAqBG,sKAAA,kHAAA,hRAACF,6EAAAA,sIAAAA,3DAA2BhQ,kHAAAA,vGAASmI,kHAAAA,zGAAS8H,kHAAAA,hGAAkBC,kHAAAA;;iEAE/DlQ,MACAC,aACAkQ,iBACAF,kBAEAG;AA5BJ,AAqCG,IAAMC,sBAAuB,mDAAA,4DAAA,7GAAM,AAACtX,8BAAMoX,mBACX,AAAClR,0CAAiCkR;IAC3DG,yBAAuB,6CAAA,7CAACtK,+EACK,AAACoC,6CAAK,AAACC,4CAAIpJ,2CACL,mDAAA,WAAAsR,9DAACC;AAAD,AAAa,uDAAAD,hDAACE,iEAAOJ;KAC3B,AAACK,sDAAM1Q,MAAMC;IAC1CgQ,wBAAuB,iBAAA3P,mBAAI2P;AAAJ,AAAA,oBAAA3P;AAAAA;;AACI,GAAM,AAACvH,8BAAMoX;AAAb,AACE,OAACnU,8CAA4B,AAAC/B,gBAAM,AAACkT,kCAAgBgD;;AADvD;;;;AAPjC,AASE,qIAGK,AAACQ,+CAAO,WAAKtO,1IAGb,AAACsN,uCAAqB3P,MAAMC,aAAagQ,xGACzCf;AAJQ,AACE,IAAAvK,qBAA0B,AAAC1F,0CAAiCoD;AAA5D,AAAA,oBAAAsC;AAAA,AAAA,qBAAAA,jBAAWiM;AAAX,AACE,OAACtE,0BAAUgE,uBAAuBM;;AADpC;;GAJV,qJAAA,2CAAA,qGAAA,rSAAC1K,gFAAyClG,MAAMC,aACN,AAACI,8BAAqBL,MAAMC;;wDAxB5ED,MACAC,aACAkQ,iBACAF,kBAEAG;;;iEALApQ,MACAC,aACAkQ,iBACAF;;iEAHAjQ,MACAC,aACAkQ,iBACAF,kBAEAG;;;;;;;;;AA2BJ;;;;;;;;;;;;;;;;;;;+CAAA,/CAASS;;iEAaL7Q,MAAMmI,SAAS8H,kBAAkBC;AAbrC,AAcG,sKAAA,kHAAA,hRAACW,6EAAAA,sIAAAA,3DAA2B7Q,kHAAAA,vGAASmI,kHAAAA,zGAAS8H,kHAAAA,hGAAkBC,kHAAAA;;iEAE/DlQ,MACAC,aACAkQ,iBAEAW,mBACAZ;AArBJ,AAwBG,IAAM/H,WAAkB,EAAI,AAACpP,8BAAMoX,mBACT,AAACzB,+BAAa1O,MAAMmQ,kBACpBA;IACpB/Q,aAAkB,mDAAA,4DAAA,7GAAM,AAACrG,8BAAMoX,mBACX,AAAClR,0CAAiCkR;IACtDD,wBAAkB,iBAAA5P,mBAAI4P;AAAJ,AAAA,oBAAA5P;AAAAA;;AACI,GAAM,AAACvH,8BAAMoX;AAAb,AACE,OAAC/T,8CAA4B,AAACnC,gBAAM,AAACkT,kCAAgBgD;;AADvD;;;;IAEtBD,wBAAkB,yCAAA,vBAAMA,uBACJ,iBAAAa,WAAQb;AAAR,AAAA,GAEE,AAAC5S,cAAI8B;AAAY,gFAAA2R,4EAAA,rJAACzR,kFAA2BqG;;AAF/CoL;;KADF;AARxB,AAYE,qIACK,AAAC1I,4CAAI,WAAKhG,vIAGV,AAACsN,uCAAqB3P,MAAMC,aAAaiQ,xGACzChB;AAJK,AACE,IAAA8B,WAAQ,kDAAA,8DAAA,hHAAC5O,8CAAMC;AAAf,AAAA,oBACEjD;AAAW,yCAAA4R,lCAAClX,2CAAgBsF;;AAD9B4R;;GAFP,4GAAA,2CAAA,qGAAA,5PAAC9K,gFAAyClG,MAAMC,aAAakI;;wDApBnEnI,MACAC,aACAkQ,iBAEAW,mBACAZ;;;iEALAlQ,MACAC,aACAkQ,iBAEAW;;iEAJA9Q,MACAC,aACAkQ,iBAEAW,mBACAZ;;;;;;;;;AAsBJ;;;;;;;;;;6CAAA,7CAASe;;+DAILjR,MAAMiQ,kBAAkBC;AAJ5B,AAKG,kKAAA,uGAAA,jQAACe,2EAAAA,2HAAAA,lDAAyBjR,uGAAAA,5FAASiQ,uGAAAA,rFAAkBC,uGAAAA;;+DAEpDlO,OACAhB,cAEA8P,mBACAV;AAXJ,AAaGc;;sDANClP,OACAhB,cAEA8P,mBACAV;;;+DAJApO,OACAhB,cAEA8P;;+DAHA9O,OACAhB,cAEA8P,mBACAV;;;;;;;;;AAIJ;;;;;;;;;;kCAAA,lCAAmBe,4EAOhBnR,MACAC,aACAmR,OACAC;AAVH,AAWE,IAAMC,iBAAe,KAAA1H,gBAAA;AAAA,AACE,iHAAA,2CAAA,qGAAA,MAAA,qIAAA,rYAAC1D,gFACAlG,MAAMC,aAAaoR;GAFtB;AAArB,AAKE,OAACnJ,oBACA,6CAAA,7CAAClC,8EACK,AAAC+C,6CAAK,WAAAwI;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAArR,4BAAAqR;UAAAA,NAAsCnP;yBAAtC,AAAA/D,4CAAAkT,eAAA,hFAAaC;AAAb,AACE,oBAAM,iBAAA/H,oBAAK,AAACT,0CAA2B5G;AAAjC,AAAA,GAAAqH;AACK+H;;AADL/H;;;AAAN,AAEE,IAAA/E,qBAAyB,AAACnE,qDAAa,WAAKkR;AAAL,AACE,OAACzY,6CAAEwY,mBACA,AAAA,gFAAKC;GAFxB,AAAA3H,gBAGeuH;AAHxC,AAAA,oBAAA3M;AAAA,AAAA,oBAAAA,hBAAW+M;AAAX,AAIE,yDAAA,lDAACtP,8CAAMC,6FAAaqP;;AAJtB;;;AAFF;;IAOR,0GAAA,2CAAA,qGAAA,MAAA,qIAAA,rYAACxL,gFAAyClG,MAAMC,aAAamR;;AAIxE;;;;;;;;;;;;8CAAA,9CAAS3C;;gEAKLzO,MAAMmI;AALV,AAMG,oKAAA,cAAA,oEAAA,cAAA,5PAACsG,4EAAAA,sGAAAA,5BAA0BzO,kFAAAA,vEAASmI,kFAAAA;;gEAEnCnI,MAAMC,aAAakI;AARvB,AASG,0LAAA,0FAAA,5QAACsG,4EAAAA,8GAAAA,pCAA0BzO,0FAAAA,pFAAMC,0FAAAA,7EAAakI,0FAAAA;;gEAE7CnI,MACAC,aACAkI,SACAwJ;AAdJ,AAeG,IAAMC,WAAS,kBAAID,UAEF,iBAAME,YAAU,wJAAI,AAACxR,8BAAqBL,MAAMC,xKAE5B,+CAAA,AAAA,wIAAA,vLAACwM,2LAASkF,/MACVzJ;AAHpB,AAIE,iLAAA,1KAAC0G,0EAA4B5O,MAAMC,aACNf,oIAAsB2S;KAErD7R;IACXuM,QAAS,AAAClM,8BAAqBuR,SAAS3R;AAV9C,AAWE,UAAA,4DAMcmR,OAAOC;AANrB,AAOU,2BACK,sDAAA,WAAAS,jEAACC,pBACD7J;AADA,AAAgB,OAAA,gFAAA,AAAA,uHAAA4J;GADhB,AAACX,gCAAcS,SAAS3R,aAAamR,OAAOC;;oBAP3D,sEAUwBrY,EAAEgZ;AAV1B,AAcU,IAAMhZ,QAAE,iDAAA,jDAACiZ,+CAAOjZ;IACVgZ,QAAE,iDAAA,jDAACC,+CAAOD;AADhB,AAEE,OAACE,uEAAyB,wEAAA,xEAACC,wHAAqCnZ,wDAAEgZ;;AAhB9E,AAiBE,IAAA1R,mBAEC,iBAAAqE,qBAAe,AAACyN,IAAI7F,MAAMpE;AAA1B,AAAA,oBAAAxD;AAAA,AAAA,cAAAA,VAAWyN;AAAX,AACE,OAACxY,6CAAK,WAAK0V;AAAL,AACE,OAAC+C,cAAc/C,GAAG,AAAA,uHAAUA;GAC9B8C;;AAHR;;;AAFD,AAAA,oBAAA9R;AAAAA;;AAQC,IAAAqE,qBAAe,AAACyN,IAAIjK,SAASoE;AAA7B,AAAA,oBAAA5H;AAAA,AAAA,cAAAA,VAAWyN;AAAX,AACE,OAACxY,6CAAK,WAAK0V;AAAL,AACE,OAAC+C,cAAc,AAAA,uHAAU/C,IAAIA;GAC/B8C;;AAHR;;;;uDAxCJpS,MACAC,aACAkI,SACAwJ;;;gEAHA3R,MACAC;;gEADAD,MACAC,aACAkI;;gEAFAnI,MACAC,aACAkI,SACAwJ;;;;;;;;;;AA0CJ,yCAAA,zCAAOW,0FAAsBxG,sBAAsB9D;AAAnD,AACE,IAAM5I,aAAW,AAACH,0CAAiC+I;AAAnD,AACE,kBAAKuK;AAAL,AACE,IAAMtP,iBAAe,AAACiJ,sEAA+B,AAACC,6CAAiCL;AAAvF,AACE;;;AAAA,AACM,QAACyG,mCAAAA,qCAAAA;;6BACHC;AAFJ,AAEY,QAACD,mCAAAA,2CAAAA,VAAGC,uBAAAA;;6BACZA,OAAOC;AAHX,AAIG,UAAMA,NAAMpQ;IAAAA,UACV,AAACvI,kCAAgBuI,IAAIjD;IADXiD,UAEV,sDAAA,tDAACD,8CAAMC,6EAAkBjD;IAFfiD,UAGV,AAACW,iDAA+BgF,OAAO/E,eAAeZ;AAHxD,AAIE,QAACkQ,mCAAAA,mDAAAA,lBAAGC,+BAAAA,xBAAOnQ,+BAAAA;;oBALZmQ,OAAOC;;;;;6BAAPD;;6BAAAA,OAAOC;;;;;;;;;;;AAOnB;;;yDAAA,zDAAOC,0HAEJ1K;AAFH,AAGE,IAAM2K,WAAS,AAACvF,8BAAYpF;AAA5B,AACE,IAAA4K,WAAMD;AAAN,AAAA,GAAA,AAAA1Z,6CAAA,kDAAA2Z;AACc,mDAAA,WAAAC,vDAACxK;AAAD,AAAM,qDAAAwK,iBAAA,+DAAA,9HAACzQ;;;AADrB,GAAA,AAAAnJ,6CAAA,qDAAA2Z;AAEc,mDAAA,WAAAE,vDAACzK;AAAD,AAAM,qDAAAyK,iBAAA,+DAAA,9HAAC1Q;;;AAFrB,GAAA,AAAAnJ,6CAAA,KAAA2Z;AAEc,mDAAA,WAAAE,vDAACzK;AAAD,AAAM,qDAAAyK,iBAAA,+DAAA,9HAAC1Q;;;AAFrB,AAGE,sDAAA,WAAA2Q,1DAAC9M;AAAD,AAAS,iFAAA,mFAAA8M,7JAAChD,sLAAuC4C;;;;;;;AAEvD,AAAeK,0DACb,4CAAA,WAAAC,vDAAC5K;AAAD,AAAM,qDAAA4K,iBAAA,8DAAA,7HAAC7Q;;AAET;;;;;;;;;qCAAA,rCAAS8Q,kFAINlT,MACAC,aACAkQ;AANH,AAOE,IAAMnI,SAAS,mDAAA,iBAAA,lEAAM,AAACjP,8BAAMoX,mBACXA;IACXiB,SAAO,kBAAIpJ,QACF,AAAC0G,+BAAa1O,MAAMmQ,kBACpBA;IACTgD,OAAO,AAAC7O,iFAA0CtE,MAAMC,aAAamR;AAL3E,AAME,oDAAA,7CAACpL,8EACK,kBAAIgC,QACF,AAACI,6CAAK4K,wDACA,AAACV,uCAAqBtS,MAAMgI,QAC5B,AAAC0K,uDAAqC1K,SAC5CS,oBACF0K;;AAEV,6DAAA,7DAAOC,kIACJpT,MAAMC,aAAakQ,iBAAiBkD;AADvC,AAEE,IAAA1O,qBAAgC,iBAAArE,mBAAI+S;AAAJ,AAAA,oBAAA/S;AAAAA;;AACI,GAAM,AAACvH,8BAAMoX;AAAb,AACE,OAACnU,8CAA4B,AAAC/B,gBAAM,AAACkT,kCAAgBgD;;AADvD;;;;AADpC,AAAA,oBAAAxL;AAAA,AAAA,2BAAAA,vBAAW2O;AAAX,AAGE,IAAMC,eAAa,AAACC,6EAAsCxT,MAAMC,aAAaqT;AAA7E,AACE,mEAAA,mFAAA,uDAAA,tMAACG,+CAAOF;;AAJZ;;;AAMF;;;;;;;;;sCAAA,tCAAOG,oFAQJ1T,MAAMC,aAAakQ;AARtB,AASE,IAAMrB,iBAAe,AAAC4B,sDAAM1Q,MAAMC;AAAlC,AACE,IAAAK,mBAEC,AAACzC,uBAAOiR;AAFT,AAAA,GAAAxO;AAAAA;;AAKC,GAAM,AAACvH,8BAAMoX;AAAb,AACE,OAAClX,6CAAE,AAAA,sFAAQkX,kBACR,AAAA,sFAAQ,AAAClW,gBAAM6U;;AAFpB;;;;AAIL,wEAAA,xEAAO6E,wJACJ3T,MAAMC,aAAakQ;AADtB,AAEE,oBAAM,iBAAAzG,oBAAK,iEAAA,hEAAO,AAACkK,wCAA+B5T,MAAMC;AAAlD,AAAA,GAAAyJ;AAAA,IAAAA,wBACK,AAACgK,oCAAY1T,MAAMC,aAAakQ;AADrC,AAAA,oBAAAzG;AAEK,OAACmK,kCAAyB7T;;AAF/B0J;;;AAAAA;;;AAAN,AAGE,IAAMoK,WAAS,AAACD,kCAAyB7T;IACnC+T,QAAS,AAACzS,4BAAmBtB,MAAM8T;AADzC,AAIE,OAACpS,6EAAsC1B,MAAMC,aAAa8T;;AAP9D;;;AASF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CAAA,1CAASC;;4DAkCLhU,MAAMmQ;AAlCV,AAmCG,6KAAA,iFAAA,tPAAC6D,wEAAAA,qGAAAA,/BAAsBhU,iFAAAA,3EAAMmQ,iFAAAA;;4DAE5BnQ,MAAMmQ,iBAAiBkD;AArC3B,AAsCG,4JAAA,6GAAA,jQAACW,wEAAAA,iIAAAA,3DAAsBhU,6GAAAA,lGAASmQ,6GAAAA,5FAAiBkD,6GAAAA;;4DAEhDrT,MACAC,aACAkQ,iBACAkD;AA3CJ,AA4CG,IAAA/S,mBACC,AAAC8S,2DAAyCpT,MAAMC,aAAakQ,iBAAiBkD;AAD/E,AAAA,oBAAA/S;AAAAA;;AAAA,IAAAA,uBAEC,AAACqT,sEAAoD3T,MAAMC,aAAakQ;AAFzE,AAAA,oBAAA7P;AAAAA;;AAGC,OAAAsB,kCAAA;;;;mDAPA5B,MACAC,aACAkQ,iBACAkD;;;4DAHArT,MACAC;;4DADAD,MACAC,aACAkQ;;4DAFAnQ,MACAC,aACAkQ,iBACAkD;;;;;;;;;;AAMJ;;;;;;;;;;;6DAAA,7DAASY;;+EAKLjU,MACAkU,eACAC;AAPJ,AAUG,kMAAA,iHAAA,3SAACF,2FAAAA,qIAAAA,5CAAyCjU,iHAAAA,tGAASkU,iHAAAA,lGAAeC,iHAAAA;;+EACjEnU,MACAC,aACAiU,eACAC;AAdJ,AAiBG,IAAAC,aAAuC,AAACnM,8DAAoBiM;QAA5D,AAAAxZ,4CAAA0Z,WAAA,IAAA,/DAAOC;YAAP,AAAA3Z,4CAAA0Z,WAAA,IAAA,nEAASC;UAAT,AAAA3Z,4CAAA0Z,WAAA,IAAA,jEAAWlY;UAAX,AAAAxB,4CAAA0Z,WAAA,IAAA,jEAAe7X;yBAAf6X,rBAAuBF;AAAvB,AACE,oBAAQ,AAACna,iDAAyBma;AAAlC;AAAA,AAAA,MAAA,KAAA/Y,MAAA,CAAA,kWAAA,KAAA,zSACQ,AAAAuF,uEAAA,qFAA6C,AAACZ,wGAAOoU;;;AAC7D,IAAMI,OAAK,iBAAAC,WAAQJ;AAAR,AAAA,GACE,GAAK,2BAAAxZ,1BAAUwZ;AADjB,OAAA,kFAAAI;;AAAAA;;;IAELtU,mBAAa,AAAC2T,wCAA+B5T,MAAMC;IACnDuU,gBAAc,AAACC,sFAA+CzU,MAAMC,iBAAa/D;IACjFwY,gBAAc,AAACD,sFAA+CzU,MAAMC,iBAAa1D;IACjFoY,kBAAU,EAAI,SAAA,RAAML,mBAAM,AAAChI,0BAAU,AAACsI,cAAI,4CAAA,5CAACvM,gGAAUmM,gBAAgBF;IACrEO,kBAAU,EAAI,SAAA,RAAMP,mBAAM,AAAChI,0BAAU,AAACsI,cAAI,4CAAA,5CAACvM,gGAAUqM,gBAAgBJ;AAN3E,AAOE,IAAAQ,WAAQZ;IAARY,eAAA,uIAAAA,rIACEH,iBAAU,+CAAAG,SAAA,xDAACrb,4DAASoW,kDAAyCyE;AAD/D,AAAA,GAEEO;AAAU,sDAAAC,aAAA,5DAACrb,gEAASoW,kDAAyCyE;;AAF/DQ;;;sEAhBH9U,MACAC,aACAiU,eACAC;;;+EAHAnU,MACAC,aACAiU;;+EAFAlU,MACAC,aACAiU,eACAC;;;;;;;;;AAiBJ,AAAAY,4GAAA,uDAAA,WACG/U,MAAMC,aAAa+U;AADtB,AAEE,IAAAC,WAAS,AAAC/M,oBAAU,AAACwI,sDAAM1Q,MAAMC;IAAjCgV,eAAA,EAAA,CAAAA,YAAA,OAAA,KACS,4CAAA,WAAAC,vDAAC7M;AAAD,AAAM,uGAAA6M,hGAACxT,6EAAsC1B,MAAMC;GAAnDgV;AADT,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAES,yDAAA,MAAAA,xDAACE","names":["metabase.lib.join/join?","x","cljs.core._EQ_","metabase.lib.dispatch/dispatch-value","metabase.lib.join/Joinable","metabase.lib.join/JoinOrJoinable","metabase.lib.join/with-join-alias-update-join-fields","join","new-alias","G__78485","cljs.core.update","fields","cljs.core/sequential?","cljs.core.mapv","field-ref","metabase.lib.join/with-join-alias","metabase.lib.join/standard-join-condition?","condition","cljs.core/first","cljs.core/seq","cljs.core.filter","cljs.core/some?","&parents","&match","cljs.core/vector?","cljs.core/count","&match_0__78501","cljs.core.nth","cljs.core/Keyword","&match_2__78503","&match_2__78503_0__78506","cljs.core/keyword-identical?","&match_3__78504","&match_3__78504_0__78513","cljs.core.match/backtrack","e78531","js/Error","e__46214__auto__","e78524","e78521","e78520","e78519","e78516","_operator","_opts","_lhs-opts","_lhs-id-or-name","_rhs-opts","_rhs-id-or-name","metabase.lib.join/standard-join-condition-lhs","vec__78539","lhs","_rhs","metabase.lib.join/standard-join-condition-rhs","vec__78543","_lhs","rhs","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","metabase.lib.join/standard-join-condition-update-rhs","seq78546","G__78547","cljs.core/next","G__78548","self__5711__auto__","f","args","cljs.core/not","vec__78549","operator","opts","cljs.core.apply","metabase.lib.join/with-join-alias-update-join-conditions","old-alias","cljs.core/empty?","metabase.lib.util.match.impl/update-in-unless-empty","x__72089__auto__","&match_0__78563","&match_1__78564","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/ILookup","&match_1__78564_join-alias__78570","cljs.core.get","e78578","e78576","e78575","e78574","metabase.lib.util.match.impl/replace-in-collection","replace-78556","_id-or-name","conditions","metabase.lib.join.standard_join_condition_update_rhs","metabase.lib.join/with-join-alias-update-join","metabase.lib.join.util/current-join-alias","metabase.util/assoc-dissoc","field-or-join","join-alias","G__78584","metabase.lib.options.update_options","level__73195__auto__","metabase.util.log/glogi-level","logger__73196__auto__","metabase.util.log/is-loggable?","x__73197__auto__","lambdaisland.glogi.log","cljs.core.print_str","cljs.core.pr_str","metabase.lib.join/resolve-join","query","stage-number","map__78588","cljs.core/--destructure-map","joins","metabase.lib.util/query-stage","or__5002__auto__","p1__78587#","medley.core.find_first","cljs.core.ex_info","metabase.shared.util.i18n.js_i18n","metabase.lib.metadata.calculation/display-name-method","p__78589","map__78590","vec__78591","map__78594","_stage-number","source-table","source-card","_first-stage","_join","_style","metabase.lib.metadata/table","temp__5802__auto__","card-metadata","metabase.lib.metadata/card","metabase.lib.metadata.calculation.display_name","metabase.lib.card/fallback-display-name","metabase.shared.util.i18n/js-i18n","metabase.lib.metadata.calculation/display-info-method","display-name","metabase.lib.metadata.calculation/metadata-method","_query","_join-query","metabase.lib.join/column-from-join-fields","column-metadata","cljs.core.assoc","col","p__78596","map__78597","strategy","G__78598","p__78599","map__78600","default","option","G__78601","metabase.util/qualified-name","metabase.lib.join/add-source-and-desired-aliases","unique-name-fn","cljs.core.some_fn","G__78602","metabase.lib.join.util/joined-field-desired-alias","metabase.lib.metadata.calculation/returned-columns-method","p__78604","p__78605","map__78606","map__78607","stages","options","ensure-previous-stages-have-metadata","js/metabase","js/metabase.lib","js/metabase.lib.stage","js/metabase.lib.stage.ensure-previous-stages-have-metadata","cljs.core/Var","metabase.lib.stage/ensure-previous-stages-have-metadata","join-query","G__78622","field-metadatas","metabase.lib.metadata.calculation.returned_columns","cljs.core/peek","iter__5480__auto__","s__78626","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","b__78628","cljs.core/chunk-buffer","i__78627","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__78625","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","join-field","cljs.core/dissoc","metabase.lib.metadata.calculation.metadata","field-metadata","metabase.lib.metadata.calculation/visible-columns-method","metabase.lib.join/all-joins-visible-columns","cljs.core.into","cljs.core.mapcat","metabase.lib.metadata.calculation.visible_columns","metabase.lib.join/all-joins-expected-columns","js/metabase.lib.join","js/metabase.lib.join.join-clause-method","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","fexpr__78629","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.join/join-clause-method","metabase.lib.hierarchy/hierarchy","a-join-clause","another-query","metabase.lib.util/pipeline","metabase.lib.options/ensure-uuid","mbql-stage","card","p__78630","map__78631","join-fields","table-metadata","G__78632","cljs.core/random-uuid","metabase.lib.join/with-join-fields","metabase.lib.join/with-join-conditions-add-alias-to-rhses","metabase.lib.join/with-join-conditions","a-join","metabase.lib.common/->op-arg","cljs.core/not-empty","joinable","cljs.core.comp","cljs.core.map","metabase.lib.ref/ref","current-alias","p1__78636#","cljs.core/identity","metabase.lib.join/select-home-column","home-cols","cond-fields","cond-home-cols","p1__78638#","cljs.core.keep","metabase.lib.equality.find_matching_column","metabase.lib.types.isa/foreign-key?","metabase.lib.types.isa/primary-key?","metabase.lib.join/strip-id","s","clojure.string/trim","clojure.string/replace","metabase.lib.join/similar-names?","name0","name1","and__5000__auto__","plural1","cljs.core/Delay","inflections.core/plural","plural0","cljs.core/deref","metabase.lib.join/calculate-join-alias","joined","home-col","joined-name","home-name","similar","cljs.core/re-matches","metabase.lib.join/add-alias-to-join-refs","form","join-cols","e78655","replace-78652","field","field-clause","metabase.lib.util/field-clause?","cljs.core/boolean","metabase.lib.join/add-alias-to-condition","&match_2__78661","&match_3__78662","e78665","e78664","e78663","replace-78657","op","op-opts","lhs-alias","rhs-alias","bare-lhs","bare-rhs","metabase.lib.join/generate-unique-name","metadata-providerable","base-name","taken-names","generator","metabase.lib.util.unique_name_generator","metabase.lib.metadata/->metadata-provider","cljs.core/run!","metabase.lib.join/add-default-alias","cljs.core/contains?","stage","&match_left__78672","cljs.core.subvec","&match_left__78672_0__78674","e78680","e78676","e78675","metabase.lib.util.match.impl/match-in-collection","match-78669","metabase.lib.query.query_with_stages","p1__78667#","metabase.lib.join/joins","metabase.lib.join/join-conditions","metabase.lib.join/join-fields","metabase.lib.join/raw-join-strategy->strategy-option","raw-strategy","cljs.core.merge","metabase.lib.join/raw-join-strategy","metabase.lib.join/join-strategy","metabase.lib.join/with-join-strategy","G__78681","metabase.lib.join/available-join-strategies","database","metabase.lib.metadata/database","features","cljs.core.partial","metabase.lib.join/join-clause","metabase.util.assoc_default","metabase.lib.join/join","metabase.lib.join.join_clause","suggested-conditions","G__78682","G__78683","G__78684","metabase.lib.join/suggested-join-conditions","metabase.lib.join/joined-thing","G__78685","metabase.lib.util.update_query_stage","cljs.core/update","existing-joins","cljs.core.conj","cljs.core/vec","origin","metabase.lib.join/sort-join-condition-columns","columns","map__78686","pk","fk","other","cljs.core/group-by","column","cljs.core.concat","metabase.lib.join/mark-selected-column","existing-column-or-nil","metabase.lib.temporal-bucket/with-temporal-bucket","metabase.lib.temporal-bucket/temporal-bucket","metabase.lib.equality.mark_selected_columns","metabase.lib.join/join-condition-lhs-columns","lhs-column-or-nil","rhs-column-or-nil","join-or-joinable","_rhs-column-or-nil","existing-join-alias","join-aliases-to-ignore","p1__78687#","cljs.core.drop_while","cljs.core.not_EQ_","metabase.lib.join.joins","cljs.core.remove","col-join-alias","metabase.lib.join/join-condition-rhs-columns","_lhs-column-or-nil","G__78688","G__78689","metabase.lib.join/join-condition-operators","metabase.lib.filter.operator/join-operators","metabase.lib.join/fk-columns-to","source","target","target-columns","p__78690","map__78691","fk-target-field-id","target-column","position","unjoined","new-joins","p1__78696#","medley.core.distinct_by","y","cljs.core.dissoc","metabase.lib.filter.filter_clause","metabase.lib.filter.operator.operator_def","fks","filter-clause","metabase.lib.join/xform-add-join-alias","xf","result","input","metabase.lib.join/xform-mark-selected-joinable-columns","j-fields","G__78705","p1__78702#","p1__78703#","p1__78704#","metabase.lib.join/xform-fix-source-for-joinable-columns","p1__78706#","metabase.lib.join/joinable-columns","cols","metabase.lib.join/join-lhs-display-name-from-condition-lhs","condition-lhs-column-or-nil","condition-lhs-column","display-info","metabase.lib.metadata.calculation.display_info","cljs.core.get_in","metabase.lib.join/first-join?","metabase.lib.join/join-lhs-display-name-for-first-join-in-first-stage","metabase.lib.util/canonical-stage-index","metabase.lib.util/source-table-id","table-id","table","metabase.lib.join/join-lhs-display-name","metabase.lib.join/join-condition-update-temporal-bucketing","join-condition","option-or-unit","vec__78707","_","unit","G__78710","available-lhs","metabase.lib.temporal_bucket.available_temporal_buckets","available-rhs","sync-lhs?","cljs.core/set","sync-rhs?","G__78711","metabase.lib.metadata.calculation/describe-top-level-key-method","_key","G__78713","p1__78712#","clojure.string.join","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.lib.join\n  \"Functions related to manipulating EXPLICIT joins in MBQL.\"\n  (:require\n   [clojure.string :as str]\n   [inflections.core :as inflections]\n   [medley.core :as m]\n   [metabase.lib.card :as lib.card]\n   [metabase.lib.common :as lib.common]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.equality :as lib.equality]\n   [metabase.lib.filter :as lib.filter]\n   [metabase.lib.filter.operator :as lib.filter.operator]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.join.util :as lib.join.util]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.query :as lib.query]\n   [metabase.lib.ref :as lib.ref]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.expression :as lib.schema.expression]\n   [metabase.lib.schema.filter :as lib.schema.filter]\n   [metabase.lib.schema.join :as lib.schema.join]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.lib.schema.temporal-bucketing :as lib.schema.temporal-bucketing]\n   [metabase.lib.temporal-bucket :as lib.temporal-bucket]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.lib.util :as lib.util]\n   [metabase.lib.util.match :as lib.util.match]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util :as u]\n   [metabase.util.log :as log]\n   [metabase.util.malli :as mu]))\n\n(defn- join? [x]\n  (= (lib.dispatch/dispatch-value x) :mbql/join))\n\n(def ^:private Joinable\n  [:or ::lib.schema.metadata/table ::lib.schema.metadata/card])\n\n(def ^:private JoinOrJoinable\n  [:or\n   [:ref ::lib.schema.join/join]\n   Joinable])\n\n(declare with-join-alias)\n\n(defn- with-join-alias-update-join-fields\n  \"Impl for [[with-join-alias]] for a join: recursively update the `:join-alias` for the `:field` refs inside `:fields`\n  as needed.\"\n  [join new-alias]\n  (cond-> join\n    (:fields join) (update :fields (fn [fields]\n                                     (if-not (sequential? fields)\n                                       fields\n                                       (mapv (fn [field-ref]\n                                               (with-join-alias field-ref new-alias))\n                                             fields))))))\n\n(mu/defn ^:private standard-join-condition? :- :boolean\n  \"Whether this join condition is a binary condition with two `:field` references (a LHS and a RHS), as you'd produce\n  in the frontend using functions like [[join-condition-operators]], [[join-condition-lhs-columns]],\n  and [[join-condition-rhs-columns]].\"\n  [condition  :- [:maybe ::lib.schema.expression/boolean]]\n  (when condition\n    (lib.util.match/match-one condition\n      [(_operator :guard keyword?)\n       _opts\n       [:field _lhs-opts _lhs-id-or-name]\n       [:field _rhs-opts _rhs-id-or-name]]\n      true\n      _\n      false)))\n\n(defn- standard-join-condition-lhs\n  \"If `condition` is a [[standard-join-condition?]], return the LHS.\"\n  [condition]\n  (when (standard-join-condition? condition)\n    (let [[_operator _opts lhs _rhs] condition]\n      lhs)))\n\n(defn- standard-join-condition-rhs\n  \"If `condition` is a [[standard-join-condition?]], return the RHS.\"\n  [condition]\n  (when (standard-join-condition? condition)\n    (let [[_operator _opts _lhs rhs] condition]\n      rhs)))\n\n(defn- standard-join-condition-update-rhs\n  \"If `condition` is a [[standard-join-condition?]], update the RHS with `f` like\n\n    (apply f rhs args)\"\n  [condition f & args]\n  (if-not (standard-join-condition? condition)\n    condition\n    (let [[operator opts lhs rhs] condition]\n      [operator opts lhs (apply f rhs args)])))\n\n(mu/defn ^:private with-join-alias-update-join-conditions :- lib.join.util/PartialJoin\n  \"Impl for [[with-join-alias]] for a join: recursively update the `:join-alias` for inside the `:conditions` of the\n  join.\n\n  If `old-alias` is specified, uses [[metabase.legacy-mbql.util.match]] to update all the `:field` references using the old\n  alias.\n\n  If `old-alias` is `nil`, updates the RHS of all 'standard' conditions (binary filter clauses with two `:field` refs as\n  args, e.g. the kind you'd get if you were using [[join-condition-operators]] and the like to create them). This\n  currently doesn't handle more complex filter clauses that were created without the 'normal' MLv2 functions used by\n  the frontend; we can add this in the future if we need it.\"\n  [join      :- lib.join.util/PartialJoin\n   old-alias :- [:maybe ::lib.schema.common/non-blank-string]\n   new-alias :- [:maybe ::lib.schema.common/non-blank-string]]\n  (cond\n    (empty? (:conditions join))\n    join\n\n    ;; if we've specified `old-alias`, then update ANY `:field` clause using it to `new-alias` instead.\n    old-alias\n    (lib.util.match/replace-in join [:conditions]\n      [:field {:join-alias old-alias} _id-or-name]\n      (with-join-alias &match new-alias))\n\n    ;; otherwise if `old-alias` is `nil`, then add (or remove!) `new-alias` to the RHS of any binary\n    ;; filter clauses that don't already have a `:join-alias`.\n    :else\n    (update join :conditions (fn [conditions]\n                               (mapv (fn [condition]\n                                       (standard-join-condition-update-rhs condition with-join-alias new-alias))\n                                     conditions)))))\n\n(defn- with-join-alias-update-join\n  \"Impl for [[with-join-alias]] for a join.\"\n  [join new-alias]\n  (let [old-alias (lib.join.util/current-join-alias join)]\n    (-> join\n        (u/assoc-dissoc :alias new-alias)\n        (with-join-alias-update-join-fields new-alias)\n        (with-join-alias-update-join-conditions old-alias new-alias))))\n\n(mu/defn with-join-alias :- lib.join.util/FieldOrPartialJoin\n  \"Add OR REMOVE a specific `join-alias` to `field-or-join`, which is either a `:field`/Field metadata, or a join map.\n  Does not recursively update other references (yet; we can add this in the future).\"\n  {:style/indent [:form]}\n  [field-or-join :- lib.join.util/FieldOrPartialJoin\n   join-alias    :- [:maybe ::lib.schema.common/non-blank-string]]\n  (case (lib.dispatch/dispatch-value field-or-join)\n    :field\n    (lib.options/update-options field-or-join u/assoc-dissoc :join-alias join-alias)\n\n    :metadata/column\n    (u/assoc-dissoc field-or-join ::join-alias join-alias)\n\n    :mbql/join\n    (with-join-alias-update-join field-or-join join-alias)\n\n    ;; this should not happen (and cannot happen in CLJ land)\n    ;; but it does seem to happen in JS land with broken MLv1 queries\n    (do (log/error \"with-join-value should not be called with\" (pr-str field-or-join))\n        field-or-join)))\n\n(mu/defn resolve-join :- ::lib.schema.join/join\n  \"Resolve a join with a specific `join-alias`.\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   join-alias   :- ::lib.schema.common/non-blank-string]\n  (let [{:keys [joins]} (lib.util/query-stage query stage-number)]\n    (or (m/find-first #(= (:alias %) join-alias)\n                      joins)\n        (throw (ex-info (i18n/tru \"No join named {0}, found: {1}\"\n                                  (pr-str join-alias)\n                                  (pr-str (mapv :alias joins)))\n                        {:join-alias   join-alias\n                         :query        query\n                         :stage-number stage-number})))))\n\n(defmethod lib.metadata.calculation/display-name-method :mbql/join\n  [query _stage-number {[{:keys [source-table source-card], :as _first-stage}] :stages, :as _join} _style]\n  (or\n   (when source-table\n     (:display-name (lib.metadata/table query source-table)))\n   (when source-card\n     (if-let [card-metadata (lib.metadata/card query source-card)]\n       (lib.metadata.calculation/display-name query 0 card-metadata)\n       (lib.card/fallback-display-name source-card)))\n   (i18n/tru \"Native Query\")))\n\n(defmethod lib.metadata.calculation/display-info-method :mbql/join\n  [query stage-number join]\n  (let [display-name (lib.metadata.calculation/display-name query stage-number join)]\n    {:name (or (:alias join) display-name), :display-name display-name}))\n\n(defmethod lib.metadata.calculation/metadata-method :mbql/join\n  [_query _stage-number _join-query]\n  ;; not i18n'ed because this shouldn't be developer-facing.\n  (throw (ex-info \"You can't calculate a metadata map for a join! Use lib.metadata.calculation/returned-columns-method instead.\"\n                  {})))\n\n(mu/defn ^:private column-from-join-fields :- lib.metadata.calculation/ColumnMetadataWithSource\n  \"For a column that comes from a join `:fields` list, add or update metadata as needed, e.g. include join name in the\n  display name.\"\n  [query           :- ::lib.schema/query\n   stage-number    :- :int\n   column-metadata :- ::lib.schema.metadata/column\n   join-alias      :- ::lib.schema.common/non-blank-string]\n  (let [column-metadata (assoc column-metadata :source-alias join-alias)\n        col             (-> (assoc column-metadata\n                                   :display-name (lib.metadata.calculation/display-name query stage-number column-metadata)\n                                   :lib/source   :source/joins)\n                            (with-join-alias join-alias))]\n    (assert (= (lib.join.util/current-join-alias col) join-alias))\n    col))\n\n(defmethod lib.metadata.calculation/display-name-method :option/join.strategy\n  [_query _stage-number {:keys [strategy]} _style]\n  (case strategy\n    :left-join  (i18n/tru \"Left outer join\")\n    :right-join (i18n/tru \"Right outer join\")\n    :inner-join (i18n/tru \"Inner join\")\n    :full-join  (i18n/tru \"Full outer join\")))\n\n(defmethod lib.metadata.calculation/display-info-method :option/join.strategy\n  [query stage-number {:keys [strategy default], :as option}]\n  (cond-> {:short-name   (u/qualified-name strategy)\n           :display-name (lib.metadata.calculation/display-name query stage-number option)}\n    default (assoc :default true)))\n\n(mu/defn ^:private add-source-and-desired-aliases :- :map\n  [join           :- [:map\n                      [:alias\n                       {:error/message \"Join must have an alias to determine column aliases!\"}\n                       ::lib.schema.common/non-blank-string]]\n   unique-name-fn :- ::lib.metadata.calculation/unique-name-fn\n   col            :- :map]\n  (assoc col\n         :lib/source-column-alias  ((some-fn :lib/source-column-alias :name) col)\n         :lib/desired-column-alias (unique-name-fn (lib.join.util/joined-field-desired-alias\n                                                    (:alias join)\n                                                    ((some-fn :lib/source-column-alias :name) col)))))\n\n(mu/defmethod lib.metadata.calculation/returned-columns-method :mbql/join\n  [query\n   stage-number\n   {:keys [fields stages], join-alias :alias, :or {fields :none}, :as join}\n   {:keys [unique-name-fn], :as options} :- [:map\n                                             [:unique-name-fn ::lib.metadata.calculation/unique-name-fn]]]\n  (when-not (= fields :none)\n    (let [ensure-previous-stages-have-metadata (resolve 'metabase.lib.stage/ensure-previous-stages-have-metadata)\n          join-query (cond-> (assoc query :stages stages)\n                       ensure-previous-stages-have-metadata\n                       (ensure-previous-stages-have-metadata -1))\n          field-metadatas (if (= fields :all)\n                            (lib.metadata.calculation/returned-columns join-query -1 (peek stages) options)\n                            (for [field-ref fields\n                                  :let [join-field (lib.options/update-options field-ref dissoc :join-alias)]]\n                              (lib.metadata.calculation/metadata join-query -1 join-field)))]\n      (mapv (fn [field-metadata]\n              (->> (column-from-join-fields query stage-number field-metadata join-alias)\n                   (add-source-and-desired-aliases join unique-name-fn)))\n            field-metadatas))))\n\n(defmethod lib.metadata.calculation/visible-columns-method :mbql/join\n  [query stage-number join options]\n  (lib.metadata.calculation/returned-columns query stage-number (assoc join :fields :all) options))\n\n(mu/defn all-joins-visible-columns :- lib.metadata.calculation/ColumnsWithUniqueAliases\n  \"Convenience for calling [[lib.metadata.calculation/visible-columns]] on all of the joins in a query stage.\"\n  [query          :- ::lib.schema/query\n   stage-number   :- :int\n   unique-name-fn :- ::lib.metadata.calculation/unique-name-fn]\n  (into []\n        (mapcat (fn [join]\n                  (lib.metadata.calculation/visible-columns query\n                                                            stage-number\n                                                            join\n                                                            {:unique-name-fn               unique-name-fn\n                                                             :include-implicitly-joinable? false})))\n        (:joins (lib.util/query-stage query stage-number))))\n\n(mu/defn all-joins-expected-columns :- lib.metadata.calculation/ColumnsWithUniqueAliases\n  \"Convenience for calling [[lib.metadata.calculation/returned-columns-method]] on all the joins in a query stage.\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   options      :- lib.metadata.calculation/ReturnedColumnsOptions]\n  (into []\n        (mapcat (fn [join]\n                  (lib.metadata.calculation/returned-columns query stage-number join options)))\n        (:joins (lib.util/query-stage query stage-number))))\n\n(defmulti ^:private join-clause-method\n  \"Convert something to a join clause.\"\n  {:arglists '([joinable])}\n  lib.dispatch/dispatch-value\n  :hierarchy lib.hierarchy/hierarchy)\n\n;; TODO -- should the default implementation call [[metabase.lib.query/query]]? That way if we implement a method to\n;; create an MBQL query from a `Table`, then we'd also get [[join]] support for free?\n\n(defmethod join-clause-method :mbql/join\n  [a-join-clause]\n  a-join-clause)\n\n;;; TODO -- this probably ought to live in [[metabase.lib.query]]\n(defmethod join-clause-method :mbql/query\n  [another-query]\n  (-> {:lib/type :mbql/join\n       :stages   (:stages (lib.util/pipeline another-query))}\n      lib.options/ensure-uuid))\n\n;;; TODO -- this probably ought to live in [[metabase.lib.stage]]\n(defmethod join-clause-method :mbql.stage/mbql\n  [mbql-stage]\n  (-> {:lib/type :mbql/join\n       :stages   [mbql-stage]}\n      lib.options/ensure-uuid))\n\n(defmethod join-clause-method :metadata/card\n  [card]\n  (-> {:lib/type :mbql/join\n       :stages [{:source-card (:id card)\n                 :lib/type :mbql.stage/mbql}]}\n      lib.options/ensure-uuid))\n\n(declare with-join-fields)\n\n(defmethod join-clause-method :metadata/table\n  [{::keys [join-alias join-fields], :as table-metadata}]\n  (cond-> (join-clause-method {:lib/type     :mbql.stage/mbql\n                               :lib/options  {:lib/uuid (str (random-uuid))}\n                               :source-table (:id table-metadata)})\n    join-alias  (with-join-alias join-alias)\n    join-fields (with-join-fields join-fields)))\n\n(defn- with-join-conditions-add-alias-to-rhses\n  \"Add `join-alias` to the RHS of all [[standard-join-condition?]] `conditions` that don't already have a `:join-alias`.\n  If an RHS already has a `:join-alias`, don't second guess what was already explicitly specified.\"\n  [conditions join-alias]\n  (if-not join-alias\n    conditions\n    (mapv (fn [condition]\n            (or (when-let [rhs (standard-join-condition-rhs condition)]\n                  (when-not (lib.join.util/current-join-alias rhs)\n                    (standard-join-condition-update-rhs condition with-join-alias join-alias)))\n                condition))\n          conditions)))\n\n(mu/defn with-join-conditions :- lib.join.util/PartialJoin\n  \"Update the `:conditions` (filters) for a Join clause.\"\n  {:style/indent [:form]}\n  [a-join     :- lib.join.util/PartialJoin\n   conditions :- [:maybe [:sequential [:or ::lib.schema.expression/boolean ::lib.schema.common/external-op]]]]\n  (let [conditions (-> (mapv lib.common/->op-arg conditions)\n                       (with-join-conditions-add-alias-to-rhses (lib.join.util/current-join-alias a-join)))]\n    (u/assoc-dissoc a-join :conditions (not-empty conditions))))\n\n(mu/defn with-join-fields :- lib.join.util/PartialJoin\n  \"Update a join (or a function that will return a join) to include `:fields`, either `:all`, `:none`, or a sequence of\n  references.\"\n  [joinable :- lib.join.util/PartialJoin\n   fields   :- [:maybe [:or [:enum :all :none] [:sequential some?]]]]\n  (let [fields (cond\n                 (keyword? fields) fields\n                 (= fields [])     :none\n                 :else             (not-empty\n                                    (into []\n                                          (comp (map lib.ref/ref)\n                                                (if-let [current-alias (lib.join.util/current-join-alias joinable)]\n                                                  (map #(with-join-alias % current-alias))\n                                                  identity))\n                                          fields)))]\n    (u/assoc-dissoc joinable :fields fields)))\n\n(defn- select-home-column\n  [home-cols cond-fields]\n  (let [cond-home-cols (keep #(lib.equality/find-matching-column % home-cols) cond-fields)]\n    ;; first choice: the leftmost FK or PK in the condition referring to a home column\n    (or (m/find-first (some-fn lib.types.isa/foreign-key? lib.types.isa/primary-key?) cond-home-cols)\n        ;; otherwise the leftmost home column in the condition\n        (first cond-home-cols)\n        ;; otherwise the first FK home column\n        (m/find-first lib.types.isa/foreign-key? home-cols)\n        ;; otherwise the first PK home column\n        (m/find-first lib.types.isa/primary-key? home-cols)\n        ;; otherwise the first home column\n        (first home-cols))))\n\n(defn- strip-id [s]\n  (when (string? s)\n    (str/trim (str/replace s #\"(?i) id$\" \"\"))))\n\n(defn- similar-names?\n  \"Checks if `name0` and `name1` are similar.\n  Two names are considered similar if they are the same, one is the plural of the other,\n  or their plurals are equal.\n  This is used to avoid repeating ourselves in situations like when we have a table called\n  PRODUCTS and a field (presumably referring to that table) called PRODUCT.\"\n  [name0 name1]\n  (and (string? name0) (string? name1)\n       (let [plural1 (delay (inflections/plural name1))\n             plural0 (delay (inflections/plural name0))]\n         (or (= name0 name1)\n             (= name0 @plural1)\n             (= @plural0 name1)\n             (= @plural0 @plural1)))))\n\n(defn- calculate-join-alias [query joined home-col]\n  (let [joined-name (lib.metadata.calculation/display-name\n                     (if (= (:lib/type joined) :mbql/query) joined query)\n                     joined)\n        home-name   (when home-col (strip-id (lib.metadata.calculation/display-name query home-col)))\n        similar     (similar-names? joined-name home-name)\n        join-alias  (or (and joined-name\n                             home-name\n                             (not (re-matches #\"(?i)id\" home-name))\n                             (not similar)\n                             (str joined-name \" - \" home-name))\n                        joined-name\n                        home-name\n                        \"source\")]\n    join-alias))\n\n(defn- add-alias-to-join-refs [query stage-number form join-alias join-cols]\n  (lib.util.match/replace form\n    (field :guard (fn [field-clause]\n                    (and (lib.util/field-clause? field-clause)\n                         (boolean (lib.equality/find-matching-column query stage-number field-clause join-cols)))))\n    (with-join-alias field join-alias)))\n\n(defn- add-alias-to-condition\n  [query stage-number condition join-alias home-cols join-cols]\n  (let [condition (add-alias-to-join-refs query stage-number condition join-alias join-cols)]\n    ;; Sometimes conditions have field references which cannot be unambigously\n    ;; assigned to one of the sides. The following code tries to deal with\n    ;; these cases, but only for conditions that look like the ones generated\n    ;; generated by the FE. These have the form home-field op join-field,\n    ;; so we break ties by looking at the poisition of the field reference.\n    (lib.util.match/replace condition\n      [op op-opts (lhs :guard lib.util/field-clause?) (rhs :guard lib.util/field-clause?)]\n      (let [lhs-alias (lib.join.util/current-join-alias lhs)\n            rhs-alias (lib.join.util/current-join-alias rhs)]\n        (cond\n          ;; no sides obviously belong to joined\n          (not (or lhs-alias rhs-alias))\n          (if (lib.equality/find-matching-column query stage-number rhs home-cols)\n            [op op-opts (with-join-alias lhs join-alias) rhs]\n            [op op-opts lhs (with-join-alias rhs join-alias)])\n\n          ;; both sides seem to belong to joined assuming this resulted from\n          ;; overly fuzzy matching, we remove the join alias from the LHS\n          ;; unless the RHS seems to belong to home too while the LHS doesn't\n          (and (= lhs-alias join-alias) (= rhs-alias join-alias))\n          (let [bare-lhs (lib.options/update-options lhs dissoc :join-alias)\n                bare-rhs (lib.options/update-options rhs dissoc :join-alias)]\n            (if (and (nil? (lib.equality/find-matching-column query stage-number bare-lhs home-cols))\n                     (lib.equality/find-matching-column query stage-number bare-rhs home-cols))\n              [op op-opts lhs bare-rhs]\n              [op op-opts bare-lhs rhs]))\n\n          ;; we leave alone the condition otherwise\n          :else &match)))))\n\n(defn- generate-unique-name [metadata-providerable base-name taken-names]\n  (let [generator (lib.util/unique-name-generator (lib.metadata/->metadata-provider metadata-providerable))]\n    (run! generator taken-names)\n    (generator base-name)))\n\n(mu/defn add-default-alias :- ::lib.schema.join/join\n  \"Add a default generated `:alias` to a join clause that does not already have one.\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   a-join       :- lib.join.util/JoinWithOptionalAlias]\n  (if (contains? a-join :alias)\n    ;; if the join clause comes with an alias, keep it and assume that the\n    ;; condition fields have the right join-aliases too\n    a-join\n    (let [stage       (lib.util/query-stage query stage-number)\n          home-cols   (lib.metadata.calculation/visible-columns query stage-number stage)\n          cond-fields (lib.util.match/match (:conditions a-join) :field)\n          home-col    (select-home-column home-cols cond-fields)\n          join-alias  (as-> (calculate-join-alias query a-join home-col) s\n                        (generate-unique-name query s (keep :alias (:joins stage))))\n          join-cols   (lib.metadata.calculation/returned-columns\n                       (lib.query/query-with-stages query (:stages a-join)))]\n      (-> a-join\n          (update :conditions\n                  (fn [conditions]\n                    (mapv #(add-alias-to-condition query stage-number % join-alias home-cols join-cols)\n                          conditions)))\n          (with-join-alias join-alias)))))\n\n(declare join-conditions\n         joined-thing\n         suggested-join-conditions)\n\n(mu/defn joins :- [:maybe ::lib.schema.join/joins]\n  \"Get all joins in a specific `stage` of a `query`. If `stage` is unspecified, returns joins in the final stage of the\n  query.\"\n  ([query]\n   (joins query -1))\n  ([query        :- ::lib.schema/query\n    stage-number :- :int]\n   (not-empty (get (lib.util/query-stage query stage-number) :joins))))\n\n(mu/defn join-conditions :- [:maybe ::lib.schema.join/conditions]\n  \"Get all join conditions for the given join\"\n  [a-join :- lib.join.util/PartialJoin]\n  (:conditions a-join))\n\n(mu/defn join-fields :- [:maybe ::lib.schema.join/fields]\n  \"Get all join conditions for the given join\"\n  [a-join :- lib.join.util/PartialJoin]\n  (:fields a-join))\n\n(defn- raw-join-strategy->strategy-option [raw-strategy]\n  (merge\n   {:lib/type :option/join.strategy\n    :strategy raw-strategy}\n   (when (= raw-strategy :left-join)\n     {:default true})))\n\n(mu/defn raw-join-strategy :- ::lib.schema.join/strategy\n  \"Get the raw keyword strategy (type) of a given join, e.g. `:left-join` or `:right-join`. This is either the value\n  of the optional `:strategy` key or the default, `:left-join`, if `:strategy` is not specified.\"\n  [a-join :- lib.join.util/PartialJoin]\n  (get a-join :strategy :left-join))\n\n(mu/defn join-strategy :- ::lib.schema.join/strategy.option\n  \"Get the strategy (type) of a given join, as a `:option/join.strategy` map. If `:stategy` is unspecified, returns\n  the default, left join.\"\n  [a-join :- lib.join.util/PartialJoin]\n  (raw-join-strategy->strategy-option (raw-join-strategy a-join)))\n\n(mu/defn with-join-strategy :- lib.join.util/PartialJoin\n  \"Return a copy of `a-join` with its `:strategy` set to `strategy`.\"\n  [a-join   :- lib.join.util/PartialJoin\n   strategy :- [:or ::lib.schema.join/strategy ::lib.schema.join/strategy.option]]\n  ;; unwrap the strategy to a raw keyword if needed.\n  (assoc a-join :strategy (cond-> strategy\n                            (= (lib.dispatch/dispatch-value strategy) :option/join.strategy)\n                            :strategy)))\n\n(mu/defn available-join-strategies :- [:sequential ::lib.schema.join/strategy.option]\n  \"Get available join strategies for the current Database (based on the Database's\n  supported [[metabase.driver/features]]) as raw keywords like `:left-join`.\"\n  ([query]\n   (available-join-strategies query -1))\n\n  ;; stage number is not currently used, but it is taken as a parameter for consistency with the rest of MLv2\n  ([query         :- ::lib.schema/query\n    _stage-number :- :int]\n   (let [database (lib.metadata/database query)\n         features (:features database)]\n     (into []\n           (comp (filter (partial contains? features))\n                 (map raw-join-strategy->strategy-option))\n           [:left-join :right-join :inner-join :full-join]))))\n\n(mu/defn join-clause :- lib.join.util/PartialJoin\n  \"Create an MBQL join map from something that can conceptually be joined against. A `Table`? An MBQL or native query? A\n  Saved Question? You should be able to join anything, and this should return a sensible MBQL join map. Uses a left join\n  by default.\"\n  ([joinable]\n   (-> (join-clause-method joinable)\n       (u/assoc-default :fields :all)))\n\n  ([joinable conditions]\n   (join-clause joinable conditions :left-join))\n\n  ([joinable conditions strategy]\n   (-> (join-clause joinable)\n       (with-join-conditions conditions)\n       (with-join-strategy strategy))))\n\n(mu/defn join :- ::lib.schema/query\n  \"Add a join clause to a `query`.\"\n  ([query a-join]\n   (join query -1 a-join))\n\n  ([query        :- ::lib.schema/query\n     stage-number :- :int\n     a-join       :- [:or lib.join.util/PartialJoin Joinable]]\n   (let [a-join              (join-clause a-join)\n         suggested-conditions (when (empty? (join-conditions a-join))\n                                (suggested-join-conditions query stage-number (joined-thing query a-join)))\n         a-join              (cond-> a-join\n                               (seq suggested-conditions) (with-join-conditions suggested-conditions))\n         a-join              (add-default-alias query stage-number a-join)]\n     (lib.util/update-query-stage query stage-number update :joins (fn [existing-joins]\n                                                                     (conj (vec existing-joins) a-join))))))\n\n(mu/defn joined-thing :- [:maybe Joinable]\n  \"Return metadata about the origin of `a-join` using `metadata-providerable` as the source of information.\"\n  [metadata-providerable :- ::lib.schema.metadata/metadata-providerable\n   a-join                :- lib.join.util/PartialJoin]\n  (let [origin (-> a-join :stages first)]\n    (cond\n      (:source-card origin)  (lib.metadata/card metadata-providerable (:source-card origin))\n      (:source-table origin) (lib.metadata/table metadata-providerable (:source-table origin)))))\n\n;;; Building join conditions:\n;;;\n;;; The QB GUI needs to build a join condition before the join itself is attached to the query. There are three parts\n;;; to a join condition. Suppose we're building a query like\n;;;\n;;;    SELECT * FROM order JOIN user ON order.user_id = user.id\n;;;\n;;; The condition is\n;;;\n;;;    order.user_id  =  user.id\n;;;    ^^^^^^^^^^^^^  ^  ^^^^^^^\n;;;          1        2     3\n;;;\n;;; and the three parts are:\n;;;\n;;; 1. LHS/source column: the column in the left-hand side of the condition, e.g. the `order.user_id` in the example\n;;;    above. Either comes from the source Table, or a previous stage of the query, or a previously-joined\n;;;    Table/Model/Saved Question. `order.user_id` presumably is an FK to `user.id`, and while this is typical, is not\n;;;    required.\n;;;\n;;; 2. The operator: `=` in the example above. Corresponds to an `:=` MBQL clause. `=` is selected by default.\n;;;\n;;; 3. RHS/destination/target column: the column in the right-hand side of the condition e.g. `user.id` in the example\n;;;    above. `user.id` is a column in the Table/Model/Saved Question we are joining against.\n;;;\n;;; The Query Builder allows selecting any of these three parts in any order. The functions below return possible\n;;; options for each respective part. At the time of this writing, selecting one does not filter out incompatible\n;;; options for the other parts, but hopefully we can implement this in the future -- see #31174\n\n(mu/defn ^:private sort-join-condition-columns :- [:sequential ::lib.schema.metadata/column]\n  \"Sort potential join condition columns as returned by [[join-condition-lhs-columns]]\n  or [[join-condition-rhs-columns]]. PK columns are returned first, followed by FK columns, followed by other columns.\n  Otherwise original order is maintained.\"\n  [columns :- [:sequential ::lib.schema.metadata/column]]\n  (let [{:keys [pk fk other]} (group-by (fn [column]\n                                          (cond\n                                            (lib.types.isa/primary-key? column) :pk\n                                            (lib.types.isa/foreign-key? column) :fk\n                                            :else                               :other))\n                                        columns)]\n    (concat pk fk other)))\n\n(defn- mark-selected-column [query stage-number existing-column-or-nil columns]\n  (if-not existing-column-or-nil\n    columns\n    (mapv (fn [column]\n            (if (:selected? column)\n              (lib.temporal-bucket/with-temporal-bucket\n                column\n                (lib.temporal-bucket/temporal-bucket existing-column-or-nil))\n              column))\n          (lib.equality/mark-selected-columns query stage-number columns [existing-column-or-nil]))))\n\n(mu/defn join-condition-lhs-columns :- [:sequential ::lib.schema.metadata/column]\n  \"Get a sequence of columns that can be used as the left-hand-side (source column) in a join condition. This column\n  is the one that comes from the source Table/Card/previous stage of the query or a previous join.\n\n  If you are changing the LHS of a condition for an existing join, pass in that existing join as `join-or-joinable` so\n  we can filter out the columns added by it (it doesn't make sense to present the columns added by a join as options\n  for its own LHS) or added by later joins (joins can only depend on things from previous joins). Otherwise you can\n  either pass in `nil` or the [[Joinable]] (Table or Card metadata) we're joining against when building a new\n  join. (Things other than joins are ignored, but this argument is flexible for consistency with the signature\n  of [[join-condition-rhs-columns]].) See #32005 for more info.\n\n  If the left-hand-side column has already been chosen and we're UPDATING it, pass in `lhs-column-or-nil` so we can\n  mark the current column as `:selected` in the metadata/display info.\n\n  If the right-hand-side column has already been chosen (they can be chosen in any order in the Query Builder UI),\n  pass in the chosen RHS column. In the future, this may be used to restrict results to compatible columns. (See #31174)\n\n  Results will be returned in a 'somewhat smart' order with PKs and FKs returned before other columns.\n\n  Unlike most other things that return columns, implicitly-joinable columns ARE NOT returned here.\"\n  ([query joinable lhs-column-or-nil rhs-column-or-nil]\n   (join-condition-lhs-columns query -1 joinable lhs-column-or-nil rhs-column-or-nil))\n\n  ([query              :- ::lib.schema/query\n    stage-number       :- :int\n    join-or-joinable   :- [:maybe JoinOrJoinable]\n    lhs-column-or-nil  :- [:maybe lib.join.util/Field]\n    ;; not yet used, hopefully we will use in the future when present for filtering incompatible columns out.\n    _rhs-column-or-nil :- [:maybe lib.join.util/Field]]\n   ;; calculate all the visible columns including the existing join; then filter out any columns that come from the\n   ;; existing join and any subsequent joins. The reason for doing things this way rather than removing the joins\n   ;; before calculating visible columns is that we don't want to either create possibly-invalid queries, or have to\n   ;; rely on the logic in [[metabase.lib.remove-replace/remove-join]] which would cause circular references; this is\n   ;; simpler as well.\n   ;;\n   ;; e.g. if we have joins [J1 J2 J3 J4] and current join = J2, then we want to ignore the visible columns from J2,\n   ;; J3, and J4.\n   (let [existing-join-alias    (when (join? join-or-joinable)\n                                  (lib.join.util/current-join-alias join-or-joinable))\n         join-aliases-to-ignore (into #{}\n                                      (comp (map lib.join.util/current-join-alias)\n                                            (drop-while #(not= % existing-join-alias)))\n                                      (joins query stage-number))\n         lhs-column-or-nil      (or lhs-column-or-nil\n                                    (when (join? join-or-joinable)\n                                      (standard-join-condition-lhs (first (join-conditions join-or-joinable)))))]\n     (->> (lib.metadata.calculation/visible-columns query stage-number\n                                                    (lib.util/query-stage query stage-number)\n                                                    {:include-implicitly-joinable? false})\n          (remove (fn [col]\n                    (when-let [col-join-alias (lib.join.util/current-join-alias col)]\n                      (contains? join-aliases-to-ignore col-join-alias))))\n          (mark-selected-column query stage-number lhs-column-or-nil)\n          sort-join-condition-columns))))\n\n(mu/defn join-condition-rhs-columns :- [:sequential ::lib.schema.metadata/column]\n  \"Get a sequence of columns that can be used as the right-hand-side (target column) in a join condition. This column\n  is the one that belongs to the thing being joined, `join-or-joinable`, which can be something like a\n  Table ([[metabase.lib.metadata/TableMetadata]]), Saved Question/Model ([[metabase.lib.metadata/CardMetadata]]),\n  another query, etc. -- anything you can pass to [[join-clause]]. You can also pass in an existing join.\n\n  If the left-hand-side column has already been chosen (they can be chosen in any order in the Query Builder UI),\n  pass in the chosen LHS column. In the future, this may be used to restrict results to compatible columns. (See #31174)\n\n  If the right-hand-side column has already been chosen and we're UPDATING it, pass in `rhs-column-or-nil` so we can\n  mark the current column as `:selected` in the metadata/display info.\n\n  Results will be returned in a 'somewhat smart' order with PKs and FKs returned before other columns.\"\n  ([query joinable lhs-column-or-nil rhs-column-or-nil]\n   (join-condition-rhs-columns query -1 joinable lhs-column-or-nil rhs-column-or-nil))\n\n  ([query              :- ::lib.schema/query\n    stage-number       :- :int\n    join-or-joinable   :- JoinOrJoinable\n    ;; not yet used, hopefully we will use in the future when present for filtering incompatible columns out.\n    _lhs-column-or-nil :- [:maybe lib.join.util/Field]\n    rhs-column-or-nil  :- [:maybe lib.join.util/Field]]\n   ;; I was on the fence about whether these should get `:lib/source :source/joins` or not -- it seems like based on\n   ;; the QB UI they shouldn't. See screenshots in #31174\n   (let [joinable          (if (join? join-or-joinable)\n                             (joined-thing query join-or-joinable)\n                             join-or-joinable)\n         join-alias        (when (join? join-or-joinable)\n                             (lib.join.util/current-join-alias join-or-joinable))\n         rhs-column-or-nil (or rhs-column-or-nil\n                               (when (join? join-or-joinable)\n                                 (standard-join-condition-rhs (first (join-conditions join-or-joinable)))))\n         rhs-column-or-nil (when rhs-column-or-nil\n                             (cond-> rhs-column-or-nil\n                               ;; Drop the :join-alias from the RHS if the joinable doesn't have one either.\n                               (not join-alias) (lib.options/update-options dissoc :join-alias)))]\n     (->> (lib.metadata.calculation/visible-columns query stage-number joinable {:include-implicitly-joinable? false})\n          (map (fn [col]\n                 (cond-> (assoc col :lib/source :source/joins)\n                   join-alias (with-join-alias join-alias))))\n          (mark-selected-column query stage-number rhs-column-or-nil)\n          sort-join-condition-columns))))\n\n(mu/defn join-condition-operators :- [:sequential ::lib.schema.filter/operator]\n  \"Return a sequence of valid filter clause operators that can be used to build a join condition. In the Query Builder\n  UI, this can be chosen at any point before or after choosing the LHS and RHS. Invalid options are not currently\n  filtered out based on values of the LHS or RHS, but in the future we can add this -- see #31174.\"\n  ([query lhs-column-or-nil rhs-column-or-nil]\n   (join-condition-operators query -1 lhs-column-or-nil rhs-column-or-nil))\n\n  ([_query             :- ::lib.schema/query\n    _stage-number      :- :int\n    ;; not yet used, hopefully we will use in the future when present for filtering incompatible options out.\n    _lhs-column-or-nil :- [:maybe ::lib.schema.metadata/column]\n    _rhs-column-or-nil :- [:maybe ::lib.schema.metadata/column]]\n   ;; currently hardcoded to these six operators regardless of LHS and RHS.\n   lib.filter.operator/join-operators))\n\n(mu/defn ^:private fk-columns-to :- [:maybe [:sequential\n                                             {:min 1}\n                                             [:and\n                                              ::lib.schema.metadata/column\n                                              [:map\n                                               [::target ::lib.schema.metadata/column]]]]]\n  \"Find FK columns in `source` pointing at a column in `target`. Includes the target column under the `::target` key.\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   source\n   target]\n  (let [target-columns (delay\n                         (lib.metadata.calculation/visible-columns\n                          query stage-number target\n                          {:include-implicitly-joinable?                 false\n                           :include-implicitly-joinable-for-source-card? false}))]\n    (not-empty\n     (into []\n           (keep (fn [{:keys [fk-target-field-id], :as col}]\n                   (when (and (lib.types.isa/foreign-key? col)\n                              fk-target-field-id)\n                     (when-let [target-column (m/find-first (fn [target-column]\n                                                              (= fk-target-field-id\n                                                                 (:id target-column)))\n                                                            @target-columns)]\n                       (assoc col ::target target-column)))))\n           (lib.metadata.calculation/visible-columns query stage-number source\n                                                     {:include-implicitly-joinable?                 false\n                                                      :include-implicitly-joinable-for-source-card? false})))))\n\n(mu/defn suggested-join-conditions :- [:maybe [:sequential {:min 1} ::lib.schema.expression/boolean]] ; i.e., a filter clause\n  \"Return suggested default join conditions when constructing a join against `joinable`, e.g. a Table, Saved\n  Question, or another query. Suggested conditions will be returned if the source Table has a foreign key to the\n  primary key of the thing we're joining (see #31175 for more info); otherwise this will return `nil` if no default\n  conditions are suggested.\"\n  ([query joinable]\n   (suggested-join-conditions query -1 joinable nil))\n\n  ([query stage-number joinable]\n   (suggested-join-conditions query stage-number joinable nil))\n\n  ([query         :- ::lib.schema/query\n    stage-number  :- :int\n    joinable\n    position      :- [:maybe :int]]\n   (let [unjoined (if position\n                    ;; Drop this join and any later ones so they won't be used as suggestions.\n                    (let [new-joins (-> (lib.util/query-stage query stage-number)\n                                        :joins\n                                        (subvec 0 position)\n                                        not-empty)]\n                      (lib.util/update-query-stage query stage-number\n                                                   u/assoc-dissoc :joins new-joins))\n                    ;; If this is a new joinable, use the entire current query.\n                    query)\n         stage    (lib.util/query-stage unjoined stage-number)]\n     (letfn [;; only keep one FK to each target column e.g. for\n             ;;\n             ;;    messages (sender_id REFERENCES user(id),  recipient_id REFERENCES user(id))\n             ;;\n             ;; we only want join on one or the other, not both, because that makes no sense. However with a composite\n             ;; FK -> composite PK suggest multiple conditions. See #34184\n             (fks [source target]\n               (->> (fk-columns-to unjoined stage-number source target)\n                    (m/distinct-by #(-> % ::target :id))\n                    not-empty))\n             (filter-clause [x y]\n               ;; DO NOT force broken refs for fields that come from Cards (broken refs in this case means use Field\n               ;; ID refs instead of nominal field literal refs), that will break things if a Card returns the same\n               ;; Field more than once (there would be no way to disambiguate). See #34227 for more info\n               (let [x (dissoc x ::lib.card/force-broken-id-refs)\n                     y (dissoc y ::lib.card/force-broken-id-refs)]\n                 (lib.filter/filter-clause (lib.filter.operator/operator-def :=) x y)))]\n       (or\n        ;; find cases where we have FK(s) pointing to joinable. Our column goes on the LHS.\n        (when-let [fks (fks stage joinable)]\n          (mapv (fn [fk]\n                  (filter-clause fk (::target fk)))\n                fks))\n        ;; find cases where the `joinable` has FK(s) pointing to us. Note our column is the target this time around --\n        ;; keep in on the LHS.\n        (when-let [fks (fks joinable stage)]\n          (mapv (fn [fk]\n                  (filter-clause (::target fk) fk))\n                fks)))))))\n\n(defn- xform-add-join-alias [metadata-providerable a-join]\n  (let [join-alias (lib.join.util/current-join-alias a-join)]\n    (fn [xf]\n      (let [unique-name-fn (lib.util/unique-name-generator (lib.metadata/->metadata-provider metadata-providerable))]\n        (fn\n          ([] (xf))\n          ([result] (xf result))\n          ([result input]\n           (as-> input col\n             (with-join-alias col join-alias)\n             (assoc col :source-alias join-alias)\n             (add-source-and-desired-aliases a-join unique-name-fn col)\n             (xf result col))))))))\n\n(defn- xform-mark-selected-joinable-columns\n  \"Mark the column metadatas in `cols` as `:selected` if they appear in `a-join`'s `:fields`.\"\n  [a-join]\n  (let [j-fields (join-fields a-join)]\n    (case j-fields\n      :all        (map #(assoc % :selected? true))\n      (:none nil) (map #(assoc % :selected? false))\n      (mapcat #(lib.equality/mark-selected-columns [%] j-fields)))))\n\n(def ^:private xform-fix-source-for-joinable-columns\n  (map #(assoc % :lib/source :source/joins)))\n\n(mu/defn joinable-columns :- [:sequential ::lib.schema.metadata/column]\n  \"Return information about the fields that you can pass to [[with-join-fields]] when constructing a join against\n  something [[Joinable]] (i.e., a Table or Card) or manipulating an existing join. When passing in a join, currently\n  selected columns (those in the join's `:fields`) will include `:selected true` information.\"\n  [query            :- ::lib.schema/query\n   stage-number     :- :int\n   join-or-joinable :- JoinOrJoinable]\n  (let [a-join   (when (join? join-or-joinable)\n                   join-or-joinable)\n        source (if a-join\n                 (joined-thing query join-or-joinable)\n                 join-or-joinable)\n        cols   (lib.metadata.calculation/returned-columns query stage-number source)]\n    (into []\n          (if a-join\n            (comp xform-fix-source-for-joinable-columns\n                  (xform-add-join-alias query a-join)\n                  (xform-mark-selected-joinable-columns a-join))\n            identity)\n          cols)))\n\n(defn- join-lhs-display-name-from-condition-lhs\n  [query stage-number join-or-joinable condition-lhs-column-or-nil]\n  (when-let [condition-lhs-column (or condition-lhs-column-or-nil\n                                      (when (join? join-or-joinable)\n                                        (standard-join-condition-lhs (first (join-conditions join-or-joinable)))))]\n    (let [display-info (lib.metadata.calculation/display-info query stage-number condition-lhs-column)]\n      (get-in display-info [:table :display-name]))))\n\n(defn- first-join?\n  \"Whether a `join-or-joinable` is (or will be) the first join in a stage of a query.\n\n  If a join is passed, we need to check whether it's the first join in the first stage of a source-table query or\n  not.\n\n  New joins get appended after any existing ones, so it would be safe to assume that if there are any other joins in\n  the current stage, this **will not** be the first join in the stage.\"\n  [query stage-number join-or-joinable]\n  (let [existing-joins (joins query stage-number)]\n    (or\n     ;; if there are no existing joins, then this will be the first join regardless of what is passed in.\n     (empty? existing-joins)\n     ;; otherwise there ARE existing joins, so this is only the first join if it is the same thing as the first join\n     ;; in `existing-joins`.\n     (when (join? join-or-joinable)\n       (= (:alias join-or-joinable)\n          (:alias (first existing-joins)))))))\n\n(defn- join-lhs-display-name-for-first-join-in-first-stage\n  [query stage-number join-or-joinable]\n  (when (and (zero? (lib.util/canonical-stage-index query stage-number)) ; first stage?\n             (first-join? query stage-number join-or-joinable)           ; first join?\n             (lib.util/source-table-id query))                           ; query ultimately uses source Table?\n    (let [table-id (lib.util/source-table-id query)\n          table    (lib.metadata/table query table-id)]\n      ;; I think `:default` display name style is okay here, there shouldn't be a difference between `:default` and\n      ;; `:long` for a Table anyway\n      (lib.metadata.calculation/display-name query stage-number table))))\n\n(mu/defn join-lhs-display-name :- ::lib.schema.common/non-blank-string\n  \"Get the display name for whatever we are joining. See #32015 and #32764 for screenshot examples.\n\n  The rules, copied from MLv1, are as follows:\n\n  1. If we have the LHS column for the first join condition, we should use display name for wherever it comes from. E.g.\n     if the join is\n\n     ```\n     JOIN whatever ON orders.whatever_id = whatever.id\n     ```\n\n     then we should display the join like this:\n\n    ```\n    +--------+   +----------+    +-------------+    +----------+\n    | Orders | + | Whatever | on | Orders      | =  | Whatever |\n    |        |   |          |    | Whatever ID |    | ID       |\n    +--------+   +----------+    +-------------+    +----------+\n    ```\n\n    1a. If `join-or-joinable` is a join, we can take the condition LHS column from the join itself, since a join will\n        always have a condition. This should only apply to [[standard-join-condition?]] conditions.\n\n    1b. When building a join, you can optionally pass in `condition-lhs-column-or-nil` yourself.\n\n  2. If the condition LHS column is unknown, and this is the first join in the first stage of a query, and the query\n     uses a `:source-table`, then use the display name for the source Table.\n\n  3. Otherwise use `Previous results`.\n\n  This function needs to be usable while we are in the process of constructing a join in the context of a given stage,\n  but also needs to work for rendering existing joins. Pass a join in for existing joins, or something [[Joinable]]\n  for ones we are currently building.\"\n  ([query join-or-joinable]\n   (join-lhs-display-name query join-or-joinable nil))\n\n  ([query join-or-joinable condition-lhs-column-or-nil]\n   (join-lhs-display-name query -1 join-or-joinable condition-lhs-column-or-nil))\n\n  ([query                       :- ::lib.schema/query\n    stage-number                :- :int\n    join-or-joinable            :- [:maybe JoinOrJoinable]\n    condition-lhs-column-or-nil :- [:maybe [:or ::lib.schema.metadata/column :mbql.clause/field]]]\n   (or\n    (join-lhs-display-name-from-condition-lhs query stage-number join-or-joinable condition-lhs-column-or-nil)\n    (join-lhs-display-name-for-first-join-in-first-stage query stage-number join-or-joinable)\n    (i18n/tru \"Previous results\"))))\n\n(mu/defn join-condition-update-temporal-bucketing :- ::lib.schema.expression/boolean\n  \"Updates the provided join-condition's fields' temporal-bucketing option, returns the updated join-condition.\n   Must be called on a standard join condition as per [[standard-join-condition?]].\n   This will sync both the lhs and rhs fields, and the fields that support the provided option will be updated.\n   Fields that do not support the provided option will be ignored.\"\n  ([query :- ::lib.schema/query\n    join-condition :- [:or ::lib.schema.expression/boolean ::lib.schema.common/external-op]\n    option-or-unit :- [:maybe [:or\n                               ::lib.schema.temporal-bucketing/option\n                               ::lib.schema.temporal-bucketing/unit]]]\n   (join-condition-update-temporal-bucketing query -1 join-condition option-or-unit))\n  ([query :- ::lib.schema/query\n    stage-number :- :int\n    join-condition :- [:or ::lib.schema.expression/boolean ::lib.schema.common/external-op]\n    option-or-unit :- [:maybe [:or\n                               ::lib.schema.temporal-bucketing/option\n                               ::lib.schema.temporal-bucketing/unit]]]\n   (let [[_ _ lhs rhs :as join-condition] (lib.common/->op-arg join-condition)]\n     (assert (standard-join-condition? join-condition)\n             (i18n/tru \"Non-standard join condition. {0}\" (pr-str join-condition)))\n     (let [unit (cond-> option-or-unit\n                  (not (keyword? option-or-unit)) :unit)\n           stage-number (lib.util/canonical-stage-index query stage-number)\n           available-lhs (lib.temporal-bucket/available-temporal-buckets query stage-number lhs)\n           available-rhs (lib.temporal-bucket/available-temporal-buckets query stage-number rhs)\n           sync-lhs? (or (nil? unit) (contains? (set (map :unit available-lhs)) unit))\n           sync-rhs? (or (nil? unit) (contains? (set (map :unit available-rhs)) unit))]\n       (cond-> join-condition\n         sync-lhs? (update 2 lib.temporal-bucket/with-temporal-bucket unit)\n         sync-rhs? (update 3 lib.temporal-bucket/with-temporal-bucket unit))))))\n\n(defmethod lib.metadata.calculation/describe-top-level-key-method :joins\n  [query stage-number _key]\n  (some->> (not-empty (joins query stage-number))\n           (map #(lib.metadata.calculation/display-name query stage-number %))\n           (str/join \" + \")))\n"]}