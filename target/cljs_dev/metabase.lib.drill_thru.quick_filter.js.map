{"version":3,"sources":["metabase/lib/drill_thru/quick_filter.cljc"],"mappings":"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","names":["var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","metabase.lib.drill-thru.quick-filter/operator","seq79322","G__79323","cljs.core/first","cljs.core/next","self__5711__auto__","op","args","metabase.lib.options/ensure-uuid","cljs.core.into","metabase.lib.drill-thru.quick-filter/operators-for","column","value","field-ref","metabase.lib.ref/ref","metabase.lib.types.isa/structured?","cljs.core._EQ_","iter__5480__auto__","s__79325","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__79327","cljs.core/chunk-buffer","i__79326","vec__79328","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__79324","cljs.core/chunk-rest","vec__79331","cljs.core/cons","cljs.core/rest","label","metabase.lib.types.isa/string?","metabase.lib.types.isa/string-like?","metabase.lib.drill_thru.quick_filter.operator","metabase.lib.types.isa/numeric?","metabase.lib.types.isa/temporal?","s__79335","b__79337","i__79336","vec__79338","iter__79334","vec__79342","or__5002__auto__","cljs.core/not","fexpr__79341","fexpr__79345","metabase.lib.schema.expression/comparable-expressions?","metabase.lib.types.isa/comment?","metabase.lib.types.isa/description?","s__79347","b__79349","i__79348","vec__79350","iter__79346","vec__79353","s__79357","b__79359","i__79358","vec__79360","iter__79356","vec__79363","p__79366","map__79367","cljs.core/--destructure-map","cljs.core.get","metabase.lib.drill-thru.quick-filter/quick-filter-drill","query","stage-number","column-ref","dimensions","_context","and__5000__auto__","metabase.lib.drill-thru.common/mbql-stage?","cljs.core.not_EQ_","metabase.lib.types.isa/primary-key?","metabase.lib.types.isa/foreign-key?","adjusted","metabase.lib.drill-thru.column-filter/prepare-query-for-drill-addition","cljs.core.merge","metabase.lib.drill-thru.common/drill-thru-info-method","_query","_stage-number","drill-thru","cljs.core/select-keys","cljs.core.update","metabase.lib.drill-thru.common/drill-value->js","operators","cljs.core.mapv","metabase.lib.drill-thru.common/drill-thru-method","p__79369","map__79370","drill","filter-op","quick-filter","p1__79368#","medley.core.find_first","cljs.core.ex_info","metabase.lib.filter.filter","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.lib.drill-thru.quick-filter\n  \"Adds a filter clause with simple operators like `<`, `>`, `=`, `\u2260`, `contains`, does-not-contain`.\n\n  Entry points:\n\n  - Cell\n\n  Requirements:\n\n  - Column not `type/PK`, `type/FK`, or `type/Structured`\n\n  - Column can be filtered upon (exists in `filterableColumns`)\n\n  - If the column is an aggregation, there must be breakouts. It doesn't make sense to filter on the value of a single\n    row aggregation.\n\n  - For `null` value, allow only `=` and `\u2260` operators, which map to `is-null` and `not-null` filter operators\n\n  - For date and numeric columns, allow `<`, `>`, `=`, `\u2260` operators\n\n  - For string columns which have `type/Comment` or `type/Description` semantic type, allow `contains` and\n    `does-not-contain` operators.\n\n  - For other cases, including string columns, allow only `=` and `\u2260` operators.\n\n  - Return raw `value` in `displayInfo` for the drill. Is it used to show `Is ${value}` for string column operators.\n\n  Query transformation:\n\n  - Add a filter clause based on the selected column, value, and the operator\n\n  - Append a query stage if the selected column is coming from an aggregation or breakout clause.\n\n  Question transformation:\n\n  - None\n\n  There is a separate function `filterDrillDetails` which returns `query` and `column` used for the `FilterPicker`. It\n  should automatically append a query stage and find the corresponding _filterable_ column in this stage. It is used\n  for `contains` and `does-not-contain` operators.\"\n  (:require\n   [medley.core :as m]\n   [metabase.lib.drill-thru.column-filter :as lib.drill-thru.column-filter]\n   [metabase.lib.drill-thru.common :as lib.drill-thru.common]\n   [metabase.lib.filter :as lib.filter]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.ref :as lib.ref]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.drill-thru :as lib.schema.drill-thru]\n   [metabase.lib.schema.expression :as lib.schema.expression]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.util.malli :as mu]))\n\n(defn- operator [op & args]\n  (lib.options/ensure-uuid (into [op {}] args)))\n\n(mu/defn ^:private operators-for :- [:sequential ::lib.schema.drill-thru/drill-thru.quick-filter.operator]\n  [column :- ::lib.schema.metadata/column\n   value]\n  (let [field-ref (lib.ref/ref column)]\n    (cond\n      (lib.types.isa/structured? column)\n      []\n\n      (= value :null)\n      (for [[op label] (if (or (lib.types.isa/string? column) (lib.types.isa/string-like? column))\n                         [[:is-empty \"=\"] [:not-empty \"\u2260\"]]\n                         [[:is-null \"=\"] [:not-null \"\u2260\"]])]\n        {:name   label\n         :filter (operator op field-ref)})\n\n      (or (lib.types.isa/numeric? column)\n          (lib.types.isa/temporal? column))\n      (for [[op label] [[:<  \"<\"]\n                        [:>  \">\"]\n                        [:=  \"=\"]\n                        [:!= \"\u2260\"]]\n            :when (or (not (#{:< :>} op))\n                      (lib.schema.expression/comparable-expressions? field-ref value))]\n        {:name   label\n         :filter (operator op field-ref value)})\n\n      (and (lib.types.isa/string? column)\n           (or (lib.types.isa/comment? column)\n               (lib.types.isa/description? column)))\n      (for [[op label] [[:contains \"contains\"]\n                        [:does-not-contain \"does-not-contain\"]]]\n        {:name   label\n         :filter (operator op field-ref value)})\n\n      :else\n      (for [[op label] [[:=  \"=\"]\n                        [:!= \"\u2260\"]]]\n        {:name   label\n         :filter (operator op field-ref value)}))))\n\n(mu/defn quick-filter-drill :- [:maybe ::lib.schema.drill-thru/drill-thru.quick-filter]\n  \"Filter the current query based on the value clicked.\n\n  The options vary depending on the type of the field:\n  - `:is-null` and `:not-null` for a `NULL` value;\n  - `:=` and `:!=` for everything else;\n  - plus `:<` and `:>` for numeric and date columns.\n\n  Note that this returns a single `::drill-thru` value with 1 or more `:operators`; these are rendered as a set of small\n  buttons in a single row of the drop-down.\"\n  [query                                                      :- ::lib.schema/query\n   stage-number                                               :- :int\n   {:keys [column column-ref dimensions value], :as _context} :- ::lib.schema.drill-thru/context]\n  (when (and (lib.drill-thru.common/mbql-stage? query stage-number)\n             column\n             (some? value) ; Deliberately allows value :null, only a missing value should fail this test.\n             ;; If this is an aggregation, there must be breakouts (dimensions).\n             (or (not= (:lib/source column) :source/aggregations)\n                 (seq dimensions))\n             (not (lib.types.isa/structured?  column))\n             (not (lib.types.isa/primary-key? column))\n             (not (lib.types.isa/foreign-key? column)))\n    ;; For aggregate columns, we want to introduce a new stage when applying the drill-thru.\n    ;; [[lib.drill-thru.column-filter/prepare-query-for-drill-addition]] handles this. (#34346)\n    (let [adjusted (lib.drill-thru.column-filter/prepare-query-for-drill-addition\n                     query stage-number column column-ref :filter)]\n      (merge {:lib/type   :metabase.lib.drill-thru/drill-thru\n              :type       :drill-thru/quick-filter\n              :operators  (operators-for (:column adjusted) value)\n              :value      value}\n             adjusted))))\n\n(defmethod lib.drill-thru.common/drill-thru-info-method :drill-thru/quick-filter\n  [_query _stage-number drill-thru]\n  (-> (select-keys drill-thru [:type :operators :value])\n      (update :value lib.drill-thru.common/drill-value->js)\n      (update :operators (fn [operators]\n                           (mapv :name operators)))))\n\n(mu/defmethod lib.drill-thru.common/drill-thru-method :drill-thru/quick-filter :- ::lib.schema/query\n  [_query                      :- ::lib.schema/query\n   _stage-number               :- :int\n   {:keys [query stage-number]\n    :as drill}                 :- ::lib.schema.drill-thru/drill-thru.quick-filter\n   filter-op                   :- ::lib.schema.common/non-blank-string]\n  (let [quick-filter (or (m/find-first #(= (:name %) filter-op) (:operators drill))\n                         (throw (ex-info (str \"No matching filter for operator \" filter-op)\n                                         {:drill-thru   drill\n                                          :operator     filter-op\n                                          :query        query\n                                          :stage-number stage-number})))]\n    (lib.filter/filter query stage-number (:filter quick-filter))))\n"]}