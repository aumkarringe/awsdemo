{"version":3,"sources":["metabase/lib/join/util.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;;;;+CAAA,mFAAA,wDAAA,mFAAA,mDAAA,4GAAA,mFAAA,mDAAA,mFAAA,wDAAA,2CAAA,6DAAA,aAAA,mFAAA,mDAAA,x7BAAKA;AAQL;;;qCAAA,mFAAA,qGAAA,mFAAA,mDAAA,mFAAA,kEAAA,2CAAA,6DAAA,aAAA,mFAAA,mDAAA,nvBAAKC,gLAGFD;AAIH;;;+BAAA,mFAAA,gDAAA,mFAAA,mDAAA,wHAAA,mFAAA,mDAAA,tiBAAKE;AAML;;;4CAAA,mFAAA,/HAAKC,+KAEED,6BAAMD;AAEb;;;;;;;4CAAA,5CAASG,gGAENC;AAFH,AAGE,IAAAC,WAAM,AAACG,qCAA4BJ;IAAnCC,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA;;;KAAA;AAEqB,OAAA,+FAAa,AAACI,6BAAoBL;;;KAFvD;AAGqB,OAAA,gIAA+BA;;;KAHpD;AAIqB,OAAA,sFAAQA;;;;AAJ7B,MAAA,KAAAG,MAAA,CAAA,mEAAAF;;;;AAMF;;;;;;;;;;;;oDAAA,pDAASK,gHAONC,WACAC;AARH,AASE,wHAAA,qEAAA,rLAACC,yDAAAA,yFAAAA,zBAAyBF,qEAAAA,1DAAWC,qEAAAA;;AAEvC;;;;;;;;;;;;mDAAA,nDAASE,8GAONC,WACAC;AARH,AASE,wHAAA,oFAAA,pMAACH,yDAAAA,wGAAAA,nCAA8BE,oFAAAA,zEAAWC,oFAAAA;;AAE5C,4CAAA,0DAAAC,tGAAOI,gGAAoBC;AAA3B,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;sBAAAA,lBAAoEO;kBAApE,AAAAL,4CAAAF,eAAA,zEAAyCK;eAAzC,AAAAH,4CAAAF,eAAA,tEAAqDM;AAArD,AACE,oBAAM,iBAAAE,oBAAKH;AAAL,AAAA,oBAAAG;AAAiBF;;AAAjBE;;;AAAN,AACE,IAAAC,qBAAiB,AAACE,oCAA2BP,MAAME;AAAnD,AAAA,oBAAAG;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,IAAMb,aAAqB,AAAA,mFAAOa;IAC5BZ,uBAAqB,AAAA,mFAAO,AAACc,4BAAmBR,MAAMC;AAD5D,AAEE,OAACT,iDAA0BC,WAAWC;;AAH1C;;;AADF;;;AAMF;;;;;;;;;;;;;;;uCAAA,vCAASe,sFAUNT,MACAU;AAXH,AAYE,IAAAC,qBAAoB,iBAAAC,mBAAI,AAAC/B,0CAAmB6B;AAAxB,AAAA,oBAAAE;AAAAA;;AACI,OAACb,0CAAmBC,MAAMU;;;AADlD,AAAA,oBAAAC;AAAA,iBAAAA,bAAStB;AAAT,AAEE,OAACD,kDAA2BC,WAAW,AAAA,mFAAOqB;;AAC9C,OAAA,mFAAOA","names":["metabase.lib.join.util/JoinWithOptionalAlias","metabase.lib.join.util/PartialJoin","metabase.lib.join.util/Field","metabase.lib.join.util/FieldOrPartialJoin","metabase.lib.join.util/current-join-alias","field-or-join","G__76819","cljs.core/Keyword","js/Error","metabase.lib.dispatch/dispatch-value","metabase.lib.options/options","metabase.lib.join.util/joined-field-desired-alias","join-alias","field-name","metabase.lib.util/format","metabase.lib.join.util/format-implicit-join-name","table-name","source-field-id-name","p__76826","map__76827","cljs.core/--destructure-map","cljs.core.get","metabase.lib.join.util/implicit-join-name","query","fk-field-id","table-id","_field-metadata","and__5000__auto__","temp__5804__auto__","table","metabase.lib.metadata/table-or-card","metabase.lib.metadata/field","metabase.lib.join.util/desired-alias","field-metadata","temp__5802__auto__","or__5002__auto__"],"sourcesContent":["(ns metabase.lib.join.util\n  \"Some small join-related helper functions which are used from a few different namespaces.\"\n  (:require\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.join :as lib.schema.join]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.lib.util :as lib.util]\n   [metabase.util.malli :as mu]))\n\n(def JoinWithOptionalAlias\n  \"A Join that may not yet have an `:alias`, which is normally required; [[join]] accepts this and will add a default\n  alias if one is not present.\"\n  [:merge\n   [:ref ::lib.schema.join/join]\n   [:map\n    [:alias {:optional true} [:ref ::lib.schema.join/alias]]]])\n\n(def PartialJoin\n  \"A join that may not yet have an `:alias` or `:conditions`.\"\n  [:merge\n   JoinWithOptionalAlias\n   [:map\n    [:conditions {:optional true} [:ref ::lib.schema.join/conditions]]]])\n\n(def Field\n  \"A field in a join, either `:metabase.lib.schema.metadata/column` or a `:field` ref.\"\n  [:or\n   [:ref ::lib.schema.metadata/column]\n   [:ref :mbql.clause/field]])\n\n(def FieldOrPartialJoin\n  \"A field or a partial join.\"\n  [:or Field PartialJoin])\n\n(mu/defn current-join-alias :- [:maybe ::lib.schema.common/non-blank-string]\n  \"Get the current join alias associated with something, if it has one.\"\n  [field-or-join :- [:maybe FieldOrPartialJoin]]\n  (case (lib.dispatch/dispatch-value field-or-join)\n    :dispatch-type/nil nil\n    :field             (:join-alias (lib.options/options field-or-join))\n    :metadata/column   (:metabase.lib.join/join-alias field-or-join)\n    :mbql/join         (:alias field-or-join)))\n\n(mu/defn joined-field-desired-alias :- ::lib.schema.common/non-blank-string\n  \"Desired alias for a Field that comes from a join, e.g.\n\n    MyJoin__my_field\n\n  You should pass the results thru a unique name function e.g. one returned\n  by [[metabase.lib.util/unique-name-generator]].\"\n  [join-alias :- ::lib.schema.common/non-blank-string\n   field-name :- ::lib.schema.common/non-blank-string]\n  (lib.util/format \"%s__%s\" join-alias field-name))\n\n(mu/defn format-implicit-join-name :- ::lib.schema.common/non-blank-string\n  \"Name for an implicit join against `table-name` via an FK field, e.g.\n\n    CATEGORIES__via__CATEGORY_ID\n\n  You should make sure this gets ran thru a unique-name fn e.g. one returned\n  by [[metabase.lib.util/unique-name-generator]].\"\n  [table-name           :- ::lib.schema.common/non-blank-string\n   source-field-id-name :- ::lib.schema.common/non-blank-string]\n  (lib.util/format \"%s__via__%s\" table-name source-field-id-name))\n\n(defn- implicit-join-name [query {:keys [fk-field-id table-id], :as _field-metadata}]\n  (when (and fk-field-id table-id)\n    (when-let [table (lib.metadata/table-or-card query table-id)]\n      (let [table-name           (:name table)\n            source-field-id-name (:name (lib.metadata/field query fk-field-id))]\n        (format-implicit-join-name table-name source-field-id-name)))))\n\n(mu/defn desired-alias :- ::lib.schema.common/non-blank-string\n  \"Desired alias for a Field e.g.\n\n    my_field\n\n    OR\n\n    MyJoin__my_field\n\n  You should pass the results thru a unique name function.\"\n  [query          :- ::lib.schema/query\n   field-metadata :- ::lib.schema.metadata/column]\n  (if-let [join-alias (or (current-join-alias field-metadata)\n                          (implicit-join-name query field-metadata))]\n    (joined-field-desired-alias join-alias (:name field-metadata))\n    (:name field-metadata)))\n"]}