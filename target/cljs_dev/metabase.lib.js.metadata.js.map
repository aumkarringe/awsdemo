{"version":3,"sources":["metabase/lib/js/metadata.cljs"],"mappings":"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","names":["metabase.lib.js.metadata/memoized-kebab-key","cljs.core/memoize","metabase.util/->kebab-case-en","metabase.lib.js.metadata/object-get","obj","k","and__5000__auto__","metabase.lib.js.metadata.goog$module$goog$object.get","var_args","G__79847","metabase.lib.js.metadata/obj->clj","js/Error","p__79848","map__79849","cljs.core/--destructure-map","cljs.core.get","xform","metabase.lib.js.metadata.obj__GT_clj","use-plain-object?","cljs.core/map?","cljs.core.into","temp__5802__auto__","plain-object","G__79850","cljs.core.js__GT_clj","cljs.core/not-empty","cljs.core.comp","cljs.core.map","cljs.core.remove","p__79851","vec__79852","cljs.core.nth","_k","v","cljs.core/js-keys","js/metabase","js/metabase.lib","js/metabase.lib.js","js/metabase.lib.js.metadata","js/metabase.lib.js.metadata.excluded-keys","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","fexpr__79855","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.js.metadata/excluded-keys","cljs.core/keyword","_","js/metabase.lib.js.metadata.parse-field-fn","fexpr__79856","metabase.lib.js.metadata/parse-field-fn","_object-type","js/metabase.lib.js.metadata.lib-type","fexpr__79857","metabase.lib.js.metadata/lib-type","js/metabase.lib.js.metadata.rename-key-fn","fexpr__79858","metabase.lib.js.metadata/rename-key-fn","cljs.core/identity","metabase.lib.js.metadata/parse-object-xform","object-type","excluded-keys-set","parse-field","rename-key","p__79860","vec__79862","G__79866","cljs.core.keyword","p1__79859#","or__5002__auto__","cljs.core/empty?","p__79868","vec__79869","_v","cljs.core/contains?","cljs.core/not","p__79872","vec__79873","js/metabase.lib.js.metadata.parse-object-fn*","fexpr__79876","metabase.lib.js.metadata/parse-object-fn*","_opts","G__79878","metabase.lib.js.metadata/parse-object-fn","opts","lib-type-name","object","e79879","parsed","cljs.core.assoc","level__73199__auto__","metabase.util.log/glogi-level","logger__73200__auto__","metabase.util.log/is-loggable?","x__73201__auto__","lambdaisland.glogi.log","metabase.util.log.format_msg","metabase.util.pprint_to_str","e","cljs.core.pr_str","cljs.core/ex-message","js/metabase.lib.js.metadata.parse-objects","fexpr__79880","metabase.lib.js.metadata/parse-objects","_metadata","js/metabase.lib.js.metadata.parse-objects-default-key","fexpr__79881","metabase.lib.js.metadata/parse-objects-default-key","metadata","parse-object","metabase.lib.js.metadata.parse_object_fn","p__79882","vec__79883","cljs.core/parse-long","cljs.core/Delay","G__79886","cljs.core/Keyword","G__79887","parse-table","p__79888","vec__79889","clojure.string/starts-with?","p__79892","vec__79893","metabase.lib.js.metadata/parse-field-id","id","G__79896","cljs.core/vector?","cljs.core/second","metabase.lib.js.metadata/parse-binning-info","m","p__79897","vec__79898","cljs.core._EQ_","metabase.lib.js.metadata/parse-field-values","field-values","metabase.lib.js.metadata/parse-dimension","dimensions","temp__5804__auto__","dimension","medley.core.find_first","G__79902","fexpr__79901","dimension-type","cljs.core.merge","G__79903","G__79904","clojure.walk/keywordize-keys","cljs.core/to-array","G__79905","f","fexpr__79906","cljs.core/get-method","unparsed","map__79907","map__79908","G__79909","cljs.core.dissoc","unparsed-fields","cljs.core.keep","p__79910","vec__79911","field-id","vec__79914","id-str","cljs.core/re-matches","metabase.lib.js.metadata/parse-fields","fields","cljs.core.mapv","G__79917","cljs.core.some_fn","cljs.core/sequential?","cljs.core/array?","metabase.lib.js.metadata/unwrap-card","metabase.lib.js.metadata/assemble-card","parse-card-ignoring-plain-object","parse-card","G__79918","G__79919","metabase.lib.util/legacy-string-table-id->card-id","metabase.lib.js.metadata/parse-objects-delay","e79920","metabase.lib.js.metadata/metric-cards","delayed-cards","cljs.core/deref","cards","p__79921","vec__79922","card","cljs.core/select-keys","metabase.lib.js.metadata/parse-metadata","metabase.lib.js.metadata/database","database-id","G__79925","metabase.lib.js.metadata/metadatas","metadata-type","ids","G__79926","metadatas*","G__79927","G__79928","metabase.lib.js.metadata/tables","p__79929","vec__79930","_id","dlay","table","G__79933","G__79934","metabase.lib.js.metadata/metadatas-for-table","table-id","G__79935","p__79936","vec__79937","G__79940","G__79941","metabase.lib.js.metadata/setting","unparsed-metadata","setting-key","cljs.core/name","metabase.lib.js.metadata/metadata-provider*","level__73195__auto__","logger__73196__auto__","x__73197__auto__","cljs.core/print-str","cljs.core.print_str","metabase.lib.js.metadata/t_metabase$lib$js$metadata79943","_this","table-ids","p1__79942#","clojure.walk/postwalk","form","cljs.core/delay?","metabase.lib.js.metadata/metadata-provider","metabase.lib.cache.side_channel_cache","cljs.core.partial","metabase.lib.js.metadata/parse-column"],"sourcesContent":["(ns metabase.lib.js.metadata\n  (:require\n   [clojure.core.protocols]\n   [clojure.string :as str]\n   [clojure.walk :as walk]\n   [goog]\n   [goog.object :as gobject]\n   [medley.core :as m]\n   [metabase.lib.cache :as lib.cache]\n   [metabase.lib.metadata.protocols :as lib.metadata.protocols]\n   [metabase.lib.util :as lib.util]\n   [metabase.util :as u]\n   [metabase.util.log :as log]))\n\n;;; metabase-lib/metadata/Metadata comes in an object like\n;;;\n;;;    {\n;;;      databases: {},\n;;;      tables: {},\n;;;      fields: {},\n;;;      metrics: {},\n;;;      segments: {},\n;;;      questions: {},\n;;;    }\n;;;\n;;; where keys are a map of String ID => metadata\n\n;; TODO: This is always wrapped with `keyword` in its usage so that may as well be memoized too.\n(def ^:private ^{:arglists '([k])} memoized-kebab-key\n  \"Even tho [[u/->kebab-case-en]] has LRU memoization, plain memoization is significantly faster, and since the keys\n  we're parsing here are bounded it's fine to memoize this stuff forever.\"\n  (memoize u/->kebab-case-en))\n\n(defn- object-get [obj k]\n  (when (and obj (js-in k obj))\n    (gobject/get obj k)))\n\n(defn- obj->clj\n  \"Convert a JS object of *any* class to a ClojureScript object.\"\n  ([xform obj]\n   (obj->clj xform obj {}))\n  ([xform obj {:keys [use-plain-object?] :or {use-plain-object? true}}]\n   (if (map? obj)\n     ;; already a ClojureScript object.\n     (into {} xform obj)\n     ;; has a plain-JavaScript `_plainObject` attached: apply `xform` to it and call it a day\n     (if-let [plain-object (when use-plain-object?\n                             (some-> (object-get obj \"_plainObject\")\n                                     js->clj\n                                     not-empty))]\n       (into {} xform plain-object)\n       ;; otherwise do things the hard way and convert an arbitrary object into a Cljs map. (`js->clj` doesn't work on\n       ;; arbitrary classes other than `Object`)\n       (into {}\n             (comp\n              (map (fn [k]\n                     [k (object-get obj k)]))\n              ;; ignore values that are functions\n              (remove (fn [[_k v]]\n                        (js-fn? v)))\n              xform)\n             (js-keys obj))))))\n\n;;; this intentionally does not use the lib hierarchy since it's not dealing with MBQL/lib keys\n(defmulti ^:private excluded-keys\n  {:arglists '([object-type])}\n  keyword)\n\n(defmethod excluded-keys :default\n  [_]\n  nil)\n\n;;; yes, the multimethod could dispatch on object-type AND k and get called for every object, but that would be slow,\n;;; by doing it this way we only need to do it once.\n(defmulti ^:private parse-field-fn\n  \"Return a function with the signature\n\n    (f k v) => v'\n\n  For parsing an individual field.\"\n  {:arglists '([object-type])}\n  keyword)\n\n(defmethod parse-field-fn :default\n  [_object-type]\n  nil)\n\n(defmulti ^:private lib-type\n  \"The metadata type that should be attached the sorts of metadatas with the `:lib/type` key, e.g. `:metadata/table`.\"\n  {:arglists '([object-type])}\n  keyword)\n\n(defmulti ^:private rename-key-fn\n  \"Returns a function of the keys, either renaming each one or preserving it.\n  If this function returns nil for a given key, the original key is preserved.\n  Use [[excluded-keys]] to drop keys from the input.\n\n  Defaults to nil, which means no renaming is done.\"\n  identity)\n\n(defmethod rename-key-fn :default [_]\n  nil)\n\n(defn- parse-object-xform [object-type]\n  (let [excluded-keys-set (excluded-keys object-type)\n        parse-field       (parse-field-fn object-type)\n        rename-key        (rename-key-fn object-type)]\n    (comp\n     ;; convert keys to kebab-case keywords\n     (map (fn [[k v]]\n            [(cond-> (keyword (memoized-kebab-key k))\n               rename-key (#(or (rename-key %) %)))\n             v]))\n     ;; remove [[excluded-keys]]\n     (if (empty? excluded-keys-set)\n       identity\n       (remove (fn [[k _v]]\n                 (contains? excluded-keys-set k))))\n     ;; parse each key with its [[parse-field-fn]]\n     (if-not parse-field\n       identity\n       (map (fn [[k v]]\n              [k (parse-field k v)]))))))\n\n(defmulti ^:private parse-object-fn*\n  {:arglists '([object-type opts])}\n  (fn\n    [object-type _opts]\n    object-type))\n\n(defn- parse-object-fn\n  ([object-type]      (parse-object-fn* object-type {}))\n  ([object-type opts] (parse-object-fn* object-type opts)))\n\n(defmethod parse-object-fn* :default\n  [object-type opts]\n  (let [xform         (parse-object-xform object-type)\n        lib-type-name (lib-type object-type)]\n    (fn [object]\n      (try\n        (let [parsed (assoc (obj->clj xform object opts) :lib/type lib-type-name)]\n          (log/debugf \"Parsed metadata %s %s\\n%s\" object-type (:id parsed) (u/pprint-to-str parsed))\n          parsed)\n        (catch js/Error e\n          (log/errorf e \"Error parsing %s %s: %s\" object-type (pr-str object) (ex-message e))\n          nil)))))\n\n(defmulti ^:private parse-objects\n  {:arglists '([object-type metadata])}\n  (fn [object-type _metadata]\n    (keyword object-type)))\n\n(defmulti ^:private parse-objects-default-key\n  \"Key to use to get unparsed objects of this type from the metadata, if you're using the default implementation\n  of [[parse-objects]].\"\n  {:arglists '([object-type])}\n  keyword)\n\n(defmethod parse-objects :default\n  [object-type metadata]\n  (let [parse-object (parse-object-fn object-type)]\n    (obj->clj (map (fn [[k v]]\n                     [(parse-long k) (delay (parse-object v))]))\n              (object-get metadata (parse-objects-default-key object-type)))))\n\n(defmethod lib-type :database\n  [_object-type]\n  :metadata/database)\n\n(defmethod excluded-keys :database\n  [_object-type]\n  #{:tables :fields})\n\n(defmethod parse-field-fn :database\n  [_object-type]\n  (fn [k v]\n    (case k\n      :dbms-version       (js->clj v :keywordize-keys true)\n      :features           (into #{} (map keyword) v)\n      :native-permissions (keyword v)\n      v)))\n\n(defmethod parse-objects-default-key :database\n  [_object-type]\n  \"databases\")\n\n(defmethod lib-type :table\n  [_object-type]\n  :metadata/table)\n\n(defmethod excluded-keys :table\n  [_object-type]\n  #{:database :fields :segments :metrics :dimension-options})\n\n(defmethod parse-field-fn :table\n  [_object-type]\n  (fn [k v]\n    (case k\n      :entity-type         (keyword v)\n      :field-order         (keyword v)\n      :initial-sync-status (keyword v)\n      :visibility-type     (keyword v)\n      v)))\n\n(defmethod parse-objects :table\n  [object-type metadata]\n  (let [parse-table (parse-object-fn object-type)]\n    (obj->clj (comp (remove (fn [[k _v]]\n                              (str/starts-with? k \"card__\")))\n                    (map (fn [[k v]]\n                           [(parse-long k) (delay (parse-table v))])))\n              (object-get metadata \"tables\"))))\n\n(defmethod lib-type :field\n  [_object-type]\n  :metadata/column)\n\n(defmethod excluded-keys :field\n  [_object-type]\n  #{:_comesFromEndpoint\n    :database\n    :default-dimension-option\n    :dimension-options\n    :metrics\n    :table})\n\n(defmethod rename-key-fn :field\n  [_object-type]\n  {:source          :lib/source\n   :unit            :metabase.lib.field/temporal-unit\n   :expression-name :lib/expression-name\n   :binning-info    :metabase.lib.field/binning\n   :dimensions      ::dimension\n   :values          ::field-values})\n\n(defn- parse-field-id\n  [id]\n  (cond-> id\n    ;; sometimes instead of an ID we get a field reference\n    ;; with the name of the column in the second position\n    (vector? id) second))\n\n(defn- parse-binning-info\n  [m]\n  (obj->clj\n   (map (fn [[k v]]\n          (let [k (keyword (memoized-kebab-key k))\n                k (if (= k :binning-strategy)\n                    :strategy\n                    k)\n                v (if (= k :strategy)\n                    (keyword v)\n                    v)]\n            [k v])))\n   m))\n\n(defn- parse-field-values [field-values]\n  (when (= (object-get field-values \"type\") \"full\")\n    {:values                (js->clj (object-get field-values \"values\"))\n     :human-readable-values (js->clj (object-get field-values \"human_readable_values\"))}))\n\n(defn- parse-dimension\n  \"`:dimensions` comes in as an array for historical reasons, even tho a Field can only have one. So it should never\n  have more than one element. See #27054. Anyways just to be safe let's make sure it's either `:external` or\n  `:internal`.\"\n  [dimensions]\n  (when-let [dimension (m/find-first (fn [dimension]\n                                       (#{\"external\" \"internal\"} (get dimension \"type\")))\n                                     dimensions)]\n    (let [dimension-type (keyword (get dimension \"type\"))]\n      (merge\n       {:id   (get dimension \"id\")\n        :name (get dimension \"name\")}\n       (case dimension-type\n         ;; external = mapped to a different column\n         :external\n         {:lib/type :metadata.column.remapping/external\n          :field-id (get dimension \"human_readable_field_id\")}\n\n         ;; internal = mapped to FieldValues\n         :internal\n         {:lib/type :metadata.column.remapping/internal})))))\n\n(defmethod parse-field-fn :field\n  [_object-type]\n  (fn [k v]\n    (case k\n      :base-type                        (keyword v)\n      :coercion-strategy                (keyword v)\n      :effective-type                   (keyword v)\n      :fingerprint                      (if (map? v)\n                                          (walk/keywordize-keys v)\n                                          (js->clj v :keywordize-keys true))\n      :has-field-values                 (keyword v)\n\n      ;; Field refs are JS arrays, which we do not alter but do need to clone.\n      ;; Why? Come sit by the fire, it's story time:\n      ;; Sometimes in the FE the input `DatasetColumn` object is coming from the Redux store, where it has been deeply\n      ;; frozen (Object.freeze()) by the immer library.\n      ;; `:metadata/column` values (which contain such a :field-ref) are sometimes used as a map key, which calls\n      ;; [[cljs.core/hash]], which for a vanilla JS array uses goog.getUid() to mutate a uid number onto the array with\n      ;; a key like `closure_uid_123456789` (the number is randomized at load time).\n      ;; If the array has been frozen, that mutation will throw. So we clone the `:field-ref` array on its way into CLJS\n      ;; land, and avoid the issue.\n      :field-ref                        (to-array v)\n      :lib/source                       (case v\n                                          \"aggregation\" :source/aggregations\n                                          \"breakout\"    :source/breakouts\n                                          (keyword \"source\" v))\n      :metabase.lib.field/temporal-unit (keyword v)\n      :semantic-type                    (keyword v)\n      :visibility-type                  (keyword v)\n      :id                               (parse-field-id v)\n      :metabase.lib.field/binning       (parse-binning-info v)\n      ::field-values                    (parse-field-values v)\n      ::dimension                       (parse-dimension v)\n      v)))\n\n(defmethod parse-object-fn* :field\n  [object-type opts]\n  (let [f ((get-method parse-object-fn* :default) object-type opts)]\n    (fn [unparsed]\n      (let [{{dimension-type :lib/type, :as dimension} ::dimension, ::keys [field-values], :as parsed} (f unparsed)]\n        (-> (case dimension-type\n              :metadata.column.remapping/external\n              (assoc parsed :lib/external-remap dimension)\n\n              :metadata.column.remapping/internal\n              (assoc parsed :lib/internal-remap (merge dimension field-values))\n\n              parsed)\n            (dissoc ::dimension ::field-values))))))\n\n(defmethod parse-objects :field\n  [object-type metadata]\n  (let [parse-object    (parse-object-fn object-type)\n        unparsed-fields (object-get metadata \"fields\")]\n    (obj->clj (keep (fn [[k v]]\n                      ;; Sometimes fields coming from saved questions are only present with their ID\n                      ;; prefixed with \"card__<card-id>:\". For such keys we parse the field ID from\n                      ;; the suffix and use the entry unless the ID is present in the metadata without\n                      ;; prefix. (The assumption being that the data under the two keys are mostly the\n                      ;; same but the one under the plain key is to be preferred.)\n                      (when-let [field-id (or (parse-long k)\n                                              (when-let [[_ id-str] (re-matches #\"card__\\d+:(\\d+)\" k)]\n                                                (and (nil? (object-get unparsed-fields id-str))\n                                                     (parse-long id-str))))]\n                        [field-id (delay (parse-object v))])))\n              unparsed-fields)))\n\n(defmethod lib-type :card\n  [_object-type]\n  :metadata/card)\n\n(defmethod excluded-keys :card\n  [_object-type]\n  #{:database\n    :db\n    :dimension-options\n    :fks\n    :metadata\n    :metrics\n    :plain-object\n    :segments\n    :schema\n    :schema-name\n    :table})\n\n(defn- parse-fields [fields]\n  (mapv (parse-object-fn :field) fields))\n\n(defmethod parse-field-fn :card\n  [_object-type]\n  (fn [k v]\n    (case k\n      :result-metadata (if ((some-fn sequential? array?) v)\n                         (parse-fields v)\n                         (js->clj v :keywordize-keys true))\n      :fields          (parse-fields v)\n      :visibility-type (keyword v)\n      :dataset-query   (js->clj v :keywordize-keys true)\n      :type            (keyword v)\n      ;; this is not complete, add more stuff as needed.\n      v)))\n\n(defn- unwrap-card\n  \"Sometimes a card is stored in the metadata as some sort of weird object where the thing we actually want is under the\n  key `_card` (not sure why), but if it is just unwrap it and then parse it normally.\"\n  [obj]\n  (or (object-get obj \"_card\")\n      obj))\n\n(defn- assemble-card\n  [metadata id]\n  (let [parse-card-ignoring-plain-object (parse-object-fn :card {:use-plain-object? false})\n        parse-card (parse-object-fn :card)]\n    ;; The question objects might not contain the fields so we merge them\n    ;; in from the table matadata.\n    (merge\n     (-> metadata\n         (object-get \"tables\")\n         (object-get (str \"card__\" id))\n         ;; _plainObject can contain field names in the field property\n         ;; instead of the field objects themselves.  Ignoring this\n         ;; property makes sure we parse the real fields.\n         parse-card-ignoring-plain-object\n         (assoc :id id))\n     (-> metadata\n         (object-get \"questions\")\n         (object-get (str id))\n         unwrap-card\n         parse-card))))\n\n(defmethod parse-objects :card\n  [_object-type metadata]\n  (into {}\n        (map (fn [id]\n               [id (delay (assemble-card metadata id))]))\n        (-> #{}\n            (into (keep lib.util/legacy-string-table-id->card-id)\n                  (js-keys (object-get metadata \"tables\")))\n            (into (map parse-long)\n                  (js-keys (object-get metadata \"questions\"))))))\n\n(defmethod lib-type :metric\n  [_object-type]\n  :metadata/metric)\n\n(defmethod excluded-keys :metric\n  [_object-type]\n  #{:database :table})\n\n(defmethod parse-field-fn :metric\n  [_object-type]\n  (fn [_k v]\n    v))\n\n(defmethod parse-objects-default-key :metric\n  [_object-type]\n  \"metrics\")\n\n(defmethod lib-type :segment\n  [_object-type]\n  :metadata/segment)\n\n(defmethod excluded-keys :segment\n  [_object-type]\n  #{:database :table})\n\n(defmethod parse-field-fn :segment\n  [_object-type]\n  (fn [_k v]\n    v))\n\n(defmethod parse-objects-default-key :segment\n  [_object-type]\n  \"segments\")\n\n(defn- parse-objects-delay [object-type metadata]\n  (delay\n    (try\n      (parse-objects object-type metadata)\n      (catch js/Error e\n        (log/errorf e \"Error parsing %s objects: %s\" object-type (ex-message e))\n        nil))))\n\n(defn- metric-cards\n  [delayed-cards]\n  (when-let [cards @delayed-cards]\n    (into {}\n          (keep (fn [[id card]]\n                  (when (and card (= (:type @card) :metric) (not (:archived @card)))\n                    (let [card @card]\n                      [id (-> card\n                              (select-keys [:id :table-id :name :description :archived\n                                            :dataset-query])\n                              (assoc :lib/type :metadata/metric)\n                              delay)]))))\n          cards)))\n\n(defn- parse-metadata [metadata]\n  (let [delayed-cards (parse-objects-delay :card metadata)]\n    {:databases (parse-objects-delay :database metadata)\n     :tables    (parse-objects-delay :table    metadata)\n     :fields    (parse-objects-delay :field    metadata)\n     :cards     delayed-cards\n     :metrics   (delay (metric-cards delayed-cards))\n     :segments  (parse-objects-delay :segment  metadata)}))\n\n(defn- database [metadata database-id]\n  (some-> metadata :databases deref (get database-id) deref))\n\n(defn- metadatas [metadata metadata-type ids]\n  (let [k          (case metadata-type\n                     :metadata/table         :tables\n                     :metadata/column        :fields\n                     :metadata/card          :cards\n                     :metadata/segment       :segments)\n        metadatas* (some-> metadata k deref)]\n    (into []\n          (keep (fn [id]\n                  (some-> metadatas* (get id) deref)))\n          ids)))\n\n(defn- tables [metadata database-id]\n  (into []\n        (keep (fn [[_id dlay]]\n                (when-let [table (some-> dlay deref)]\n                  (when (= (:db-id table) database-id)\n                    table))))\n        (some-> metadata :tables deref)))\n\n(defn- metadatas-for-table\n  [metadata metadata-type table-id]\n  (let [k (case metadata-type\n            :metadata/column        :fields\n            :metadata/metric        :metrics\n            :metadata/segment       :segments)]\n    (into []\n          (keep (fn [[_id dlay]]\n                  (when-let [object (some-> dlay deref)]\n                    (when (= (:table-id object) table-id)\n                      object))))\n          (some-> metadata k deref))))\n\n(defn- setting [^js unparsed-metadata setting-key]\n  (-> unparsed-metadata\n      (object-get \"settings\")\n      (object-get (name setting-key))))\n\n(defn- metadata-provider*\n  \"Inner implementation for [[metadata-provider]], which wraps this with a cache.\"\n  [database-id unparsed-metadata]\n  (let [metadata (parse-metadata unparsed-metadata)]\n    (log/debug \"Created metadata provider for metadata\")\n    (reify lib.metadata.protocols/MetadataProvider\n      (database [_this]\n        (database metadata database-id))\n      (metadatas [_this metadata-type ids]\n        (metadatas metadata metadata-type ids))\n      (tables [_this]\n        (tables metadata database-id))\n      (metadatas-for-table [_this metadata-type table-id]\n        (metadatas-for-table metadata metadata-type table-id))\n      (metadatas-for-tables [_this metadata-type table-ids]\n        ;; since this is already all in memory, we don't worry about batching\n        (map #(metadatas-for-table metadata metadata-type %) table-ids))\n      (setting [_this setting-key]\n        (setting unparsed-metadata setting-key))\n\n      ;; for debugging: call [[clojure.datafy/datafy]] on one of these to parse all of our metadata and see the whole\n      ;; thing at once.\n      clojure.core.protocols/Datafiable\n      (datafy [_this]\n        (walk/postwalk\n         (fn [form]\n           (if (delay? form)\n             (deref form)\n             form))\n         metadata)))))\n\n(defn metadata-provider\n  \"Use a `metabase-lib/metadata/Metadata` as a [[metabase.lib.metadata.protocols/MetadataProvider]].\"\n  [database-id unparsed-metadata]\n  (lib.cache/side-channel-cache (str database-id) unparsed-metadata\n                                (partial metadata-provider* database-id)\n                                true #_force?))\n\n(def parse-column\n  \"Parses a JS column provided by the FE into a :metadata/column value for use in MLv2.\"\n  (parse-object-fn :field))\n"]}