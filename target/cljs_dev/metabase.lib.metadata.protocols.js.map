{"version":3,"sources":["metabase/lib/metadata/protocols.cljc"],"mappings":"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","names":["metabase$lib$metadata$protocols$MetadataProvider$database$dyn","x__5350__auto__","m__5351__auto__","metabase.lib.metadata.protocols/database","goog/typeOf","m__5349__auto__","cljs.core/missing-protocol","metabase$lib$metadata$protocols$MetadataProvider$metadatas$dyn","metabase.lib.metadata.protocols/metadatas","metabase$lib$metadata$protocols$MetadataProvider$tables$dyn","metabase.lib.metadata.protocols/tables","metabase$lib$metadata$protocols$MetadataProvider$metadatas_for_table$dyn","metabase.lib.metadata.protocols/metadatas-for-table","metabase$lib$metadata$protocols$MetadataProvider$metadatas_for_tables$dyn","metabase.lib.metadata.protocols/metadatas-for-tables","metabase$lib$metadata$protocols$MetadataProvider$setting$dyn","metabase.lib.metadata.protocols/setting","metabase.lib.metadata.protocols/MetadataProvider","metadata-provider","metadata-type","metadata-ids","table-id","table-ids","setting-key","metabase.lib.metadata.protocols/metadata-provider?","x","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","metabase.util.malli.registry/register!","metabase.util.malli.registry/-with-doc","metabase.lib.metadata.protocols/metadata-providerable?","or__5002__auto__","G__75985","cljs.core/pos-int?","metabase.lib.metadata.protocols/metadata","metadata-id","medley.core.find_first","object","cljs.core._EQ_","metabase.lib.metadata.protocols/table","metabase.lib.metadata.protocols/field","field-id","metabase.lib.metadata.protocols/card","card-id","metabase.lib.metadata.protocols/segment","segment-id","metabase.lib.metadata.protocols/fields","metabase.lib.metadata.protocols/segments","metabase$lib$metadata$protocols$CachedMetadataProvider$cached_metadatas$dyn","metabase.lib.metadata.protocols/cached-metadatas","metabase$lib$metadata$protocols$CachedMetadataProvider$store_metadata_BANG_$dyn","metabase.lib.metadata.protocols/store-metadata!","metabase.lib.metadata.protocols/CachedMetadataProvider","cached-metadata-provider","metabase.lib.metadata.protocols/cached-metadata-provider?","metabase.lib.metadata.protocols/store-metadatas!","objects","seq__76049","cljs.core/seq","chunk__76050","count__76051","i__76052","temp__5804__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","metabase.lib.metadata.protocols/cached-metadata","id","metabase.lib.metadata.protocols/warm-cache","object-ids","metabase$lib$metadata$protocols$InvocationTracker$invoked_ids$dyn","metabase.lib.metadata.protocols/invoked-ids","metabase.lib.metadata.protocols/InvocationTracker","this"],"sourcesContent":["(ns metabase.lib.metadata.protocols\n  (:require\n   #?@(:clj [[potemkin :as p]])\n   [medley.core :as m]\n   [metabase.lib.schema.id :as lib.schema.id]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.util.malli :as mu]\n   [metabase.util.malli.registry :as mr]))\n\n(#?(:clj p/defprotocol+ :cljs defprotocol) MetadataProvider\n  \"Protocol for something that we can get information about Tables and Fields from. This can be provided in various ways\n  various ways:\n\n  1. By raw metadata attached to the query itself\n\n  2. By the application database in Clj code\n\n  3. By the Query Processor store in Clj code\n\n  4. By the Redux store in JS\n\n  5. By (hopefully cached) REST API calls\n\n  This protocol is pretty limited at this point; in the future, we'll probably want to add:\n\n  - methods for searching for Tables or Fields matching some string\n\n  - paging, so if you have 10k Tables we don't do crazy requests that fetch them all at once\n\n  For all of these methods: if no matching object can be found, you should generally return `nil` rather than throwing\n  an Exception. Let [[metabase.lib.metadata]] worry about throwing exceptions.\"\n  (database [metadata-provider]\n    \"Metadata about the Database we're querying. Should match the [[metabase.lib.metadata/DatabaseMetadata]] schema.\n  This includes important info such as the supported `:features` and the like.\")\n\n  (metadatas [metadata-provider metadata-type metadata-ids]\n    \"Return a sequence of non-nil metadata objects of `metadata-type` associated with `metadata-ids`, which is either\n a sequence or set of integer object IDs. Objects should be fetched as needed, but if this MetadataProvider has an\n internal cache (i.e., if it is a [[CachedMetadataProvider]]), it should return any cached objects and only fetch ones\n not present in the cache. This should not error if any objects were not found. The order objects are returned in does\n not matter. For MetadataProviders that have a cache, calling this method can be done for side-effects (to warm the\n cache).\")\n\n  (tables [metadata-provider]\n    \"Return a sequence of Tables in this Database. Tables should satisfy the `:metabase.lib.schema.metadata/table`\n  schema. This should also include things that serve as 'virtual' tables, e.g. Saved Questions or Models. But users of\n  MLv2 should not need to know that! If we add support for Super Models or Quantum Questions in the future, they can\n  just come back from this method in the same shape as everything else, the Query Builder can display them, and the\n  internals can be tucked away here in MLv2.\")\n\n  (metadatas-for-table [metadata-provider metadata-type table-id]\n    \"Return active (non-archived) metadatas associated with a particular Table, either Fields, Metrics, or\n  Segments -- `metadata-type` must be one of either `:metadata/column`, `:metadata/metric`, or `:metadata/segment`.\")\n\n  (metadatas-for-tables [metadata-provider metadata-type table-ids]\n    \"As [[metadatas-for-table]], but for multiple tables and returning a lazy sequence instead of a vector.\")\n\n  (setting [metadata-provider setting-key]\n    \"Return the value of the given Metabase setting with keyword `setting-name`.\"))\n\n(defn metadata-provider?\n  \"Whether `x` is a valid [[MetadataProvider]].\"\n  [x]\n  (satisfies? MetadataProvider x))\n\n(mr/def ::metadata-provider\n  \"Schema for something that satisfies the [[metabase.lib.metadata.protocols/MetadataProvider]] protocol.\"\n  [:fn\n   {:error/message \"Valid MetadataProvider\"}\n   #'metadata-provider?])\n\n(defn metadata-providerable?\n  \"Whether `x` is a [[metadata-provider?]], or has one attached at `:lib/metadata` (i.e., a query).\"\n  [x]\n  (or (metadata-provider? x)\n      (some-> x :lib/metadata metadata-providerable?)))\n\n(mr/def ::metadata-providerable\n  \"Something that can be used to get a MetadataProvider. Either a MetadataProvider, or a map with a MetadataProvider in\n  the key `:lib/metadata` (i.e., a query).\"\n  [:fn\n   {:error/message \"Valid MetadataProvider, or a map with a MetadataProvider in the key :lib/metadata (i.e. a query)\"}\n   #'metadata-providerable?])\n\n(mr/def ::metadata-type-excluding-database\n  \"Database metadata is stored separately/in a special way. These are the types of metadata that are stored with the\n  other non-Database methods.\"\n  [:enum :metadata/table :metadata/column :metadata/card :metadata/segment])\n\n(mr/def ::metadata\n  [:map\n   [:lib/type ::metadata-type-excluding-database]\n   [:id       pos-int?]])\n\n(mu/defn ^:private metadata :- [:maybe ::metadata]\n  [metadata-provider :- ::metadata-provider\n   metadata-type     :- ::metadata-type-excluding-database\n   metadata-id       :- pos-int?]\n  (m/find-first (fn [object]\n                  (= (:id object) metadata-id))\n                (metadatas metadata-provider metadata-type [metadata-id])))\n\n(mu/defn table :- [:maybe ::lib.schema.metadata/table]\n  \"Return metadata for a specific Table. Metadata should satisfy `:metabase.lib.schema.metadata/table`.\"\n  [metadata-provider :- ::metadata-provider\n   table-id          :- ::lib.schema.id/table]\n  (metadata metadata-provider :metadata/table table-id))\n\n(mu/defn field :- [:maybe ::lib.schema.metadata/column]\n  \"Return metadata for a specific Field. Metadata should satisfy `:metabase.lib.schema.metadata/column`.\"\n  [metadata-provider :- ::metadata-provider\n   field-id          :- ::lib.schema.id/field]\n  (metadata metadata-provider :metadata/column field-id))\n\n(mu/defn card :- [:maybe ::lib.schema.metadata/card]\n  \"Return information about a specific Saved Question, aka a Card. This should match\n  `:metabase.lib.schema.metadata/card`. Currently just used for display name purposes if you have a Card as a source\n  query.\"\n  [metadata-provider :- ::metadata-provider\n   card-id           :- ::lib.schema.id/card]\n  (metadata metadata-provider :metadata/card card-id))\n\n(mu/defn segment :- [:maybe ::lib.schema.metadata/segment]\n  \"Return metadata for a particular captial-S Segment, i.e. something from the `segment` table in the application\n  database. Metadata should match `:metabase.lib.schema.metadata/segment`.\"\n  [metadata-provider :- ::metadata-provider\n   segment-id        :- ::lib.schema.id/segment]\n  (metadata metadata-provider :metadata/segment segment-id))\n\n(mu/defn fields :- [:maybe [:sequential ::lib.schema.metadata/column]]\n  \"Return a sequence of Fields associated with a Table with the given `table-id`. Fields should satisfy\n  the `:metabase.lib.schema.metadata/column` schema. If no such Table exists, this should error.\"\n  [metadata-provider :- ::metadata-provider\n   table-id          :- ::lib.schema.id/table]\n  (metadatas-for-table metadata-provider :metadata/column table-id))\n\n(mu/defn segments :- [:maybe [:sequential ::lib.schema.metadata/segment]]\n  \"Return a sequence of legacy Segments associated with a Table with the given `table-id`. Segments should satisfy\n  the `:metabase.lib.schema.metadata/segment` schema. If no Table with ID `table-id` exists, this should error.\"\n  [metadata-provider :- ::metadata-provider\n   table-id          :- ::lib.schema.id/table]\n  (metadatas-for-table metadata-provider :metadata/segment table-id))\n\n(#?(:clj p/defprotocol+ :cljs defprotocol) CachedMetadataProvider\n  \"Optional. A protocol for a MetadataProvider that some sort of internal cache. This is mostly useful for\n  MetadataProviders that can hit some sort of relatively expensive external service,\n  e.g. [[metabase.lib.metadata.jvm/application-database-metadata-provider]]. The main purpose of this is to allow\n  pre-warming the cache with stuff that was already fetched elsewhere.\n  See [[metabase.models.metric/warmed-metadata-provider]] for example.\n\n  See [[metabase.lib.metadata.cached-provider/cached-metadata-provider]] for a way to wrap an existing\n  MetadataProvider to add caching on top of it.\"\n  (cached-metadatas [cached-metadata-provider metadata-type metadata-ids]\n    \"Like [[metadatas]], but only return metadata that is already present in the cache.\")\n  (store-metadata! [cached-metadata-provider object]\n    \"Store metadata of a specific type, e.g. `:metadata/table`.\"))\n\n(defn cached-metadata-provider?\n  \"Whether `x` is a valid [[CachedMetadataProvider]].\"\n  [x]\n  (satisfies? CachedMetadataProvider x))\n\n(mr/def ::cached-metadata-provider\n  [:fn\n   {:error/message \"A CachedMetadataProvider\"}\n   #'cached-metadata-provider?])\n\n(mu/defn store-metadatas!\n  \"Convenience. Store several metadata maps at once.\"\n  [cached-metadata-provider :- ::cached-metadata-provider\n   objects                  :- [:maybe [:sequential ::metadata]]]\n  (doseq [object objects]\n    (store-metadata! cached-metadata-provider object)))\n\n(mu/defn cached-metadata :- [:maybe ::metadata]\n  \"Get cached metadata of a specific type, e.g. `:metadata/table`.\"\n  [cached-metadata-provider :- ::cached-metadata-provider\n   metadata-type            :- ::metadata-type-excluding-database\n   id                       :- pos-int?]\n  (m/find-first (fn [object]\n                  (= (:id object) id))\n                (cached-metadatas cached-metadata-provider metadata-type [id])))\n\n;;; this is done for side-effects, but it's thread-safe and safe inside STM transactions, you can call it a hundred\n;;; times with no ill effects.\n;;;\n;;; TODO -- we don't really use metadata providers across threads but I'm wondering whether the cached metadata\n;;; provider should have some sort of internal lock so 100 simultaneous calls to fetch an object only results in a\n;;; single call to the underlying ApplicationDatabaseMetadataProvider... Fetch stuff already present in the cache\n;;; without needing a lock, but if we need to fetch something from the parent provider wait for a lock to do it.\n;;; -- Cam\n(mu/defn warm-cache\n  \"Convenience for warming a `CachedMetadataProvider` for side-effects. Checks whether the provider is a cached\n  metadata provider, and, if it is, calls [[metadatas]] to fetch the objects in question and warm the cache.\"\n  [metadata-provider :- ::metadata-provider\n   metadata-type     :- ::metadata-type-excluding-database\n   object-ids        :- [:maybe\n                         [:or\n                          [:set pos-int?]\n                          [:sequential pos-int?]]]]\n  (when (and (cached-metadata-provider? metadata-provider)\n             (seq object-ids))\n    (metadatas metadata-provider metadata-type object-ids)))\n\n(#?(:clj p/defprotocol+ :cljs defprotocol) InvocationTracker\n  \"Optional. A protocol for a MetadataProvider that records the arguments of method invocations during query execution.\n  This is useful for tracking which metdata ids were used during a query execution. The main purpose of this is to power\n  updating card.last_used_at during query execution. see [[metabase.query-processor.middleware.update-used-cards/update-used-cards!]]\"\n  (invoked-ids [this metadata-type]\n    \"Get all invoked ids of a metadata type thus far.\"))\n"]}