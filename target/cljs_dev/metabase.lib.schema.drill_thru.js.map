{"version":3,"sources":["metabase/lib/schema/drill_thru.cljc"],"mappings":"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","names":["metabase.util.malli.registry/register!","k","cljs.core/qualified-keyword?","cljs.core._EQ_","cljs.core/namespace","p1__78692#","cljs.core.not_EQ_","cljs.core/number?","cljs.core/string?","p1__78693#","cljs.core.isa_QMARK_","p1__78694#","p1__78695#","cljs.core/some","semantic-type","cljs.core/some?","cljs.core/keyword?","p__78697","map__78698","cljs.core/--destructure-map","cljs.core.get","value","_","cljs.core.pr_str","p__78699","map__78700","p1__78701#"],"sourcesContent":["(ns metabase.lib.schema.drill-thru\n  \"Malli schemas for possible drill-thru operations.\n\n  Drill-thrus are not part of MBQL; they are a set of actions one can take to transform a query.\n  For example, adding a filter like `created_at < 2022-01-01`, or following a foreign key.\"\n  (:require\n   [metabase.lib.schema :as-alias lib.schema]\n   [metabase.lib.schema.aggregation :as lib.schema.aggregation]\n   [metabase.lib.schema.binning :as lib.schema.binning]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.expression :as lib.schema.expression]\n   [metabase.lib.schema.extraction :as lib.schema.extraction]\n   [metabase.lib.schema.filter :as lib.schema.filter]\n   [metabase.lib.schema.id :as lib.schema.id]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.lib.schema.order-by :as lib.schema.order-by]\n   [metabase.lib.schema.ref :as lib.schema.ref]\n   [metabase.lib.schema.temporal-bucketing\n    :as lib.schema.temporal-bucketing]\n   [metabase.util.malli.registry :as mr]))\n\n(mr/def ::pivot-types\n  [:enum :category :location :time])\n\n(mr/def ::drill-thru.type\n  [:fn\n   {:error/message \"valid drill-thru :type keyword\"}\n   (fn [k]\n     (and (qualified-keyword? k)\n          (= (namespace k) \"drill-thru\")))])\n\n(mr/def ::drill-thru.common\n  [:map\n   [:type     ::drill-thru.type]\n   [:lib/type [:= :metabase.lib.drill-thru/drill-thru]]])\n\n;;; A drill thru that contains a column\n(mr/def ::drill-thru.common.with-column\n  [:merge\n   ::drill-thru.common\n   [:map\n    [:column [:ref ::lib.schema.metadata/column]]]])\n\n;;; there are three \"object details\" drills: `:pk`, `:fk-details`, and `:zoom`. Originally, all three had `:column`\n;;; and `:object-id` (value), but since we want `:pk` to handle multiple PKs (thus multiple columns and values) we\n;;; changed it to instead have a list of `:dimensions` (similar in shape to `::context.row`, but without requiring\n;;; `:column-ref`). I didn't change the other ones so as to avoid unintentionally breaking something in the middle of\n;;; the drills epic. We should revisit these shapes in the future. See\n;;; https://metaboat.slack.com/archives/C04CYTEL9N2/p1701803047600169 for more information. -- Cam\n\n(mr/def ::drill-thru.object-details.dimension\n  [:map\n   [:column [:ref ::lib.schema.metadata/column]]\n   ;; we should ignore NULL values for PKs and FKs -- do not add filters on them.\n   [:value  [:and\n             :some\n             [:fn {:error/message \"Non-NULL value\"} #(not= % :null)]]]])\n\n(mr/def ::drill-thru.object-details.dimensions\n  [:sequential {:min 1} [:ref ::drill-thru.object-details.dimension]])\n\n(mr/def ::drill-thru.pk\n  [:merge\n   ::drill-thru.common\n   [:map\n    [:type       [:= :drill-thru/pk]]\n    [:dimensions [:ref ::drill-thru.object-details.dimensions]]]])\n\n(mr/def ::drill-thru.fk-details.fk-column\n  [:merge\n   [:ref ::lib.schema.metadata/column]\n   [:map\n    [:fk-target-field-id ::lib.schema.id/field]]])\n\n(mr/def ::drill-thru.fk-details\n  [:merge\n   ::drill-thru.common.with-column\n   [:map\n    [:type      [:= :drill-thru/fk-details]]\n    [:column    [:ref ::drill-thru.fk-details.fk-column]]\n    [:object-id :any]\n    [:many-pks? :boolean]]])\n\n(mr/def ::drill-thru.zoom\n  [:merge\n   ::drill-thru.common.with-column\n   [:map\n    [:type      [:= :drill-thru/zoom]]\n    [:object-id :any]\n    ;; TODO -- I don't think we really need this because there is no situation in which this isn't `false`, if it were\n    ;; true we'd return a `::drill-thru.pk` drill instead. See if we can remove this key without breaking the FE.\n    [:many-pks? [:= false]]]])\n\n(mr/def ::drill-thru.quick-filter.operator\n  [:map\n   [:name   ::lib.schema.common/non-blank-string]\n   [:filter [:ref ::lib.schema.expression/boolean]]])\n\n(mr/def ::drill-thru.quick-filter\n  [:merge\n   ::drill-thru.common\n   [:map\n    [:type         [:= :drill-thru/quick-filter]]\n    [:operators    [:sequential ::drill-thru.quick-filter.operator]]\n    [:column       [:ref ::lib.schema.metadata/column]]\n    [:value        [:maybe :any]]\n    [:query        [:ref ::lib.schema/query]]\n    [:stage-number number?]]])\n\n(mr/def ::drill-thru.fk-filter\n  [:merge\n   ::drill-thru.common\n   [:map\n    [:type   [:= :drill-thru/fk-filter]]\n    [:filter ::lib.schema.expression/boolean]\n    [:table-name :string]\n    [:column-name :string]]])\n\n(mr/def ::drill-thru.distribution\n  [:merge\n   ::drill-thru.common.with-column\n   [:map\n    [:type [:= :drill-thru/distribution]]]])\n\n(mr/def ::drill-thru.pivot\n  [:merge\n   ::drill-thru.common\n   [:map\n    [:type   [:= :drill-thru/pivot]]\n    [:pivots [:map-of ::pivot-types [:sequential [:ref ::lib.schema.metadata/column]]]]]])\n\n(mr/def ::drill-thru.sort\n  [:merge\n   ::drill-thru.common\n   [:map\n    [:type            [:= :drill-thru/sort]]\n    [:sort-directions [:sequential ::lib.schema.order-by/direction]]]])\n\n(mr/def ::drill-thru.summarize-column.aggregation-type\n  [:enum :avg :distinct :sum])\n\n(mr/def ::drill-thru.summarize-column\n  [:merge\n   ::drill-thru.common.with-column\n   [:map\n    [:type         [:= :drill-thru/summarize-column]]\n    [:aggregations [:sequential [:ref ::drill-thru.summarize-column.aggregation-type]]]]])\n\n(mr/def ::drill-thru.summarize-column-by-time\n  [:merge\n   ::drill-thru.common.with-column\n   [:map\n    [:type     [:= :drill-thru/summarize-column-by-time]]\n    [:breakout [:ref ::lib.schema.metadata/column]]\n    [:unit     ::lib.schema.temporal-bucketing/unit]]])\n\n(mr/def ::drill-thru.column-filter\n  [:merge\n   ::drill-thru.common.with-column\n   [:map\n    [:type         [:= :drill-thru/column-filter]]\n    [:initial-op   [:maybe ::lib.schema.filter/operator]]\n    [:column       [:ref ::lib.schema.metadata/column]]\n    [:query        [:ref ::lib.schema/query]]\n    [:stage-number number?]]])\n\n(mr/def ::drill-thru.column-extract\n  [:merge\n   ::drill-thru.common.with-column\n   [:map\n    [:type         [:= :drill-thru/column-extract]]\n    [:query        [:ref ::lib.schema/query]]\n    [:stage-number number?]\n    [:extractions  [:sequential [:ref ::lib.schema.extraction/extraction]]]]])\n\n(mr/def ::drill-thru.combine-columns\n  [:merge\n   ::drill-thru.common.with-column\n   [:map\n    [:type         [:= :drill-thru/combine-columns]]]])\n\n(mr/def ::drill-thru.compare-aggregations\n  [:merge\n   ::drill-thru.common\n   [:map\n    [:type         [:= :drill-thru/compare-aggregations]]\n    [:aggregation  [:ref ::lib.schema.aggregation/aggregation]]]])\n\n;;; TODO FIXME -- it seems like underlying records drills also include `:dimensions` and `:column-ref`...\n;;; see [[metabase.lib.drill-thru.underlying-records/underlying-records-drill]]... this should be part of the schema\n(mr/def ::drill-thru.underlying-records\n  [:merge\n   ::drill-thru.common\n   [:map\n    [:type       [:= :drill-thru/underlying-records]]\n    [:row-count  number?]\n    [:table-name [:maybe string?]]]])\n\n(mr/def ::drill-thru.automatic-insights\n  [:merge\n   ::drill-thru.common\n   [:map\n    [:type     [:= :drill-thru/automatic-insights]]\n    [:lib/type [:= :metabase.lib.drill-thru/drill-thru]]\n    [:column-ref [:maybe [:ref ::lib.schema.ref/ref]]]\n    [:dimensions [:ref ::context.row]]]])\n\n(mr/def ::drill-thru.zoom-in.timeseries.next-unit\n  [:enum :quarter :month :week :day :hour :minute])\n\n(mr/def ::drill-thru.zoom-in.timeseries\n  [:merge\n   ::drill-thru.common\n   [:map\n    [:type      [:= :drill-thru/zoom-in.timeseries]]\n    [:dimension [:ref ::context.row.value]]\n    [:next-unit [:ref ::drill-thru.zoom-in.timeseries.next-unit]]]])\n\n(mr/def ::drill-thru.zoom-in.geographic.column.latitude\n  [:merge\n   [:ref ::lib.schema.metadata/column]\n   [:map\n    [:semantic-type [:fn\n                     {:error/message \"Latitude semantic type\"}\n                     #(isa? % :type/Latitude)]]]])\n\n(mr/def ::drill-thru.zoom-in.geographic.column.longitude\n  [:merge\n   [:ref ::lib.schema.metadata/column]\n   [:map\n    [:semantic-type [:fn\n                     {:error/message \"Longitude semantic type\"}\n                     #(isa? % :type/Longitude)]]]])\n\n(mr/def ::drill-thru.zoom-in.geographic.column.county-state-city\n  [:merge\n   [:ref ::lib.schema.metadata/column]\n   [:map\n    [:semantic-type [:fn\n                     {:error/message \"Country/State/City semantic type\"}\n                     #(some (fn [semantic-type]\n                              (isa? % semantic-type))\n                            [:type/Country :type/State :type/City])]]]])\n\n(mr/def ::drill-thru.zoom-in.geographic.country-state-city->binned-lat-lon\n  [:merge\n   ::drill-thru.common\n   [:map\n    [:type      [:= :drill-thru/zoom-in.geographic]]\n    [:subtype   [:= :drill-thru.zoom-in.geographic/country-state-city->binned-lat-lon]]\n    [:column    ::drill-thru.zoom-in.geographic.column.county-state-city]\n    [:value     some?]\n    [:latitude  [:map\n                 [:column    [:ref ::drill-thru.zoom-in.geographic.column.latitude]]\n                 [:bin-width [:ref ::lib.schema.binning/bin-width]]]]\n    [:longitude [:map\n                 [:column    [:ref ::drill-thru.zoom-in.geographic.column.longitude]]\n                 [:bin-width [:ref ::lib.schema.binning/bin-width]]]]]])\n\n(mr/def ::drill-thru.zoom-in.geographic.binned-lat-lon->binned-lat-lon\n  [:merge\n   ::drill-thru.common\n   [:map\n    [:type      [:= :drill-thru/zoom-in.geographic]]\n    [:subtype   [:= :drill-thru.zoom-in.geographic/binned-lat-lon->binned-lat-lon]]\n    [:latitude  [:map\n                 [:column    [:ref ::drill-thru.zoom-in.geographic.column.latitude]]\n                 [:bin-width [:ref ::lib.schema.binning/bin-width]]\n                 [:min       number?]\n                 [:max       number?]]]\n    [:longitude [:map\n                 [:column    [:ref ::drill-thru.zoom-in.geographic.column.longitude]]\n                 [:bin-width [:ref ::lib.schema.binning/bin-width]]\n                 [:min       number?]\n                 [:max       number?]]]]])\n\n(mr/def ::drill-thru.zoom-in.geographic\n  [:and\n   [:merge\n    ::drill-thru.common\n    [:map\n     [:type    [:= :drill-thru/zoom-in.geographic]]\n     [:subtype keyword?]]]\n   [:multi {:dispatch :subtype\n            :error/fn (fn [{:keys [value]} _]\n                        (str \"Invalid zoom-in.geographic drill thru subtype\" (pr-str value)))}\n    [:drill-thru.zoom-in.geographic/country-state-city->binned-lat-lon\n     ::drill-thru.zoom-in.geographic.country-state-city->binned-lat-lon]\n    [:drill-thru.zoom-in.geographic/binned-lat-lon->binned-lat-lon\n     ::drill-thru.zoom-in.geographic.binned-lat-lon->binned-lat-lon]]])\n\n(mr/def ::drill-thru.zoom-in.binning\n  [:merge\n   ::drill-thru.common.with-column\n   [:map\n    [:type        [:= :drill-thru/zoom-in.binning]]\n    [:min-value   number?]\n    [:max-value   number?]\n    [:new-binning ::lib.schema.binning/binning]]])\n\n(mr/def ::drill-thru\n  [:and\n   ::drill-thru.common\n   [:multi {:dispatch :type\n            :error/fn (fn [{:keys [value]} _]\n                        (str \"Invalid drill thru (unknown :type): \" (pr-str value)))}\n    [:drill-thru/pk                       ::drill-thru.pk]\n    [:drill-thru/fk-details               ::drill-thru.fk-details]\n    [:drill-thru/zoom                     ::drill-thru.zoom]\n    [:drill-thru/quick-filter             ::drill-thru.quick-filter]\n    [:drill-thru/fk-filter                ::drill-thru.fk-filter]\n    [:drill-thru/distribution             ::drill-thru.distribution]\n    [:drill-thru/pivot                    ::drill-thru.pivot]\n    [:drill-thru/sort                     ::drill-thru.sort]\n    [:drill-thru/summarize-column         ::drill-thru.summarize-column]\n    [:drill-thru/summarize-column-by-time ::drill-thru.summarize-column-by-time]\n    [:drill-thru/column-filter            ::drill-thru.column-filter]\n    [:drill-thru/column-extract           ::drill-thru.column-extract]\n    [:drill-thru/combine-columns          ::drill-thru.combine-columns]\n    [:drill-thru/compare-aggregations     ::drill-thru.compare-aggregations]\n    [:drill-thru/underlying-records       ::drill-thru.underlying-records]\n    [:drill-thru/automatic-insights       ::drill-thru.automatic-insights]\n    [:drill-thru/zoom-in.timeseries       ::drill-thru.zoom-in.timeseries]\n    [:drill-thru/zoom-in.geographic       ::drill-thru.zoom-in.geographic]\n    [:drill-thru/zoom-in.binning          ::drill-thru.zoom-in.binning]]])\n\n;;;\n;;; ## Context\n;;;\n\n;;; There are basically 5 shapes that contexts can come in, see this thread\n;;; https://metaboat.slack.com/archives/C04CYTEL9N2/p1701898192634679 and\n;;; https://github.com/metabase/metabase/issues/36253 for more info.\n;;;\n;;;    | Drill Context Shape | column | value | row | dimensions |\n;;;    |---------------------|--------|-------|-----|------------|\n;;;    | Column Header       | \u2714      |       |     |            |\n;;;    | \"Raw\" Cell          | \u2714      | \u2714     | \u2714   |            |\n;;;    | \"Aggregated\" Cell   | \u2714      | \u2714     | \u2714   | \u2714          |\n;;;    | Pivot Cell          |        | \u2714     | \u2714   | \u2714          |\n;;;    | Legend Item         |        |       |     | \u2714          |\n\n(mr/def ::context.row.value\n  [:map\n   [:column     [:ref ::lib.schema.metadata/column]]\n   [:column-ref [:ref ::lib.schema.ref/ref]]\n   [:value      [:fn\n                 {:error/message \":null should not be used in context row values, only for top-level context value\"}\n                 #(not= % :null)]]])\n\n;;; Sequence of maps with keys `:column`, `:column-ref`, and `:value`\n;;;\n;;; These are presumably in the same order as the returned columns for the query stage\n(mr/def ::context.row\n  [:sequential [:ref ::context.row.value]])\n\n(mr/def ::context\n  [:map\n   [:column     [:maybe [:ref ::lib.schema.metadata/column]]]\n   [:column-ref [:maybe [:ref ::lib.schema.ref/ref]]]\n   [:value      [:maybe :any]]\n   [:row        {:optional true} [:ref ::context.row]]\n   [:dimensions {:optional true} [:maybe [:ref ::context.row]]]])\n"]}