{"version":3,"sources":["metabase/lib/drill_thru/column_extract.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,yEAAA,zEAAOA,0JAAiCC,MAAMC;AAA9C,AACE,IAAAC,qBAAuB,AAACE,oBAAU,AAACC,2CAAkCL,MAAMC;AAA3E,AAAA,oBAAAC;AAAA,AAAA,kBAAAA,dAAWC;AAAX,AAAA,kDAAA,6EAAA,ZACiBA,gFACA,gHAAA,+GAAA,kHAAA,/UACE,AAACG,uCAAwBL,SAAQ,AAAAM,kCAAA,8BACjC,AAACC,oCAAqBP,SAAW,AAAAM,kCAAA,gCACjC,AAACE,kCAAmBR,SAAa,AAAAM,kCAAA;;AALpD;;;AAOF;;;;;;;;;8DAAA,yFAAAG,vJAASI,oIAINd,MACAe;AALH,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;aAAA,AAAAE,4CAAAF,eAAA,pEAMWV;iBANX,AAAAY,4CAAAF,eAAA,xEAMkBK;YANlB,AAAAH,4CAAAF,eAAA,nEAM6BM;AAN7B,AAOE,oBAAM,iBAAAC,oBAAKjB;AAAL,AAAA,oBAAAiB;AAAA,SACK,UAAA,TAAMD,oBACN,AAACE,iDAAkCnB,MAAMe;;AAF9CG;;;AAAN,AAGE,IAAAhB,qBAAiB,AAACH,uEAAgCC,MAAMC;AAAxD,AAAA,oBAAAC;AAAA,AAAA,YAAAA,RAAWkB;AAAX,AACE,oHAAA,2CAAA,0DAAA,6GAAA,qDAAA,pXAACC,uGAAMD,kXAGA,4GAAA,5GAACE,uEACCtB,MAAMe,aAAad,OAAOe;;AALrC;;;AAHF;;;AAUF;;;;;;;+DAAA,/DAASO,sIAENH;AAFH,AAGE,OAAA,+FAAcA;;AAEhB,AAAAI,kGAAA,6FAAA,WACGxB,MAAMe,aAAaK;AADtB,2EAEMA,tBACA,4BAAA,mFAAA,oEAAA,nLAACK,rDACD,sSAAA,/RAACC,gWAAmB,4CAAA,WAAAC,vDAACC;AAAD,AAAM,uGAAAD,hGAACE,6EAAsC7B,MAAMe;GAC9C,AAAA,+FAAcK;;AAE7C,AAAAU,6FAAA,6FAAA;wDAAAC,SAAAC,9BACGI,OAAOC;AADV,AAAA,IAAAJ,aAAAF;IAAAE,iBAAA,AAAArB,4BAAAqB;YAAA,AAAApB,4CAAAoB,eAAA,nEACgCjC;mBADhC,AAAAa,4CAAAoB,eAAA,1EACsClB;aADtC,AAAAF,4CAAAoB,eAAA,pEACmDhC;kBADnD,AAAAY,4CAAAoB,eAAA,zEAC0D9B;IAD1D+B,aAAAF;UAAA,AAAAG,4CAAAD,WAAA,IAAA,jEAC2EI;AAD3E,AAEE,IAAMA,UAAW,AAACC,gDAAQD;IACpBE,aAAW,qDAAA,WAAAC,hEAACC;AAAD,AAAe,OAACC,6CAAE,AAAA,kFAAAF,kBAASH;GAAKnC;AADjD,AAEE,OAACyC,gCAAuB5C,MAAMe,aAEN,yDAAA,zDAACW,8CAAMc,oEAAmBvC;;8CANtD8B,rBACGK,OAAOC;IADVL;;;;EAAAA;;yDAAAD,SAAAC,9BACGI,OAAOC;;;IAAPD;;IAAOC;;IADVN;IAAAC;+CAAAD,SAAAC,9BACGI,OAAOC","names":["metabase.lib.drill-thru.column-extract/column-extract-drill-for-column","query","column","temp__5804__auto__","extractions","cljs.core/not-empty","metabase.lib.extraction/column-extractions","metabase.lib.types.isa/temporal?","metabase.shared.util.i18n/js-i18n","metabase.lib.types.isa/email?","metabase.lib.types.isa/URL?","p__79268","map__79269","cljs.core/--destructure-map","cljs.core.get","metabase.lib.drill-thru.column-extract/column-extract-drill","stage-number","column-ref","value","and__5000__auto__","metabase.lib.drill-thru.common/mbql-stage?","drill","cljs.core.merge","metabase.lib.drill-thru.column-filter/prepare-query-for-drill-addition","metabase.lib.drill-thru.column-extract/extractions-for-drill","metabase.lib.drill-thru.common/drill-thru-info-method","cljs.core/select-keys","cljs.core.assoc","p1__79274#","cljs.core.map","metabase.lib.metadata.calculation.display_info","metabase.lib.drill-thru.common/drill-thru-method","p__79276","p__79277","map__79278","vec__79279","cljs.core.nth","_query","_stage-number","tag","cljs.core.keyword","extraction","p1__79275#","medley.core.find_first","cljs.core._EQ_","metabase.lib.extraction/extract"],"sourcesContent":["(ns metabase.lib.drill-thru.column-extract\n  \"Adds an expression clause based on the selected column and temporal unit.\n\n  Entry points:\n\n  - Column header\n\n  Query transformation:\n\n  - Add an expression that extracts the specified value from this column.\n\n  Extra constraints:\n\n  - MBQL stages only\n  - Database must support `:regex` feature for the URL and Email extractions to work.\"\n  (:require\n   [medley.core :as m]\n   [metabase.lib.drill-thru.column-filter :as lib.drill-thru.column-filter]\n   [metabase.lib.drill-thru.common :as lib.drill-thru.common]\n   [metabase.lib.extraction :as lib.extraction]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.drill-thru :as lib.schema.drill-thru]\n   [metabase.lib.schema.extraction :as lib.schema.extraction]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util.malli :as mu]))\n\n(defn- column-extract-drill-for-column [query column]\n  (when-let [extractions (not-empty (lib.extraction/column-extractions query column))]\n    {:extractions  extractions\n     :display-name (cond\n                     (lib.types.isa/temporal? column) (i18n/tru \"Extract day, month\u2026\")\n                     (lib.types.isa/email? column)    (i18n/tru \"Extract domain, host\u2026\")\n                     (lib.types.isa/URL? column)      (i18n/tru \"Extract domain, subdomain\u2026\"))}))\n\n(mu/defn column-extract-drill :- [:maybe ::lib.schema.drill-thru/drill-thru.column-extract]\n  \"Column clicks on temporal columns only.\n\n  Might add a stage, like `:drill-thru/column-filter` does, if the current stage has aggregations.\"\n  [query                       :- ::lib.schema/query\n   stage-number                :- :int\n   {:keys [column column-ref value]} :- ::lib.schema.drill-thru/context]\n  (when (and column\n             (nil? value)\n             (lib.drill-thru.common/mbql-stage? query stage-number))\n    (when-let [drill (column-extract-drill-for-column query column)]\n      (merge drill\n             {:lib/type :metabase.lib.drill-thru/drill-thru\n              :type     :drill-thru/column-extract}\n             (lib.drill-thru.column-filter/prepare-query-for-drill-addition\n               query stage-number column column-ref :expression)))))\n\n(mu/defn extractions-for-drill :- [:sequential ::lib.schema.extraction/extraction]\n  \"Returns the extractions from a given drill.\"\n  [drill :- ::lib.schema.drill-thru/drill-thru.column-extract]\n  (:extractions drill))\n\n(defmethod lib.drill-thru.common/drill-thru-info-method :drill-thru/column-extract\n  [query stage-number drill]\n  (-> drill\n      (select-keys [:display-name :type])\n      (assoc :extractions (map #(lib.metadata.calculation/display-info query stage-number %)\n                               (:extractions drill)))))\n\n(defmethod lib.drill-thru.common/drill-thru-method :drill-thru/column-extract\n  [_query _stage-number {:keys [query stage-number column extractions]} & [tag]]\n  (let [tag        (keyword tag)\n        extraction (m/find-first #(= (:tag %) tag) extractions)]\n    (lib.extraction/extract query stage-number\n                            ;; Replace the column on the extraction because we added an extra stage.\n                            (assoc extraction :column column))))\n"]}