{"version":3,"sources":["metabase/lib/fe_util.cljc"],"mappings":"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","names":["metabase.lib.fe-util/ExpressionParts","metabase.lib.fe-util/expandable-time-units","metabase.lib.fe-util/expandable-date-units","metabase.lib.fe-util/expandable-temporal-units","cljs.core.into","p__79610","vec__79611","seq__79612","cljs.core/seq","first__79613","cljs.core/first","cljs.core/next","vec__79614","cljs.core.nth","metabase.lib.fe-util/expandable-temporal-expression?","operator","_options","maybe-clause-arg","other-arg","args","cljs.core/boolean","and__5000__auto__","cljs.core._EQ_","cljs.core/count","metabase.lib.util/clause?","cljs.core/contains?","metabase.lib.options/options","metabase.shared.util.time/timestamp-coercible?","p__79617","vec__79618","metabase.lib.fe-util/expand-temporal-expression","_operator","options","column-arg","dt-arg","_expression-clause","temporal-unit","interval","metabase.shared.util.time.to_range","metabase.shared.util.time.coerce_to_timestamp","formatter","metabase.shared.formatting.date/datetime->iso-string","metabase.shared.formatting.date/date->iso-string","cljs.core.map","metabase.lib.fe-util/maybe-expand-temporal-expression","expression-clause","metabase.lib.fe-util/expression-parts","query","stage-number","vec__79622","seq__79623","first__79624","p1__79621#","op","->maybe-col","metabase.lib.util/ref-clause?","metabase.lib.filter/add-column-operators","metabase.lib.field/extend-column-metadata-from-ref","metabase.lib.metadata.calculation.metadata","cljs.core.mapv","arg","temp__5802__auto__","col","metabase.lib.common/->op-arg","p__79625","map__79626","cljs.core/--destructure-map","cljs.core.get","metabase.lib.options/ensure-uuid","cljs.core.keyword","metabase.lib.fe-util/expression-clause","metabase.lib.fe-util/filter-args-display-name","filter-clause","p1__79627#","p1__79628#","->temporal-name","metabase.shared.util.time.format_unit","temporal?","metabase.lib.util/original-isa?","unit-is","unit-or-units","units","cljs.core/set","metabase.util/one-or-many","maybe-clause","cljs.core/second","cljs.core.filter","cljs.core/some?","&parents","&match","cljs.core/vector?","&match_0__79641","cljs.core/keyword-identical?","&match_2__79643","&match_3__79644","cljs.core.match/backtrack","e79684","js/Error","e__46214__auto__","e79681","e79683","e79682","e79671","metabase.shared.util.i18n.js_i18n","e79680","e79679","e79672","e79678","e79677","e79673","e79676","e79675","e79674","e79658","&match_0__79645","&match_2__79647","&match_3__79648","&match_4__79649","e79670","e79669","e79668","e79667","e79659","&match_left__79650","cljs.core.subvec","&match_left__79650_0__79652","metabase.shared.util.i18n/js-i18n","e79665","e79666","e79664","e79660","&match_0__79653","&match_2__79655","e79663","e79662","e79661","x","metabase.lib.schema.temporal-bucketing/datetime-truncation-units","y","metabase.shared.util.time.format_relative_date_range","cljs.core.some_fn","cljs.core/int?","cljs.core/string?","metabase.lib.temporal-bucket/describe-temporal-pair","z","metabase.shared.util.time/format-diff","n","unit","metabase.lib.temporal-bucket/describe-temporal-interval","metabase.lib.metadata.calculation.display_name","metabase.lib.fe-util/query-dependents-foreign-keys","metadata-providerable","columns","iter__5480__auto__","s__79686","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","b__79688","cljs.core/chunk-buffer","i__79687","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__79685","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","column","fk-target-field-id","metabase.lib.types.isa/foreign-key?","fk-target-field","metabase.lib.metadata/field","metabase.lib.fe-util/query-dependents","query-or-join","base-stage","database-id","cljs.core.concat","s__79690","b__79692","i__79691","map__79693","vec__79694","iter__79689","map__79697","vec__79698","tag-type","dim-tag","_opts","id","cljs.core/vals","cljs.core/integer?","card-id","card","metabase.lib.metadata/card","definition","card-columns","metabase.lib.card/saved-question-metadata","G__79701","G__79702","metabase.legacy-mbql.normalize/normalize","metabase.lib.convert/->pMBQL","table-id","metabase.lib.metadata/fields","s__79704","xs__6360__auto__","iterys__5476__auto__","s__79706","s__79708","b__79710","i__79709","iter__79707","fs__5477__auto__","iter__79705","iter__79703","stage","join","dependent","metabase.lib.fe-util/DependentItem","metabase.lib.fe-util/dependent-metadata","card-type","cljs.core.distinct","fexpr__79711","metabase.lib.query/query","metabase.lib.fe-util/table-or-card-dependent-metadata","_metadata-providerable","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.lib.fe-util\n  (:require\n   [metabase.legacy-mbql.normalize :as mbql.normalize]\n   [metabase.lib.card :as lib.card]\n   [metabase.lib.common :as lib.common]\n   [metabase.lib.convert :as lib.convert]\n   [metabase.lib.field :as lib.field]\n   [metabase.lib.filter :as lib.filter]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.query :as lib.query]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.expression :as lib.schema.expression]\n   [metabase.lib.schema.id :as lib.schema.id]\n   [metabase.lib.schema.metadata :as lib.schema.metadata]\n   [metabase.lib.schema.temporal-bucketing :as lib.schema.temporal-bucketing]\n   [metabase.lib.temporal-bucket :as lib.temporal-bucket]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.lib.util :as lib.util]\n   [metabase.lib.util.match :as lib.util.match]\n   [metabase.shared.formatting.date :as fmt.date]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.shared.util.time :as shared.ut]\n   [metabase.util :as u]\n   [metabase.util.malli :as mu]))\n\n(def ^:private ExpressionParts\n  [:map\n   [:lib/type [:= :mbql/expression-parts]]\n   [:operator [:or :keyword :string]]\n   [:options ::lib.schema.common/options]\n   [:args [:sequential :any]]])\n\n(def ^:private expandable-time-units #{:hour})\n\n(def ^:private expandable-date-units #{:week :month :quarter :year})\n\n(def ^:private expandable-temporal-units\n  (into expandable-time-units expandable-date-units))\n\n(defn- expandable-temporal-expression?\n  [[operator _options & [maybe-clause-arg other-arg :as args]]]\n  (boolean (and (= := operator)\n                (= 2 (count args))\n                (lib.util/clause? maybe-clause-arg)\n                (contains? expandable-temporal-units\n                           (:temporal-unit (lib.options/options maybe-clause-arg)))\n                (shared.ut/timestamp-coercible? other-arg))))\n\n(defn- expand-temporal-expression\n  \"Modify expression in a way, that its resulting [[expression-parts]] are digestable by filter picker.\n\n   Current filter picker implementation is unable to handle expression parts of expressions of a form\n   `[:= {...} [:field {:temporal-unit :week} 11] \\\"2024-05-12\\\"]` -- expresions that check for equality of a column\n   with `:temporal-unit` set to value other than `:day` or `:minute` to some date time value.\n\n   To mitigate that expressions are converted to `:between` form which is handled correctly by filter picker. For more\n   info on the issue see the comment [https://github.com/metabase/metabase/issues/12496#issuecomment-1629317661].\n   This functionality is backend approach to \\\"smaller solution\\\".\"\n  [[_operator options column-arg dt-arg :as _expression-clause]]\n  (let [temporal-unit (:temporal-unit (lib.options/options column-arg))\n        interval (shared.ut/to-range (shared.ut/coerce-to-timestamp dt-arg) {:unit temporal-unit :n 1})\n        formatter (if (contains? expandable-time-units temporal-unit)\n                    fmt.date/datetime->iso-string\n                    fmt.date/date->iso-string)]\n    (into [:between options column-arg] (map formatter) interval)))\n\n(defn- maybe-expand-temporal-expression\n  [expression-clause]\n  (if (expandable-temporal-expression? expression-clause)\n    (expand-temporal-expression expression-clause)\n    expression-clause))\n\n(mu/defn expression-parts :- ExpressionParts\n  \"Return the parts of the filter clause `expression-clause` in query `query` at stage `stage-number`.\"\n  ([query expression-clause]\n   (expression-parts query -1 expression-clause))\n\n  ([query :- ::lib.schema/query\n    stage-number :- :int\n    expression-clause :- ::lib.schema.expression/expression]\n   (let [[op options & args] (maybe-expand-temporal-expression expression-clause)\n         ->maybe-col #(when (lib.util/ref-clause? %)\n                        (lib.filter/add-column-operators\n                          (lib.field/extend-column-metadata-from-ref\n                            query stage-number\n                            (lib.metadata.calculation/metadata query stage-number %)\n                            %)))]\n     {:lib/type :mbql/expression-parts\n      :operator op\n      :options  options\n      :args     (mapv (fn [arg]\n                        (if (lib.util/clause? arg)\n                          (if-let [col (->maybe-col arg)]\n                            col\n                            (expression-parts query stage-number arg))\n                          arg))\n                      args)})))\n\n(defmethod lib.common/->op-arg :mbql/expression-parts\n  [{:keys [operator options args] :or {options {}}}]\n  (lib.common/->op-arg (lib.options/ensure-uuid (into [(keyword operator) options]\n                                                      (map lib.common/->op-arg)\n                                                      args))))\n\n(mu/defn expression-clause :- ::lib.schema.expression/expression\n  \"Returns a standalone clause for an `operator`, `options`, and arguments.\"\n  [operator :- :keyword\n   args     :- [:sequential :any]\n   options  :- [:maybe :map]]\n  (lib.options/ensure-uuid (into [operator options] (map lib.common/->op-arg) args)))\n\n(mu/defn filter-args-display-name :- :string\n  \"Provides a reasonable display name for the `filter-clause` excluding the column-name.\n   Can be expanded as needed but only currently defined for a narrow set of date filters.\n\n   Falls back to the full filter display-name\"\n  [query stage-number filter-clause]\n  (let [->temporal-name #(shared.ut/format-unit % nil)\n        temporal? #(lib.util/original-isa? % :type/Temporal)\n        unit-is (fn [unit-or-units]\n                  (let [units (set (u/one-or-many unit-or-units))]\n                    (fn [maybe-clause]\n                      (clojure.core/and\n                        (temporal? maybe-clause)\n                        (lib.util/clause? maybe-clause)\n                        (clojure.core/contains? units (:temporal-unit (second maybe-clause)))))))]\n    (lib.util.match/match-one filter-clause\n      [:= _ (x :guard (unit-is lib.schema.temporal-bucketing/datetime-truncation-units)) (y :guard string?)]\n      (shared.ut/format-relative-date-range y 0 (:temporal-unit (second x)) nil nil {:include-current true})\n\n      [:= _ (x :guard temporal?) (y :guard (some-fn int? string?))]\n      (lib.temporal-bucket/describe-temporal-pair x y)\n\n      [:!= _ (x :guard temporal?) (y :guard (some-fn int? string?))]\n      (i18n/tru \"Excludes {0}\" (lib.temporal-bucket/describe-temporal-pair x y))\n\n      [:< _ (x :guard temporal?) (y :guard string?)]\n      (i18n/tru \"Before {0}\" (->temporal-name y))\n\n      [:> _ (x :guard temporal?) (y :guard string?)]\n      (i18n/tru \"After {0}\" (->temporal-name y))\n\n      [:between _ (x :guard temporal?) (y :guard string?) (z :guard string?)]\n      (shared.ut/format-diff y z)\n\n      [:is-null & _]\n      (i18n/tru \"Is Empty\")\n\n      [:not-null & _]\n      (i18n/tru \"Is Not Empty\")\n\n      [:time-interval _ (x :guard temporal?) n unit]\n      (lib.temporal-bucket/describe-temporal-interval n unit)\n\n      _\n      (lib.metadata.calculation/display-name query stage-number filter-clause))))\n\n(defn- query-dependents-foreign-keys\n  [metadata-providerable columns]\n  (for [column columns\n        :let [fk-target-field-id (:fk-target-field-id column)]\n        :when (and fk-target-field-id (lib.types.isa/foreign-key? column))]\n    (if-let [fk-target-field (lib.metadata/field metadata-providerable fk-target-field-id)]\n      {:type :table, :id (:table-id fk-target-field)}\n      {:type :field, :id fk-target-field-id})))\n\n(defn- query-dependents\n  [metadata-providerable query-or-join]\n  (let [base-stage (first (:stages query-or-join))\n        database-id (:database query-or-join -1)]\n    (concat\n     (when (pos? database-id)\n       [{:type :database, :id database-id}\n        {:type :schema,   :id database-id}])\n     (when (= (:lib/type base-stage) :mbql.stage/native)\n       (for [{tag-type :type, [dim-tag _opts id] :dimension} (vals (:template-tags base-stage))\n             :when (and (= tag-type :dimension)\n                        (= dim-tag :field)\n                        (integer? id))]\n         {:type :field, :id id}))\n     (when-let [card-id (:source-card base-stage)]\n       (let [card (lib.metadata/card metadata-providerable card-id)\n             definition (:dataset-query card)]\n         (concat [{:type :table, :id (str \"card__\" card-id)}]\n                 (when-let [card-columns (lib.card/saved-question-metadata metadata-providerable card-id)]\n                   (query-dependents-foreign-keys metadata-providerable card-columns))\n                 (when (and (= (:type card) :metric) definition)\n                   (query-dependents metadata-providerable\n                                     (-> definition mbql.normalize/normalize lib.convert/->pMBQL))))))\n     (when-let [table-id (:source-table base-stage)]\n       (cons {:type :table, :id table-id}\n             (query-dependents-foreign-keys metadata-providerable\n                                            (lib.metadata/fields metadata-providerable table-id))))\n     (for [stage (:stages query-or-join)\n           join (:joins stage)\n           dependent (query-dependents metadata-providerable join)]\n       dependent))))\n\n(def ^:private DependentItem\n  [:and\n   [:map\n    [:type [:enum :database :schema :table :card :field]]]\n   [:multi {:dispatch :type}\n    [:database [:map [:id ::lib.schema.id/database]]]\n    [:schema   [:map [:id ::lib.schema.id/database]]]\n    [:table    [:map [:id [:or ::lib.schema.id/table :string]]]]\n    [:field    [:map [:id ::lib.schema.id/field]]]]])\n\n(mu/defn dependent-metadata :- [:sequential DependentItem]\n  \"Return the IDs and types of entities the metadata about is required\n  for the FE to function properly.  `card-id` is provided\n  when editing the card with that ID and in this case `a-query` is its\n  definition (i.e., the dataset-query). `card-type` specifies the type\n  of the card being created or edited.\"\n  [query     :- ::lib.schema/query\n   card-id   :- [:maybe ::lib.schema.id/card]\n   card-type :- ::lib.schema.metadata/card.type]\n  (into []\n        (distinct)\n        (concat\n         (query-dependents query query)\n         (when (and (some? card-id)\n                    (#{:model :metric} card-type))\n           (cons {:type :table, :id (str \"card__\" card-id)}\n                 (when-let [card (lib.metadata/card query card-id)]\n                   (query-dependents query (lib.query/query query card))))))))\n\n\n(mu/defn table-or-card-dependent-metadata :- [:sequential DependentItem]\n  \"Return the IDs and types of entities which are needed upfront to create a new query based on a table/card.\"\n  [_metadata-providerable :- ::lib.schema.metadata/metadata-providerable\n   table-id               :- [:or ::lib.schema.id/table :string]]\n  [{:type :table, :id table-id}])\n"]}