{"version":3,"sources":["metabase/lib/drill_thru.cljc"],"mappings":"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","names":["metabase.lib.metadata.calculation/display-info-method","query","stage-number","drill-thru","metabase.lib.drill-thru.common/drill-thru-info-method","metabase.lib.drill-thru.automatic-insights/automatic-insights-drill","metabase.lib.drill-thru.column-filter/column-filter-drill","metabase.lib.drill-thru.distribution/distribution-drill","metabase.lib.drill-thru.fk-filter/fk-filter-drill","metabase.lib.drill-thru.object-details/object-detail-drill","metabase.lib.drill-thru.pivot/pivot-drill","metabase.lib.drill-thru.quick-filter/quick-filter-drill","metabase.lib.drill-thru.sort/sort-drill","metabase.lib.drill-thru.summarize-column/summarize-column-drill","metabase.lib.drill-thru.summarize-column-by-time/summarize-column-by-time-drill","metabase.lib.drill-thru.column-extract/column-extract-drill","metabase.lib.drill-thru.combine-columns/combine-columns-drill","metabase.lib.drill-thru.compare-aggregations/compare-aggregations-drill","metabase.lib.drill-thru.underlying-records/underlying-records-drill","metabase.lib.drill-thru.zoom-in-timeseries/zoom-in-timeseries-drill","metabase.lib.drill-thru.zoom-in-geographic/zoom-in-geographic-drill","metabase.lib.drill-thru.zoom-in-bins/zoom-in-binning-drill","metabase.lib.drill-thru/available-drill-thru-fns","p__79533","map__79534","cljs.core/--destructure-map","cljs.core.get","metabase.lib.drill-thru/dimension-contexts","dimensions","context","cljs.core/not-empty","iter__5480__auto__","s__79536","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__79538","cljs.core/chunk-buffer","i__79537","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__79535","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","dimension","cljs.core.merge","metabase.lib.drill-thru/available-drill-thrus","e79539","cljs.core.into","metabase.lib.metadata/editable?","dim-contexts","s__79541","xs__6360__auto__","map__79546","iterys__5476__auto__","s__79543","b__79545","i__79544","iter__79542","fs__5477__auto__","cljs.core.concat","iter__79540","f","return-drills-for-dimensions?","and__5000__auto__","drill","e","cljs.core.ex_info","cljs.core/ex-message","metabase.lib.drill-thru/drill-thru","args","level__73199__auto__","metabase.util.log/glogi-level","logger__73200__auto__","metabase.util.log/is-loggable?","x__73201__auto__","js/Error","lambdaisland.glogi.log","metabase.util.log/format-msg","metabase.util.log.format_msg","metabase.util.pprint_to_str","cljs.core.apply","metabase.lib.drill-thru.common/drill-thru-method","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.lib.drill-thru\n  (:require\n   [metabase.lib.drill-thru.automatic-insights :as lib.drill-thru.automatic-insights]\n   [metabase.lib.drill-thru.column-extract :as lib.drill-thru.column-extract]\n   [metabase.lib.drill-thru.column-filter :as lib.drill-thru.column-filter]\n   [metabase.lib.drill-thru.combine-columns :as lib.drill-thru.combine-columns]\n   [metabase.lib.drill-thru.common :as lib.drill-thru.common]\n   [metabase.lib.drill-thru.compare-aggregations :as lib.drill-thru.compare-aggregations]\n   [metabase.lib.drill-thru.distribution :as lib.drill-thru.distribution]\n   [metabase.lib.drill-thru.fk-details :as lib.drill-thru.fk-details]\n   [metabase.lib.drill-thru.fk-filter :as lib.drill-thru.fk-filter]\n   [metabase.lib.drill-thru.object-details :as lib.drill-thru.object-details]\n   [metabase.lib.drill-thru.pivot :as lib.drill-thru.pivot]\n   [metabase.lib.drill-thru.pk :as lib.drill-thru.pk]\n   [metabase.lib.drill-thru.quick-filter :as lib.drill-thru.quick-filter]\n   [metabase.lib.drill-thru.sort :as lib.drill-thru.sort]\n   [metabase.lib.drill-thru.summarize-column :as lib.drill-thru.summarize-column]\n   [metabase.lib.drill-thru.summarize-column-by-time :as lib.drill-thru.summarize-column-by-time]\n   [metabase.lib.drill-thru.underlying-records :as lib.drill-thru.underlying-records]\n   [metabase.lib.drill-thru.zoom :as lib.drill-thru.zoom]\n   [metabase.lib.drill-thru.zoom-in-bins :as lib.drill-thru.zoom-in-bins]\n   [metabase.lib.drill-thru.zoom-in-geographic :as lib.drill-thru.zoom-in-geographic]\n   [metabase.lib.drill-thru.zoom-in-timeseries :as lib.drill-thru.zoom-in-timeseries]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.drill-thru :as lib.schema.drill-thru]\n   [metabase.util :as u]\n   [metabase.util.log :as log]\n   [metabase.util.malli :as mu]))\n\n(comment\n  lib.drill-thru.fk-details/keep-me\n  lib.drill-thru.pk/keep-me\n  lib.drill-thru.zoom/keep-me)\n\n(defmethod lib.metadata.calculation/display-info-method ::drill-thru\n  [query stage-number drill-thru]\n  (lib.drill-thru.common/drill-thru-info-method query stage-number drill-thru))\n\n;; TODO: Different ways to apply drill-thru to a query.\n;; So far:\n;; - :filter on each :operators of :drill-thru/quick-filter applied with (lib/filter query stage filter-clause)\n\n;; TODO: ActionMode, PublicMode, MetabotMode need to be captured in the FE before calling `available-drill-thrus`.\n\n;;; TODO: Missing drills: format.\n(def ^:private available-drill-thru-fns\n  \"Some drill thru functions are expected to return drills for just the specified `:column`; others are expected to\n  ignore that column and return drills for all of the columns specified in `:dimensions`.\n  `:return-drills-for-dimensions?` specifies which type we have.\"\n  [{:f #'lib.drill-thru.automatic-insights/automatic-insights-drill,             :return-drills-for-dimensions? false}\n   {:f #'lib.drill-thru.column-filter/column-filter-drill,                       :return-drills-for-dimensions? true}\n   {:f #'lib.drill-thru.distribution/distribution-drill,                         :return-drills-for-dimensions? true}\n   {:f #'lib.drill-thru.fk-filter/fk-filter-drill,                               :return-drills-for-dimensions? false}\n   {:f #'lib.drill-thru.object-details/object-detail-drill,                      :return-drills-for-dimensions? false}\n   {:f #'lib.drill-thru.pivot/pivot-drill,                                       :return-drills-for-dimensions? false}\n   {:f #'lib.drill-thru.quick-filter/quick-filter-drill,                         :return-drills-for-dimensions? false}\n   {:f #'lib.drill-thru.sort/sort-drill,                                         :return-drills-for-dimensions? true}\n   {:f #'lib.drill-thru.summarize-column/summarize-column-drill,                 :return-drills-for-dimensions? true}\n   {:f #'lib.drill-thru.summarize-column-by-time/summarize-column-by-time-drill, :return-drills-for-dimensions? true}\n   {:f #'lib.drill-thru.column-extract/column-extract-drill,                     :return-drills-for-dimensions? false}\n   {:f #'lib.drill-thru.combine-columns/combine-columns-drill,                   :return-drills-for-dimensions? false}\n   {:f #'lib.drill-thru.compare-aggregations/compare-aggregations-drill,         :return-drills-for-dimensions? false}\n   {:f #'lib.drill-thru.underlying-records/underlying-records-drill,             :return-drills-for-dimensions? false}\n   {:f #'lib.drill-thru.zoom-in-timeseries/zoom-in-timeseries-drill,             :return-drills-for-dimensions? false}\n   {:f #'lib.drill-thru.zoom-in-geographic/zoom-in-geographic-drill,             :return-drills-for-dimensions? true}\n   {:f #'lib.drill-thru.zoom-in-bins/zoom-in-binning-drill,                      :return-drills-for-dimensions? true}])\n\n(mu/defn ^:private dimension-contexts :- [:maybe [:sequential {:min 1} ::lib.schema.drill-thru/context]]\n  \"Create new context maps (with updated `:column` and `:value` keys) for each of the `:dimensions` passed in. Some\n  drill thru functions are expected to return drills for each of these columns, while others are expected to ignore\n  them. Why? Who knows.\"\n  [{:keys [dimensions], :as context} :- ::lib.schema.drill-thru/context]\n  (not-empty\n    (for [dimension dimensions]\n      (merge context dimension))))\n\n(mu/defn available-drill-thrus :- [:sequential [:ref ::lib.schema.drill-thru/drill-thru]]\n  \"Get a list (possibly empty) of available drill-thrus for a column, or a column + value pair.\n\n  Note that if `:value nil` in the `context`, that implies the value is *missing*, ie. that this was a column click.\n  For a value of `NULL` from the database, use the sentinel `:null`. Most of this file only cares whether the value\n  was provided or not, but some things (eg. quick filters) treat `NULL` values differently.\n  See [[metabase.lib.js/available-drill-thrus]].\"\n  ([query context]\n   (available-drill-thrus query -1 context))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    context      :- ::lib.schema.drill-thru/context]\n   (try\n     (into []\n           (when (lib.metadata/editable? query)\n             (let [dim-contexts (dimension-contexts context)]\n               (for [{:keys [f return-drills-for-dimensions?]} available-drill-thru-fns\n                     context                                   (if (and return-drills-for-dimensions? dim-contexts)\n                                                                 dim-contexts\n                                                                 [context])\n                     :let                                      [drill (f query stage-number context)]\n                     :when                                     drill]\n                 drill))))\n     (catch #?(:clj Throwable :cljs :default) e\n       (throw (ex-info (str \"Error getting available drill thrus for query: \" (ex-message e))\n                       {:query        query\n                        :stage-number stage-number\n                        :context      context}\n                       e))))))\n\n(mu/defn drill-thru :- ::lib.schema/query\n  \"`(drill-thru query stage-number drill-thru)`\n\n  Applies the `drill-thru` to the query and stage. Keyed on the `:type` of the drill-thru. The `drill-thru` should be\n  one of those returned by a call to [[available-drill-thrus]] with the same `query` and `stage-number`.\n\n  Returns the updated query.\"\n  ([query drill]\n   (drill-thru query -1 drill))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    drill        :- ::lib.schema.drill-thru/drill-thru\n    & args]\n   (log/debugf \"Applying drill thru: %s\"\n               (u/pprint-to-str {:query query, :stage-number stage-number, :drill drill, :args args}))\n   (apply lib.drill-thru.common/drill-thru-method query stage-number drill args)))\n"]}