{"version":3,"sources":["metabase/lib/limit.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,AAAAA,4GAAA,wDAAA,WACGC,MAAMC,aAAaC;AADtB,AAEE,IAAAC,qBAAiB,AAAA,sFAAQ,AAACE,8BAAqBL,MAAMC;AAArD,AAAA,oBAAAE;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,2DAAA,PAAKA,uDAAa,AAAAE,oCAAA,MAAA,OAAwBF;;AAD5C;;;AAGF;;;;;;;;2BAAA,3BAAkBG;;6CAEdP,MAAMQ;AAFV,AAGG,8HAAA,mDAAA,zKAACD,yDAAAA,uEAAAA,hBAAMP,mDAAAA,xCAASQ,mDAAAA;;6CAEfR,MACAC,aACAO;AAPJ,AAQG,OAACC,qCAA4BT,MAAMC,aAAa,WAAKS;AAAL,AACE,oBAAIF;AACF,2DAAA,pDAACG,8CAAMD,8DAAaF;;AACpB,4DAAA,rDAACI,+CAAOF;;;;oCAN3DV,MACAC,aACAO;;;6CAFAR,MACAC;;6CADAD,MACAC,aACAO;;;;;;;;;AAMJ;;;;;;;;mCAAA,nCAAkBK;;qDAEdb;AAFJ,AAGG,8IAAA,yDAAA,/LAACa,iEAAAA,6EAAAA,dAAcb,yDAAAA;;qDACdA,MACAC;AALJ,AAMG,OAAA,sFAAQ,AAACI,8BAAqBL,MAAMC;;4CAFnCD,MACAC;;;qDADAD;;qDAAAA,MACAC","names":["metabase.lib.metadata.calculation/describe-top-level-key-method","query","stage-number","_k","temp__5804__auto__","limit","metabase.lib.util/query-stage","metabase.shared.util.i18n/js-i18n-n","metabase.lib.limit/limit","n","metabase.lib.util/update-query-stage","stage","cljs.core.assoc","cljs.core.dissoc","metabase.lib.limit/current-limit"],"sourcesContent":["(ns metabase.lib.limit\n  (:require\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.util :as lib.util]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util.malli :as mu]))\n\n(defmethod lib.metadata.calculation/describe-top-level-key-method :limit\n  [query stage-number _k]\n  (when-let [limit (:limit (lib.util/query-stage query stage-number))]\n    (str limit \\space (i18n/trun \"row\" \"rows\" limit))))\n\n(mu/defn ^:export limit :- ::lib.schema/query\n  \"Set the maximum number of rows to be returned by a stage of a query to `n`. If `n` is `nil`, remove the limit.\"\n  ([query n]\n   (limit query -1 n))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    n            :- [:maybe pos-int?]]\n   (lib.util/update-query-stage query stage-number (fn [stage]\n                                                     (if n\n                                                       (assoc stage :limit n)\n                                                       (dissoc stage :limit))))))\n\n(mu/defn ^:export current-limit :- [:maybe pos-int?]\n  \"Get the maximum number of rows to be returned by a stage of a query. `nil` indicates there is no limit\"\n  ([query :- ::lib.schema/query]\n   (current-limit query -1))\n  ([query :- ::lib.schema/query\n    stage-number :- :int]\n   (:limit (lib.util/query-stage query stage-number))))\n"]}