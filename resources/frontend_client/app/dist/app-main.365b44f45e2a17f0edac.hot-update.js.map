{"version":3,"file":"app-main.365b44f45e2a17f0edac.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAMA;AAAA;AAOA;AAGA;AAAA;AAFA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAUA;AAAA;AAGA;AACA;AAAA;AAMA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AAIA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAhGA;AAgDA;AAAA;AAhDA;AAAA","sources":["/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/admin/settings/components/CloudPanel/CloudPanel.tsx"],"sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { t } from \"ttag\";\n\nimport {\n  useGetCloudMigrationQuery,\n  useCreateCloudMigrationMutation,\n} from \"metabase/api\";\nimport { useSetting } from \"metabase/common/hooks\";\nimport LoadingAndErrorWrapper from \"metabase/components/LoadingAndErrorWrapper\";\nimport { useDispatch } from \"metabase/lib/redux\";\nimport { refreshSiteSettings } from \"metabase/redux/settings\";\nimport { Box, Text } from \"metabase/ui\";\nimport type { CloudMigration } from \"metabase-types/api/cloud-migration\";\n\nimport { MigrationCreationError } from \"./MigrationCreationError\";\nimport { MigrationError } from \"./MigrationError\";\nimport { MigrationInProgress } from \"./MigrationInProgress\";\nimport { MigrationStart } from \"./MigrationStart\";\nimport { MigrationSuccess } from \"./MigrationSuccess\";\nimport {\n  type InternalCloudMigrationState,\n  isInProgressMigration,\n  getStartedVisibleStates,\n  defaultGetPollingInterval,\n  openCheckoutInNewTab,\n} from \"./utils\";\n\ninterface CloudPanelProps {\n  getPollingInterval: (migration: CloudMigration) => number | undefined;\n  onMigrationStart: (storeUrl: string, migration: CloudMigration) => void;\n}\n\nexport const CloudPanel = ({\n  getPollingInterval = defaultGetPollingInterval,\n  onMigrationStart = openCheckoutInNewTab,\n}: CloudPanelProps) => {\n  const dispatch = useDispatch();\n  const [pollingInterval, setPollingInterval] = useState<number | undefined>(\n    undefined,\n  );\n\n  const {\n    data: migration,\n    isLoading,\n    error,\n  } = useGetCloudMigrationQuery(undefined, {\n    refetchOnMountOrArgChange: true,\n    pollingInterval,\n  });\n\n  const migrationState: InternalCloudMigrationState =\n    migration?.state ?? \"uninitialized\";\n\n  useEffect(\n    function syncPollingInterval() {\n      if (migration) {\n        setPollingInterval(getPollingInterval(migration));\n      }\n    },\n    [migration, getPollingInterval],\n  );\n\n  useEffect(\n    function syncSiteSettings() {\n      if (migrationState) {\n        dispatch(refreshSiteSettings({}));\n      }\n    },\n    [dispatch, migrationState],\n  );\n\n  const storeUrl = useSetting(\"store-url\");\n\n  const checkoutUrl = useMemo(() => {\n    return migration\n      ? `${storeUrl}/checkout?migration-id=${migration.external_id}`\n      : `${storeUrl}/checkout`;\n  }, [migration, storeUrl]);\n\n  const [createCloudMigration, createCloudMigrationResult] =\n    useCreateCloudMigrationMutation();\n\n  const handleCreateMigration = async () => {\n    const newMigration = await createCloudMigration().unwrap();\n    await dispatch(refreshSiteSettings({}));\n    onMigrationStart(storeUrl, newMigration);\n  };\n\n  return (\n    <LoadingAndErrorWrapper loading={isLoading} error={error}>\n      <Box maw=\"36rem\">\n        {/* <Text fw=\"bold\" size=\"1.5rem\" mb=\"2rem\">{t`Migrate to Cloud`}</Text>\n\n        {getStartedVisibleStates.has(migrationState) && (\n          <MigrationStart\n            startNewMigration={handleCreateMigration}\n            isStarting={createCloudMigrationResult.isLoading}\n          />\n        )} */}\n\n        <Box mt=\"2rem\">\n          {migration && isInProgressMigration(migration) && (\n            <MigrationInProgress\n              migration={migration}\n              checkoutUrl={checkoutUrl}\n            />\n          )}\n\n          {migration && migrationState === \"done\" && (\n            <MigrationSuccess\n              migration={migration}\n              restartMigration={handleCreateMigration}\n              isRestarting={createCloudMigrationResult.isLoading}\n              checkoutUrl={checkoutUrl}\n            />\n          )}\n\n          {migration && migrationState === \"error\" && (\n            <MigrationError migration={migration} />\n          )}\n\n          {createCloudMigrationResult.isError && (\n            <MigrationCreationError error={createCloudMigrationResult.error} />\n          )}\n        </Box>\n      </Box>\n    </LoadingAndErrorWrapper>\n  );\n};\n"],"names":[],"sourceRoot":""}