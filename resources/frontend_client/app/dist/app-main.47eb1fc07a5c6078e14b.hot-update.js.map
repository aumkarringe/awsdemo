{"version":3,"file":"app-main.47eb1fc07a5c6078e14b.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AACA;AAAA;AAGA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAGA;AAEA;AAAA;AACA;AAEA;AAEA;AACA;AAIA;AAAA;AAAA;AACA;AAMA;AAEA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAEA;AAEA;AAGA;AAAA;AAjIA;AAsDA;AAAA;AA6EA;AACA;AACA;AACA;AAAA;AAAA","sources":["/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/nav/components/ProfileLink/ProfileLink.jsx"],"sourcesContent":["import cx from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { t } from \"ttag\";\nimport _ from \"underscore\";\n\nimport { getAdminPaths } from \"metabase/admin/app/selectors\";\nimport { useSetting } from \"metabase/common/hooks\";\nimport EntityMenu from \"metabase/components/EntityMenu\";\nimport LogoIcon from \"metabase/components/LogoIcon\";\nimport Modal from \"metabase/components/Modal\";\nimport CS from \"metabase/css/core/index.css\";\nimport { color } from \"metabase/lib/colors\";\nimport { capitalize } from \"metabase/lib/formatting\";\nimport { useSelector } from \"metabase/lib/redux\";\nimport * as Urls from \"metabase/lib/urls\";\nimport {\n  getApplicationName,\n  getIsWhiteLabeling,\n} from \"metabase/selectors/whitelabel\";\n\nimport { useHelpLink } from \"./useHelpLink\";\n\n// generate the proper set of list items for the current user\n// based on whether they're an admin or not\nconst mapStateToProps = state => ({\n  adminItems: getAdminPaths(state),\n});\n\nexport default connect(mapStateToProps)(ProfileLink);\n\nfunction ProfileLink({ adminItems, onLogout }) {\n  const [modalOpen, setModalOpen] = useState(null);\n  const version = useSetting(\"version\");\n  const applicationName = useSelector(getApplicationName);\n  const { tag, date, ...versionExtra } = version;\n  const helpLink = useHelpLink();\n\n  const openModal = modalName => {\n    setModalOpen(modalName);\n  };\n\n  const closeModal = () => {\n    setModalOpen(null);\n  };\n\n  const generateOptionsForUser = () => {\n    const showAdminSettingsItem = adminItems?.length > 0;\n\n    return [\n      {\n        title: t`Account settings`,\n        icon: null,\n        link: Urls.accountSettings(),\n        event: `Navbar;Profile Dropdown;Edit Profile`,\n      },\n      showAdminSettingsItem && {\n        title: t`Admin settings`,\n        icon: null,\n        link: \"/admin\",\n        event: `Navbar;Profile Dropdown;Enter Admin`,\n      },\n      helpLink.visible && {\n        title: t`Help`,\n        icon: null,\n        link: helpLink.href,\n        externalLink: true,\n        event: `Navbar;Profile Dropdown;About ${tag}`,\n      },\n      {\n        title: t`About ${applicationName}`,\n        icon: null,\n        action: () => openModal(\"about\"),\n        event: `Navbar;Profile Dropdown;About ${tag}`,\n      },\n      {\n        title: t`Sign out`,\n        icon: null,\n        action: () => onLogout(),\n        event: `Navbar;Profile Dropdown;Logout`,\n      },\n    ].filter(Boolean);\n  };\n\n  // show trademark if application name is not whitelabeled\n  const isWhiteLabeling = useSelector(getIsWhiteLabeling);\n  const showTrademark = !isWhiteLabeling;\n  return (\n    <div>\n      <EntityMenu\n        tooltip={t`Settings`}\n        items={generateOptionsForUser()}\n        triggerIcon=\"gear\"\n        triggerProps={{\n          color: color(\"text-medium\"),\n          hover: {\n            backgroundColor: color(\"brand\"),\n            color: color(\"text-white\"),\n          },\n        }}\n        // I've disabled this transition, since it results in the menu\n        // sometimes not appearing until content finishes loading on complex\n        // dashboards and questions #39303\n        // TODO: Try to restore this transition once we upgrade to React 18 and can prioritize this update\n        transitionDuration={0}\n      />\n      {modalOpen === \"about\" ? (\n        <Modal small onClose={closeModal}>\n          <div\n            className={cx(CS.px4, CS.pt4, CS.pb2, CS.textCentered, CS.relative)}\n          >\n            <div className={cx(CS.textBrand, CS.pb2)}>\n              <LogoIcon height={48} />\n            </div>\n            <h2\n              style={{ fontSize: \"1.75em\" }}\n              className={CS.textDark}\n            >{t`Thanks for using ${applicationName}!`}</h2>\n            <div className={CS.pt2}>\n              <h3 className={cx(CS.textDark, CS.mb1)}>\n                {t`You're on version`} {tag}\n              </h3>\n              <p className={cx(CS.textMedium, CS.textBold)}>\n                {t`Built on`} {date}\n              </p>\n              {!/^v\\d+\\.\\d+\\.\\d+$/.test(tag) && (\n                <div>\n                  {_.map(versionExtra, (value, key) => (\n                    <p key={key} className={cx(CS.textMedium, CS.textBold)}>\n                      {capitalize(key)}: {value}\n                    </p>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n          {showTrademark && (\n            <div\n              style={{ borderWidth: \"2px\" }}\n              className={cx(\n                CS.p2,\n                CS.h5,\n                CS.textCentered,\n                CS.textMedium,\n                CS.borderTop,\n              )}\n            >\n              <span className={CS.block}>\n                {/* eslint-disable-next-line no-literal-metabase-strings -- This only shows on OSS instance */}\n                <span className={CS.textBold}>DataLM.ai</span>{\" \"}\n                {/* eslint-disable-next-line no-literal-metabase-strings -- This only shows on OSS instance */}\n                {t`is a Trademark of`} DataLM.ai, Inc\n              </span>\n              <span>{t`and is built with care by a team from all across this pale blue dot.`}</span>\n            </div>\n          )}\n        </Modal>\n      ) : null}\n    </div>\n  );\n}\n\nProfileLink.propTypes = {\n  adminItems: PropTypes.array,\n  onLogout: PropTypes.func.isRequired,\n};\n"],"names":[],"sourceRoot":""}