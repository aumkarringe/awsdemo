{"version":3,"file":"app-main.7c07c75bdd0bcd622e2a.hot-update.js","mappings":"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","sources":["/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/admin/settings/components/CloudPanel/CloudPanel.styled.tsx","/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/admin/settings/components/CloudPanel/CloudPanel.tsx","/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/admin/settings/components/CloudPanel/MigrationCreationError.tsx","/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/admin/settings/components/CloudPanel/MigrationError.tsx","/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/admin/settings/components/CloudPanel/MigrationInProgress.tsx","/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/admin/settings/components/CloudPanel/MigrationSuccess.tsx","/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/admin/settings/components/CloudPanel/index.ts","/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/admin/settings/components/CloudPanel/utils.ts"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nimport { alpha } from \"metabase/lib/colors\";\n\nexport const MigrationCard = styled.div`\n  border: 1px solid var(--mb-color-border);\n  border-radius: 0.5rem;\n  padding: 2rem 3rem;\n`;\n\nexport const LargeIconContainer = styled.div<{\n  color: string;\n}>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n  height: 4rem;\n  width: 4rem;\n  border-radius: 50%;\n  background: ${props => alpha(props.color, 0.15)};\n  color: ${props => props.color};\n`;\n","import { useEffect, useMemo, useState } from \"react\";\nimport { t } from \"ttag\";\n\nimport {\n  useGetCloudMigrationQuery,\n  useCreateCloudMigrationMutation,\n} from \"metabase/api\";\nimport { useSetting } from \"metabase/common/hooks\";\nimport LoadingAndErrorWrapper from \"metabase/components/LoadingAndErrorWrapper\";\nimport { useDispatch } from \"metabase/lib/redux\";\nimport { refreshSiteSettings } from \"metabase/redux/settings\";\nimport { Box, Text } from \"metabase/ui\";\nimport type { CloudMigration } from \"metabase-types/api/cloud-migration\";\n\nimport { MigrationCreationError } from \"./MigrationCreationError\";\nimport { MigrationError } from \"./MigrationError\";\nimport { MigrationInProgress } from \"./MigrationInProgress\";\nimport { MigrationStart } from \"./MigrationStart\";\nimport { MigrationSuccess } from \"./MigrationSuccess\";\nimport {\n  type InternalCloudMigrationState,\n  isInProgressMigration,\n  getStartedVisibleStates,\n  defaultGetPollingInterval,\n  openCheckoutInNewTab,\n} from \"./utils\";\n\ninterface CloudPanelProps {\n  getPollingInterval: (migration: CloudMigration) => number | undefined;\n  onMigrationStart: (storeUrl: string, migration: CloudMigration) => void;\n}\n\nexport const CloudPanel = ({\n  getPollingInterval = defaultGetPollingInterval,\n  onMigrationStart = openCheckoutInNewTab,\n}: CloudPanelProps) => {\n  const dispatch = useDispatch();\n  const [pollingInterval, setPollingInterval] = useState<number | undefined>(\n    undefined,\n  );\n\n  const {\n    data: migration,\n    isLoading,\n    error,\n  } = useGetCloudMigrationQuery(undefined, {\n    refetchOnMountOrArgChange: true,\n    pollingInterval,\n  });\n\n  const migrationState: InternalCloudMigrationState =\n    migration?.state ?? \"uninitialized\";\n\n  useEffect(\n    function syncPollingInterval() {\n      if (migration) {\n        setPollingInterval(getPollingInterval(migration));\n      }\n    },\n    [migration, getPollingInterval],\n  );\n\n  useEffect(\n    function syncSiteSettings() {\n      if (migrationState) {\n        dispatch(refreshSiteSettings({}));\n      }\n    },\n    [dispatch, migrationState],\n  );\n\n  const storeUrl = useSetting(\"store-url\");\n\n  const checkoutUrl = useMemo(() => {\n    return migration\n      ? `${storeUrl}/checkout?migration-id=${migration.external_id}`\n      : `${storeUrl}/checkout`;\n  }, [migration, storeUrl]);\n\n  const [createCloudMigration, createCloudMigrationResult] =\n    useCreateCloudMigrationMutation();\n\n  const handleCreateMigration = async () => {\n    const newMigration = await createCloudMigration().unwrap();\n    await dispatch(refreshSiteSettings({}));\n    onMigrationStart(storeUrl, newMigration);\n  };\n\n  return (\n    <LoadingAndErrorWrapper loading={isLoading} error={error}>\n      <Box maw=\"36rem\">\n        {/* <Text fw=\"bold\" size=\"1.5rem\" mb=\"2rem\">{t`Migrate to Cloud`}</Text>\n\n        {getStartedVisibleStates.has(migrationState) && (\n          <MigrationStart\n            startNewMigration={handleCreateMigration}\n            isStarting={createCloudMigrationResult.isLoading}\n          />\n        )} */}\n\n        <Box mt=\"2rem\">\n          {migration && isInProgressMigration(migration) && (\n            <MigrationInProgress\n              migration={migration}\n              checkoutUrl={checkoutUrl}\n            />\n          )}\n\n          {migration && migrationState === \"done\" && (\n            <MigrationSuccess\n              migration={migration}\n              restartMigration={handleCreateMigration}\n              isRestarting={createCloudMigrationResult.isLoading}\n              checkoutUrl={checkoutUrl}\n            />\n          )}\n\n          {migration && migrationState === \"error\" && (\n            <MigrationError migration={migration} />\n          )}\n\n          {createCloudMigrationResult.isError && (\n            <MigrationCreationError error={createCloudMigrationResult.error} />\n          )}\n        </Box>\n      </Box>\n    </LoadingAndErrorWrapper>\n  );\n};\n","import { c, t } from \"ttag\";\n\nimport Link from \"metabase/core/components/Link\";\nimport { color } from \"metabase/lib/colors\";\nimport { Flex, Icon, Text, Box } from \"metabase/ui\";\n\nimport { LargeIconContainer, MigrationCard } from \"./CloudPanel.styled\";\n\ninterface MigrationCreationErrorProps {\n  error: any;\n}\n\nexport const MigrationCreationError = ({\n  error,\n}: MigrationCreationErrorProps) => {\n  return (\n    <MigrationCard>\n      <Flex gap=\"md\">\n        <LargeIconContainer color={color(\"error\")}>\n          <Icon size=\"1.5rem\" name=\"warning\" />\n        </LargeIconContainer>\n        <Box>\n          <Text fw=\"bold\">{t`Migration to Metabase Cloud failed`}</Text>\n          {error.data && <Text mt=\".5rem\">{error.data}</Text>}\n          <Text mt=\"1rem\">\n            {c(\"{0} is an email address\")\n              .jt`Please try again later, and reach out to us at ${(\n              <Link key=\"email\" variant=\"brand\" to=\"mailto:help@metabase.com\">\n                help@metabase.com\n              </Link>\n            )} if you need help.`}\n          </Text>\n        </Box>\n      </Flex>\n    </MigrationCard>\n  );\n};\n","import { c, t } from \"ttag\";\n\nimport Link from \"metabase/core/components/Link\";\nimport { color } from \"metabase/lib/colors\";\nimport { Flex, Icon, Text, Box } from \"metabase/ui\";\nimport type { CloudMigration } from \"metabase-types/api/cloud-migration\";\n\nimport { LargeIconContainer, MigrationCard } from \"./CloudPanel.styled\";\nimport { getMigrationEventTime } from \"./utils\";\n\ninterface MigrationErrorProps {\n  migration: CloudMigration;\n}\n\nexport const MigrationError = ({ migration }: MigrationErrorProps) => {\n  const failedAt = getMigrationEventTime(migration.updated_at);\n\n  return (\n    <MigrationCard>\n      <Flex gap=\"md\">\n        <LargeIconContainer color={color(\"error\")}>\n          <Icon size=\"1.5rem\" name=\"warning\" />\n        </LargeIconContainer>\n        <Box>\n          <Text fw=\"bold\">{t`Migration to Metabase Cloud failed`}</Text>\n          <Text mt=\"1rem\">\n            {c(\"{0} is an email address\")\n              .jt`Please try again later, and reach out to us at ${(\n              <Link key=\"email\" variant=\"brand\" to=\"mailto:help@metabase.com\">\n                help@metabase.com\n              </Link>\n            )} if you need help.`}\n          </Text>\n          <Text\n            size=\"sm\"\n            mt=\".5rem\"\n          >{t`Migration to Metabase Cloud failed on ${failedAt}.`}</Text>\n        </Box>\n      </Flex>\n    </MigrationCard>\n  );\n};\n","import { t } from \"ttag\";\n\nimport { useCancelCloudMigrationMutation } from \"metabase/api\";\nimport { useSetting } from \"metabase/common/hooks\";\nimport ExternalLink from \"metabase/core/components/ExternalLink\";\nimport { useToggle } from \"metabase/hooks/use-toggle\";\nimport { color } from \"metabase/lib/colors\";\nimport { useDispatch } from \"metabase/lib/redux\";\nimport { addUndo } from \"metabase/redux/undo\";\nimport {\n  Flex,\n  Text,\n  List,\n  Button,\n  Box,\n  Modal,\n  Progress,\n  Icon,\n} from \"metabase/ui\";\n\nimport { MigrationCard } from \"./CloudPanel.styled\";\nimport type { InProgressCloudMigration, InProgressStates } from \"./utils\";\n\ninterface MigrationInProgressProps {\n  migration: InProgressCloudMigration;\n  checkoutUrl: string;\n}\n\nconst progressMessage: Record<InProgressStates, string> = {\n  init: t`Talking to Metabase Cloud...`,\n  setup: t`Talking to Metabase Cloud...`,\n  dump: t`Taking a snapshot of this instance...`,\n  upload: t`Uploading the snapshot to the cloud...`,\n};\n\nexport const MigrationInProgress = ({\n  migration,\n  checkoutUrl,\n}: MigrationInProgressProps) => {\n  const dispatch = useDispatch();\n\n  const readOnly = useSetting(\"read-only-mode\");\n\n  const [isModalOpen, { turnOn: openModal, turnOff: closeModal }] =\n    useToggle(false);\n\n  const [cancelCloudMigration] = useCancelCloudMigrationMutation();\n\n  const handleCancelMigration = async () => {\n    closeModal();\n    await cancelCloudMigration();\n    dispatch(\n      addUndo({\n        icon: \"info_filled\",\n        message: t`Migration to Metabase Cloud has been canceled.`,\n        undo: false,\n      }),\n    );\n  };\n\n  return (\n    <>\n      <MigrationCard>\n        <Flex gap=\"1.5rem\" align=\"start\">\n          <Flex\n            bg={color(\"brand-light\")}\n            h=\"64px\"\n            style={{ borderRadius: \"50%\", flex: \"0 0 64px\" }}\n            justify=\"center\"\n            align=\"center\"\n          >\n            <Icon\n              name=\"cloud_filled\"\n              size=\"2.375rem\"\n              style={{ color: color(\"brand\") }}\n            />\n          </Flex>\n          <Box style={{ flex: \"1 0 0\" }}>\n            <Text fw=\"bold\">{t`Migrating to Metabase Cloud…`}</Text>\n            {readOnly ? (\n              <List size=\"md\" mt=\"md\">\n                <List.Item>{t`To complete the migration, set up your account in the Metabase Store`}</List.Item>\n                <List.Item>{t`While we snapshot your Metabase data, people will be able to view questions and dashboards, but they won't be able to edit or create anything new. It should only take up to 30 minutes`}</List.Item>\n              </List>\n            ) : (\n              <Text mt=\"md\">{t`To complete the migration, set up your account in the Metabase Store`}</Text>\n            )}\n\n            <Box mt=\"lg\" mb=\"md\">\n              <Text size=\"md\" c=\"text-medium\">\n                {progressMessage[migration.state]}\n              </Text>\n              <Progress value={migration.progress} mt=\".25rem\" />\n            </Box>\n\n            <Flex justify=\"space-between\">\n              <Button\n                mt=\"md\"\n                onClick={openModal}\n                c=\"error\"\n              >{t`Cancel migration`}</Button>\n              <Button\n                mt=\"md\"\n                component={ExternalLink}\n                href={checkoutUrl}\n                variant=\"filled\"\n              >{t`Go to Metabase Store`}</Button>\n            </Flex>\n          </Box>\n        </Flex>\n      </MigrationCard>\n\n      <Modal.Root\n        opened={isModalOpen}\n        onClose={closeModal}\n        size=\"lg\"\n        data-testid=\"cancel-cloud-migration-confirmation\"\n      >\n        <Modal.Overlay />\n        <Modal.Content p=\"1rem\">\n          <Modal.Header pt=\"1rem\" px=\"1rem\">\n            <Modal.Title>{t`Cancel migration?`}</Modal.Title>\n            <Modal.CloseButton />\n          </Modal.Header>\n          <Modal.Body mt=\"md\" px=\"1rem\">\n            <Text>{t`We will cancel the migration process. After that, this instance will no longer be read-only.`}</Text>\n            <Flex justify=\"end\" mt=\"3.5rem\">\n              <Button\n                variant=\"filled\"\n                color=\"error\"\n                onClick={handleCancelMigration}\n              >{t`Cancel migration`}</Button>\n            </Flex>\n          </Modal.Body>\n        </Modal.Content>\n      </Modal.Root>\n    </>\n  );\n};\n","import { t } from \"ttag\";\n\nimport ExternalLink from \"metabase/core/components/ExternalLink\";\nimport { color } from \"metabase/lib/colors\";\nimport { Flex, Icon, Text, Button, Box } from \"metabase/ui\";\nimport type { CloudMigration } from \"metabase-types/api/cloud-migration\";\n\nimport { LargeIconContainer, MigrationCard } from \"./CloudPanel.styled\";\nimport { getMigrationEventTime } from \"./utils\";\n\ninterface MigrationSuccessProps {\n  migration: CloudMigration;\n  restartMigration: () => void;\n  isRestarting: boolean;\n  checkoutUrl: string;\n}\n\nexport const MigrationSuccess = ({\n  migration,\n  restartMigration,\n  isRestarting,\n  checkoutUrl,\n}: MigrationSuccessProps) => {\n  const uploadedAt = getMigrationEventTime(migration.updated_at);\n\n  return (\n    <>\n      <MigrationCard>\n        <Flex gap=\"md\">\n          <LargeIconContainer color={color(\"success\")}>\n            <Icon size=\"1.5rem\" name=\"check\" />\n          </LargeIconContainer>\n\n          <Box>\n            <Text fw=\"bold\" mb=\"0.5rem\">\n              {t`The snapshot has been uploaded to the Cloud`}\n            </Text>\n            <Text size=\"sm\">{t`On ${uploadedAt}`}</Text>\n            <Text my=\"2rem\">\n              {t`To complete the migration, set up your account in the Metabase Store`}\n            </Text>\n\n            <Box mt=\"1.5rem\">\n              <ExternalLink href={checkoutUrl}>\n                <Button variant=\"filled\">{t`Go to Metabase Store`}</Button>\n              </ExternalLink>\n            </Box>\n          </Box>\n        </Flex>\n      </MigrationCard>\n\n      <Button\n        variant=\"subtle\"\n        onClick={restartMigration}\n        disabled={isRestarting}\n        px=\"0\"\n        mt=\"1rem\"\n      >{t`Restart the process`}</Button>\n    </>\n  );\n};\n","export * from \"./CloudPanel\";\n","import dayjs from \"dayjs\";\n\nimport type {\n  CloudMigration,\n  CloudMigrationState,\n} from \"metabase-types/api/cloud-migration\";\n\nexport type InternalCloudMigrationState = CloudMigrationState | \"uninitialized\";\nexport type InProgressStates = \"init\" | \"setup\" | \"dump\" | \"upload\";\nexport type InProgressCloudMigration = Omit<CloudMigration, \"state\"> & {\n  state: InProgressStates;\n};\n\nexport const getStartedVisibleStates = new Set<InternalCloudMigrationState>([\n  \"uninitialized\",\n  \"cancelled\",\n  \"error\",\n]);\n\nexport const progressStates = new Set<InternalCloudMigrationState>([\n  \"init\",\n  \"setup\",\n  \"dump\",\n  \"upload\",\n]);\n\nexport const isInProgressState = (\n  state: InternalCloudMigrationState,\n): state is InProgressStates => {\n  return progressStates.has(state);\n};\n\nexport const isInProgressMigration = (\n  migration: CloudMigration,\n): migration is InProgressCloudMigration => {\n  return isInProgressState(migration.state);\n};\n\nconst SECOND = 1000;\n\nconst defaultPollingIntervalsByState: Record<\n  InternalCloudMigrationState,\n  number | undefined\n> = {\n  uninitialized: undefined,\n  init: 1 * SECOND,\n  setup: 1 * SECOND,\n  dump: 3 * SECOND,\n  upload: 3 * SECOND,\n  cancelled: undefined,\n  error: undefined,\n  done: undefined,\n};\n\nexport const defaultGetPollingInterval = (\n  migration: CloudMigration,\n): number | undefined => {\n  const { progress, state } = migration;\n  const defaultPollingInterval = defaultPollingIntervalsByState[state];\n  const isAlmostDone = progress > 90 && progress < 100;\n\n  if (isAlmostDone) {\n    return 1 * SECOND;\n  }\n\n  return defaultPollingInterval;\n};\n\nexport const getMigrationEventTime = (isoString: string) =>\n  dayjs(isoString).format(\"MMMM DD, YYYY, hh:mm A\");\n\nexport const openCheckoutInNewTab = (\n  storeUrl: string,\n  migration: CloudMigration,\n) => {\n  window\n    .open(\n      `${storeUrl}/checkout?migration-id=${migration.external_id}`,\n      \"_blank\",\n    )\n    ?.focus();\n};\n"],"names":[],"sourceRoot":""}