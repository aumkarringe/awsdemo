{"version":3,"file":"app-main.a5d69bc5d930da7a0e9a.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAtLA;AAwLA;AAAA;AAAA","sources":["/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/components/NewItemMenu/ChatWithAIPopup.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\n\nconst ChatWithAIPopupWrapper = styled.div`\n  // ... (styles remain unchanged)\n`;\n\nconst ChatWithAIPopup = ({ onClose, items, selectedItem, onClick }) => {\n  const [question, setQuestion] = useState(\"\");\n  const [viewTable, setViewTable] = useState(false);\n  const [viewVisualization, setViewVisualization] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [apiResults, setApiResults] = useState([]);\n\n  const tableApiUrl = \"https://h44jxk3hxe.execute-api.us-east-1.amazonaws.com/dev/generate_sql\";\n  const visualizationApiUrl = \"https://uhwye4890j.execute-api.us-east-1.amazonaws.com/dev/generate_visual\";\n\n  const handleSubmit = async () => {\n    if (!question || !selectedItem || (!viewTable && !viewVisualization)) {\n      setError(\"Please fill in all fields and select at least one view option.\");\n      return;\n    }\n\n    setError(\"\");\n    setLoading(true);\n\n    const apiCalls = [];\n\n    if (viewTable) {\n      apiCalls.push(axios.post(\n        tableApiUrl,\n        { user_query: question },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      ));\n    }\n\n    if (viewVisualization) {\n      apiCalls.push(axios.post(\n        visualizationApiUrl,\n        { user_query: question },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }\n      ));\n    }\n\n    try {\n      const responses = await Promise.all(apiCalls);\n\n      setLoading(false);\n\n      responses.forEach((response) => {\n        const result = response.data;\n        console.log('Result', result);\n        const cardUrl = result.card_url;\n        if (cardUrl) {\n          window.open(cardUrl, '_blank');\n        } else {\n          console.error(\"card_url not found in the response\");\n        }\n      });\n\n      setApiResults(responses.map(response => response.data));\n      onClose(); // Close the modal after successful submission\n    } catch (error) {\n      setLoading(false);\n      console.error(\"Error fetching data:\", error);\n      setError(error.message);\n    }\n  };\n\n  const sendDBIndex = async (item) => {\n    let indexValue = \"\";\n    switch (item.name) {\n      case \"automotive\":\n        indexValue = \"llm_vector_db_metadata_indx2\";\n        break;\n      case \"Sample Database\":\n        indexValue = \"llm_vector_db_metadata_indx1\";\n        break;\n      case \"Chinook\":\n        indexValue = \"llm_vector_db_metadata_indx3\";\n        break;\n      default:\n        indexValue = \"llm_vector_db_default_index\";\n        break;\n    }\n    const payload = {\n      name: \"INDEX\",\n      value: indexValue,\n    };\n    try {\n      const response = await axios.post(\n        'https://ki1asceryj.execute-api.us-east-1.amazonaws.com/dev/update-parameter',\n        payload,\n        { headers: { \"Content-Type\": \"application/json\" } }\n      );\n      console.log('DBIndex API response:', response.data);\n    } catch (error) {\n      console.error('Error sending DBIndex to API:', error);\n    }\n  };\n\n  const handleItemClick = async (item) => {\n    const payload = {\n      name: \"METABASE_DATABASE_NAME\",\n      value: item.name,\n    };\n\n    try {\n      const response = await axios.post(\n        'https://ki1asceryj.execute-api.us-east-1.amazonaws.com/dev/update-parameter',\n        payload,\n        { headers: { \"Content-Type\": \"application/json\" } }\n      );\n      console.log('API response:', response.data);\n      await sendDBIndex(item);\n      onClick(item);\n    } catch (error) {\n      console.error('Error sending item to API:', error);\n    }\n  };\n\n  return (\n    <ChatWithAIPopupWrapper>\n      <h2>Chat with AI</h2>\n      {error && <div className=\"error\">{error}</div>}\n      <div className=\"form-group\">\n        <label htmlFor=\"question\">Enter your question:</label>\n        <input\n          type=\"text\"\n          id=\"question\"\n          value={question}\n          onChange={(e) => setQuestion(e.target.value)}\n        />\n      </div>\n      <div className=\"form-group\">\n        <label>Select Database:</label>\n        {items.map((item) => (\n          <div key={item.id}>\n            <button\n              onClick={() => handleItemClick(item)}\n              style={{\n                fontWeight: selectedItem && selectedItem.id === item.id ? 'bold' : 'normal',\n              }}\n            >\n              {item.name}\n            </button>\n          </div>\n        ))}\n      </div>\n      <div className=\"form-group\">\n        <label>How do you want to view your data?</label>\n        <div className=\"checkboxes\">\n          <div>\n            <input\n              type=\"checkbox\"\n              id=\"viewTable\"\n              checked={viewTable}\n              onChange={(e) => setViewTable(e.target.checked)}\n            />\n            <label htmlFor=\"viewTable\">Table</label>\n          </div>\n          <div>\n            <input\n              type=\"checkbox\"\n              id=\"viewVisualization\"\n              checked={viewVisualization}\n              onChange={(e) => setViewVisualization(e.target.checked)}\n            />\n            <label htmlFor=\"viewVisualization\">Visualization</label>\n          </div>\n        </div>\n      </div>\n      <div className=\"form-group buttons\">\n        <button onClick={handleSubmit} disabled={loading}>\n          {loading ? \"Loading...\" : \"View Results\"}\n        </button>\n        <button onClick={onClose}>Cancel</button>\n      </div>\n    </ChatWithAIPopupWrapper>\n  );\n};\n\nexport default ChatWithAIPopup;\n"],"names":[],"sourceRoot":""}