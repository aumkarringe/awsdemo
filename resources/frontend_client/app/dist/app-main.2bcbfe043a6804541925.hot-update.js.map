{"version":3,"file":"app-main.2bcbfe043a6804541925.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAIA","sources":["/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/admin/routes.jsx"],"sourcesContent":["import { Fragment } from \"react\";\nimport { IndexRoute, IndexRedirect } from \"react-router\";\nimport { routerActions } from \"react-router-redux\";\nimport { connectedReduxRedirect } from \"redux-auth-wrapper/history3/redirect\";\nimport { t } from \"ttag\";\n\nimport AdminApp from \"metabase/admin/app/components/AdminApp\";\nimport DatabaseEditApp from \"metabase/admin/databases/containers/DatabaseEditApp\";\nimport DatabaseListApp from \"metabase/admin/databases/containers/DatabaseListApp\";\nimport DataModelApp from \"metabase/admin/datamodel/containers/DataModelApp\";\nimport RevisionHistoryApp from \"metabase/admin/datamodel/containers/RevisionHistoryApp\";\nimport SegmentApp from \"metabase/admin/datamodel/containers/SegmentApp\";\nimport SegmentListApp from \"metabase/admin/datamodel/containers/SegmentListApp\";\nimport { getMetadataRoutes } from \"metabase/admin/datamodel/metadata/routes\";\nimport { AdminPeopleApp } from \"metabase/admin/people/containers/AdminPeopleApp\";\nimport { EditUserModal } from \"metabase/admin/people/containers/EditUserModal\";\nimport GroupDetailApp from \"metabase/admin/people/containers/GroupDetailApp\";\nimport GroupsListingApp from \"metabase/admin/people/containers/GroupsListingApp\";\nimport { NewUserModal } from \"metabase/admin/people/containers/NewUserModal\";\nimport PeopleListingApp from \"metabase/admin/people/containers/PeopleListingApp\";\nimport UserActivationModal from \"metabase/admin/people/containers/UserActivationModal\";\nimport UserPasswordResetModal from \"metabase/admin/people/containers/UserPasswordResetModal\";\nimport UserSuccessModal from \"metabase/admin/people/containers/UserSuccessModal\";\nimport { PerformanceApp } from \"metabase/admin/performance/components/PerformanceApp\";\nimport getAdminPermissionsRoutes from \"metabase/admin/permissions/routes\";\nimport { SettingsEditor } from \"metabase/admin/settings/app/components/SettingsEditor\";\nimport { Help } from \"metabase/admin/tasks/components/Help\";\nimport { Logs } from \"metabase/admin/tasks/components/Logs\";\nimport { JobInfoApp } from \"metabase/admin/tasks/containers/JobInfoApp\";\nimport { JobTriggersModal } from \"metabase/admin/tasks/containers/JobTriggersModal\";\nimport {\n  ModelCacheRefreshJobs,\n  ModelCacheRefreshJobModal,\n} from \"metabase/admin/tasks/containers/ModelCacheRefreshJobs\";\nimport { TaskModal } from \"metabase/admin/tasks/containers/TaskModal\";\nimport { TasksApp } from \"metabase/admin/tasks/containers/TasksApp\";\nimport TroubleshootingApp from \"metabase/admin/tasks/containers/TroubleshootingApp\";\nimport Tools from \"metabase/admin/tools/containers/Tools\";\nimport {\n  createAdminRouteGuard,\n  createAdminRedirect,\n} from \"metabase/admin/utils\";\nimport CS from \"metabase/css/core/index.css\";\nimport { withBackground } from \"metabase/hoc/Background\";\nimport { ModalRoute } from \"metabase/hoc/ModalRoute\";\nimport { Route } from \"metabase/hoc/Title\";\nimport {\n  PLUGIN_ADMIN_ROUTES,\n  PLUGIN_ADMIN_USER_MENU_ROUTES,\n  PLUGIN_ADMIN_TOOLS,\n} from \"metabase/plugins\";\nimport { getSetting } from \"metabase/selectors/settings\";\n\nimport { PerformanceTabId } from \"./performance/types\";\nimport RedirectToAllowedSettings from \"./settings/containers/RedirectToAllowedSettings\";\n\nconst UserCanAccessTools = connectedReduxRedirect({\n  wrapperDisplayName: \"UserCanAccessTools\",\n  redirectPath: \"/admin\",\n  allowRedirectBack: false,\n  authenticatedSelector: state => {\n    if (PLUGIN_ADMIN_TOOLS.EXTRA_ROUTES.length > 0) {\n      return true;\n    }\n    const isModelPersistenceEnabled = getSetting(\n      state,\n      \"persisted-models-enabled\",\n    );\n    const hasLoadedSettings = typeof isModelPersistenceEnabled === \"boolean\";\n    return !hasLoadedSettings || isModelPersistenceEnabled;\n  },\n  redirectAction: routerActions.replace,\n});\n\nconst getRoutes = (store, CanAccessSettings, IsAdmin) => (\n  <Route\n    path=\"/admin\"\n    component={withBackground(CS.bgWhite)(CanAccessSettings)}\n  >\n    <Route title={t`Admin`} component={AdminApp}>\n      <IndexRoute component={RedirectToAllowedSettings} />\n      <Route\n        path=\"databases\"\n        title={t`Databases`}\n        component={createAdminRouteGuard(\"databases\")}\n      >\n        <IndexRoute component={DatabaseListApp} />\n        <Route path=\"create\" component={DatabaseEditApp} />\n        <Route path=\":databaseId\" component={DatabaseEditApp} />\n      </Route>\n      <Route path=\"datamodel\" component={createAdminRouteGuard(\"data-model\")}>\n        <Route title={t`Table Metadata`} component={DataModelApp}>\n          {getMetadataRoutes()}\n          <Route path=\"segments\" component={SegmentListApp} />\n          <Route path=\"segment/create\" component={SegmentApp} />\n          <Route path=\"segment/:id\" component={SegmentApp} />\n          <Route path=\"segment/:id/revisions\" component={RevisionHistoryApp} />\n        </Route>\n      </Route>\n      {/* PEOPLE */}\n      <Route path=\"people\" component={createAdminRouteGuard(\"people\")}>\n        <Route title={t`People`} component={AdminPeopleApp}>\n          <IndexRoute component={PeopleListingApp} />\n\n          {/*NOTE: this must come before the other routes otherwise it will be masked by them*/}\n          <Route path=\"groups\" title={t`Groups`}>\n            <IndexRoute component={GroupsListingApp} />\n            <Route path=\":groupId\" component={GroupDetailApp} />\n          </Route>\n\n          <Route path=\"\" component={PeopleListingApp}>\n            <ModalRoute path=\"new\" modal={NewUserModal} />\n          </Route>\n\n          <Route path=\":userId\" component={PeopleListingApp}>\n            <IndexRedirect to=\"/admin/people\" />\n            <ModalRoute path=\"edit\" modal={EditUserModal} />\n            <ModalRoute path=\"success\" modal={UserSuccessModal} />\n            <ModalRoute path=\"reset\" modal={UserPasswordResetModal} />\n            <ModalRoute path=\"deactivate\" modal={UserActivationModal} />\n            <ModalRoute path=\"reactivate\" modal={UserActivationModal} />\n            {PLUGIN_ADMIN_USER_MENU_ROUTES.map((getRoutes, index) => (\n              <Fragment key={index}>{getRoutes(store)}</Fragment>\n            ))}\n          </Route>\n        </Route>\n      </Route>\n      {/* Troubleshooting */}\n      <Route\n        path=\"troubleshooting\"\n        component={createAdminRouteGuard(\"troubleshooting\")}\n      >\n        <Route title={t`Troubleshooting`} component={TroubleshootingApp}>\n          <IndexRedirect to=\"help\" />\n          <Route path=\"help\" component={Help} />\n          <Route path=\"tasks\" component={TasksApp}>\n            <ModalRoute path=\":taskId\" modal={TaskModal} />\n          </Route>\n          <Route path=\"jobs\" component={JobInfoApp}>\n            <ModalRoute\n              path=\":jobKey\"\n              modal={JobTriggersModal}\n              modalProps={{ wide: true }}\n            />\n          </Route>\n          <Route path=\"logs\" component={Logs} />\n        </Route>\n      </Route>\n      {/* SETTINGS */}\n      <Route path=\"settings\" component={createAdminRouteGuard(\"settings\")}>\n        <IndexRoute component={createAdminRedirect(\"setup\", \"general\")} />\n        <Route title={t`Settings`}>\n          <Route path=\"*\" component={SettingsEditor} />\n        </Route>\n      </Route>\n      {/* PERMISSIONS */}\n      <Route path=\"permissions\" component={IsAdmin}>\n        {getAdminPermissionsRoutes(store)}\n      </Route>\n      {/* PERFORMANCE */}\n      <Route\n        path=\"performance\"\n        component={createAdminRouteGuard(\"performance\")}\n      >\n        <IndexRoute title={t`Performance`} path=\"\" component={PerformanceApp} />\n        <Route\n          title={t`Model persistence`}\n          path={PerformanceTabId.Models}\n          component={() => <PerformanceApp tabId={PerformanceTabId.Models} />}\n        />\n      </Route>\n      <Route\n        path=\"tools\"\n        component={UserCanAccessTools(createAdminRouteGuard(\"tools\"))}\n      >\n        <Route title={t`Tools`} component={Tools}>\n          <IndexRedirect to={PLUGIN_ADMIN_TOOLS.INDEX_ROUTE} />\n          <Route\n            path=\"model-caching\"\n            title={t`Model Caching Log`}\n            component={ModelCacheRefreshJobs}\n          >\n            <ModalRoute path=\":jobId\" modal={ModelCacheRefreshJobModal} />\n          </Route>\n          {PLUGIN_ADMIN_TOOLS.EXTRA_ROUTES}\n        </Route>\n      </Route>\n      {/* PLUGINS */}\n      <Fragment>\n        {PLUGIN_ADMIN_ROUTES.map(getRoutes => getRoutes(store))}\n      </Fragment>\n    </Route>\n  </Route>\n);\n\nexport default getRoutes;\n"],"names":[],"sourceRoot":""}