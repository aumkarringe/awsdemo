{"version":3,"file":"app-main.d2b6bd2a4b3fad496e05.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAyBA;AAYA;AAAA;AAXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAhIA;AAcA;AAAA;AAoHA;AAAA;AAAA","sources":["/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/components/NewItemMenu/NewItemMenu.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport EntityMenu from 'metabase/components/EntityMenu';\nimport { setOpenModal } from 'metabase/redux/ui';\nimport { t } from 'ttag';\nimport * as Urls from 'metabase/lib/urls';\nimport { getSetting } from 'metabase/selectors/settings';\nimport ChatWithAIPopup from './ChatWithAIPopup'; // Adjust the path as per your project structure\n\nexport interface NewItemMenuProps {\n  className?: string;\n  collectionId?: number; // Assuming collectionId is of type number\n  trigger?: React.ReactNode;\n  triggerIcon?: string;\n  triggerTooltip?: string;\n  hasModels: boolean;\n  hasDataAccess: boolean;\n  hasNativeWrite: boolean;\n  hasDatabaseWithJsonEngine: boolean;\n  hasDatabaseWithActionsEnabled: boolean;\n  onCloseNavbar: () => void;\n}\n\ntype NewMenuItem = {\n  title: string;\n  icon: string;\n  link?: string;\n  event?: string;\n  action?: () => void;\n  onClose?: () => void;\n};\n\nconst NewItemMenu = ({\n  className,\n  collectionId,\n  trigger,\n  triggerIcon,\n  triggerTooltip,\n  hasModels,\n  hasDataAccess,\n  hasNativeWrite,\n  hasDatabaseWithJsonEngine,\n  hasDatabaseWithActionsEnabled,\n  onCloseNavbar,\n}: NewItemMenuProps) => {\n  const dispatch = useDispatch();\n  const lastUsedDatabaseId = useSelector((state: any) =>\n    getSetting(state, 'last-used-native-database-id'),\n  );\n\n  // Function to handle opening the Chat with AI modal\n  const handleChatWithAIClick = () => {\n    dispatch(setOpenModal('chatWithAI'));\n  };\n\n  const menuItems = useMemo(() => {\n    const items: NewMenuItem[] = [];\n\n    if (hasDataAccess) {\n      items.push({\n        title: t`Question`,\n        icon: 'insight',\n        link: Urls.newQuestion({\n          mode: 'notebook',\n          creationType: 'custom_question',\n          collectionId,\n          cardType: 'question',\n        }),\n        onClose: onCloseNavbar,\n      });\n    }\n\n    if (hasNativeWrite) {\n      items.push({\n        title: hasDatabaseWithJsonEngine ? t`Native query` : t`SQL query`,\n        icon: 'sql',\n        link: Urls.newQuestion({\n          type: 'native',\n          creationType: 'native_question',\n          collectionId,\n          cardType: 'question',\n          databaseId: lastUsedDatabaseId || undefined,\n        }),\n        onClose: onCloseNavbar,\n      });\n    }\n\n    items.push(\n      {\n        title: t`Dashboard`,\n        icon: 'dashboard',\n        action: () => dispatch(setOpenModal('dashboard')),\n      },\n      {\n        title: t`Collection`,\n        icon: 'folder',\n        action: () => dispatch(setOpenModal('collection')),\n      }\n    );\n\n    if (hasNativeWrite) {\n      const collectionQuery = collectionId ? `?collectionId=${collectionId}` : '';\n      items.push({\n        title: t`Model`,\n        icon: 'model',\n        link: `/model/new${collectionQuery}`,\n        onClose: onCloseNavbar,\n      });\n    }\n\n    if (hasModels && hasDatabaseWithActionsEnabled && hasNativeWrite) {\n      items.push({\n        title: t`Action`,\n        icon: 'bolt',\n        action: () => dispatch(setOpenModal('action')),\n      });\n    }\n\n    if (hasDataAccess) {\n      items.push({\n        title: t`Metric`,\n        icon: 'metric',\n        link: Urls.newQuestion({\n          mode: 'query',\n          cardType: 'metric',\n          collectionId,\n        }),\n        onClose: onCloseNavbar,\n      });\n    }\n\n    // Add the \"Chat with AI\" menu item\n    items.push({\n      title: t`Chat with AI`,\n      icon: 'chat',\n      action: handleChatWithAIClick,\n    });\n\n    return items;\n  }, [\n    hasDataAccess,\n    hasNativeWrite,\n    hasModels,\n    hasDatabaseWithActionsEnabled,\n    collectionId,\n    onCloseNavbar,\n    dispatch,\n    lastUsedDatabaseId,\n  ]);\n\n  return (\n    <EntityMenu\n      className={className}\n      items={menuItems}\n      trigger={trigger}\n      triggerIcon={triggerIcon}\n      tooltip={triggerTooltip}\n      transitionDuration={0} // Adjust transition as needed\n    />\n  );\n};\n\nexport default NewItemMenu;\n"],"names":[],"sourceRoot":""}