{"version":3,"file":"app-main.8e002f6205ce3735b1a7.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAMA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;;AACA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AAGA;AAAA;AAhDA;AAkDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAQA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AAAA;AA9MA;AAAA;AAAA;AAAA","sources":["/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/query_builder/components/view/ViewHeader/components/ExploreResultsLink.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { t } from \"ttag\";\nimport Link from \"metabase/core/components/Link\";\nimport ViewButton from \"metabase/query_builder/components/view/ViewButton\";\nimport type Question from \"metabase-lib/v1/Question\";\nimport { getUrl as ML_getUrl } from \"metabase-lib/v1/urls\";\nimport axios from \"axios\"; // Import Axios for making HTTP requests\nimport * as jsonData from './reportData.json';\nimport { LogoBase64 } from './LogoBase64';\n\ninterface ExploreResultsLinkProps {\n  question: Question;\n}\n\nconst CardIdPopover: React.FC<{\n  cardId: string;\n  setCardId: React.Dispatch<React.SetStateAction<string>>;\n  handleDownload: () => void;\n  handleClosePopup: () => void;\n}> = ({ cardId, setCardId, handleDownload, handleClosePopup }) => {\n  const [submitHovered, setSubmitHovered] = useState(false);\n  const [cancelHovered, setCancelHovered] = useState(false);\n\n  return (\n    <div className=\"popup\" style={{ backgroundColor: 'rgba(0, 0, 0, 0.5)', position: 'fixed', top: 0, left: 0, width: '100%', height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <div className=\"popup-inner\" style={{ background: 'linear-gradient(to bottom, var(--mb-color-navbar-bg), #38508C, #1A253B)', padding: '20px', borderRadius: '8px', textAlign: 'center', color: '#ecf0f1' }}>\n        <h2>Enter Card ID</h2>\n        <input\n          type=\"text\"\n          value={cardId}\n          onChange={(e) => setCardId(e.target.value)}\n          placeholder=\"Card ID\"\n          style={{ marginBottom: '20px', padding: '10px', width: '80%' }}\n        />\n        <button\n          style={{\n            margin: '0 10px',\n            padding: '10px 20px',\n            color: submitHovered ? 'var(--mb-color-brand)' : 'white', // White text color or var(--mb-color-brand) on hover\n            border: '2px solid var(--mb-color-brand)', // Border with mb-color-brand\n            background: 'none', // Transparent background\n            cursor: 'pointer', // Pointer cursor\n          }}\n          onClick={handleDownload}\n          onMouseEnter={() => setSubmitHovered(true)}\n          onMouseLeave={() => setSubmitHovered(false)}\n        >\n          Submit\n        </button>\n        <button\n          style={{\n            margin: '0 10px',\n            padding: '10px 20px',\n            color: cancelHovered ? 'var(--mb-color-brand)' : 'white', // White text color or var(--mb-color-brand) on hover\n            border: '2px solid var(--mb-color-brand)', // Border with mb-color-brand\n            background: 'none', // Transparent background\n            cursor: 'pointer', // Pointer cursor\n          }}\n          onClick={handleClosePopup}\n          onMouseEnter={() => setCancelHovered(true)}\n          onMouseLeave={() => setCancelHovered(false)}\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport function ExploreResultsLink({ question }: ExploreResultsLinkProps) {\n  const [showPopup, setShowPopup] = useState(false);\n  const [cardId, setCardId] = useState(\"\");\n\n  const query = question.isSaved()\n    ? question.composeQuestionAdhoc()\n    : undefined;\n\n  const button = (\n    <ViewButton disabled={!query} medium icon=\"insight\" labelBreakpoint=\"sm\">\n      {t`Explore results`}\n    </ViewButton>\n  );\n  const reportButton = (\n    <ViewButton medium icon=\"insight\" labelBreakpoint=\"sm\" onClick={() => setShowPopup(true)}>\n      {t`Report`}\n    </ViewButton>\n  );\n\n  function generateReportHTML(jsonData: { heading: any; sections: any[]; }) {\n    let htmlContent = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>${jsonData.heading}</title>\n        <style>\n          body {\n            font-family: 'Helvetica Neue', Arial, sans-serif;\n            margin: 20px;\n            padding: 20px;\n            color: #ecf0f1;\n            background-color: #0d0d1a;\n          }\n          h1 {\n            color: #ecf0f1;\n            font-size: 2.5em;\n            border-bottom: 2px solid #2980b9;\n            padding-bottom: 0.3em;\n            margin-bottom: 0.5em;\n          }\n          h2 {\n            color: #ecf0f1;\n            font-size: 2em;\n            margin-top: 1.5em;\n            margin-bottom: 0.5em;\n          }\n          p {\n            color: #bdc3c7;\n            font-size: 1.1em;\n            line-height: 1.6em;\n            margin-bottom: 1.2em;\n          }\n          ul {\n            color: #bdc3c7;\n            font-size: 1.1em;\n            line-height: 1.6em;\n            margin-bottom: 1.2em;\n            list-style-type: square;\n            padding-left: 20px;\n          }\n          .content {\n            max-width: 800px;\n            margin: 0 auto;\n            background: #34495e;\n            padding: 20px 30px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\n            border-radius: 8px;\n          }\n          @media (max-width: 600px) {\n            body {\n              padding: 10px;\n            }\n            .content {\n              padding: 15px 20px;\n            }\n          }\n          .top-left {\n            position: absolute;\n            top: 20px;\n            left: 20px;\n            width: 145px;\n            height: 60px;\n          }\n          .bottom-right {\n            position: absolute;\n            top: 20px;\n            left: 20px;\n            width: 145px;\n            height: 60px;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"content\">\n          <img src=\"${LogoBase64}\" class=\"top-left\">\n          <h1>${jsonData.heading}</h1>\n    `;\n\n    jsonData.sections.forEach(section => {\n      htmlContent += `\n        <h2>${section.subheading}</h2>\n      `;\n      section.paragraphs.forEach((paragraph: any) => {\n        htmlContent += `\n          <p>${paragraph}</p>\n        `;\n      });\n\n      if (section.insightsSummary) {\n        htmlContent += `<h3>Insights Summary</h3><ul>`;\n        section.insightsSummary.forEach((insight: any) => {\n          htmlContent += `<li>${insight}</li>`;\n        });\n        htmlContent += `</ul>`;\n      }\n\n      if (section.actionableInsights) {\n        htmlContent += `<h3>Actionable Insights</h3><ul>`;\n        section.actionableInsights.forEach((insight: any) => {\n          htmlContent += `<li>${insight}</li>`;\n        });\n        htmlContent += `</ul>`;\n      }\n\n      if (section.forecastSummary) {\n        htmlContent += `\n          <h3>Forecast Summary</h3>\n          <p>${section.forecastSummary}</p>\n        `;\n      }\n    });\n\n    htmlContent += `\n        </div>\n        <img src=\"${LogoBase64}\" class=\"bottom-right\">\n      </body>\n      </html>\n    `;\n\n    return htmlContent;\n  }\n\n  const handleDownload = async () => {\n    const payload = { card_id: cardId };\n\n    try {\n      // Make the HTTP POST request using Axios\n      const response = await axios.post(\n        'url_endpoint_here', // Replace with your actual endpoint\n        payload,\n        { headers: { \"Content-Type\": \"application/json\" } }\n      );\n\n      // Process response if needed\n      const data = response.data;\n\n      // Generate the HTML content from the JSON data\n      const htmlContent = generateReportHTML(jsonData);\n\n      // Create a Blob object\n      const blob = new Blob([htmlContent], { type: 'text/html' });\n\n      // Create a URL for the Blob\n      const downloadUrl = URL.createObjectURL(blob);\n\n      // Create an anchor element and trigger the download\n      const a = document.createElement('a');\n      a.href = downloadUrl;\n      a.download = 'report.html';\n      a.click();\n\n      // Release the URL object\n      URL.revokeObjectURL(downloadUrl);\n\n      // Close the popup\n      setShowPopup(false);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      // Handle error as needed\n    }\n  };\n\n  const handleClosePopup = () => {\n    setShowPopup(false);\n  };\n\n  return (\n    <>\n      {query ? (\n        <Link to={ML_getUrl(query.setDisplay(\"table\").setSettings({}))}>\n          {button}\n        </Link>\n      ) : (\n        button\n      )}\n      {reportButton}\n      {showPopup && (\n        <CardIdPopover\n          cardId={cardId}\n          setCardId={setCardId}\n          handleDownload={handleDownload}\n          handleClosePopup={handleClosePopup}\n        />\n      )}\n    </>\n  );\n}\n"],"names":[],"sourceRoot":""}