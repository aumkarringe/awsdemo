{"version":3,"file":"app-main.94cb7475c5197b294f30.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChIA","sources":["/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/admin/settings/components/CloudPanel/CloudPanel.tsx","/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/admin/settings/components/CloudPanel/index.ts"],"sourcesContent":["// import { useEffect, useMemo, useState } from \"react\";\n// import { t } from \"ttag\";\n\n// import {\n//   useGetCloudMigrationQuery,\n//   useCreateCloudMigrationMutation,\n// } from \"metabase/api\";\n// import { useSetting } from \"metabase/common/hooks\";\n// import LoadingAndErrorWrapper from \"metabase/components/LoadingAndErrorWrapper\";\n// import { useDispatch } from \"metabase/lib/redux\";\n// import { refreshSiteSettings } from \"metabase/redux/settings\";\n// import { Box, Text } from \"metabase/ui\";\n// import type { CloudMigration } from \"metabase-types/api/cloud-migration\";\n\n// import { MigrationCreationError } from \"./MigrationCreationError\";\n// import { MigrationError } from \"./MigrationError\";\n// import { MigrationInProgress } from \"./MigrationInProgress\";\n// import { MigrationStart } from \"./MigrationStart\";\n// import { MigrationSuccess } from \"./MigrationSuccess\";\n// import {\n//   type InternalCloudMigrationState,\n//   isInProgressMigration,\n//   getStartedVisibleStates,\n//   defaultGetPollingInterval,\n//   openCheckoutInNewTab,\n// } from \"./utils\";\n\n// interface CloudPanelProps {\n//   getPollingInterval: (migration: CloudMigration) => number | undefined;\n//   onMigrationStart: (storeUrl: string, migration: CloudMigration) => void;\n// }\n\n// export const CloudPanel = ({\n//   getPollingInterval = defaultGetPollingInterval,\n//   onMigrationStart = openCheckoutInNewTab,\n// }: CloudPanelProps) => {\n//   const dispatch = useDispatch();\n//   const [pollingInterval, setPollingInterval] = useState<number | undefined>(\n//     undefined,\n//   );\n\n//   const {\n//     data: migration,\n//     isLoading,\n//     error,\n//   } = useGetCloudMigrationQuery(undefined, {\n//     refetchOnMountOrArgChange: true,\n//     pollingInterval,\n//   });\n\n//   const migrationState: InternalCloudMigrationState =\n//     migration?.state ?? \"uninitialized\";\n\n//   useEffect(\n//     function syncPollingInterval() {\n//       if (migration) {\n//         setPollingInterval(getPollingInterval(migration));\n//       }\n//     },\n//     [migration, getPollingInterval],\n//   );\n\n//   useEffect(\n//     function syncSiteSettings() {\n//       if (migrationState) {\n//         dispatch(refreshSiteSettings({}));\n//       }\n//     },\n//     [dispatch, migrationState],\n//   );\n\n//   const storeUrl = useSetting(\"store-url\");\n\n//   const checkoutUrl = useMemo(() => {\n//     return migration\n//       ? `${storeUrl}/checkout?migration-id=${migration.external_id}`\n//       : `${storeUrl}/checkout`;\n//   }, [migration, storeUrl]);\n\n//   const [createCloudMigration, createCloudMigrationResult] =\n//     useCreateCloudMigrationMutation();\n\n//   const handleCreateMigration = async () => {\n//     const newMigration = await createCloudMigration().unwrap();\n//     await dispatch(refreshSiteSettings({}));\n//     onMigrationStart(storeUrl, newMigration);\n//   };\n\n//   return (\n//     <LoadingAndErrorWrapper loading={isLoading} error={error}>\n//       <Box maw=\"36rem\">\n//         {/* <Text fw=\"bold\" size=\"1.5rem\" mb=\"2rem\">{t`Migrate to Cloud`}</Text>\n\n//         {getStartedVisibleStates.has(migrationState) && (\n//           <MigrationStart\n//             startNewMigration={handleCreateMigration}\n//             isStarting={createCloudMigrationResult.isLoading}\n//           />\n//         )} */}\n\n//         <Box mt=\"2rem\">\n//           {migration && isInProgressMigration(migration) && (\n//             <MigrationInProgress\n//               migration={migration}\n//               checkoutUrl={checkoutUrl}\n//             />\n//           )}\n\n//           {migration && migrationState === \"done\" && (\n//             <MigrationSuccess\n//               migration={migration}\n//               restartMigration={handleCreateMigration}\n//               isRestarting={createCloudMigrationResult.isLoading}\n//               checkoutUrl={checkoutUrl}\n//             />\n//           )}\n\n//           {migration && migrationState === \"error\" && (\n//             <MigrationError migration={migration} />\n//           )}\n\n//           {createCloudMigrationResult.isError && (\n//             <MigrationCreationError error={createCloudMigrationResult.error} />\n//           )}\n//         </Box>\n//       </Box>\n//     </LoadingAndErrorWrapper>\n//   );\n// };\n","export * from \"./CloudPanel\";\n"],"names":[],"sourceRoot":""}