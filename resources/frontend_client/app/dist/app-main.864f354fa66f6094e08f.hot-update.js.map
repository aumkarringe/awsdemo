{"version":3,"file":"app-main.864f354fa66f6094e08f.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AA6BA;AAYA;AAAA;AAXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAYA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AACA;AAAA;AAGA;;AAEA;AAAA;AAtIA;AAeA;AAAA;AAwHA;AAAA;AAAA","sources":["/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/components/NewItemMenu/NewItemMenu.tsx"],"sourcesContent":["import type { LocationDescriptor } from \"history\";\nimport type { ReactNode } from \"react\";\nimport { useMemo } from \"react\";\nimport { t } from \"ttag\";\n\nimport EntityMenu from \"metabase/components/EntityMenu\";\nimport { useDispatch, useSelector } from \"metabase/lib/redux\";\nimport * as Urls from \"metabase/lib/urls\";\nimport { setOpenModal } from \"metabase/redux/ui\";\nimport { getSetting } from \"metabase/selectors/settings\";\nimport type { CollectionId } from \"metabase-types/api\";\n\n\n\nexport interface NewItemMenuProps {\n  className?: string;\n  collectionId?: CollectionId;\n  trigger?: ReactNode;\n  triggerIcon?: string;\n  triggerTooltip?: string;\n  hasModels: boolean;\n  hasDataAccess: boolean;\n  hasNativeWrite: boolean;\n  hasDatabaseWithJsonEngine: boolean;\n  hasDatabaseWithActionsEnabled: boolean;\n  onCloseNavbar: () => void;\n  onChangeLocation: (nextLocation: LocationDescriptor) => void;\n}\n\ntype NewMenuItem = {\n  title: string;\n  icon: string;\n  link?: LocationDescriptor;\n  event?: string;\n  action?: () => void;\n  onClose?: () => void;\n};\n\nconst NewItemMenu = ({\n  className,\n  collectionId,\n  trigger,\n  triggerIcon,\n  triggerTooltip,\n  hasModels,\n  hasDataAccess,\n  hasNativeWrite,\n  hasDatabaseWithJsonEngine,\n  hasDatabaseWithActionsEnabled,\n  onCloseNavbar,\n}: NewItemMenuProps) => {\n  const dispatch = useDispatch();\n\n  const lastUsedDatabaseId = useSelector(state =>\n    getSetting(state, \"last-used-native-database-id\"),\n  );\n\n  const menuItems = useMemo(() => {\n    const items: NewMenuItem[] = [];\n\n    if (hasDataAccess) {\n      items.push({\n        title: t`Question`,\n        icon: \"insight\",\n        link: Urls.newQuestion({\n          mode: \"notebook\",\n          creationType: \"custom_question\",\n          collectionId,\n          cardType: \"question\",\n        }),\n        onClose: onCloseNavbar,\n      });\n    }\n\n    if (hasNativeWrite) {\n      items.push({\n        title: hasDatabaseWithJsonEngine ? t`Native query` : t`SQL query`,\n        icon: \"sql\",\n        link: Urls.newQuestion({\n          type: \"native\",\n          creationType: \"native_question\",\n          collectionId,\n          cardType: \"question\",\n          databaseId: lastUsedDatabaseId || undefined,\n        }),\n        onClose: onCloseNavbar,\n      });\n    }\n\n    items.push(\n      {\n        title: t`Dashboard`,\n        icon: \"dashboard\",\n        action: () => dispatch(setOpenModal(\"dashboard\")),\n      },\n      {\n        title: t`Collection`,\n        icon: \"folder\",\n        action: () => dispatch(setOpenModal(\"collection\")),\n      },\n    );\n\n    if (hasNativeWrite) {\n      const collectionQuery = collectionId\n        ? `?collectionId=${collectionId}`\n        : \"\";\n\n      items.push({\n        title: t`Model`,\n        icon: \"model\",\n        link: `/model/new${collectionQuery}`,\n        onClose: onCloseNavbar,\n      });\n    }\n\n    if (hasModels && hasDatabaseWithActionsEnabled && hasNativeWrite) {\n      items.push({\n        title: t`Action`,\n        icon: \"bolt\",\n        action: () => dispatch(setOpenModal(\"action\")),\n      });\n    }\n\n    if (hasDataAccess) {\n      items.push({\n        title: t`Metric`,\n        icon: \"metric\",\n        link: Urls.newQuestion({\n          mode: \"query\",\n          cardType: \"metric\",\n          collectionId,\n        }),\n        onClose: onCloseNavbar,\n      });\n    }\n\n    // Adding the new item \"Chat with AI\"\n    items.push({\n      title: t`Chat with AI`,\n      icon: \"chat\",\n      action: () => dispatch(setOpenModal(\"chatWithAI\")),\n    });\n\n    return items;\n  }, [\n    hasDataAccess,\n    hasNativeWrite,\n    hasModels,\n    hasDatabaseWithActionsEnabled,\n    collectionId,\n    onCloseNavbar,\n    hasDatabaseWithJsonEngine,\n    dispatch,\n    lastUsedDatabaseId,\n  ]);\n\n  return (\n    <EntityMenu\n      className={className}\n      items={menuItems}\n      trigger={trigger}\n      triggerIcon={triggerIcon}\n      tooltip={triggerTooltip}\n      // I've disabled this transition, since it results in the menu\n      // sometimes not appearing until content finishes loading on complex\n      // dashboards and questions #39303\n      // TODO: Try to restore this transition once we upgrade to React 18 and can prioritize this update\n      transitionDuration={0}\n    />\n  );\n};\n\n// eslint-disable-next-line import/no-default-export -- deprecated usage\nexport default NewItemMenu;\n"],"names":[],"sourceRoot":""}