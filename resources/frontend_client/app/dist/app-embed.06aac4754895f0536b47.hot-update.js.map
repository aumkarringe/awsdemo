{"version":3,"file":"app-embed.06aac4754895f0536b47.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5HA;AACA","sources":["/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/admin/settings/auth/components/GoogleAuthForm/GoogleAuthForm.tsx","/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/admin/settings/auth/components/GoogleAuthForm/index.ts"],"sourcesContent":["// import { useMemo } from \"react\";\n// import { jt, t } from \"ttag\";\n// import _ from \"underscore\";\n\n// import Breadcrumbs from \"metabase/components/Breadcrumbs\";\n// import ExternalLink from \"metabase/core/components/ExternalLink\";\n// import FormErrorMessage from \"metabase/core/components/FormErrorMessage\";\n// import FormInput from \"metabase/core/components/FormInput\";\n// import FormSubmitButton from \"metabase/core/components/FormSubmitButton\";\n// import { FormProvider } from \"metabase/forms\";\n// import MetabaseSettings from \"metabase/lib/settings\";\n// import type { SettingDefinition, Settings } from \"metabase-types/api\";\n\n// import { GOOGLE_SCHEMA } from \"../../constants\";\n\n// import {\n//   GoogleForm,\n//   GoogleFormCaption,\n//   GoogleFormHeader,\n// } from \"./GoogleAuthForm.styled\";\n\n// const ENABLED_KEY = \"google-auth-enabled\";\n// const CLIENT_ID_KEY = \"google-auth-client-id\";\n// const DOMAIN_KEY = \"google-auth-auto-create-accounts-domain\";\n\n// const BREADCRUMBS = [\n//   [t`Authentication`, \"/admin/settings/authentication\"],\n//   [t`Google Sign-In`],\n// ];\n\n// export interface GoogleAuthFormProps {\n//   elements?: SettingDefinition[];\n//   settingValues?: Partial<Settings>;\n//   isEnabled: boolean;\n//   isSsoEnabled: boolean;\n//   onSubmit: (settingValues: Partial<Settings>) => void;\n// }\n\n// const GoogleAuthForm = ({\n//   elements = [],\n//   settingValues = {},\n//   isEnabled,\n//   isSsoEnabled,\n//   onSubmit,\n// }: GoogleAuthFormProps): JSX.Element => {\n//   const settings = useMemo(() => {\n//     return _.indexBy(elements, \"key\");\n//   }, [elements]);\n\n//   const initialValues = useMemo(() => {\n//     const values = GOOGLE_SCHEMA.cast(settingValues, { stripUnknown: true });\n//     return { ...values, [ENABLED_KEY]: true };\n//   }, [settingValues]);\n\n//   return (\n//     <FormProvider\n//       initialValues={initialValues}\n//       enableReinitialize\n//       validationSchema={GOOGLE_SCHEMA}\n//       validationContext={settings}\n//       onSubmit={onSubmit}\n//     >\n//       {({ dirty }) => (\n//         <GoogleForm disabled={!dirty}>\n//           <Breadcrumbs crumbs={BREADCRUMBS} />\n//           <GoogleFormHeader>{t`Sign in with Google`}</GoogleFormHeader>\n//           <GoogleFormCaption>\n//             {t`Allows users with existing Metabase accounts to login with a Google account that matches their email address in addition to their Metabase username and password.`}\n//           </GoogleFormCaption>\n//           <GoogleFormCaption>\n//             {jt`To allow users to sign in with Google you'll need to give Metabase a Google Developers console application client ID. It only takes a few steps and instructions on how to create a key can be found ${(\n//               <ExternalLink key=\"link\" href={getDocsLink()}>\n//                 {t`here`}\n//               </ExternalLink>\n//             )}.`}\n//           </GoogleFormCaption>\n//           <FormInput\n//             name={CLIENT_ID_KEY}\n//             title={t`Client ID`}\n//             placeholder={t`{your-client-id}.apps.googleusercontent.com`}\n//             {...getFormFieldProps(settings[CLIENT_ID_KEY])}\n//           />\n//           <FormInput\n//             name={DOMAIN_KEY}\n//             title={t`Domain`}\n//             description={\n//               isSsoEnabled\n//                 ? t`Allow users to sign up on their own if their Google account email address is from one of the domains you specify here:`\n//                 : t`Allow users to sign up on their own if their Google account email address is from:`\n//             }\n//             placeholder={\n//               isSsoEnabled\n//                 ? \"mycompany.com, example.com.br, otherdomain.co.uk\"\n//                 : \"mycompany.com\"\n//             }\n//             nullable\n//             {...getFormFieldProps(settings[DOMAIN_KEY])}\n//           />\n//           <FormSubmitButton\n//             title={isEnabled ? t`Save changes` : t`Save and enable`}\n//             primary\n//             disabled={!dirty}\n//           />\n//           <FormErrorMessage />\n//         </GoogleForm>\n//       )}\n//     </FormProvider>\n//   );\n// };\n\n// const getFormFieldProps = (setting?: SettingDefinition) => {\n//   if (setting?.is_env_setting) {\n//     return { placeholder: t`Using ${setting.env_name}`, readOnly: true };\n//   }\n// };\n\n// const getDocsLink = (): string => {\n//   return MetabaseSettings.docsUrl(\n//     \"people-and-groups/google-and-ldap\",\n//     \"enabling-google-sign-in\",\n//   );\n// };\n\n// // eslint-disable-next-line import/no-default-export -- deprecated usage\n// export default GoogleAuthForm;\n","// eslint-disable-next-line import/no-default-export -- deprecated usage\nexport { default } from \"./GoogleAuthForm\";\n"],"names":[],"sourceRoot":""}