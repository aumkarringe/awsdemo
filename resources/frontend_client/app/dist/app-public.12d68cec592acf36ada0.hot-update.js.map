{"version":3,"file":"app-public.12d68cec592acf36ada0.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AACA;AAGA;AACA;AACA;AACA;AAaA;AACA;AA+BA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AAyBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAgBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AAIA;AACA;AAGA;AAqBA;AACA;AAEA;AAEA;AAEA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAKA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA","sources":["/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/plugins/index.ts"],"sourcesContent":["import type {\n  ComponentType,\n  Dispatch,\n  HTMLAttributes,\n  ReactNode,\n  SetStateAction,\n} from \"react\";\nimport { t } from \"ttag\";\nimport _ from \"underscore\";\nimport type { AnySchema } from \"yup\";\n\nimport noResultsSource from \"assets/img/no_results.svg\";\nimport { strategies } from \"metabase/admin/performance/constants/complex\";\nimport { UNABLE_TO_CHANGE_ADMIN_PERMISSIONS } from \"metabase/admin/permissions/constants/messages\";\nimport {\n  DataPermissionValue,\n  type DatabaseEntityId,\n  type DataPermission,\n  type EntityId,\n  type PermissionSubject,\n} from \"metabase/admin/permissions/types\";\nimport type { ADMIN_SETTINGS_SECTIONS } from \"metabase/admin/settings/selectors\";\nimport type {\n  ActualModelFilters,\n  AvailableModelFilters,\n  ModelFilterControlsProps,\n} from \"metabase/browse/utils\";\nimport { getIconBase } from \"metabase/lib/icon\";\nimport PluginPlaceholder from \"metabase/plugins/components/PluginPlaceholder\";\nimport type { SearchFilterComponent } from \"metabase/search/types\";\nimport type { GroupProps, IconName, IconProps } from \"metabase/ui\";\nimport type Question from \"metabase-lib/v1/Question\";\nimport type Database from \"metabase-lib/v1/metadata/Database\";\nimport type {\n  Bookmark,\n  CacheableDashboard,\n  CacheableModel,\n  Collection,\n  CollectionAuthorityLevelConfig,\n  CollectionEssentials,\n  CollectionInstanceAnaltyicsConfig,\n  Dashboard,\n  Dataset,\n  Group,\n  GroupPermissions,\n  GroupsPermissions,\n  Revision,\n  SearchResult,\n  User,\n  UserListResult,\n} from \"metabase-types/api\";\nimport type { AdminPathKey, State } from \"metabase-types/store\";\n\nimport type {\n  GetAuthProviders,\n  PluginGroupManagersType,\n  PluginLLMAutoDescription,\n} from \"./types\";\n\n// functions called when the application is started\nexport const PLUGIN_APP_INIT_FUNCTIONS = [];\n\n// function to determine the landing page\nexport const PLUGIN_LANDING_PAGE = [];\n\nexport const PLUGIN_REDUX_MIDDLEWARES = [];\n\n// override for LogoIcon\nexport const PLUGIN_LOGO_ICON_COMPONENTS = [];\n\n// admin nav items and routes\nexport const PLUGIN_ADMIN_NAV_ITEMS = [];\nexport const PLUGIN_ADMIN_ROUTES = [];\nexport const PLUGIN_ADMIN_ALLOWED_PATH_GETTERS: ((\n  user: any,\n) => AdminPathKey[])[] = [];\n\nexport const PLUGIN_ADMIN_TOOLS = {\n  INDEX_ROUTE: \"model-caching\",\n  EXTRA_ROUTES_INFO: [],\n  EXTRA_ROUTES: [],\n};\n\n// functions that update the sections\nexport const PLUGIN_ADMIN_SETTINGS_UPDATES: ((\n  sections: typeof ADMIN_SETTINGS_SECTIONS,\n) => void)[] = [];\n\n// admin permissions\nexport const PLUGIN_ADMIN_PERMISSIONS_DATABASE_ROUTES = [];\nexport const PLUGIN_ADMIN_PERMISSIONS_DATABASE_GROUP_ROUTES = [];\nexport const PLUGIN_ADMIN_PERMISSIONS_DATABASE_POST_ACTIONS = {\n  impersonated: null,\n};\nexport const PLUGIN_ADMIN_PERMISSIONS_DATABASE_ACTIONS = {\n  impersonated: [],\n};\n\nexport const PLUGIN_ADMIN_PERMISSIONS_TABLE_ROUTES = [];\nexport const PLUGIN_ADMIN_PERMISSIONS_TABLE_GROUP_ROUTES = [];\nexport const PLUGIN_ADMIN_PERMISSIONS_TABLE_FIELDS_OPTIONS = [];\nexport const PLUGIN_ADMIN_PERMISSIONS_TABLE_FIELDS_CONFIRMATIONS = [] as Array<\n  (\n    _permissions: GroupsPermissions,\n    _groupId: number,\n    _entityId: EntityId,\n    _value: DataPermissionValue,\n  ) => any\n>;\nexport const PLUGIN_ADMIN_PERMISSIONS_TABLE_FIELDS_ACTIONS = {\n  sandboxed: [],\n};\nexport const PLUGIN_ADMIN_PERMISSIONS_TABLE_FIELDS_POST_ACTION = {\n  sandboxed: null,\n};\n\nexport const PLUGIN_DATA_PERMISSIONS: {\n  permissionsPayloadExtraSelectors: ((\n    state: State,\n  ) => [Record<string, undefined | { group_id: string }[]>, string[]])[];\n  hasChanges: ((state: State) => boolean)[];\n  shouldRestrictNativeQueryPermissions: (\n    permissions: GroupsPermissions,\n    groupId: number,\n    entityId: EntityId,\n    permission: DataPermission,\n    value: DataPermissionValue,\n    database: Database,\n  ) => boolean;\n\n  upgradeViewPermissionsIfNeeded:\n    | ((\n        permissions: GroupsPermissions,\n        groupId: number,\n        { databaseId }: DatabaseEntityId,\n        value: any,\n        database: Database,\n        permission: DataPermission,\n      ) => GroupPermissions)\n    | null;\n} = {\n  permissionsPayloadExtraSelectors: [],\n  hasChanges: [],\n  upgradeViewPermissionsIfNeeded: null,\n  shouldRestrictNativeQueryPermissions: () => false,\n};\n\n// user form fields, e.x. login attributes\nexport const PLUGIN_ADMIN_USER_FORM_FIELDS = {\n  FormLoginAttributes: PluginPlaceholder,\n};\n\n// menu items in people management tab\nexport const PLUGIN_ADMIN_USER_MENU_ITEMS = [];\nexport const PLUGIN_ADMIN_USER_MENU_ROUTES = [];\n\n// authentication providers\nexport const PLUGIN_AUTH_PROVIDERS: GetAuthProviders[] = [];\n\nexport const PLUGIN_LDAP_FORM_FIELDS = {\n  formFieldAttributes: [] as string[],\n  defaultableFormFieldAttributes: [] as string[],\n  formFieldsSchemas: {} as Record<string, AnySchema>,\n  UserProvisioning: (() => null) as ComponentType<{\n    settings: {\n      [setting: string]: {\n        display_name?: string | undefined;\n        warningMessage?: string | undefined;\n        description?: string | undefined;\n        note?: string | undefined;\n      };\n    };\n    fields: {\n      [field: string]: {\n        name: string;\n        default: boolean;\n      };\n    };\n  }>,\n};\n\n// Only show the password tab in account settings if these functions all return true.\n// Otherwise, the user is logged in via SSO and should hide first name, last name, and email field in profile settings metabase#23298.\nexport const PLUGIN_IS_PASSWORD_USER: ((user: User) => boolean)[] = [];\n\n// selectors that customize behavior between app versions\nexport const PLUGIN_SELECTORS = {\n  canWhitelabel: (_state: State) => false,\n  getLoadingMessageFactory: (_state: State) => (isSlow: boolean) =>\n    isSlow ? t`Waiting for results...` : t`Doing science...`,\n  getIsWhiteLabeling: (_state: State) => false,\n  // eslint-disable-next-line no-literal-metabase-strings -- This is the actual Metabase name, so we don't want to translate it.\n  getApplicationName: (_state: State) => \"DataLM.ai\",\n  getShowMetabaseLinks: (_state: State) => true,\n  getLoginPageIllustration: (_state: State): IllustrationValue => {\n    return {\n      src: \"app/img/bridge.svg\",\n      isDefault: true,\n    };\n  },\n  getLandingPageIllustration: (_state: State): IllustrationValue => {\n    return {\n      src: \"app/img/bridge.svg\",\n      isDefault: true,\n    };\n  },\n  getNoDataIllustration: (_state: State): string => {\n    return noResultsSource;\n  },\n  getNoObjectIllustration: (_state: State): string => {\n    return noResultsSource;\n  },\n};\n\nexport type IllustrationValue = {\n  src: string;\n  isDefault: boolean;\n} | null;\n\nexport const PLUGIN_FORM_WIDGETS: Record<string, ComponentType<any>> = {};\n\n// snippet sidebar\nexport const PLUGIN_SNIPPET_SIDEBAR_PLUS_MENU_OPTIONS = [];\nexport const PLUGIN_SNIPPET_SIDEBAR_ROW_RENDERERS = {};\nexport const PLUGIN_SNIPPET_SIDEBAR_MODALS = [];\nexport const PLUGIN_SNIPPET_SIDEBAR_HEADER_BUTTONS = [];\n\nexport const PLUGIN_DASHBOARD_SUBSCRIPTION_PARAMETERS_SECTION_OVERRIDE = {\n  Component: undefined,\n};\n\nexport const PLUGIN_LLM_AUTODESCRIPTION: PluginLLMAutoDescription = {\n  isEnabled: () => false,\n  LLMSuggestQuestionInfo: PluginPlaceholder,\n};\n\nconst AUTHORITY_LEVEL_REGULAR: CollectionAuthorityLevelConfig = {\n  type: null,\n  name: t`Regular`,\n  icon: \"folder\",\n};\n\ntype AuthorityLevelMenuItem = {\n  title: string;\n  icon: string;\n  action: () => void;\n};\n\nexport type ItemWithCollection = { collection: CollectionEssentials };\n\nexport const PLUGIN_COLLECTIONS = {\n  AUTHORITY_LEVEL: {\n    [JSON.stringify(AUTHORITY_LEVEL_REGULAR.type)]: AUTHORITY_LEVEL_REGULAR,\n  },\n  COLLECTION_TYPES: {\n    [JSON.stringify(AUTHORITY_LEVEL_REGULAR.type)]: AUTHORITY_LEVEL_REGULAR,\n  },\n  REGULAR_COLLECTION: AUTHORITY_LEVEL_REGULAR,\n  isRegularCollection: (_: Partial<Collection> | Bookmark) => true,\n  getCollectionType: (\n    _: Partial<Collection>,\n  ): CollectionAuthorityLevelConfig | CollectionInstanceAnaltyicsConfig =>\n    AUTHORITY_LEVEL_REGULAR,\n  getInstanceAnalyticsCustomCollection: (\n    _collections: Collection[],\n  ): Collection | null => null,\n  CUSTOM_INSTANCE_ANALYTICS_COLLECTION_ENTITY_ID: \"\",\n  INSTANCE_ANALYTICS_ADMIN_READONLY_MESSAGE: UNABLE_TO_CHANGE_ADMIN_PERMISSIONS,\n  getAuthorityLevelMenuItems: (\n    _collection: Collection,\n    _onUpdate: (collection: Collection, values: Partial<Collection>) => void,\n  ): AuthorityLevelMenuItem[] => [],\n  getIcon: getIconBase,\n  filterOutItemsFromInstanceAnalytics: <Item extends ItemWithCollection>(\n    items: Item[],\n  ) => items as Item[],\n};\n\nexport type CollectionAuthorityLevelIcon = ComponentType<\n  Omit<IconProps, \"name\" | \"tooltip\"> & {\n    collection: Pick<Collection, \"authority_level\">;\n    tooltip?: \"default\" | \"belonging\";\n    archived?: boolean;\n  }\n>;\n\ntype CollectionInstanceAnalyticsIcon = React.ComponentType<\n  Omit<IconProps, \"name\"> & {\n    collection: Collection;\n    entity: \"collection\" | \"question\" | \"model\" | \"dashboard\" | \"metric\";\n  }\n>;\n\ntype FormCollectionAuthorityLevelPicker = React.ComponentType<\n  HTMLAttributes<HTMLDivElement> & { name: string; title?: string }\n>;\n\nexport const PLUGIN_COLLECTION_COMPONENTS = {\n  CollectionAuthorityLevelIcon:\n    PluginPlaceholder as CollectionAuthorityLevelIcon,\n  FormCollectionAuthorityLevelPicker:\n    PluginPlaceholder as FormCollectionAuthorityLevelPicker,\n  CollectionInstanceAnalyticsIcon:\n    PluginPlaceholder as CollectionInstanceAnalyticsIcon,\n};\n\nexport type RevisionOrModerationEvent = {\n  title: string;\n  timestamp: string;\n  icon: IconName | { name: IconName; color: string } | Record<string, never>;\n  description?: string;\n  revision?: Revision;\n};\n\nexport const PLUGIN_MODERATION = {\n  isEnabled: () => false,\n  QuestionModerationIcon: PluginPlaceholder,\n  QuestionModerationSection: PluginPlaceholder,\n  QuestionModerationButton: PluginPlaceholder,\n  ModerationReviewBanner: PluginPlaceholder,\n  ModerationStatusIcon: PluginPlaceholder,\n  getQuestionIcon: PluginPlaceholder,\n  getStatusIcon: (_moderated_status?: string): string | IconProps | undefined =>\n    undefined,\n  getModerationTimelineEvents: (\n    _reviews: any,\n    _usersById: Record<string, UserListResult>,\n    _currentUser: User | null,\n  ) => [] as RevisionOrModerationEvent[],\n  getMenuItems: (\n    _question?: Question,\n    _isModerator?: boolean,\n    _reload?: () => void,\n  ) => [],\n};\n\nexport type InvalidateNowButtonProps = {\n  targetId: number;\n  targetModel: CacheableModel;\n  targetName: string;\n};\n\nexport type SidebarCacheSectionProps = {\n  item: CacheableDashboard | Question;\n  model: CacheableModel;\n  setPage: Dispatch<SetStateAction<\"default\" | \"caching\">>;\n};\n\nexport type SidebarCacheFormProps = {\n  item: CacheableDashboard | Question;\n  model: CacheableModel;\n  setPage: (page: \"default\" | \"caching\") => void;\n} & GroupProps;\n\nexport const PLUGIN_CACHING = {\n  cacheTTLFormField: null as any,\n  dashboardCacheTTLFormField: null,\n  questionCacheTTLFormField: null,\n  getQuestionsImplicitCacheTTL: (_question?: any) => null as number | null,\n  StrategyFormLauncherPanel: PluginPlaceholder as any,\n  GranularControlsExplanation: PluginPlaceholder as any,\n  DashboardStrategySidebar: PluginPlaceholder as any,\n  SidebarCacheSection:\n    PluginPlaceholder as ComponentType<SidebarCacheSectionProps>,\n  SidebarCacheForm: PluginPlaceholder as ComponentType<SidebarCacheFormProps>,\n  InvalidateNowButton:\n    PluginPlaceholder as ComponentType<InvalidateNowButtonProps>,\n  isEnabled: () => false,\n  hasQuestionCacheSection: (_question: Question) => false,\n  canOverrideRootStrategy: false,\n  strategies: strategies,\n};\n\nexport const PLUGIN_REDUCERS: {\n  applicationPermissionsPlugin: any;\n  sandboxingPlugin: any;\n  shared: any;\n} = {\n  applicationPermissionsPlugin: () => null,\n  sandboxingPlugin: () => null,\n  shared: () => null,\n};\n\nexport const PLUGIN_ADVANCED_PERMISSIONS = {\n  addDatabasePermissionOptions: (permissions: any[], _database: Database) =>\n    permissions,\n  addSchemaPermissionOptions: (permissions: any[], _value: string) =>\n    permissions,\n  addTablePermissionOptions: (permissions: any[], _value: string) =>\n    permissions,\n  getDatabaseLimitedAccessPermission: (_value: string) => null,\n  isAccessPermissionDisabled: (\n    _value: string,\n    _subject: \"schemas\" | \"tables\" | \"fields\",\n  ) => false,\n  isRestrictivePermission: (_value: string) => false,\n  shouldShowViewDataColumn: false,\n  defaultViewDataPermission: DataPermissionValue.UNRESTRICTED,\n};\n\nexport const PLUGIN_FEATURE_LEVEL_PERMISSIONS = {\n  getFeatureLevelDataPermissions: (\n    _entityId: DatabaseEntityId,\n    _groupId: number,\n    _isAdmin: boolean,\n    _permissions: GroupsPermissions,\n    _dataAccessPermissionValue: DataPermissionValue,\n    _defaultGroup: Group,\n    _permissionSubject: PermissionSubject,\n  ) => {\n    return [] as any;\n  },\n  getDataColumns: (_subject: PermissionSubject) => [] as any,\n  getDownloadWidgetMessageOverride: (_result: Dataset): string | null => null,\n  canDownloadResults: (_result: Dataset): boolean => true,\n  dataModelQueryProps: {} as any,\n  databaseDetailsQueryProps: {} as any,\n};\n\nexport const PLUGIN_APPLICATION_PERMISSIONS = {\n  getRoutes: (): ReactNode => null,\n  tabs: [] as any,\n  selectors: {\n    canManageSubscriptions: (_state: any) => true,\n  },\n};\n\nexport const PLUGIN_GROUP_MANAGERS: PluginGroupManagersType = {\n  UserTypeToggle: () => null as any,\n  UserTypeCell: null,\n\n  getChangeMembershipConfirmation: () => null,\n  getRemoveMembershipConfirmation: () => null,\n\n  deleteGroup: null,\n  confirmDeleteMembershipAction: null,\n  confirmUpdateMembershipAction: null,\n};\n\nexport const PLUGIN_MODEL_PERSISTENCE = {\n  isModelLevelPersistenceEnabled: () => false,\n  ModelCacheControl: PluginPlaceholder as any,\n  getMenuItems: (_question?: any, _onChange?: any) => ({}),\n};\n\nexport const PLUGIN_EMBEDDING = {\n  isEnabled: () => false,\n  isInteractiveEmbeddingEnabled: (_state: State) => false,\n};\n\nexport const PLUGIN_CONTENT_VERIFICATION = {\n  VerifiedFilter: {} as SearchFilterComponent<\"verified\">,\n  availableModelFilters: {} as AvailableModelFilters,\n  ModelFilterControls: (() => null) as ComponentType<ModelFilterControlsProps>,\n  sortModelsByVerification: (_a: SearchResult, _b: SearchResult) => 0,\n  sortCollectionsByVerification: (\n    _a: CollectionEssentials,\n    _b: CollectionEssentials,\n  ) => 0,\n  useModelFilterSettings: () =>\n    [{}, _.noop] as [\n      ActualModelFilters,\n      Dispatch<SetStateAction<ActualModelFilters>>,\n    ],\n};\n\nexport const PLUGIN_DASHBOARD_HEADER = {\n  extraButtons: (_dashboard: Dashboard) => [],\n};\n\nexport const PLUGIN_QUERY_BUILDER_HEADER = {\n  extraButtons: (_question: Question) => [],\n};\n\nexport const PLUGIN_UPLOAD_MANAGEMENT = {\n  UploadManagementTable: PluginPlaceholder,\n};\n\nexport const PLUGIN_IS_EE_BUILD = {\n  isEEBuild: () => false,\n};\n"],"names":[],"sourceRoot":""}