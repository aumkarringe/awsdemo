{"version":3,"file":"app-main.c8999979e7e48dec6885.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/admin/settings/setup/components/SetupCheckList/SetupCheckList.jsx"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport cx from \"classnames\";\nimport { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { t } from \"ttag\";\n\nimport { UpsellHosting } from \"metabase/admin/upsells\";\nimport LoadingAndErrorWrapper from \"metabase/components/LoadingAndErrorWrapper\";\nimport CS from \"metabase/css/core/index.css\";\nimport { color } from \"metabase/lib/colors\";\nimport { isSameOrSiteUrlOrigin } from \"metabase/lib/dom\";\nimport { getIsPaidPlan } from \"metabase/selectors/settings\";\nimport { SetupApi } from \"metabase/services\";\nimport { Box, Flex, Icon } from \"metabase/ui\";\n\nimport {\n  SetupListRoot,\n  TaskRegularLink,\n  TaskExternalLink,\n} from \"./SetupCheckList.styled\";\n\nconst TaskList = ({ tasks }) => (\n  <ol>\n    {tasks.map((task, index) => (\n      <li className={CS.mb2} key={index}>\n        <Task {...task} />\n      </li>\n    ))}\n  </ol>\n);\n\nconst TaskSectionHeader = ({ name }) => (\n  <h4 className={cx(CS.textMedium, CS.textBold, CS.textUppercase, CS.pb2)}>\n    {name}\n  </h4>\n);\n\nconst TaskSection = ({ name, tasks }) => (\n  <div className={CS.mb4}>\n    <TaskSectionHeader name={name} />\n    <TaskList tasks={tasks} />\n  </div>\n);\n\nconst TaskTitle = ({ title, titleClassName }) => (\n  <h3 className={titleClassName}>{title}</h3>\n);\n\nconst TaskDescription = ({ description }) => (\n  <p className={cx(CS.m0, CS.mt1)}>{description}</p>\n);\n\nconst CompletionBadge = ({ completed }) => (\n  <div\n    className={cx(\n      CS.mr2,\n      CS.flex,\n      CS.alignCenter,\n      CS.justifyCenter,\n      CS.flexNoShrink,\n    )}\n    style={{\n      borderWidth: 1,\n      borderStyle: \"solid\",\n      borderColor: completed ? color(\"success\") : color(\"text-light\"),\n      backgroundColor: completed ? color(\"success\") : color(\"text-white\"),\n      width: 32,\n      height: 32,\n      borderRadius: 99,\n    }}\n  >\n    {completed && <Icon name=\"check\" color={color(\"text-white\")} />}\n  </div>\n);\n\nconst Task = ({ title, description, completed, link }) => (\n  <TaskLink link={link}>\n    <CompletionBadge completed={completed} />\n    <div>\n      <TaskTitle\n        title={title}\n        titleClassName={completed ? CS.textSuccess : CS.textBrand}\n      />\n      {!completed ? <TaskDescription description={description} /> : null}\n    </div>\n  </TaskLink>\n);\n\nconst TaskLink = ({ link, children }) =>\n  isSameOrSiteUrlOrigin(link) ? (\n    <TaskRegularLink to={link}>{children}</TaskRegularLink>\n  ) : (\n    <TaskExternalLink href={link}>{children}</TaskExternalLink>\n  );\n\nclass SetupCheckList extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      tasks: null,\n      error: null,\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      const tasks = await SetupApi.admin_checklist();\n      this.setState({ tasks });\n    } catch (e) {\n      this.setState({ error: e });\n    }\n  }\n\n  render() {\n    let tasks, nextTask;\n    if (this.state.tasks) {\n      tasks = this.state.tasks.map(section => ({\n        ...section,\n        tasks: section.tasks.filter(task => {\n          if (task.is_next_step) {\n            nextTask = task;\n          }\n          return !task.is_next_step;\n        }),\n      }));\n    }\n\n    return (\n      <Flex justify=\"space-between\">\n        <SetupListRoot>\n          <div className={CS.px2}>\n            <h2>{t`Getting set up`}</h2>\n            <p\n              className={CS.mt1}\n            >{t`A few things you can do to get the most out of DataLM.ai.`}</p>\n            <LoadingAndErrorWrapper\n              loading={!this.state.tasks}\n              error={this.state.error}\n            >\n              {() => (\n                <div style={{ maxWidth: 468 }}>\n                  {nextTask && (\n                    <TaskSection\n                      name={t`Recommended next step`}\n                      tasks={[nextTask]}\n                    />\n                  )}\n                  {tasks.map((section, index) => (\n                    <TaskSection {...section} key={index} />\n                  ))}\n                </div>\n              )}\n            </LoadingAndErrorWrapper>\n          </div>\n        </SetupListRoot>\n        <Box>\n          <UpsellHosting source=\"settings-setup-migrate_to_cloud\" />\n        </Box>\n      </Flex>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isPaidPlan: getIsPaidPlan(state),\n});\n\nexport default connect(mapStateToProps)(SetupCheckList);\n"],"names":[],"sourceRoot":""}