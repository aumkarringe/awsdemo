{"version":3,"file":"app-main.9ad58054134a14477f52.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAIA;AAMA;AAAA;AAAA;;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["/Users/aumkarringe/Downloads/DataLMwhite theme/ogmetabase/metabase/frontend/src/metabase/admin/settings/selectors.js"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\nimport { t } from \"ttag\";\nimport _ from \"underscore\";\n\nimport { SMTPConnectionForm } from \"metabase/admin/settings/components/Email/SMTPConnectionForm\";\nimport Breadcrumbs from \"metabase/components/Breadcrumbs\";\nimport { DashboardSelector } from \"metabase/components/DashboardSelector\";\nimport MetabaseSettings from \"metabase/lib/settings\";\nimport {\n  PLUGIN_ADMIN_SETTINGS_UPDATES,\n  PLUGIN_EMBEDDING,\n  PLUGIN_LLM_AUTODESCRIPTION,\n} from \"metabase/plugins\";\nimport { refreshCurrentUser } from \"metabase/redux/user\";\nimport { getUserIsAdmin } from \"metabase/selectors/user\";\n\nimport {\n  trackCustomHomepageDashboardEnabled,\n  trackTrackingPermissionChanged,\n} from \"./analytics\";\nimport { CloudPanel } from \"./components/CloudPanel\";\nimport { BccToggleWidget } from \"./components/Email/BccToggleWidget\";\nimport { SettingsEmailForm } from \"./components/Email/SettingsEmailForm\";\nimport SettingsLicense from \"./components/SettingsLicense\";\nimport SettingsUpdatesForm from \"./components/SettingsUpdatesForm/SettingsUpdatesForm\";\nimport { UploadSettings } from \"./components/UploadSettings\";\nimport CustomGeoJSONWidget from \"./components/widgets/CustomGeoJSONWidget\";\nimport {\n  InteractiveEmbeddingOptionCard,\n  StaticEmbeddingOptionCard,\n} from \"./components/widgets/EmbeddingOption\";\nimport { EmbeddingSwitchWidget } from \"./components/widgets/EmbeddingSwitchWidget\";\nimport FormattingWidget from \"./components/widgets/FormattingWidget\";\nimport HttpsOnlyWidget from \"./components/widgets/HttpsOnlyWidget\";\nimport {\n  EmbeddedResources,\n  PublicLinksActionListing,\n  PublicLinksDashboardListing,\n  PublicLinksQuestionListing,\n} from \"./components/widgets/PublicLinksListing\";\nimport RedirectWidget from \"./components/widgets/RedirectWidget\";\nimport SecretKeyWidget from \"./components/widgets/SecretKeyWidget\";\nimport SettingCommaDelimitedInput from \"./components/widgets/SettingCommaDelimitedInput\";\nimport SiteUrlWidget from \"./components/widgets/SiteUrlWidget\";\nimport { updateSetting } from \"./settings\";\nimport SetupCheckList from \"./setup/components/SetupCheckList\";\nimport SlackSettings from \"./slack/containers/SlackSettings\";\n\n// This allows plugins to update the settings sections\nfunction updateSectionsWithPlugins(sections) {\n  if (PLUGIN_ADMIN_SETTINGS_UPDATES.length > 0) {\n    const reduced = PLUGIN_ADMIN_SETTINGS_UPDATES.reduce(\n      (sections, update) => update(sections),\n      sections,\n    );\n\n    // the update functions may change the key ordering inadvertently\n    // see: https://github.com/aearly/icepick/issues/48\n    // therefore, re-sort the reduced object according to the original key order\n    const sortByOrder = (\n      [, { order: order1 = Number.MAX_VALUE }],\n      [, { order: order2 = Number.MAX_VALUE }],\n    ) => order1 - order2;\n\n    return Object.fromEntries(Object.entries(reduced).sort(sortByOrder));\n  } else {\n    return sections;\n  }\n}\n\nexport const ADMIN_SETTINGS_SECTIONS = {\n  setup: {\n    name: t`Setup`,\n    order: 10,\n    settings: [],\n    component: SetupCheckList,\n    adminOnly: true,\n  },\n  general: {\n    name: t`General`,\n    order: 20,\n    settings: [\n      {\n        key: \"site-name\",\n        display_name: t`Site Name`,\n        type: \"string\",\n      },\n      {\n        key: \"site-url\",\n        display_name: t`Site URL`,\n        type: \"string\",\n        widget: SiteUrlWidget,\n        warningMessage: t`Only change this if you know what you're doing!`,\n      },\n      {\n        key: \"custom-homepage\",\n        display_name: t`Custom Homepage`,\n        type: \"boolean\",\n        postUpdateActions: [refreshCurrentUser],\n        onChanged: (oldVal, newVal, _settings, handleChangeSetting) => {\n          if (!newVal && oldVal) {\n            handleChangeSetting(\"custom-homepage-dashboard\", null);\n          }\n        },\n      },\n      {\n        key: \"custom-homepage-dashboard\",\n        description: null,\n        getHidden: ({ \"custom-homepage\": customHomepage }) => !customHomepage,\n        widget: DashboardSelector,\n        postUpdateActions: [\n          () =>\n            updateSetting({\n              key: \"dismissed-custom-dashboard-toast\",\n              value: true,\n            }),\n          refreshCurrentUser,\n        ],\n        getProps: setting => ({\n          value: setting.value,\n        }),\n        onChanged: (oldVal, newVal) => {\n          if (newVal && !oldVal) {\n            trackCustomHomepageDashboardEnabled(\"admin\");\n          }\n        },\n      },\n      {\n        key: \"redirect-all-requests-to-https\",\n        display_name: t`Redirect to HTTPS`,\n        type: \"boolean\",\n        getHidden: ({ \"site-url\": url }) => !/^https:\\/\\//.test(url),\n        widget: HttpsOnlyWidget,\n      },\n      {\n        key: \"admin-email\",\n        display_name: t`Email Address for Help Requests`,\n        type: \"string\",\n      },\n\n      {\n        key: \"anon-tracking-enabled\",\n        display_name: t`Anonymous Tracking`,\n        type: \"boolean\",\n        onChanged: (_oldValue, newValue) => {\n          trackTrackingPermissionChanged(newValue);\n        },\n        onBeforeChanged: (_oldValue, newValue) => {\n          trackTrackingPermissionChanged(newValue);\n        },\n      },\n      {\n        key: \"humanization-strategy\",\n        display_name: t`Friendly Table and Field Names`,\n        type: \"select\",\n        options: [\n          {\n            value: \"simple\",\n            name: t`Replace underscores and dashes with spaces`,\n          },\n          { value: \"none\", name: t`Disabled` },\n        ],\n        defaultValue: \"simple\",\n      },\n      {\n        key: \"enable-xrays\",\n        display_name: t`Enable X-ray features`,\n        type: \"boolean\",\n      },\n    ],\n  },\n  updates: {\n    name: t`Updates`,\n    order: 30,\n    component: SettingsUpdatesForm,\n    settings: [\n      {\n        key: \"check-for-updates\",\n        display_name: t`Check for updates`,\n        type: \"boolean\",\n      },\n    ],\n    adminOnly: true,\n  },\n  email: {\n    name: t`Email`,\n    order: 40,\n    component: SettingsEmailForm,\n    settings: [\n      {\n        key: \"email-from-name\",\n        display_name: t`From Name`,\n        placeholder: \"Metabase\",\n        type: \"string\",\n        required: false,\n      },\n      {\n        key: \"email-from-address\",\n        display_name: t`From Address`,\n        placeholder: \"metabase@yourcompany.com\",\n        type: \"string\",\n        required: true,\n        validations: [[\"email\", t`That's not a valid email address`]],\n      },\n      {\n        key: \"email-reply-to\",\n        display_name: t`Reply-To Address`,\n        placeholder: \"metabase-replies@yourcompany.com\",\n        type: \"string\",\n        required: false,\n        widget: SettingCommaDelimitedInput,\n        validations: [[\"email_list\", t`That's not a valid email address`]],\n      },\n      {\n        key: \"bcc-enabled?\",\n        display_name: t`Add Recipients as CC or BCC`,\n        description: t`Control the visibility of recipients.`,\n        options: [\n          { value: true, name: t`BCC - Hide recipients` },\n          {\n            value: false,\n            name: t`CC - Disclose recipients`,\n          },\n        ],\n        defaultValue: true,\n        widget: BccToggleWidget,\n      },\n    ],\n  },\n  \"email/smtp\": {\n    component: SMTPConnectionForm,\n    settings: [\n      {\n        key: \"email-smtp-host\",\n        display_name: t`SMTP Host`,\n        placeholder: \"smtp.yourservice.com\",\n        type: \"string\",\n        required: true,\n        autoFocus: true,\n      },\n      {\n        key: \"email-smtp-port\",\n        display_name: t`SMTP Port`,\n        placeholder: \"587\",\n        type: \"number\",\n        required: true,\n        validations: [[\"integer\", t`That's not a valid port number`]],\n      },\n      {\n        key: \"email-smtp-security\",\n        display_name: t`SMTP Security`,\n        description: null,\n        type: \"radio\",\n        options: { none: \"None\", ssl: \"SSL\", tls: \"TLS\", starttls: \"STARTTLS\" },\n        defaultValue: \"none\",\n      },\n      {\n        key: \"email-smtp-username\",\n        display_name: t`SMTP Username`,\n        description: null,\n        placeholder: \"nicetoseeyou\",\n        type: \"string\",\n      },\n      {\n        key: \"email-smtp-password\",\n        display_name: t`SMTP Password`,\n        description: null,\n        placeholder: \"Shhh...\",\n        type: \"password\",\n        getHidden: () => MetabaseSettings.isHosted(),\n      },\n    ],\n  },\n  // slack: {\n  //   name: \"Slack\",\n  //   order: 50,\n  //   component: SlackSettings,\n  //   settings: [],\n  // },\n  authentication: {\n    name: t`Authentication`,\n    order: 60,\n    settings: [], // added by plugins\n    adminOnly: true,\n  },\n  maps: {\n    name: t`Maps`,\n    order: 70,\n    settings: [\n      {\n        key: \"map-tile-server-url\",\n        display_name: t`Map tile server URL`,\n        note: t`Metabase uses OpenStreetMaps by default.`,\n        type: \"string\",\n      },\n      {\n        key: \"custom-geojson\",\n        display_name: t`Custom Maps`,\n        description: t`Add your own GeoJSON files to enable different region map visualizations`,\n        widget: CustomGeoJSONWidget,\n        noHeader: true,\n      },\n    ],\n  },\n  localization: {\n    name: t`Localization`,\n    order: 80,\n    settings: [\n      {\n        display_name: t`Instance language`,\n        key: \"site-locale\",\n        type: \"select\",\n        options: _.sortBy(\n          MetabaseSettings.get(\"available-locales\") || [],\n          ([code, name]) => name,\n        ).map(([code, name]) => ({ name, value: code })),\n        defaultValue: \"en\",\n        onChanged: (oldLocale, newLocale) => {\n          if (oldLocale !== newLocale) {\n            window.location.reload();\n          }\n        },\n      },\n      {\n        key: \"report-timezone\",\n        display_name: t`Report Timezone`,\n        type: \"select\",\n        options: [\n          { name: t`Database Default`, value: \"\" },\n          ...(MetabaseSettings.get(\"available-timezones\") || []),\n        ],\n        note: t`Not all databases support timezones, in which case this setting won't take effect.`,\n        allowValueCollection: true,\n        searchProp: \"name\",\n        defaultValue: \"\",\n      },\n      {\n        key: \"start-of-week\",\n        display_name: t`First day of the week`,\n        type: \"select\",\n        options: [\n          { value: \"sunday\", name: t`Sunday` },\n          { value: \"monday\", name: t`Monday` },\n          { value: \"tuesday\", name: t`Tuesday` },\n          { value: \"wednesday\", name: t`Wednesday` },\n          { value: \"thursday\", name: t`Thursday` },\n          { value: \"friday\", name: t`Friday` },\n          { value: \"saturday\", name: t`Saturday` },\n        ],\n        defaultValue: \"sunday\",\n      },\n      {\n        display_name: t`Localization options`,\n        description: \"\",\n        key: \"custom-formatting\",\n        widget: FormattingWidget,\n      },\n    ],\n  },\n  uploads: {\n    name: t`Uploads`,\n    order: 85,\n    adminOnly: false,\n    component: UploadSettings,\n    settings: [\n      {\n        key: \"uploads-settings\",\n      },\n    ],\n  },\n\n  \"public-sharing\": {\n    name: t`Public Sharing`,\n    order: 90,\n    settings: [\n      {\n        key: \"enable-public-sharing\",\n        display_name: t`Enable Public Sharing`,\n        description: t`Enable admins to create publicly viewable links (and embeddable iframes) for Questions and Dashboards.`,\n        type: \"boolean\",\n      },\n      {\n        key: \"-public-sharing-dashboards\",\n        display_name: t`Shared Dashboards`,\n        widget: PublicLinksDashboardListing,\n        getHidden: (_, derivedSettings) =>\n          !derivedSettings[\"enable-public-sharing\"],\n      },\n      {\n        key: \"-public-sharing-questions\",\n        display_name: t`Shared Questions`,\n        widget: PublicLinksQuestionListing,\n        getHidden: (_, derivedSettings) =>\n          !derivedSettings[\"enable-public-sharing\"],\n      },\n      {\n        key: \"-public-sharing-actions\",\n        display_name: t`Shared Action Forms`,\n        widget: PublicLinksActionListing,\n        getHidden: (_, derivedSettings) =>\n          !derivedSettings[\"enable-public-sharing\"],\n      },\n    ],\n  },\n  // \"embedding-in-other-applications\": {\n  //   key: \"enable-embedding\",\n  //   name: t`Embedding`,\n  //   order: 100,\n  //   settings: [\n  //     {\n  //       key: \"enable-embedding\",\n  //       display_name: t`Embedding`,\n  //       description: null,\n  //       widget: EmbeddingSwitchWidget,\n  //     },\n  //     {\n  //       key: \"-static-embedding\",\n  //       widget: StaticEmbeddingOptionCard,\n  //     },\n  //     {\n  //       key: \"-interactive-embedding\",\n  //       widget: InteractiveEmbeddingOptionCard,\n  //     },\n  //   ],\n  // },\n  // \"embedding-in-other-applications/standalone\": {\n  //   settings: [\n  //     {\n  //       key: \"-breadcrumb\",\n  //       widget: () => {\n  //         return (\n  //           <Breadcrumbs\n  //             size=\"large\"\n  //             crumbs={[\n  //               [\n  //                 t`Embedding`,\n  //                 \"/admin/settings/embedding-in-other-applications\",\n  //               ],\n  //               [t`Static embedding`],\n  //             ]}\n  //           />\n  //         );\n  //       },\n  //     },\n  //     {\n  //       key: \"embedding-secret-key\",\n  //       display_name: t`Embedding secret key`,\n  //       description: t`Standalone Embed Secret Key used to sign JSON Web Tokens for requests to /api/embed endpoints. This lets you create a secure environment limited to specific users or organizations.`,\n  //       widget: SecretKeyWidget,\n  //       getHidden: (_, derivedSettings) => !derivedSettings[\"enable-embedding\"],\n  //       props: {\n  //         confirmation: {\n  //           header: t`Regenerate embedding key?`,\n  //           dialog: t`This will cause existing embeds to stop working until they are updated with the new key.`,\n  //         },\n  //       },\n  //     },\n\n  //     {\n  //       key: \"-embedded-resources\",\n  //       display_name: t`Manage embeds`,\n\n  //       widget: EmbeddedResources,\n  //       getHidden: (_, derivedSettings) => !derivedSettings[\"enable-embedding\"],\n  //     },\n  //     {\n  //       key: \"-redirect-widget\",\n  //       widget: () => (\n  //         <RedirectWidget to=\"/admin/settings/embedding-in-other-applications\" />\n  //       ),\n  //       getHidden: (_, derivedSettings) => derivedSettings[\"enable-embedding\"],\n  //     },\n  //   ],\n  // },\n  // \"embedding-in-other-applications/full-app\": {\n  //   settings: [\n  //     {\n  //       key: \"-breadcrumbs\",\n  //       widget: () => {\n  //         return (\n  //           <Breadcrumbs\n  //             size=\"large\"\n  //             crumbs={[\n  //               [\n  //                 t`Embedding`,\n  //                 \"/admin/settings/embedding-in-other-applications\",\n  //               ],\n  //               [t`Interactive embedding`],\n  //             ]}\n  //           />\n  //         );\n  //       },\n  //     },\n  //     {\n  //       key: \"-redirect-widget\",\n  //       widget: () => (\n  //         <RedirectWidget to=\"/admin/settings/embedding-in-other-applications\" />\n  //       ),\n  //       getHidden: (_, derivedSettings) =>\n  //         PLUGIN_EMBEDDING.isEnabled() && derivedSettings[\"enable-embedding\"],\n  //     },\n  //   ],\n  // },\n  license: {\n    name: t`License`,\n    order: 110,\n    component: SettingsLicense,\n    settings: [],\n  },\n  metabot: {\n    name: t`Metabot`,\n    order: 130,\n    getHidden: settings => !settings[\"is-metabot-enabled\"],\n    settings: [\n      {\n        key: \"openai-api-key\",\n        display_name: t`OpenAI API Key`,\n        description: null,\n        type: \"string\",\n        getHidden: (_, settings) => !settings[\"is-metabot-enabled\"],\n      },\n      {\n        key: \"openai-organization\",\n        display_name: t`OpenAI Organization ID`,\n        description: null,\n        type: \"string\",\n        getHidden: (_, settings) => !settings[\"is-metabot-enabled\"],\n      },\n      {\n        key: \"openai-model\",\n        display_name: t`OpenAI Model`,\n        description: null,\n        type: \"select\",\n        getProps: (_, settings) => {\n          const models = settings[\"openai-available-models\"] ?? [];\n\n          return {\n            options: models.map(model => ({ name: model.id, value: model.id })),\n            disabled: !models.length,\n          };\n        },\n        getHidden: (_, settings) => !settings[\"is-metabot-enabled\"],\n      },\n    ],\n  },\n  llm: {\n    name: t`AI Features`,\n    getHidden: () => !PLUGIN_LLM_AUTODESCRIPTION.isEnabled(),\n    order: 131,\n    settings: [\n      {\n        key: \"ee-ai-features-enabled\",\n        display_name: t`AI features enabled`,\n        note: t`You must supply an API key before AI features can be enabled.`,\n        type: \"boolean\",\n      },\n      {\n        key: \"ee-openai-api-key\",\n        display_name: t`EE OpenAI API Key`,\n        description: t`API key used for Enterprise AI features`,\n        type: \"string\",\n      },\n    ],\n  },\n  // cloud: {\n  //   name: t`Cloud`,\n  //   getHidden: settings => settings[\"token-features\"]?.hosting === true,\n  //   order: 132,\n  //   component: CloudPanel,\n  //   settings: [],\n  // },\n};\n\nexport const getSectionsWithPlugins = _.once(() =>\n  updateSectionsWithPlugins(ADMIN_SETTINGS_SECTIONS),\n);\n\nexport const getSettings = createSelector(\n  state => state.admin.settings.settings,\n  state => state.admin.settings.warnings,\n  (settings, warnings) =>\n    settings.map(setting =>\n      warnings[setting.key]\n        ? { ...setting, warning: warnings[setting.key] }\n        : setting,\n    ),\n);\n\n// getSettings selector returns settings for admin setting page and values specified by\n// environment variables set to \"null\". Actual applied setting values are coming from\n// /api/session/properties API handler and getDerivedSettingValues returns them.\nexport const getDerivedSettingValues = state => state.settings?.values ?? {};\n\nexport const getSettingValues = createSelector(getSettings, settings => {\n  const settingValues = {};\n  for (const setting of settings) {\n    settingValues[setting.key] = setting.value;\n  }\n  return settingValues;\n});\n\nexport const getNewVersionAvailable = createSelector(getSettings, settings => {\n  return MetabaseSettings.newVersionAvailable(settings);\n});\n\nexport const getSections = createSelector(\n  getSettings,\n  getDerivedSettingValues,\n  getUserIsAdmin,\n  (settings, derivedSettingValues, isAdmin) => {\n    if (!settings || _.isEmpty(settings)) {\n      return {};\n    }\n\n    const sections = getSectionsWithPlugins();\n    const settingsByKey = _.groupBy(settings, \"key\");\n    const sectionsWithAPISettings = {};\n    for (const [slug, section] of Object.entries(sections)) {\n      const isHidden = section.getHidden?.(derivedSettingValues);\n\n      if (isHidden || (section.adminOnly && !isAdmin)) {\n        continue;\n      }\n\n      const settings = section.settings.map(function (setting) {\n        const apiSetting =\n          settingsByKey[setting.key] && settingsByKey[setting.key][0];\n\n        if (apiSetting) {\n          const value = setting.showActualValue\n            ? derivedSettingValues[setting.key]\n            : apiSetting.value;\n          return {\n            placeholder: apiSetting.default,\n            ...apiSetting,\n            ...setting,\n            value,\n          };\n        } else {\n          return setting;\n        }\n      });\n      sectionsWithAPISettings[slug] = { ...section, settings };\n    }\n    return sectionsWithAPISettings;\n  },\n);\n\nexport const getActiveSectionName = (state, props) => props.params.splat;\n\nexport const getActiveSection = createSelector(\n  getActiveSectionName,\n  getSections,\n  (section = \"setup\", sections) => {\n    if (sections) {\n      return sections[section];\n    } else {\n      return null;\n    }\n  },\n);\n"],"names":[],"sourceRoot":""}