"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pingTestMetrics = void 0;
const debug_1 = __importDefault(require("debug"));
const os_1 = __importDefault(require("os"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const debug = (0, debug_1.default)("replay:test-utils:metrics");
function shouldReportTestMetrics() {
    const optOut = process.env.RECORD_REPLAY_TEST_METRICS?.toLowerCase();
    return !optOut || !(optOut === "0" || optOut === "false");
}
async function pingTestMetrics(recordingId, runId, test, apiKey) {
    if (!shouldReportTestMetrics())
        return;
    const webhookUrl = process.env.RECORD_REPLAY_WEBHOOK_URL || "https://webhooks.replay.io";
    const body = JSON.stringify({
        type: "test.finished",
        recordingId,
        test: {
            ...test,
            platform: os_1.default.platform(),
            runId,
            env: {
                disableAsserts: !!process.env.RECORD_REPLAY_DISABLE_ASSERTS,
                disableSourcemapCollection: !!process.env.RECORD_REPLAY_DISABLE_SOURCEMAP_COLLECTION,
                disableFeatures: process.env.RECORD_REPLAY_DISABLE_FEATURES || "none",
            },
        },
    });
    debug(body);
    const headers = { "Content-Type": "application/json" };
    if (apiKey) {
        headers.Authorization = `Bearer ${apiKey}`;
    }
    (0, node_fetch_1.default)(`${webhookUrl}/api/metrics`, {
        method: "POST",
        headers,
        body,
    }).catch(e => debug("Failed to send test metrics", e));
}
exports.pingTestMetrics = pingTestMetrics;
//# sourceMappingURL=metrics.js.map