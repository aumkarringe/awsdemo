"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchWorkspaceConfig = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const debug_1 = __importDefault(require("debug"));
const logging_1 = require("./logging");
const debug = (0, debug_1.default)("replay:test-utils:config");
async function query(apiKey, name, query, variables = {}) {
    const options = {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${apiKey.trim()}`,
        },
        body: JSON.stringify({
            query,
            name,
            variables,
        }),
    };
    const server = process.env.REPLAY_API_SERVER || "https://api.replay.io";
    debug("Querying %s graphql endpoint", server);
    const result = await (0, node_fetch_1.default)(`${server}/v1/graphql`, options);
    const json = await result.json();
    return json;
}
async function fetchWorkspaceConfig(apiKey) {
    try {
        const json = await query(apiKey, "GetWorkspaceConfig", `
        query GetWorkspaceConfig {
          auth {
            workspaces {
              edges {
                node {
                  id
                  settings {
                    features
                  }
                }
              }
            }
          }
        }`);
        if (json.errors) {
            debug("GraphQL failed: %s", json.errors);
            throw new Error(json.errors[0].message || "Unexpected error");
        }
        const edges = json.data?.auth.workspaces.edges;
        if (!edges || edges.length !== 1) {
            debug("Failed to find workspace: %o", json.data);
            throw new Error("Failed to find a workspace for the given apiKey");
        }
        debug("Workspace settings: %o", edges[0].node.settings);
        const features = edges[0].node.settings.features;
        return {
            env: features?.testSuites?.env || {},
        };
    }
    catch (e) {
        (0, logging_1.warn)("Failed to fetch test suite configuration; continuing with defaults", e);
        return {
            env: {},
        };
    }
}
exports.fetchWorkspaceConfig = fetchWorkspaceConfig;
//# sourceMappingURL=config.js.map