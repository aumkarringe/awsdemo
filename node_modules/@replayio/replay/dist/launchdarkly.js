"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLaunchDarkly = void 0;
const debug_1 = __importDefault(require("./debug"));
const launchdarkly_node_client_sdk_1 = require("launchdarkly-node-client-sdk");
const debug = (0, debug_1.default)("replay:launchdarkly");
class NoOpLogger {
    error() { }
    warn() { }
    info() { }
    debug() { }
}
class LaunchDarkly {
    constructor() {
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    initialize() {
        const key = "60ca05fb43d6f10d234bb3cf";
        const defaultProfile = { type: "anonymous", id: "anonymous" };
        this.client = (0, launchdarkly_node_client_sdk_1.initialize)(key, {
            kind: "user",
            key: defaultProfile.id,
            anonymous: defaultProfile.type === "anonymous",
        }, {
            logger: new NoOpLogger(),
        });
        return this;
    }
    identify(profile) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.client) {
                return;
            }
            try {
                yield this.client.waitForInitialization();
            }
            catch (e) {
                debug("Failed to wait for LaunchDarkly initialization %j", e);
                return;
            }
            yield this.client.identify({
                kind: "user",
                key: profile.id,
                anonymous: profile.type === "anonymous",
            });
        });
    }
    isEnabled(flag, defaultValue) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.client) {
                return defaultValue;
            }
            return yield this.variant(flag, defaultValue);
        });
    }
    variant(name, defaultValue) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.client) {
                return defaultValue;
            }
            try {
                yield this.client.waitForInitialization();
            }
            catch (e) {
                debug("Failed to wait for LaunchDarkly initialization %j", e);
                return defaultValue;
            }
            const val = yield this.client.variation(name, defaultValue);
            return val;
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.client) {
                return;
            }
            try {
                yield this.client.close();
            }
            catch (e) {
                debug("Failed to close LaunchDarkly client %j", e);
            }
        });
    }
}
let launchDarkly;
const getLaunchDarkly = () => {
    if (launchDarkly) {
        return launchDarkly;
    }
    launchDarkly = new LaunchDarkly();
    return launchDarkly;
};
exports.getLaunchDarkly = getLaunchDarkly;
//# sourceMappingURL=launchdarkly.js.map