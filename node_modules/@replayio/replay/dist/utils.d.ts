/// <reference types="node" />
import { Agent as HttpAgent, AgentOptions } from "http";
import { BrowserName, Options } from "./types";
export declare function openExecutable(): "open" | "xdg-open";
declare function defer<T = unknown>(): {
    promise: Promise<T>;
    resolve: (value: T) => void;
    reject: (reason?: any) => void;
};
declare function maybeLog(verbose: boolean | undefined, str: string): void;
declare function getDirectory(opts?: Pick<Options, "directory">): string;
declare function isValidUUID(str: unknown): boolean;
export declare function exponentialBackoffRetry<T>(fn: () => Promise<T>, onFail?: (e: unknown) => void, maxTries?: number): Promise<T>;
export declare function linearBackoffRetry<T>(fn: () => Promise<T>, onFail?: (e: unknown) => void, maxTries?: number): Promise<T>;
declare function fuzzyBrowserName(browser?: string): BrowserName;
declare function assertValidBrowserName(browser?: string): asserts browser is BrowserName;
declare function getCurrentVersion(): any;
declare function getUserAgent(): string;
declare function getHttpAgent(server: string, agentOptions?: AgentOptions): HttpAgent | undefined;
export { assertValidBrowserName, fuzzyBrowserName, defer, maybeLog, getDirectory, isValidUUID, getCurrentVersion, getUserAgent, getHttpAgent, };
//# sourceMappingURL=utils.d.ts.map