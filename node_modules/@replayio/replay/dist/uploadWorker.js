"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const worker_threads_1 = require("worker_threads");
const fs_1 = __importDefault(require("fs"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const utils_1 = require("./utils");
const debug_1 = __importDefault(require("./debug"));
if (worker_threads_1.parentPort === null) {
    throw new Error("Must be run as a worker");
}
worker_threads_1.parentPort.on("message", (_a) => __awaiter(void 0, [_a], void 0, function* ({ link, partMeta, size, logPath, agentOptions, }) {
    const { filePath, start, end } = partMeta;
    const debug = (0, debug_1.default)("replay:cli:upload-worker", logPath);
    if (worker_threads_1.parentPort === null) {
        throw new Error("Must be run as a worker");
    }
    debug("Uploading chunk %o", { filePath, size, start, end });
    const stream = fs_1.default.createReadStream(filePath, { start, end });
    const resp = yield (0, node_fetch_1.default)(link, {
        method: "PUT",
        agent: (0, utils_1.getHttpAgent)(link, Object.assign({ keepAlive: true }, agentOptions)),
        headers: {
            Connection: "keep-alive",
            "Content-Length": size.toString(),
            "User-Agent": (0, utils_1.getUserAgent)(),
        },
        body: stream,
    });
    debug(`Fetch response received. Status: ${resp.status}, Status Text: ${resp.statusText}`);
    if (resp.status !== 200) {
        const respText = yield resp.text();
        debug(`Fetch response text: ${respText}`);
        throw new Error(`Failed to upload recording. Response was ${resp.status} ${resp.statusText}`);
    }
    const etag = resp.headers.get("etag");
    debug("Etag received %o", { etag, filePath, size, start, end });
    worker_threads_1.parentPort.postMessage(etag);
}));
//# sourceMappingURL=uploadWorker.js.map