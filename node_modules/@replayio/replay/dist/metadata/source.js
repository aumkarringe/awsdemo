"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = exports.init = exports.getTestRunIdFromEnvironment = void 0;
const debug_1 = __importDefault(require("debug"));
const fs_1 = __importDefault(require("fs"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const superstruct_1 = require("superstruct");
const env_1 = require("./env");
const defaultObject = (objStruct) => (0, superstruct_1.optional)((0, superstruct_1.defaulted)((0, superstruct_1.object)(objStruct), {}));
const debug = (0, debug_1.default)("replay:cli:metadata:source");
const VERSION = 1;
class GitHubHttpError extends Error {
    constructor(status, statusText) {
        super();
        Object.defineProperty(this, "status", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "statusText", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.status = status;
        this.statusText = statusText;
    }
}
// Add a basic cache so we don't refetch data from GH repeatedly for the same resources
const gFetchCache = {};
function fetchWithCache(url, init) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!(url in gFetchCache)) {
            const resp = yield (0, node_fetch_1.default)(url, init);
            if (resp.status === 200) {
                const json = yield resp.json();
                gFetchCache[url] = {
                    status: resp.status,
                    statusText: resp.statusText,
                    json,
                };
            }
            else {
                gFetchCache[url] = {
                    json: null,
                    status: resp.status,
                    statusText: resp.statusText,
                };
            }
        }
        return gFetchCache[url];
    });
}
function getCircleCISourceControlProvider(env) {
    var _a, _b;
    return ((_a = env.CIRCLE_PULL_REQUEST) === null || _a === void 0 ? void 0 : _a.startsWith("https://github.com"))
        ? "github"
        : ((_b = env.CIRCLE_PULL_REQUEST) === null || _b === void 0 ? void 0 : _b.startsWith("https://bitbucket.com"))
            ? "bitbucket"
            : undefined;
}
function getCircleCIRepository(env) {
    return env.CIRCLE_PROJECT_USERNAME && env.CIRCLE_PROJECT_REPONAME
        ? `${env.CIRCLE_PROJECT_USERNAME}/${env.CIRCLE_PROJECT_REPONAME}`
        : "";
}
function getCircleCIMergeId(env) {
    if (env.CIRCLE_PULL_REQUEST) {
        debug("Extracting merge id from %s", env.CIRCLE_PULL_REQUEST);
        return env.CIRCLE_PULL_REQUEST.split("/").pop();
    }
}
function getBuildkiteMessage(env) {
    if (env.BUILDKITE_SOURCE === "webhook") {
        return env.BUILDKITE_MESSAGE;
    }
}
function getBuildkiteRepository(env) {
    var _a, _b;
    return (_b = (_a = env.BUILDKITE_REPO) === null || _a === void 0 ? void 0 : _a.match(/.*:(.*)\.git/)) === null || _b === void 0 ? void 0 : _b[1];
}
let gGitHubEvent = null;
function readGithubEvent(env) {
    const { GITHUB_EVENT_PATH } = env;
    if (!GITHUB_EVENT_PATH) {
        debug("No github event file specified.");
        return;
    }
    if (!fs_1.default.existsSync(GITHUB_EVENT_PATH)) {
        debug("Github event file does not exist at %s", GITHUB_EVENT_PATH);
        return;
    }
    try {
        if (!gGitHubEvent) {
            debug("Reading Github event file from %s", GITHUB_EVENT_PATH);
            const contents = fs_1.default.readFileSync(GITHUB_EVENT_PATH, "utf8");
            gGitHubEvent = JSON.parse(contents);
        }
        else {
            debug("Using previously read Github event file");
        }
        return gGitHubEvent;
    }
    catch (e) {
        debug("Failed to read pull request number from event: %s", e);
    }
}
function getGitHubMergeId(env) {
    var _a;
    const event = readGithubEvent(env);
    if ((_a = event === null || event === void 0 ? void 0 : event.pull_request) === null || _a === void 0 ? void 0 : _a.number) {
        return String(event.pull_request.number);
    }
}
function getGitHubMergeSHA(env) {
    var _a, _b;
    const event = readGithubEvent(env);
    if ((_b = (_a = event === null || event === void 0 ? void 0 : event.pull_request) === null || _a === void 0 ? void 0 : _a.head) === null || _b === void 0 ? void 0 : _b.sha) {
        return event.pull_request.head.sha;
    }
}
function expandCommitMetadataFromGitHub(repo, sha) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        const { GITHUB_TOKEN, RECORD_REPLAY_METADATA_SOURCE_COMMIT_TITLE, RECORD_REPLAY_METADATA_SOURCE_COMMIT_URL, RECORD_REPLAY_METADATA_SOURCE_COMMIT_USER, } = process.env;
        if (!repo || !sha)
            return;
        const url = `https://api.github.com/repos/${repo}/commits/${sha}`;
        debug("Fetching commit metadata from %s with %d char token", url, (GITHUB_TOKEN === null || GITHUB_TOKEN === void 0 ? void 0 : GITHUB_TOKEN.length) || 0);
        const resp = yield fetchWithCache(url, {
            headers: GITHUB_TOKEN
                ? {
                    Authorization: `token ${GITHUB_TOKEN}`,
                }
                : undefined,
        });
        // override the SHA if passed because it might be the SHA from the github
        // event rather than GITHUB_SHA. we update this regardless of our ability to
        // fetch the details because that can fail due to a missing token.
        process.env.RECORD_REPLAY_METADATA_SOURCE_COMMIT_ID = sha;
        if (resp.status === 200) {
            const json = resp.json;
            process.env.RECORD_REPLAY_METADATA_SOURCE_COMMIT_TITLE =
                RECORD_REPLAY_METADATA_SOURCE_COMMIT_TITLE ||
                    json.commit.message.split("\n").shift().substring(0, 80);
            process.env.RECORD_REPLAY_METADATA_SOURCE_COMMIT_URL =
                RECORD_REPLAY_METADATA_SOURCE_COMMIT_URL || json.html_url;
            process.env.RECORD_REPLAY_METADATA_SOURCE_COMMIT_USER =
                RECORD_REPLAY_METADATA_SOURCE_COMMIT_USER || ((_a = json.author) === null || _a === void 0 ? void 0 : _a.login);
        }
        else {
            debug("Failed to fetch GitHub commit metadata: %s", resp.statusText);
            throw new GitHubHttpError(resp.status, resp.statusText);
        }
    });
}
function expandMergeMetadataFromGitHub(repo, pr) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b;
        const { GITHUB_TOKEN, RECORD_REPLAY_METADATA_SOURCE_MERGE_ID, RECORD_REPLAY_METADATA_SOURCE_MERGE_TITLE, RECORD_REPLAY_METADATA_SOURCE_MERGE_URL, RECORD_REPLAY_METADATA_SOURCE_MERGE_USER, RECORD_REPLAY_METADATA_SOURCE_BRANCH, } = process.env;
        if (!repo || !pr) {
            debug("Unable to retrieve merge metadata: Repo and PR number missing");
            return;
        }
        const url = `https://api.github.com/repos/${repo}/pulls/${pr}`;
        debug("Fetching merge metadata from %s with %d char token", url, (GITHUB_TOKEN === null || GITHUB_TOKEN === void 0 ? void 0 : GITHUB_TOKEN.length) || 0);
        const resp = yield fetchWithCache(url, {
            headers: GITHUB_TOKEN
                ? {
                    Authorization: `token ${GITHUB_TOKEN}`,
                }
                : undefined,
        });
        if (resp.status === 200) {
            const json = yield resp.json;
            process.env.RECORD_REPLAY_METADATA_SOURCE_BRANCH =
                RECORD_REPLAY_METADATA_SOURCE_BRANCH || ((_a = json.head) === null || _a === void 0 ? void 0 : _a.ref);
            process.env.RECORD_REPLAY_METADATA_SOURCE_MERGE_ID =
                RECORD_REPLAY_METADATA_SOURCE_MERGE_ID || pr;
            process.env.RECORD_REPLAY_METADATA_SOURCE_MERGE_TITLE =
                RECORD_REPLAY_METADATA_SOURCE_MERGE_TITLE || json.title;
            process.env.RECORD_REPLAY_METADATA_SOURCE_MERGE_URL =
                RECORD_REPLAY_METADATA_SOURCE_MERGE_URL || json.html_url;
            process.env.RECORD_REPLAY_METADATA_SOURCE_MERGE_USER =
                RECORD_REPLAY_METADATA_SOURCE_MERGE_USER || ((_b = json.user) === null || _b === void 0 ? void 0 : _b.login);
        }
        else {
            debug("Failed to fetch GitHub commit metadata: %o", resp);
            throw new GitHubHttpError(resp.status, resp.statusText);
        }
    });
}
function buildTestRunId(repository, runId) {
    if (repository && runId) {
        return `${repository}--${runId}`;
    }
}
function getTestRunIdFromEnvironment(env) {
    const userTestRunId = process.env.REPLAY_METADATA_TEST_RUN_ID ||
        process.env.RECORD_REPLAY_METADATA_TEST_RUN_ID ||
        process.env.RECORD_REPLAY_TEST_RUN_ID;
    let ciTestRunId = buildTestRunId(process.env.GITHUB_REPOSITORY, process.env.GITHUB_RUN_ID) ||
        buildTestRunId(process.env.CIRCLE_PROJECT_REPONAME, process.env.CIRCLE_WORKFLOW_ID) ||
        buildTestRunId(getBuildkiteRepository(process.env), process.env.BUILDKITE_BUILD_ID) ||
        buildTestRunId(process.env.SEMAPHORE_GIT_REPO_SLUG, process.env.SEMAPHORE_WORKFLOW_ID);
    return userTestRunId || ciTestRunId;
}
exports.getTestRunIdFromEnvironment = getTestRunIdFromEnvironment;
const versions = () => ({
    [1]: (0, superstruct_1.object)({
        branch: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_BRANCH", "GITHUB_REF_NAME", "BUILDKITE_BRANCH", "CIRCLE_BRANCH", "SEMAPHORE_GIT_PR_BRANCH")),
        commit: defaultObject({
            id: (0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_COMMIT_ID", "GITHUB_SHA", "BUILDKITE_COMMIT", "CIRCLE_SHA1", "SEMAPHORE_GIT_SHA"),
            title: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_COMMIT_TITLE", getBuildkiteMessage)),
            url: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_COMMIT_URL")),
            user: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_COMMIT_USER")),
        }),
        trigger: defaultObject({
            user: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_TRIGGER_USER", "GITHUB_ACTOR", "BUILDKITE_BUILD_CREATOR", "BUILDKITE_BUILD_AUTHOR", "CIRCLE_USERNAME", "CIRCLE_PR_USERNAME")),
            name: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_TRIGGER_NAME")),
            workflow: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_TRIGGER_WORKFLOW", "GITHUB_RUN_ID", "BUILDKITE_BUILD_ID", "CIRCLE_WORKFLOW_ID", "SEMAPHORE_WORKFLOW_ID")),
            url: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_TRIGGER_URL", env => {
                var _a;
                return env.GITHUB_WORKFLOW &&
                    `${(_a = env.GITHUB_SERVER_URL) !== null && _a !== void 0 ? _a : "https://github.com"}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}`;
            }, "BUILDKITE_BUILD_URL", "CIRCLE_BUILD_URL", env => env.SEMAPHORE_ORGANIZATION_URL &&
                env.SEMAPHORE_WORKFLOW_ID &&
                `${env.SEMAPHORE_ORGANIZATION_URL}/workflows/${env.SEMAPHORE_WORKFLOW_ID}`)),
        }),
        merge: defaultObject({
            id: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_MERGE_ID", env => env.BUILDKITE_PULL_REQUEST && env.BUILDKITE_PULL_REQUEST !== "false"
                ? env.BUILDKITE_PULL_REQUEST
                : undefined, getCircleCIMergeId, "SEMAPHORE_GIT_PR_NUMBER")),
            title: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_MERGE_TITLE", "SEMAPHORE_GIT_PR_NAME")),
            url: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_MERGE_URL")),
            user: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_MERGE_USER")),
        }),
        provider: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_PROVIDER", env => env.GITHUB_WORKFLOW && "github", "BUILDKITE_PIPELINE_PROVIDER", getCircleCISourceControlProvider, "SEMAPHORE_GIT_PROVIDER")),
        repository: (0, superstruct_1.optional)((0, env_1.envString)("RECORD_REPLAY_METADATA_SOURCE_REPOSITORY", "GITHUB_REPOSITORY", getBuildkiteRepository, getCircleCIRepository, "SEMAPHORE_GIT_REPO_SLUG")),
        version: (0, superstruct_1.defaulted)((0, superstruct_1.number)(), () => 1),
    }),
});
function validate(metadata) {
    if (!metadata || !metadata.source) {
        throw new Error("Source metadata does not exist");
    }
    return init(metadata.source);
}
exports.validate = validate;
function expandEnvironment() {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        const { CIRCLECI, CIRCLE_SHA1, GITHUB_SHA, GITHUB_REPOSITORY } = process.env;
        try {
            if (GITHUB_SHA && GITHUB_REPOSITORY) {
                const sha = (_a = getGitHubMergeSHA(process.env)) !== null && _a !== void 0 ? _a : GITHUB_SHA;
                const mergeId = getGitHubMergeId(process.env);
                debug("GitHub context $0", { mergeId, sha });
                yield expandCommitMetadataFromGitHub(GITHUB_REPOSITORY, sha);
                yield expandMergeMetadataFromGitHub(GITHUB_REPOSITORY, mergeId);
            }
            else if (CIRCLECI) {
                const repo = getCircleCIRepository(process.env);
                const provider = getCircleCISourceControlProvider(process.env);
                if (provider !== "github") {
                    debug("Unsupported source control provider: %s", process.env.CIRCLE_PULL_REQUEST);
                    return;
                }
                yield expandCommitMetadataFromGitHub(repo, CIRCLE_SHA1);
                yield expandMergeMetadataFromGitHub(repo, getCircleCIMergeId(process.env));
            }
        }
        catch (e) {
            if (e instanceof GitHubHttpError) {
                console.warn(`Unable to fetch pull request from GitHub: ${e.statusText}`);
                if (!process.env.GITHUB_TOKEN && e.status === 404) {
                    console.warn("If this is a private repo, you can set the GITHUB_TOKEN environment variable\nwith a personal access token to allow the Replay CLI to fetch this metadata.");
                }
            }
            console.warn("Failed to expand environment details", e);
        }
    });
}
function init() {
    return __awaiter(this, arguments, void 0, function* (data = {}) {
        const version = typeof data.version === "number" ? data.version : VERSION;
        yield expandEnvironment();
        const structs = versions();
        if (structs[version]) {
            return {
                source: (0, superstruct_1.create)(data, structs[version]),
            };
        }
        else {
            throw new Error(`Source metadata version ${data.version} not supported`);
        }
    });
}
exports.init = init;
//# sourceMappingURL=source.js.map