/// <reference types="node" />
import { query } from "./graphql";
import { ensurePlaywrightBrowsersInstalled, ensurePuppeteerBrowsersInstalled, getPlaywrightBrowserPath, getPuppeteerBrowserPath, updateBrowsers } from "./install";
import { BrowserName, FilterOptions, LaunchOptions, ListOptions, MetadataOptions, Options, RecordingEntry, UploadAllOptions, UploadOptions, type ExternalRecordingEntry, type UnstructuredMetadata } from "./types";
import { exponentialBackoffRetry, getDirectory } from "./utils";
export type { BrowserName, RecordingEntry } from "./types";
export declare function updateStatus(recording: RecordingEntry, status: RecordingEntry["status"]): void;
export declare function filterRecordings(recordings: RecordingEntry[], filter: FilterOptions["filter"], includeCrashes: FilterOptions["includeCrashes"]): RecordingEntry<UnstructuredMetadata>[];
declare function listAllRecordings(opts?: Options & ListOptions): ExternalRecordingEntry[];
declare function uploadRecording(id: string, opts?: UploadOptions): Promise<string | null>;
declare function processRecording(id: string, opts?: Options): Promise<string | null>;
declare function uploadAllRecordings(opts?: UploadAllOptions): Promise<boolean>;
declare function viewRecording(id: string, opts?: Options): Promise<boolean>;
declare function viewLatestRecording(opts?: Options): Promise<boolean>;
declare function removeRecording(id: string, opts?: Options): boolean;
declare function removeAllRecordings(opts?: Options): void;
declare function addLocalRecordingMetadata(recordingId: string, metadata: Record<string, unknown>): void;
declare function updateMetadata({ init: metadata, keys, filter, includeCrashes, verbose, warn, directory, }: MetadataOptions & FilterOptions): Promise<void>;
declare function launchBrowser(browserName: BrowserName, args?: string[], record?: boolean, opts?: Options & LaunchOptions): Promise<import("child_process").ChildProcess>;
declare function version(): Promise<{
    version: any;
    update: boolean;
    latest: string | null;
}>;
export { ExternalRecordingEntry, UnstructuredMetadata, addLocalRecordingMetadata, ensurePlaywrightBrowsersInstalled, ensurePuppeteerBrowsersInstalled, exponentialBackoffRetry, getDirectory, getPlaywrightBrowserPath, getPuppeteerBrowserPath, launchBrowser, listAllRecordings, processRecording, query, removeAllRecordings, removeRecording, updateBrowsers, updateMetadata, uploadAllRecordings, uploadRecording, version, viewLatestRecording, viewRecording, };
//# sourceMappingURL=main.d.ts.map