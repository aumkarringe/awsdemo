/// <reference types="node" />
import WebSocket from "ws";
import { Agent } from "http";
interface Callbacks {
    onOpen: (socket: WebSocket) => void;
    onClose: (socket: WebSocket) => void;
    onError: (socket: WebSocket) => void;
}
type ErrorDataValue = string | number | boolean | null;
type ErrorData = Record<string, ErrorDataValue>;
type ProtocolErrorBase = {
    code: number;
    message: string;
    data: ErrorData;
};
export declare class ProtocolError extends Error {
    readonly protocolCode: number;
    readonly protocolMessage: string;
    readonly protocolData: unknown;
    constructor(err: ProtocolErrorBase);
    toString(): string;
}
declare class ProtocolClient {
    socket: WebSocket;
    callbacks: Callbacks;
    pendingMessages: Map<any, any>;
    eventListeners: Map<any, any>;
    nextMessageId: number;
    constructor(address: string, callbacks: Callbacks, agent?: Agent);
    close(): void;
    setAccessToken(accessToken?: string): Promise<unknown>;
    sendCommand<T = unknown, P extends object = Record<string, unknown>>(method: string, params: P, data?: any, sessionId?: string, callback?: (err?: Error) => void): Promise<T>;
    setEventListener(method: string, callback: (params: any) => void): void;
    onMessage(contents: WebSocket.RawData): void;
}
export default ProtocolClient;
//# sourceMappingURL=client.d.ts.map