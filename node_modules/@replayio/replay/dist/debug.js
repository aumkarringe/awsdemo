"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.printLogPath = exports.logPath = void 0;
const debug_1 = __importDefault(require("debug"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const utils_1 = require("./utils");
const debugDebug = (0, debug_1.default)("replay:cli:debug");
const logDirPath = path_1.default.join((0, utils_1.getDirectory)(), "logs");
exports.logPath = path_1.default.join(logDirPath, "cli-" +
    new Date()
        .toISOString()
        .replace(/:/g, "-")
        .replace(/\.(\d+)Z$/, "-$1.log"));
function init() {
    try {
        fs_1.default.mkdirSync(logDirPath, { recursive: true });
    }
    catch (e) {
        exports.logPath = "";
        debugDebug("Failed to create log directory %o", e);
    }
}
let size = 0;
function debug(namespace, pathToLog = exports.logPath) {
    size = Math.max(size, namespace.length);
    const d = (0, debug_1.default)(namespace);
    if (process.env.REPLAY_CLI_DISABLE_LOG) {
        return d;
    }
    return (formatter, ...args) => {
        d(formatter, ...args);
        if (pathToLog) {
            try {
                const output = util_1.default
                    .format(formatter, ...args)
                    .split("\n")
                    .map((l, i) => (i === 0 ? l : "".padStart(size + 3, " ") + l))
                    .join("\n");
                const prefix = `[${namespace}] `.padStart(size + 3, " ");
                fs_1.default.appendFileSync(pathToLog, `${prefix}${output}\n`);
            }
            catch (e) {
                debugDebug("Failed to write log %o", e);
            }
        }
    };
}
exports.default = debug;
function printLogPath() {
    if (exports.logPath && fs_1.default.existsSync(exports.logPath)) {
        console.error("\nðŸ“„ Additional logs available in", exports.logPath, "\n");
    }
}
exports.printLogPath = printLogPath;
init();
//# sourceMappingURL=debug.js.map