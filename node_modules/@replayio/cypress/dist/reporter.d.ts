/// <reference types="cypress" />
/// <reference types="cypress" />
/// <reference types="node" />
import { ReplayReporter, TestMetadataV2, ReplayReporterConfig } from "@replayio/test-utils";
import type { StepEvent } from "./support";
import { PluginFeature } from "./features";
type ReplayCypressRecordingMetadata = {
    title: string;
    test: TestMetadataV2.TestRun;
};
export interface PluginOptions extends Omit<ReplayReporterConfig<ReplayCypressRecordingMetadata>, "filter" | "upload"> {
    filter?: ReplayReporterConfig<ReplayCypressRecordingMetadata>["filter"];
    upload?: boolean;
}
declare function isStepEvent(value: unknown): value is StepEvent;
declare class CypressReporter {
    config: Cypress.PluginConfigOptions;
    options: PluginOptions;
    reporter: ReplayReporter<ReplayCypressRecordingMetadata>;
    startTime: number | undefined;
    steps: StepEvent[];
    selectedBrowser: string | undefined;
    errors: string[];
    featureOptions: string | undefined;
    private _extraEnv;
    constructor(config: Cypress.PluginConfigOptions, options: PluginOptions);
    isFeatureEnabled(feature: PluginFeature): boolean;
    authenticate(apiKey: string): Promise<void>;
    onLaunchBrowser(browser: string): void;
    onBeforeSpec(spec: Cypress.Spec): void;
    waitForStableStepCount(): Promise<void>;
    onAfterSpec(spec: Cypress.Spec, result: CypressCommandLine.RunResult): Promise<void>;
    onEnd(): Promise<(({
        type: "test-run";
        error: Error;
    } | ({
        id: string;
        phase: "start" | "complete";
    } & {
        type: "test-run";
        error?: undefined;
    })) | ({
        type: "test-run-tests";
        error: Error;
    } | {
        type: "test-run-tests";
        error?: undefined;
    }) | (import("@replayio/test-utils/dist/reporter").PendingWorkError<"upload", {
        recording: import("@replayio/replay").RecordingEntry<import("@replayio/replay").UnstructuredMetadata>;
    }> | ({
        recording: import("@replayio/replay").RecordingEntry<import("@replayio/replay").UnstructuredMetadata>;
    } & {
        type: "upload";
        error?: undefined;
    })) | ({
        type: "post-test";
        error: Error;
    } | ({
        recordings: import("@replayio/replay").RecordingEntry<import("@replayio/replay").UnstructuredMetadata>[];
        testRun: {
            result: "failed" | "passed" | "unknown" | "timedOut" | "skipped";
            tests: {
                id: number;
                result: "failed" | "passed" | "unknown" | "timedOut" | "skipped";
                error: {
                    name: string;
                    message: string;
                    line?: number | undefined;
                    column?: number | undefined;
                } | null;
                events: {
                    afterAll: {
                        data: {
                            id: string;
                            parentId: string | null;
                            error: {
                                name: string;
                                message: string;
                                line?: number | undefined;
                                column?: number | undefined;
                            } | null;
                            command: {
                                name: string;
                                arguments: string[];
                            };
                            category: "assertion" | "command" | "other";
                            scope: string[] | null;
                        };
                    }[];
                    afterEach: {
                        data: {
                            id: string;
                            parentId: string | null;
                            error: {
                                name: string;
                                message: string;
                                line?: number | undefined;
                                column?: number | undefined;
                            } | null;
                            command: {
                                name: string;
                                arguments: string[];
                            };
                            category: "assertion" | "command" | "other";
                            scope: string[] | null;
                        };
                    }[];
                    beforeAll: {
                        data: {
                            id: string;
                            parentId: string | null;
                            error: {
                                name: string;
                                message: string;
                                line?: number | undefined;
                                column?: number | undefined;
                            } | null;
                            command: {
                                name: string;
                                arguments: string[];
                            };
                            category: "assertion" | "command" | "other";
                            scope: string[] | null;
                        };
                    }[];
                    beforeEach: {
                        data: {
                            id: string;
                            parentId: string | null;
                            error: {
                                name: string;
                                message: string;
                                line?: number | undefined;
                                column?: number | undefined;
                            } | null;
                            command: {
                                name: string;
                                arguments: string[];
                            };
                            category: "assertion" | "command" | "other";
                            scope: string[] | null;
                        };
                    }[];
                    main: {
                        data: {
                            id: string;
                            parentId: string | null;
                            error: {
                                name: string;
                                message: string;
                                line?: number | undefined;
                                column?: number | undefined;
                            } | null;
                            command: {
                                name: string;
                                arguments: string[];
                            };
                            category: "assertion" | "command" | "other";
                            scope: string[] | null;
                        };
                    }[];
                };
                approximateDuration: number;
                source: {
                    title: string;
                    scope: string[];
                };
                attempt: number;
                executionId: string;
                executionGroupId: string;
                maxAttempts: number;
            }[];
            run: {
                id: string;
                title?: string | undefined;
                mode?: string | undefined;
            };
            approximateDuration: number;
            source: {
                path: string;
                title: string;
            };
            environment: {
                errors: {
                    name: string;
                    message: string;
                    code: number;
                    detail: string | null;
                }[];
                pluginVersion: string;
                testRunner: {
                    name: string;
                    version: string;
                };
            };
            resultCounts: Record<"failed" | "passed" | "unknown" | "timedOut" | "skipped", number>;
            schemaVersion: string;
        };
    } & {
        type: "post-test";
        error?: undefined;
    })))[]>;
    getExtraEnv(): NodeJS.ProcessEnv;
    private setSelectedBrowser;
    private clearSteps;
    addStep(step: StepEvent): void;
    getStepCount(): number;
    private getTestResults;
}
export declare function getMetadataFilePath(workerIndex?: number): string;
export default CypressReporter;
export { isStepEvent };
//# sourceMappingURL=reporter.d.ts.map